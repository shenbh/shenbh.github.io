<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第三方相关问题</title>
    <url>/posts/187306977/</url>
    <content><![CDATA[<p>问题收录：第三方登录、第三方支付、推送、分享、ARouter路由、地图等</p>
<span id="more"></span>


<h1 id="第三方登录"><a href="#第三方登录" class="headerlink" title="第三方登录"></a>第三方登录</h1><h2 id="友盟-微信登录授权不走回调"><a href="#友盟-微信登录授权不走回调" class="headerlink" title="友盟 微信登录授权不走回调"></a>友盟 微信登录授权不走回调</h2><p>问题：微信登录没有获取到用户信息、没有反应</p>
<p>解决：</p>
<ol>
<li>确认能否进入微信客户端授权确认页面</li>
</ol>
<p>如果不能进入微信授权页面，或者在微信客户端账号未登录状态下只能进入输入账号密码页面，说明签名验证失败，请检查签名是否一致。</p>
<ol start="2">
<li>进入微信授权确认页面，点击后没有返回对应的用户资料</li>
</ol>
<p>进入这一步多半是由于微信回调配置错误导致，首先打开 Debug 模式日志，查看回调Activity（<code>WXEntryActivity.java</code>） 配置是否正常。</p>
<p>如果确认回调 Activity 及<code>AndroidManifest.xml</code>中微信相关配置都正确，需要确认 <code>WXEntryActivity.java</code>中有无复写其他 SDK（如支付、微信原生登录）的回调逻辑，<code>UShare SDK</code>要求留一个空类，相关回调结果在<code>jar</code>中实现，如微信精简版中 Demo 里的配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WXEntryActivity</span> <span class="keyword">extends</span> <span class="title class_">WXCallbackActivity</span>&#123;&#125;</span><br></pre></td></tr></table></figure>





<h1 id="支付相关"><a href="#支付相关" class="headerlink" title="支付相关"></a>支付相关</h1><h2 id="微信支付相关"><a href="#微信支付相关" class="headerlink" title="微信支付相关"></a>微信支付相关</h2><h3 id="微信支付调用不起来的问题（AsyncTask的坑）"><a href="#微信支付调用不起来的问题（AsyncTask的坑）" class="headerlink" title="微信支付调用不起来的问题（AsyncTask的坑）"></a>微信支付调用不起来的问题（AsyncTask的坑）</h3><p>AsyncTask如果有 4、5个线程，则会阻塞。<br>解决：可换成 RxJava</p>
<p><img src="http://ww1.sinaimg.cn/large/981009fdly1gi4aaukt3xj21ha15jtd4.jpg" alt="微信支付调用不起来的问题(AsyncTask的坑).png"></p>
<h3 id="WXPayEntryActivity-不回调问题"><a href="#WXPayEntryActivity-不回调问题" class="headerlink" title="WXPayEntryActivity 不回调问题"></a>WXPayEntryActivity 不回调问题</h3><ol>
<li>注意包名：平台注册的包名+.wxapi.WXPayEntryActivity （完整com.xxx.wxapi.WXPayEntryActivity）</li>
<li>注意类名 WXPayEntryActivity 不能写错，在清单文件中进行注册</li>
<li>在清单文件中检查WXPayEntryActivity是否有<code>android:exported=&quot;true&quot;</code>属性（此属性作用是标记可被别的Application组件调用）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多渠道的情况下，包名不一致，底下的yyy.yyy等导入信息是共用的</span></span><br><span class="line"><span class="keyword">package</span> xxx.xxx.test.wxapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.Menu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tencent.mm.opensdk.constants.ConstantsAPI;</span><br><span class="line"><span class="keyword">import</span> com.tencent.mm.opensdk.modelbase.BaseReq;</span><br><span class="line"><span class="keyword">import</span> com.tencent.mm.opensdk.modelbase.BaseResp;</span><br><span class="line"><span class="keyword">import</span> com.tencent.mm.opensdk.openapi.IWXAPI;</span><br><span class="line"><span class="keyword">import</span> com.tencent.mm.opensdk.openapi.IWXAPIEventHandler;</span><br><span class="line"><span class="keyword">import</span> com.tencent.mm.opensdk.openapi.WXAPIFactory;</span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.common.toast.ToastUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> yyy.yyy.R;</span><br><span class="line"><span class="keyword">import</span> yyy.yyy.core.Constants;</span><br><span class="line"><span class="keyword">import</span> yyy.yyy.sdk.pay.IPayCallBack;</span><br><span class="line"><span class="keyword">import</span> yyy.yyy.sdk.pay.WXPayHelper;</span><br><span class="line"><span class="keyword">import</span> yyy.yyy.view.DaogouBaseActivity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * *</span></span><br><span class="line"><span class="comment"> * 微信支付结果回调</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WXPayEntryActivity</span> <span class="keyword">extends</span> <span class="title class_">DaogouBaseActivity</span> <span class="keyword">implements</span> <span class="title class_">IWXAPIEventHandler</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IWXAPI m_WXApi;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState, R.layout.activity_wxpay_entry, R.layout.title_default);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initView</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        context = <span class="built_in">this</span>;</span><br><span class="line">        m_WXApi = WXAPIFactory.createWXAPI(<span class="built_in">this</span>, Constants.APP_ID);</span><br><span class="line">        m_WXApi.handleIntent(getIntent(), <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onNewIntent</span><span class="params">(Intent intent)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>.onNewIntent(intent);</span><br><span class="line">        setIntent(intent);</span><br><span class="line">        m_WXApi.handleIntent(intent, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onCreateOptionsMenu</span><span class="params">(Menu menu)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></span><br><span class="line">        getMenuInflater().inflate(R.menu.wxpay_entry, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReq</span><span class="params">(BaseReq arg0)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResp</span><span class="params">(BaseResp p_BaseResp)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p_BaseResp.getType() == ConstantsAPI.COMMAND_PAY_BY_WX)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m_PayResult</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (p_BaseResp.errCode == -<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ToastUtil.showToast(context, <span class="string">&quot;您取消了支付&quot;</span>);</span><br><span class="line">                m_PayResult = -<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p_BaseResp.errCode == -<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">m_ErroInfor</span> <span class="operator">=</span> StringUtils.isEmpty(p_BaseResp.errStr) ? <span class="string">&quot;未返回具体原因&quot;</span> : p_BaseResp.errStr;</span><br><span class="line">                ToastUtil.showToast(context, <span class="string">&quot;支付失败:&quot;</span> + m_ErroInfor);</span><br><span class="line">                m_PayResult = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">IPayCallBack</span> <span class="variable">m_IPayCallBack</span> <span class="operator">=</span> WXPayHelper.getIPayCallBack();</span><br><span class="line">            <span class="keyword">if</span> (m_IPayCallBack != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m_IPayCallBack.payCallBack(m_PayResult);</span><br><span class="line">            &#125;</span><br><span class="line">            finishAnimation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="微信支付回调java-lang-IllegalStateException-Already-attached"><a href="#微信支付回调java-lang-IllegalStateException-Already-attached" class="headerlink" title="微信支付回调java.lang.IllegalStateException: Already attached"></a>微信支付回调<code>java.lang.IllegalStateException: Already attached</code></h3><p>解决：在<code>WXPayEntryActivity.java</code>的<code>onCreate</code>中用了自定义的<code>super.onCreate(savedInstanceState, R.layout.activity_wxpay_entry, R.layout.title_default);</code>改成系统的<code>super.onCreate(savedInstanceState);</code>即可</p>
<h3 id="微信支付：弹起支付页面但是原来的页面走了onPause没有走onStop方法"><a href="#微信支付：弹起支付页面但是原来的页面走了onPause没有走onStop方法" class="headerlink" title="微信支付：弹起支付页面但是原来的页面走了onPause没有走onStop方法"></a>微信支付：弹起支付页面但是原来的页面走了onPause没有走onStop方法</h3><p>命令<code>adb shell dumpsys activity | findstr Run</code>查看当前运行的Activity<br><img src="http://ww1.sinaimg.cn/large/981009fdly1gjvmcwvaa2j20z706w74p.jpg" alt="调微信支付本身页面不走onStop.png"><br>猜测<code>com.tencent.mm/.plugin.wallet_index.ui.OrderHandlerUI</code>是个Activity当成加载的loading（dialog），此时底部的<code>PayActivity</code>还处于可见状态（调起<code>onPause()</code>），之后<code>OrderHandlerUI</code>自身又调起<code>com.tencent.mm/.framework.app.UIPageFragmentActivity</code>这个Activity，使得<code>PayActivity</code>不可见<br>但<code>UIPageFragmentActivity</code>和<code>PayActivity</code>不是相邻的（中间隔了一个<code>OrderHandlerUI</code>）所以影响不到<code>PayActivity</code>的生命周期，即不会触发<code>PayActivity</code>的<code>onStop</code>方法  </p>
<h3 id="App微信支付“支付验证签名失败”"><a href="#App微信支付“支付验证签名失败”" class="headerlink" title="App微信支付“支付验证签名失败”"></a>App微信支付“支付验证签名失败”</h3><ol>
<li>断点查看，appid等是否需要加解密（即接口返回的appId是否是加密过的），最终调起微信sdk的时候appId是”wx…”开头的（未加密的）  </li>
<li>接口需要返回的字段有（其中sign要和统一下单的时一样签名过；且生成sign的参数顺序按下方的顺序）<br>参考链接：<a href="https://segmentfault.com/a/1190000017867855">https://segmentfault.com/a/1190000017867855</a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">payBean.setAppId((String) data.get(<span class="string">&quot;appid&quot;</span>));</span><br><span class="line">payBean.setNonceStr((String) data.get(<span class="string">&quot;noncestr&quot;</span>));</span><br><span class="line">payBean.setSign((String) data.get(<span class="string">&quot;sign&quot;</span>));</span><br><span class="line">payBean.setPrepayId((String) data.get(<span class="string">&quot;prepayid&quot;</span>));</span><br><span class="line">payBean.setPartnerId((String) data.get(<span class="string">&quot;partnerid&quot;</span>));</span><br><span class="line">payBean.setTimeStamp((String) data.get(<span class="string">&quot;timestamp&quot;</span>));</span><br><span class="line">payBean.setPackages((String) data.get(<span class="string">&quot;package&quot;</span>));<span class="comment">//固定值&quot;Sing=WXPay&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="微信WAP支付提示”商家参数格式有误，请联系商家解决”"><a href="#微信WAP支付提示”商家参数格式有误，请联系商家解决”" class="headerlink" title="微信WAP支付提示”商家参数格式有误，请联系商家解决”"></a>微信WAP支付提示”商家参数格式有误，请联系商家解决”</h2><p>问题：安卓<code>webView</code>内的外部商家开发的链接，点立即购买后调起微信这一步出现“商家参数格式有误，请联系商家解决”<br>解决：找到<a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_4">微信官方给出的文档</a><br>另外参考<a href="https://www.jianshu.com/p/cfba1d7179e3">另一篇解决方案</a><br>在<code>WebView</code>的<code>shouldOverrideUrlLoading</code>内加上  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyWebViewClient</span> <span class="keyword">extends</span> <span class="title class_">WebViewClient</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (url.startsWith(<span class="string">&quot;https://wx.tenpay.com&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//H5微信支付要用，不然说&quot;商家参数格式有误&quot;</span></span><br><span class="line">            Map&lt;String, String&gt; extraHeaders = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">            extraHeaders.put(<span class="string">&quot;Referer&quot;</span>, <span class="string">&quot;http://yx.dagangcheng.com&quot;</span>);<span class="comment">//替换成自己的“商户申请H5时提交的授权域名”</span></span><br><span class="line">            view.loadUrl(url, extraHeaders);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(<span class="string">&quot;weixin://wap/pay?&quot;</span>) || url.startsWith(<span class="string">&quot;http://weixin/wap/pay&quot;</span>) ) &#123;<span class="comment">//上面的代码校验通过后会组装成“:weixin://wap/pay?prepayid...”格式的链接来调起微信支付（通过weixin://wap/pay?的协议调起的，其中weixin:与http类似）</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                startActivity(<span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="string">&quot;android.intent.action.VIEW&quot;</span>, Uri.parse(url)));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">//做些其他的错误提示，比如以下的</span></span><br><span class="line">                <span class="comment">/*new CancelOrOkDialog(H5PayActivity.this, getString(R.string.h5_pay_no_pay_app)) &#123;</span></span><br><span class="line"><span class="comment">                       @Override</span></span><br><span class="line"><span class="comment">                       public void ok() &#123;</span></span><br><span class="line"><span class="comment">                           Intent intent = new Intent(H5PayActivity.this, MainActivity.class);</span></span><br><span class="line"><span class="comment">                           intent.putExtra(Constants.SELECTTAB, 0);</span></span><br><span class="line"><span class="comment">                           startActivity(intent);</span></span><br><span class="line"><span class="comment">                       &#125;</span></span><br><span class="line"><span class="comment">                   &#125;;*/</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="微信小程序支付，无法返回应用"><a href="#微信小程序支付，无法返回应用" class="headerlink" title="微信小程序支付，无法返回应用"></a>微信小程序支付，无法返回应用</h2><p>问题：App调用微信小程序支付，跳到小程序窗口后，部分手机（如vivo）点击“返回应用”无反应  解决：在App内点微信分享后再次小程序支付，可以返回App，所以分析应该是微信没有保存App信息到本地的原因。无法解决。  </p>
<h2 id="集成支付宝-sdk-遇到的问题"><a href="#集成支付宝-sdk-遇到的问题" class="headerlink" title="集成支付宝 sdk 遇到的问题"></a>集成支付宝 sdk 遇到的问题</h2><ol>
<li><code>Duplicate zip entry[classes.jar:com/ut/device/UTDevice.class]</code><br>原因：支付 sdk 和友盟 sdk 都有这个文件<br>解决：支付 sdk 下载个不再 utdevice 的 aar 包  </li>
<li><code>Failed to resolve::alipaySdk-15.6.8-20191021122455-noUtdid:Open File</code><br>原因：alipay 项目找不到这个 aar 文件<br>解决：在项目的根目录 <code>build.gradle</code>中增加（<code>flatDir</code>）如下代码：<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* allprojects 代码块用来配置工程中所有 modules 都要使用的仓库和依赖</span></span><br><span class="line"><span class="comment">* 但是你应该在每个 module 级的 build 文件中配置 module 独有的依赖。</span></span><br><span class="line"><span class="comment">* 对于一个新工程，Android Studio 默认会让所有 modules 使用 JCenter 仓库和 Google 的 Maven 仓库</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        <span class="comment">//使用开源中国的maven库代替jcenter()</span></span><br><span class="line">        <span class="comment">//阿里云的(速度飞快)：http://maven.aliyun.com/nexus/content/groups/public/</span></span><br><span class="line"><span class="comment">//        maven &#123;</span></span><br><span class="line"><span class="comment">//            url &#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        maven &#123; url <span class="string">&quot;https://jitpack.io&quot;</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;https://oss.sonatype.org/content/repositories/snapshots&#x27;</span> &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">&#x27;https://maven.google.com/&#x27;</span></span><br><span class="line">            name <span class="string">&#x27;Google&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">//支付宝需要增加这个</span></span><br><span class="line">        flatDir &#123;</span><br><span class="line">            dirs <span class="string">&#x27;libs&#x27;</span></span><br><span class="line">            dirs <span class="string">&#x27;../AliSDK/libs&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//全局设定编码与java版本</span></span><br><span class="line">    tasks.withType(JavaCompile) &#123;</span><br><span class="line">        options.encoding = <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">        sourceCompatibility = JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility = JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="集成威富通支付遇到的问题"><a href="#集成威富通支付遇到的问题" class="headerlink" title="集成威富通支付遇到的问题"></a>集成威富通支付遇到的问题</h2><p>注意：别坚信demo，别坚信文档！！！（豹奔–膳闯项目）  </p>
<ol>
<li>android端，本地不做预下单（不安全）。预下单是后台做的。查询订单也是后台的。android端做的：接收后台提供的token_id，并结合微信appid调起支付的sdk就ok了（注意在注册清单文件中对应页面的Activity里要写上这个微信appid）  </li>
<li>后台的坑：appid要改成sub_appid，demo和文档要结合着来看。</li>
</ol>
<h2 id="支付宝支付"><a href="#支付宝支付" class="headerlink" title="支付宝支付"></a>支付宝支付</h2><p><a href="https://blog.csdn.net/s_nshine/article/details/97006855">集成支付宝支付出现{resultStatus&#x3D;4000, result&#x3D;, memo&#x3D;系统繁忙,请稍后再试}</a>  </p>
<ol>
<li>{resultStatus&#x3D;4000, result&#x3D;, memo&#x3D;系统繁忙,请稍后再试}<br>如果APPID，PID，TARGET_ID，RSA2_PRIVATE都正确的情况下，看手机<strong>是否已安装支付宝应用</strong>  </li>
<li>{resultStatus&#x3D;4000, result&#x3D;{“alipay_trade_app_pay_response”:{“code”:”40006”,”msg”:”Insufficient Permissions”,”sub_code”:”isv.insufficient-isv-permissions”,”sub_msg”:”ISV权限不足，建议在开发者中心检查应用是否上线”}}, memo&#x3D;}<br>应用没有上线的原因</li>
</ol>
<h1 id="推送相关"><a href="#推送相关" class="headerlink" title="推送相关"></a>推送相关</h1><h2 id="友盟无法推送问题"><a href="#友盟无法推送问题" class="headerlink" title="友盟无法推送问题"></a>友盟无法推送问题</h2><h3 id="排查步骤："><a href="#排查步骤：" class="headerlink" title="排查步骤："></a>排查步骤：</h3><ol>
<li>ios和安卓是否都不可以，排查是否是后台问题</li>
<li>看参数，是否加IP白名单<br>2.1. 看gradle中配置的参数、看友盟控制台配置的参数、看后台配置的参数（注意正式线还是测试线）<br> 2.2. 在友盟控制台模拟发送，（从AS取友盟Token）发送给特定用户</li>
<li>ios证书是否配置了<h3 id="又一城安卓友盟推送问题排查步骤"><a href="#又一城安卓友盟推送问题排查步骤" class="headerlink" title="又一城安卓友盟推送问题排查步骤"></a>又一城安卓友盟推送问题排查步骤</h3></li>
<li>确认安卓和ios是否单端出现问题，如果单端出现问题，那么大概率是APP端的问题，需要各自排查问题；</li>
<li>单端出现问题的情况下，需要先排查与友盟的对接是否出现问题，先在友盟的后台通过推送测试消息，可同时测试独立用户（设备码）和特定用户（别名），如果无法推送成功，那么就是与友盟的对接出现了问题，需要排查参数的配置是否出错；</li>
<li>排查参数配置时需要排查代码、友盟后台、后台的AppKey、MasterSecret、MessageSecret的参数配置，<br>IOS还需要排查证书；其中后台的配置地址为：<br>后台顾客端参数配置：域名&#x2F;weChat&#x2F;appGenerationSuccess<br>后台导购端参数配置：域名&#x2F;appPackage&#x2F;guideAppGenerationSuccess<br>如果参数配置没有问题，通过友盟后台推送还是失败，那可能是代码中出现错误；  </li>
<li>在双端友盟推送能够成功，并且在确定各端友盟对应应用已配置了IP白名单（IP为域名对外访问对应的IP。比如阿里云给的IP）的情况下<br>(注：需要确定友盟控制台已添加IP白名单)在确定白名单已经配置的情况下，<br>Android端和IOS端会同时出现问题，那么大概率可能是后台的问题，需要告知后台帮忙排查解决问题  </li>
<li>推送失败信息如下：<br>什么是DeviceTokenNotForTopic  <ul>
<li>DeviceToken和当前的bundleID不匹配<br>一般是推送证书有问题，需要重新上传证书。<br>注：在项目未发布的时候就要针对推送进行测试，及时发现问题并解决，如果发现了推送问题，可参照以上的步骤进行排查</li>
</ul>
</li>
<li>关于友盟后台推送可以收到，又一城后台推送收不到  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 排查参数：查看友盟后台登记的参数、app中的参数、又一城后台登记的第三方参数（注意：<span class="strong">**有可能message和secret参数顺序填反**</span>）</span><br><span class="line"><span class="bullet">2.</span> 排查友盟后台是否有填IP白名单</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="友盟推送问题排查步骤"><a href="#友盟推送问题排查步骤" class="headerlink" title="友盟推送问题排查步骤"></a>友盟推送问题排查步骤</h3><p>1：先排查是Android端会出现问题，还是IOS端会出现问题，如果是单端出现问题（Android端或者IOS端），那么大概率是APP端的问题，需要各自排查问题；<br>2：单端（Android或者IOS端）出现问题的情况下，需要先排查与友盟的对接是否出现问题，先在友盟的后台通过推送测试消息，可同时测试独立用户（设备码）和特定用户（别名），如果无法推送成功，那么就是与友盟的对接出现了问题，需要排查参数的配置是否出错；<br><img src="/posts/187306977/%E5%8F%8B%E7%9B%9F%E6%8E%A8%E9%80%81%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E6%AD%A5%E9%AA%A41.jpg" alt="img"><br>3：排查参数配置时需要排查代码、友盟后台、后台的AppKey、MasterSecret、MessageSecret的参数配置，IOS还需要排查证书；其中后台的配置地址为：<br>后台顾客端参数配置：域名&#x2F;weChat&#x2F;appGenerationSuccess<br>后台导购端参数配置：域名&#x2F;appPackage&#x2F;guideAppGenerationSuccess<br>如果参数配置没有问题，通过友盟后台推送还是失败，那可能是代码中出现错误；<br>4：在双端友盟推送能够成功，并且在确定各端友盟对应应用已配置了白名单的情况下(注：需要确定友盟已添加白名单)，白名单配置如下图：<br><img src="/posts/187306977/%E5%8F%8B%E7%9B%9F%E6%8E%A8%E9%80%81%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E6%AD%A5%E9%AA%A42.jpg" alt="img"><br>在确定白名单已经配置的情况下，Android端和IOS端会同时出现问题，那么大概率可能是后台的问题，需要告知后台帮忙排查解决问题<br>5：推送失败信息如下：<br><img src="/posts/187306977/%E5%8F%8B%E7%9B%9F%E6%8E%A8%E9%80%81%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E6%AD%A5%E9%AA%A43.png" alt="img"><br>一般是推送证书有问题，重新上传下。<br>注：在项目未发布的时候就要针对推送进行测试，及时发现问题并解决，如果发现了推送问题，可参照以上的步骤进行排查  </p>
<h2 id="友盟推送错误"><a href="#友盟推送错误" class="headerlink" title="友盟推送错误"></a>友盟推送错误</h2><h3 id="友盟注册报错-s-x3D-11-s1-x3D-accs-bindapp-error"><a href="#友盟注册报错-s-x3D-11-s1-x3D-accs-bindapp-error" class="headerlink" title="友盟注册报错 s&#x3D;-11,s1&#x3D;accs bindapp error"></a>友盟注册报错 s&#x3D;-11,s1&#x3D;accs bindapp error</h3><p>排查：  </p>
<ol>
<li>检查参数、IP白名单、后台填的参数</li>
<li>代码中注册逻辑要加<code>mPushAgent.setResourcePackageName(packageName);</code></li>
<li>有可能是跟阿里百川一起使用，导致的冲突（有可能是so包冲突；有可能是百川失败）</li>
</ol>
<h3 id="友盟推送-java-lang-IllegalArgumentException-ResClass未初始化，请确保你已经添加了必要的资源。同时确保你在混淆文件中添加了xxx-xxx-xidamen-R"><a href="#友盟推送-java-lang-IllegalArgumentException-ResClass未初始化，请确保你已经添加了必要的资源。同时确保你在混淆文件中添加了xxx-xxx-xidamen-R" class="headerlink" title="友盟推送 java.lang.IllegalArgumentException: ResClass未初始化，请确保你已经添加了必要的资源。同时确保你在混淆文件中添加了xxx.xxx.xidamen.R$*"></a>友盟推送 java.lang.IllegalArgumentException: ResClass未初始化，请确保你已经添加了必要的资源。同时确保你在混淆文件中添加了xxx.xxx.xidamen.R$*</h3><p>问题描述：友盟注册成功，取到正确的别名和token了。用自定义样式推送的消息，报“java.lang.IllegalArgumentException: ResClass未初始化，请确保你已经添加了必要的资源。同时确保你在混淆文件中添加了xxx.xxx.xidamen.R$*”<br>解决：实际是缺少了.so包，报错中还有报缺少so包的错误。IMLib&#x2F;libs下缺少了so包  </p>
<h3 id="ResClass未初始化-请确保你已经添加了必要的资源"><a href="#ResClass未初始化-请确保你已经添加了必要的资源" class="headerlink" title="ResClass未初始化,请确保你已经添加了必要的资源"></a>ResClass未初始化,请确保你已经添加了必要的资源</h3><p>ResClass未初始化,请确保你已经添加了必要的资源…<br>友盟推送的过程中报这个错误。<br>排查步骤：  </p>
<ol>
<li>友盟控制台查看了参数、app中配置的参数、后台配置的参数，一致。–》app端可以接收消息  </li>
<li>友盟控制台是否添加了IP白名单  </li>
<li>是否因为是多渠道而没有在友盟注册中添加packageName，这个packageName需要和AndroidManifest.xml中的包名一致<br>SBC2.0 最后排查到是第3点的问题<br>解决：  </li>
<li>在PushCenter.java中添加参数<br><img src="http://ww1.sinaimg.cn/large/981009fdly1gjmj1ghuucj226i12ualt.jpg" alt="ResClass未初始化的解决1.png"></li>
<li>在调用这个注册的地方添加参数<br><img src="http://ww1.sinaimg.cn/large/981009fdly1gjmj1y8pgwj226w16ynav.jpg" alt="ResClass未初始化的解决2.png"></li>
<li>注意这个packageName要与AndroidManifest.xml中的包名一致<br><img src="http://ww1.sinaimg.cn/large/981009fdly1gjmj2gohrbj21tm0r013t.jpg" alt="ResClass未初始化的解决3.png"><br><img src="http://ww1.sinaimg.cn/large/981009fdly1gjmj2or30rj21zg0ua16w.jpg" alt="ResClass未初始化的解决4.png"></li>
</ol>
<h3 id="后台推送消息，手机接收不到的问题"><a href="#后台推送消息，手机接收不到的问题" class="headerlink" title="后台推送消息，手机接收不到的问题"></a>后台推送消息，手机接收不到的问题</h3><p>排查过程：  </p>
<ol>
<li>先对比ios和安卓看两端是否有同样问题<ol>
<li>如果有同样问题，检查参数配置（友盟控制台、手机端、后台）要一致、友盟控制台的IP白名单是否配置</li>
</ol>
</li>
<li>因为ios未上架AppStore无法推送，排除与ios对比的可能性，从参数、ip白名单等方面排查</li>
<li>检查参数（友盟控制台、后台、安卓端）一致，尝试从友盟控制台推送消息，安卓可接收到【得出参数无误的结论】</li>
<li>检查友盟控制台IP白名单，无误【得出不是IP白名单问题】</li>
<li>通过后台网页发送推送消息，后台服务抓取参数进行比对，发现友盟注册别名”alias_type”错误</li>
<li>别名错误的原因是groovy中设置的<code>“\\”</code>导致首字母消失【详解见 <a href="https://shenbh.top/gradle%E7%9F%A5%E8%AF%86/Gradle%E7%AC%94%E8%AE%B0/">https://shenbh.top/gradle知识/Gradle笔记/</a>下的groovy的manifestPlaceholders属性值取值问题 这个笔记】</li>
</ol>
<h1 id="分享相关"><a href="#分享相关" class="headerlink" title="分享相关"></a>分享相关</h1><h2 id="关于微信无法分享问题"><a href="#关于微信无法分享问题" class="headerlink" title="关于微信无法分享问题"></a>关于微信无法分享问题</h2><p>前置条件：使用友盟第三方分享（包含了微信）<br>排查步骤：  </p>
<ol>
<li>看日志<br>1.1 提示参数错误：检查渠道、参数（Android参数、网站登记参数）<br>1.2 提示包名错误：检查Android包名、网站登记包名</li>
</ol>
<h2 id="微信分享一闪即消失，调不起来微信"><a href="#微信分享一闪即消失，调不起来微信" class="headerlink" title="微信分享一闪即消失，调不起来微信"></a>微信分享一闪即消失，调不起来微信</h2><ul>
<li>检查是否使用的是签名包，非签名包不能调试微信分享功能（但若在多渠道中指定在直接运行时的是签名包也是ok的）</li>
<li>检查是否有自定义分享缩略图（thumbData），若有，检查自定义缩略图大小不能超过32kb</li>
<li>检查是否有自定义描述内容（description），若有，检查自定义描述内容长度不能超过1024</li>
<li>关于微信分享的其他限制可查看原码<code>WXMediaMessage.class</code>，截取一段：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">checkArgs</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.getType() != <span class="number">8</span> || <span class="built_in">this</span>.thumbData != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.thumbData.length != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.thumbData != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.thumbData.length &gt; <span class="string">&#x27;耀&#x27;</span>) &#123;</span><br><span class="line">            Log.e(<span class="string">&quot;MicroMsg.SDK.WXMediaMessage&quot;</span>, <span class="string">&quot;checkArgs fail, thumbData is invalid&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.title != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.title.length() &gt; <span class="number">512</span>) &#123;</span><br><span class="line">            Log.e(<span class="string">&quot;MicroMsg.SDK.WXMediaMessage&quot;</span>, <span class="string">&quot;checkArgs fail, title is invalid&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.description != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.description.length() &gt; <span class="number">1024</span>) &#123;</span><br><span class="line">            Log.e(<span class="string">&quot;MicroMsg.SDK.WXMediaMessage&quot;</span>, <span class="string">&quot;checkArgs fail, description is invalid&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.mediaObject == <span class="literal">null</span>) &#123;</span><br><span class="line">            Log.e(<span class="string">&quot;MicroMsg.SDK.WXMediaMessage&quot;</span>, <span class="string">&quot;checkArgs fail, mediaObject is null&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.mediaObject.checkArgs();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;MicroMsg.SDK.WXMediaMessage&quot;</span>, <span class="string">&quot;checkArgs fail, thumbData should not be null when send emoji&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="分享SDK7-1-x必须配合友盟基础组件库-v9-2-x版本或更高版本-使用"><a href="#分享SDK7-1-x必须配合友盟基础组件库-v9-2-x版本或更高版本-使用" class="headerlink" title="分享SDK7.1.x必须配合友盟基础组件库(v9.2.x版本或更高版本)使用!"></a>分享SDK7.1.x必须配合友盟基础组件库(v9.2.x版本或更高版本)使用!</h2><p>问题：分享SDK7.1.x必须配合友盟基础组件库(v9.2.x版本或更高版本)使用!<br><img src="/posts/187306977/%E6%8F%90%E7%A4%BA%E5%8F%8B%E7%9B%9F%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E5%BA%93%E7%89%88%E6%9C%AC%E5%A4%AA%E4%BD%8E.jpg" alt="安卓/提示友盟基础组件库版本太低"><br>原因：原本已经在<code>build.gradle</code>的<code>buildTypes》release</code>中开启了混淆<code>minifyEnabled true</code>，但没有开启zip和无用资源优化，我这边开启了<code>zipAlignEnabled</code>和<code>shrinkResources</code>后就报上述的错误  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">shrinkResources</span> <span class="literal">true</span></span><br><span class="line">zipAlignEnabled <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>解决：  </p>
<ol>
<li>升级了<code>gradle</code>版本<ul>
<li><code>gradle-wrapper.properties</code>中：<code>gradle-6.5-all.zip</code>—&gt;<code>gradle-6.7.1-all.zip</code></li>
<li>根目录<code>build.gradle</code>中：<code>classpath &#39;com.android.tools.build:gradle:4.1.1&#39;</code> —&gt; <code>classpath &#39;com.android.tools.build:gradle:4.2.2&#39;</code></li>
</ul>
</li>
<li>给这个<code>module</code>的<code>proguard-rules.pro</code>配置了免混淆规则  <figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">-optimizationpasses <span class="number">5</span> <span class="comment"># 指定代码的压缩级别</span></span><br><span class="line">-dontusemixedcaseclassnames <span class="comment"># 是否使用大小写混合</span></span><br><span class="line">-dontpreverify <span class="comment"># 混淆时是否做预校验</span></span><br><span class="line">-verbose <span class="comment"># 混淆时是否记录日志</span></span><br><span class="line">-optimizations !code<span class="regexp">/simplification/arithmetic,!field/</span>*,!<span class="keyword">class</span><span class="regexp">/merging/</span>* <span class="comment"># 混淆时所采用的算法</span></span><br><span class="line">-keep public <span class="keyword">class</span> * <span class="keyword">extends</span> android.app.Activity <span class="comment"># 保持哪些类不被混淆</span></span><br><span class="line">-keep public <span class="keyword">class</span> * <span class="keyword">extends</span> android.app.Application <span class="comment"># 保持哪些类不被混淆</span></span><br><span class="line">-keep public <span class="keyword">class</span> * <span class="keyword">extends</span> android.app.Service <span class="comment"># 保持哪些类不被混淆</span></span><br><span class="line">-keep public <span class="keyword">class</span> * <span class="keyword">extends</span> android.content.BroadcastReceiver <span class="comment"># 保持哪些类不被混淆</span></span><br><span class="line">-keep public <span class="keyword">class</span> * <span class="keyword">extends</span> android.content.ContentProvider <span class="comment"># 保持哪些类不被混淆</span></span><br><span class="line">-keep public <span class="keyword">class</span> * <span class="keyword">extends</span> android.app.backup.BackupAgentHelper <span class="comment"># 保持哪些类不被混淆</span></span><br><span class="line">-keep public <span class="keyword">class</span> * <span class="keyword">extends</span> android.preference.Preference <span class="comment"># 保持哪些类不被混淆</span></span><br><span class="line">-keep public <span class="keyword">class</span> <span class="title class_">com</span>.android.vending.licensing.ILicensingService <span class="comment"># 保持哪些类不被混淆</span></span><br><span class="line">-keepclasseswithmembernames <span class="keyword">class</span> * &#123; <span class="comment"># 保持 native 方法不被混淆</span></span><br><span class="line">   native &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line">-keepclasseswithmembers <span class="keyword">class</span> * &#123; <span class="comment"># 保持自定义控件类不被混淆</span></span><br><span class="line">   public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</span><br><span class="line">&#125;</span><br><span class="line">-keepclasseswithmembers <span class="keyword">class</span> * &#123;<span class="comment"># 保持自定义控件类不被混淆</span></span><br><span class="line">   public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers <span class="keyword">class</span> * <span class="keyword">extends</span> android.app.Activity &#123; <span class="comment"># 保持自定义控件类不被混淆</span></span><br><span class="line">   public <span class="keyword">void</span> *(android.view.View);</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers enum * &#123; <span class="comment"># 保持枚举 enum 类不被混淆</span></span><br><span class="line">   public static **[] values();</span><br><span class="line">   public static ** valueOf(java.lang.<span class="built_in">String</span>);</span><br><span class="line">&#125;</span><br><span class="line">-keep <span class="keyword">class</span> * implements android.os.Parcelable &#123;<span class="comment">#保持Parcelable不被混淆</span></span><br><span class="line">   public static final android.os.Parcelable$Creator *;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Explicitly preserve all serialization members. The Serializable interface</span></span><br><span class="line"><span class="comment"># is only a marker interface, so it wouldn&#x27;t save them.</span></span><br><span class="line">-keep public <span class="keyword">class</span> * implements java.io.Serializable &#123;*;&#125;</span><br><span class="line">-keepclassmembers <span class="keyword">class</span> * implements java.io.Serializable &#123;</span><br><span class="line">   static final long serialVersionUID;</span><br><span class="line">   private static final java.io.ObjectStreamField[]   serialPersistentFields;</span><br><span class="line">   private <span class="keyword">void</span> writeObject(java.io.ObjectOutputStream);</span><br><span class="line">   private <span class="keyword">void</span> readObject(java.io.ObjectInputStream);</span><br><span class="line">   java.lang.<span class="built_in">Object</span> writeReplace();</span><br><span class="line">   java.lang.<span class="built_in">Object</span> readResolve();</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers <span class="keyword">class</span> * &#123;</span><br><span class="line">   public &lt;init&gt; (org.json.JSONObject);</span><br><span class="line">&#125;</span><br><span class="line">-keep public <span class="keyword">class</span> <span class="title class_">com</span>.rcw597.app.R$*&#123;</span><br><span class="line">   public static final int *;</span><br><span class="line">   public static final java.lang.<span class="built_in">String</span> *;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Gson混淆配置</span></span><br><span class="line"><span class="comment"># removes such information by default, so configure it to keep all of it.</span></span><br><span class="line">-keepattributes Signature</span><br><span class="line"><span class="comment"># Gson specific classes</span></span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">sun</span>.misc.Unsafe &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.google.gson.stream.** &#123;*;&#125;</span><br><span class="line"><span class="comment"># Application classes that will be serialized/deserialized over Gson</span></span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.google.gson.examples.android.model.** &#123;*;&#125;</span><br><span class="line">-dontwarn com.google.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.google.gson.** &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.google.protobuf.** &#123;*;&#125;</span><br><span class="line"><span class="comment">#这句非常重要，主要是滤掉 com.demo.demo.bean包下的所有.class文件不进行混淆编译,com.demo.demo是你的包名</span></span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.rcw597.app.net.params.** &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.rcw597.app.im.bean.** &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.rcw597.app.im.bean.params.** &#123;*;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#IM云信混淆配置</span></span><br><span class="line">-dontwarn com.netease.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.netease.** &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.lykevin.neteaseim.** &#123;*;&#125;</span><br><span class="line"><span class="comment">#如果你使用全文检索插件，需要加入</span></span><br><span class="line">-dontwarn org.apache.lucene.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">org</span>.apache.lucene.** &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">net</span>.sqlcipher.** &#123;*;&#125;</span><br><span class="line">-dontwarn com.xiaomi.push.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.xiaomi.** &#123;*;&#125;</span><br><span class="line">-ignorewarnings</span><br><span class="line">-keepattributes *Annotation*</span><br><span class="line">-keepattributes Exceptions</span><br><span class="line">-keepattributes InnerClasses</span><br><span class="line">-keepattributes Signature</span><br><span class="line">-keepattributes SourceFile,LineNumberTable</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.hianalytics.android.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.huawei.updatesdk.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.huawei.hms.**&#123;*;&#125;</span><br><span class="line">-dontwarn com.vivo.push.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.vivo.push.**&#123;*; &#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.vivo.vms.**&#123;*; &#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.netease.nimlib.mixpush.vivo.VivoPush* &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.netease.nimlib.mixpush.vivo.VivoPushReceiver&#123;*;&#125;</span><br><span class="line">-dontwarn com.meizu.cloud.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.meizu.cloud.** &#123;*;&#125;</span><br><span class="line">-keep public <span class="keyword">class</span> * <span class="keyword">extends</span> android.app.Service</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.heytap.msp.** &#123; *;&#125;</span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#极验</span></span><br><span class="line">-dontwarn com.geetest.sdk.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.geetest.sdk.**&#123;*;&#125;</span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#友盟SDK混淆配置</span></span><br><span class="line">-dontshrink</span><br><span class="line">-dontoptimize</span><br><span class="line">-dontwarn com.google.android.maps.**</span><br><span class="line">-dontwarn android.webkit.WebView</span><br><span class="line">-dontwarn com.umeng.**</span><br><span class="line">-dontwarn com.tencent.weibo.sdk.**</span><br><span class="line">-dontwarn com.facebook.**</span><br><span class="line">-keep public <span class="keyword">class</span> <span class="title class_">javax</span>.**</span><br><span class="line">-keep public <span class="keyword">class</span> <span class="title class_">android</span>.webkit.**</span><br><span class="line">-dontwarn android.support.v4.**</span><br><span class="line">-keep enum com.facebook.**</span><br><span class="line">-keepattributes Exceptions,InnerClasses,Signature</span><br><span class="line">-keepattributes *Annotation*</span><br><span class="line">-keepattributes SourceFile,LineNumberTable</span><br><span class="line">-keep public interface com.facebook.**</span><br><span class="line">-keep public interface com.tencent.**</span><br><span class="line">-keep public interface com.umeng.socialize.**</span><br><span class="line">-keep public interface com.umeng.socialize.sensor.**</span><br><span class="line">-keep public interface com.umeng.scrshot.**</span><br><span class="line">-keep public <span class="keyword">class</span> <span class="title class_">com</span>.umeng.socialize.* &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.facebook.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.facebook.** &#123; *; &#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.umeng.scrshot.**</span><br><span class="line">-keep public <span class="keyword">class</span> <span class="title class_">com</span>.tencent.** &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.umeng.socialize.sensor.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.umeng.socialize.handler.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.umeng.socialize.handler.*</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.umeng.weixin.handler.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.umeng.weixin.handler.*</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.umeng.qq.handler.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.umeng.qq.handler.*</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">UMMoreHandler</span>&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.tencent.mm.sdk.modelmsg.WXMediaMessage &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.tencent.mm.sdk.modelmsg.** implements com.tencent.mm.sdk.modelmsg.WXMediaMessage$IMediaObject &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">im</span>.yixin.sdk.api.YXMessage &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">im</span>.yixin.sdk.api.** implements im.yixin.sdk.api.YXMessage$YXMessageData&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.tencent.mm.sdk.** &#123;</span><br><span class="line">   *;</span><br><span class="line">&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.tencent.mm.opensdk.** &#123;</span><br><span class="line">   *;</span><br><span class="line">&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.tencent.wxop.** &#123;</span><br><span class="line">   *;</span><br><span class="line">&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.tencent.mm.sdk.** &#123;</span><br><span class="line">   *;</span><br><span class="line">&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.twitter.** &#123; *; &#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.tencent.** &#123;*;&#125;</span><br><span class="line">-dontwarn com.tencent.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.kakao.** &#123;*;&#125;</span><br><span class="line">-dontwarn com.kakao.**</span><br><span class="line">-keep public <span class="keyword">class</span> <span class="title class_">com</span>.umeng.com.umeng.soexample.R$*&#123;</span><br><span class="line">    public static final int *;</span><br><span class="line">&#125;</span><br><span class="line">-keep public <span class="keyword">class</span> <span class="title class_">com</span>.linkedin.android.mobilesdk.R$*&#123;</span><br><span class="line">    public static final int *;</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers enum * &#123;</span><br><span class="line">    public static **[] values();</span><br><span class="line">    public static ** valueOf(java.lang.<span class="built_in">String</span>);</span><br><span class="line">&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.tencent.open.TDialog$*</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.tencent.open.TDialog$* &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.tencent.open.PKDialog</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.tencent.open.PKDialog &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.tencent.open.PKDialog$*</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.tencent.open.PKDialog$* &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.umeng.socialize.impl.ImageImpl &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.sina.** &#123;*;&#125;</span><br><span class="line">-dontwarn com.sina.**</span><br><span class="line">-keep <span class="keyword">class</span>  <span class="title class_">com</span>.alipay.share.sdk.** &#123;</span><br><span class="line">   *;</span><br><span class="line">&#125;</span><br><span class="line">-keepnames <span class="keyword">class</span> * implements android.os.Parcelable &#123;</span><br><span class="line">    public static final ** CREATOR;</span><br><span class="line">&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.linkedin.** &#123; *; &#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.android.dingtalk.share.ddsharemodule.** &#123; *; &#125;</span><br><span class="line">-keepattributes Signature</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.umeng.** &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.uc.** &#123;*;&#125;</span><br><span class="line">-keepclassmembers <span class="keyword">class</span> * &#123;</span><br><span class="line">   public &lt;init&gt; (org.json.JSONObject);</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers enum * &#123;</span><br><span class="line">    public static **[] values();</span><br><span class="line">    public static ** valueOf(java.lang.<span class="built_in">String</span>);</span><br><span class="line">&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.zui.** &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.miui.** &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.heytap.** &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">a</span>.** &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.vivo.** &#123;*;&#125;</span><br><span class="line">-keep public <span class="keyword">class</span> <span class="title class_">com</span>.xm597.app.R$*&#123;</span><br><span class="line">public static final int *;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></span><br><span class="line"><span class="comment">#高德地图混淆配置</span></span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.amap.api.maps.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.autonavi.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.amap.api.trace.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.amap.api.location.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.amap.api.fence.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.autonavi.aps.amapapi.model.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.amap.api.services.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.amap.api.navi.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.autonavi.**&#123;*;&#125;</span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#百度地图混淆配置</span></span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.baidu.** &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.baidu.vi.** &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">mapsdkvi</span>.com.** &#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">vi</span>.com.** &#123;*;&#125;</span><br><span class="line">-dontwarn com.baidu.**</span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#EventBus混淆配置</span></span><br><span class="line">-keepattributes *Annotation*</span><br><span class="line">-keepclassmembers <span class="keyword">class</span> * &#123;</span><br><span class="line">    @org.greenrobot.eventbus.Subscribe &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line">-keep enum org.greenrobot.eventbus.ThreadMode &#123; *; &#125;</span><br><span class="line"><span class="comment"># And if you use AsyncExecutor:</span></span><br><span class="line">-keepclassmembers <span class="keyword">class</span> * <span class="keyword">extends</span> org.greenrobot.eventbus.util.ThrowableFailureEvent &#123;</span><br><span class="line">    &lt;init&gt;(java.lang.Throwable);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Glide混淆配置</span></span><br><span class="line">-keep public <span class="keyword">class</span> * implements com.bumptech.glide.module.GlideModule</span><br><span class="line">-keep <span class="keyword">class</span> * <span class="keyword">extends</span> com.bumptech.glide.module.AppGlideModule &#123;</span><br><span class="line"> &lt;init&gt;(...);</span><br><span class="line">&#125;</span><br><span class="line">-keep public enum com.bumptech.glide.load.ImageHeaderParser$** &#123;</span><br><span class="line">  **[] $VALUES;</span><br><span class="line">  public *;</span><br><span class="line">&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.bumptech.glide.load.data.ParcelFileDescriptorRewinder$InternalRewinder &#123;</span><br><span class="line">  *** rewind();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Retrofit混淆配置</span></span><br><span class="line"><span class="comment"># Retrofit does reflection on generic parameters. InnerClasses is required to use Signature and</span></span><br><span class="line"><span class="comment"># EnclosingMethod is required to use InnerClasses.</span></span><br><span class="line">-keepattributes Signature, InnerClasses, EnclosingMethod</span><br><span class="line"><span class="comment"># Retrofit does reflection on method and parameter annotations.</span></span><br><span class="line">-keepattributes RuntimeVisibleAnnotations, RuntimeVisibleParameterAnnotations</span><br><span class="line"><span class="comment"># Retain service method parameters when optimizing.</span></span><br><span class="line">-keepclassmembers,allowshrinking,allowobfuscation interface * &#123;</span><br><span class="line">    @retrofit2.http.* &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Ignore annotation used for build tooling.</span></span><br><span class="line">-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement</span><br><span class="line"><span class="comment"># Ignore JSR 305 annotations for embedding nullability information.</span></span><br><span class="line">-dontwarn javax.annotation.**</span><br><span class="line"><span class="comment"># Guarded by a NoClassDefFoundError try/catch and only used when on the classpath.</span></span><br><span class="line">-dontwarn kotlin.Unit</span><br><span class="line"><span class="comment"># Top-level functions that can only be used by Kotlin.</span></span><br><span class="line">-dontwarn retrofit2.KotlinExtensions</span><br><span class="line">-dontwarn retrofit2.KotlinExtensions$*</span><br><span class="line"><span class="comment"># With R8 full mode, it sees no subtypes of Retrofit interfaces since they are created with a Proxy</span></span><br><span class="line"><span class="comment"># and replaces all potential values with null. Explicitly keeping the interfaces prevents this.</span></span><br><span class="line">-<span class="keyword">if</span> interface * &#123; @retrofit2.http.* &lt;methods&gt;; &#125;</span><br><span class="line">-keep,allowobfuscation interface &lt;<span class="number">1</span>&gt;</span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#极光推送混淆配置</span></span><br><span class="line">-dontoptimize</span><br><span class="line">-dontpreverify</span><br><span class="line">-dontwarn cn.jpush.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">cn</span>.jpush.** &#123; *; &#125;</span><br><span class="line">-keep <span class="keyword">class</span> * <span class="keyword">extends</span> cn.jpush.android.helpers.JPushMessageReceiver &#123; *; &#125;</span><br><span class="line">-dontwarn cn.jiguang.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">cn</span>.jiguang.** &#123; *; &#125;</span><br><span class="line">-dontwarn cn.com.chinatelecom.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">cn</span>.com.chinatelecom.** &#123; *; &#125;</span><br><span class="line">-dontwarn com.ct.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.ct.** &#123; *; &#125;</span><br><span class="line">-dontwarn a.a.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">a</span>.a.** &#123; *; &#125;</span><br><span class="line">-dontwarn com.cmic.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.cmic.** &#123; *; &#125;</span><br><span class="line">-dontwarn com.unicom.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.unicom.** &#123; *; &#125;</span><br><span class="line">-dontwarn com.sdk.**</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.sdk.** &#123; *; &#125;</span><br><span class="line">-keep public <span class="keyword">class</span> <span class="title class_">com</span>.sina.** &#123;</span><br><span class="line">    *;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span></span><br><span class="line"><span class="comment">#OAID</span></span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">XI</span>.CA.XI.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">XI</span>.K0.XI.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">XI</span>.XI.K0.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">XI</span>.vs.K0.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">XI</span>.xo.XI.XI.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.asus.msa.SupplementaryDID.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.asus.msa.sdid.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.bun.lib.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.bun.miitmdid.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.huawei.hms.ads.identifier.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">com</span>.samsung.android.deviceidservice.**&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">class</span> <span class="title class_">org</span>.json.**&#123;*;&#125;</span><br><span class="line">-keep public <span class="keyword">class</span> <span class="title class_">com</span>.netease.nis.sdkwrapper.Utils &#123;public &lt;methods&gt;;&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="IM即时通讯"><a href="#IM即时通讯" class="headerlink" title="IM即时通讯"></a>IM即时通讯</h1><h2 id="关于百川IM在安卓8不能调起问题-阿里已经不维护了"><a href="#关于百川IM在安卓8不能调起问题-阿里已经不维护了" class="headerlink" title="关于百川IM在安卓8不能调起问题(阿里已经不维护了)"></a>关于百川IM在安卓8不能调起问题(阿里已经不维护了)</h2><p>现象:PMS顾客端IM聊天在安卓8不能调起，会报登录超时。安卓8以下的正常。导购端的都正常(包括在安卓8)<br>排查步骤：  </p>
<ol>
<li>排查是否是tcmService进程没有开启（在AS的logcat的标题栏上看的）</li>
<li>排查gradle中的targetVersion的值，IM不支持太高的版本（解决：降低targetVersion）<br>原因:辣苹果顾客端targetVersion设置成27，而云旺不支持这么高的版本。<br>解决:降低targetVersion</li>
</ol>
<h2 id="百川在安卓8以上无法推送问题"><a href="#百川在安卓8以上无法推送问题" class="headerlink" title="百川在安卓8以上无法推送问题"></a>百川在安卓8以上无法推送问题</h2><p>现象：导购端退到后台，顾客端发送消息。在安卓6上导购端状态栏有新消息提示，在安卓8以上没有新消息提示<br>解决:【暂不解决，百川都不维护了，看看客户是否换成融云】</p>
<h1 id="地图-amp-定位"><a href="#地图-amp-定位" class="headerlink" title="地图&amp;定位"></a>地图&amp;定位</h1><h2 id="高德地图相关"><a href="#高德地图相关" class="headerlink" title="高德地图相关"></a>高德地图相关</h2><h3 id="key、定位相关"><a href="#key、定位相关" class="headerlink" title="key、定位相关"></a>key、定位相关</h3><ol>
<li>如果误删高德地图控制台申请的应用和key<br>可以进行添加新的key，同时要更改代码注册清单文件中对应的apikey的值</li>
<li>同一个应用可以申请多个key，不过注册清单文件中的apikey只能一个，所以限制了只能有一个生效<br>（当然如果是两个编辑器进行编译的话，那么可以同时用到两个）</li>
<li>高德地图控制台申请应用名，即使删除了也不能重新用这个名字</li>
<li>注意：在安卓6.0以上的sdk中，权限是要写在代码中，在注册清单文件中写的无效。（只能在手机的设置里信任此应用方可），否则会报“缺少定位权限”的异常</li>
<li>删除了高德地图控制台申请的key，应用中会报“KEY鉴权失败”的异常</li>
</ol>
<h3 id="aMap-x3D-mapView-getMap-一直报-NullPointException"><a href="#aMap-x3D-mapView-getMap-一直报-NullPointException" class="headerlink" title="aMap &#x3D; mapView.getMap();一直报 NullPointException"></a>aMap &#x3D; mapView.getMap();一直报 NullPointException</h3><p>解决：在<code>app.build</code>中添加  </p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">sourceSets&#123;</span><br><span class="line">    main&#123;</span><br><span class="line">        jniLibs.srcDirs = [<span class="string">&#x27;libs&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    instrumentTest.setRoot(<span class="string">&#x27;tests&#x27;</span>)</span><br><span class="line">        debug.setRoot(<span class="string">&#x27;build-types/debug&#x27;</span>)</span><br><span class="line">        release.setRoot(<span class="string">&#x27;build-types/release&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整代码<br><code>app.build</code>  </p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line"></span><br><span class="line">task clean(<span class="attr">type:</span>Exec)&#123;</span><br><span class="line">    ext.lockhunter = <span class="string">&#x27;\&quot;C:\\LockHunter.exe\&quot;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> buildDir = file(<span class="keyword">new</span> File(<span class="string">&quot;build&quot;</span>))</span><br><span class="line">    commandLine <span class="string">&#x27;cmd&#x27;</span> , <span class="string">&quot;$lockhunter&quot;</span>, <span class="string">&#x27;/delete&#x27;</span>, <span class="string">&#x27;/silent&#x27;</span>,buildDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">&#x27;23.0.3&#x27;</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.xxx&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">17</span></span><br><span class="line">        targetSdkVersion <span class="number">19</span></span><br><span class="line">        compileOptions &#123;</span><br><span class="line">            sourceCompatibility JavaVersion.VERSION_1_7</span><br><span class="line">            targetCompatibility JavaVersion.VERSION_1_7</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.txt&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sourceSets&#123;</span><br><span class="line">        main&#123;</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">&#x27;libs&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        instrumentTest.setRoot(<span class="string">&#x27;tests&#x27;</span>)</span><br><span class="line">        debug.setRoot(<span class="string">&#x27;build-types/debug&#x27;</span>)</span><br><span class="line">        release.setRoot(<span class="string">&#x27;build-types/release&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="attr">includes:</span> [<span class="string">&#x27;*.jar&#x27;</span>], <span class="attr">dir:</span> <span class="string">&#x27;libs&#x27;</span>)</span><br><span class="line">    compile files(<span class="string">&#x27;libs/fastjson-1.2.4.jar&#x27;</span>)</span><br><span class="line">    compile files(<span class="string">&#x27;libs/nineoldandroids-2.4.0.jar&#x27;</span>)</span><br><span class="line">    compile files(<span class="string">&#x27;libs/okhttp-3.4.1.jar&#x27;</span>)</span><br><span class="line">    compile files(<span class="string">&#x27;libs/okio-1.9.0.jar&#x27;</span>)</span><br><span class="line">    compile files(<span class="string">&#x27;libs/universal-image-loader-1.9.2.jar&#x27;</span>)</span><br><span class="line">    compile <span class="string">&#x27;com.android.support:appcompat-v7:23.4.0&#x27;</span></span><br><span class="line">    compile <span class="string">&#x27;com.flipboard:bottomsheet-core:1.5.1&#x27;</span></span><br><span class="line">    compile files(<span class="string">&#x27;libs/AMap_Location_V3.5.0_20170731.jar&#x27;</span>)</span><br><span class="line">    compile files(<span class="string">&#x27;libs/AMap_Search_V5.2.1_20170630.jar&#x27;</span>)</span><br><span class="line">    compile files(<span class="string">&#x27;libs/Android_Map3D_SDK_V5.2.1_20170630.jar&#x27;</span>)</span><br><span class="line">    compile files(<span class="string">&#x27;libs/Volley.jar&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AndroidManifest.xml</code>  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.xxx&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:versionCode</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:versionName</span>=<span class="string">&quot;1.0&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minSdkVersion</span>=<span class="string">&quot;17&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:targetSdkVersion</span>=<span class="string">&quot;19&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 地图包、搜索包需要的基础权限 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 允许程序打开网络套接字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 允许程序设置内置sd卡的写权限 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 允许程序获取网络状态 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 允许程序访问WiFi网络信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 允许程序读写手机状态和身份 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 允许程序访问CellID或WiFi热点来获取粗略的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_COARSE_LOCATION&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于获取wifi的获取权限，wifi信息会用来进行网络定位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于访问GPS定位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于读取手机当前的状态--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CHANGE_CONFIGURATION&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WAKE_LOCK&quot;</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--用于申请调用A-GPS模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_LOCATION_EXTRA_COMMANDS&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_SETTINGS&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.xxx.MyApplication&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.amap.api.v2.apikey&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:value</span>=<span class="string">&quot;b5eae3aeaae6a5439226e657ac997d08&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--主要界面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;com.xxx.personal.locate.MarkerAnimationActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 定位需要的服务 使用2.0的定位需要加上这个 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">&quot;com.amap.api.location.APSService&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>MarkerAnimationActivity.java</code>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.personal.locate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Point;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.Interpolator;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.LinearInterpolator;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.amap.api.maps.AMap;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.maps.MapView;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.maps.model.BitmapDescriptorFactory;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.maps.model.CameraPosition;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.maps.model.LatLng;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.maps.model.Marker;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.maps.model.MarkerOptions;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.maps.model.animation.Animation;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.maps.model.animation.ScaleAnimation;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.maps.model.animation.TranslateAnimation;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.services.core.LatLonPoint;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.services.geocoder.GeocodeResult;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.services.geocoder.GeocodeSearch;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.services.geocoder.RegeocodeAddress;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.services.geocoder.RegeocodeQuery;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.services.geocoder.RegeocodeResult;</span><br><span class="line"><span class="keyword">import</span> com.xxx.MyBaseActivity;</span><br><span class="line"><span class="keyword">import</span> com.xxx.R;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AMapV2地图中简单介绍一些Marker的用法.</span></span><br><span class="line"><span class="comment"> * Marker动画功能介绍</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MarkerAnimationActivity</span> <span class="keyword">extends</span> <span class="title class_">MyBaseActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener,AMap.OnCameraChangeListener,GeocodeSearch.OnGeocodeSearchListener &#123;</span><br><span class="line">	<span class="keyword">private</span> MarkerOptions markerOption;</span><br><span class="line">	<span class="keyword">private</span> AMap aMap;</span><br><span class="line">	<span class="keyword">private</span> MapView mapView;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">LatLng</span> <span class="variable">latlng</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LatLng</span>(<span class="number">39.761</span>, <span class="number">116.434</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">Marker</span> <span class="variable">screenMarker</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="type">Marker</span> <span class="variable">growMarker</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">	GeocodeSearch geocodeSearch;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">		setContentView(R.layout.marker_animation_activity);</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 设置离线地图存储目录，在下载离线地图或初始化地图设置; 使用过程中可自行设置, 若自行设置了离线地图存储的路径，</span></span><br><span class="line"><span class="comment">		 * 则需要在离线地图下载和使用地图页面都进行路径设置</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="comment">// Demo中为了其他界面可以使用下载的离线地图，使用默认位置存储，屏蔽了自定义设置</span></span><br><span class="line">		<span class="comment">// MapsInitializer.sdcardDir =OffLineMapUtils.getSdCacheDir(this);</span></span><br><span class="line">		mapView = (MapView) findViewById(R.id.map);</span><br><span class="line">		mapView.onCreate(savedInstanceState); <span class="comment">// 此方法必须重写</span></span><br><span class="line">		init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 初始化AMap对象</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Button</span> <span class="variable">clearMap</span> <span class="operator">=</span> (Button) findViewById(R.id.growMarker);</span><br><span class="line">		clearMap.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">		<span class="type">Button</span> <span class="variable">resetMap</span> <span class="operator">=</span> (Button) findViewById(R.id.jumpMarker);</span><br><span class="line">		resetMap.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">		<span class="keyword">if</span> (aMap == <span class="literal">null</span>) &#123;</span><br><span class="line">			aMap = mapView.getMap();</span><br><span class="line">		&#125;</span><br><span class="line">		aMap.setOnMapLoadedListener(<span class="keyword">new</span> <span class="title class_">AMap</span>.OnMapLoadedListener() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMapLoaded</span><span class="params">()</span> &#123;</span><br><span class="line">				addMarkersToMap();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 设置可视范围变化时的回调的接口方法</span></span><br><span class="line">		aMap.setOnCameraChangeListener(<span class="keyword">new</span> <span class="title class_">AMap</span>.OnCameraChangeListener() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCameraChange</span><span class="params">(CameraPosition position)</span> &#123;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCameraChangeFinish</span><span class="params">(CameraPosition postion)</span> &#123;</span><br><span class="line">				<span class="comment">//屏幕中心的Marker跳动</span></span><br><span class="line">                startJumpAnimation();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		aMap.setOnCameraChangeListener(<span class="built_in">this</span>);</span><br><span class="line">		geocodeSearch = <span class="keyword">new</span> <span class="title class_">GeocodeSearch</span>(<span class="built_in">this</span>);</span><br><span class="line">		geocodeSearch.setOnGeocodeSearchListener(<span class="built_in">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 方法必须重写</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>.onResume();</span><br><span class="line">		mapView.onResume();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 方法必须重写</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>.onPause();</span><br><span class="line">		mapView.onPause();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 方法必须重写</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onSaveInstanceState</span><span class="params">(Bundle outState)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>.onSaveInstanceState(outState);</span><br><span class="line">		mapView.onSaveInstanceState(outState);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 方法必须重写</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>.onDestroy();</span><br><span class="line">		mapView.onDestroy();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在地图上添加marker</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addMarkersToMap</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">		addMarkerInScreenCenter();</span><br><span class="line"></span><br><span class="line">		addGrowMarker();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在屏幕中心添加一个Marker</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addMarkerInScreenCenter</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">LatLng</span> <span class="variable">latLng</span> <span class="operator">=</span> aMap.getCameraPosition().target;</span><br><span class="line">		<span class="type">Point</span> <span class="variable">screenPosition</span> <span class="operator">=</span> aMap.getProjection().toScreenLocation(latLng);</span><br><span class="line">		screenMarker = aMap.addMarker(<span class="keyword">new</span> <span class="title class_">MarkerOptions</span>()</span><br><span class="line">				.anchor(<span class="number">0.5f</span>,<span class="number">0.5f</span>)</span><br><span class="line">				.icon(BitmapDescriptorFactory.fromResource(R.drawable.purple_pin)));</span><br><span class="line">		<span class="comment">//设置Marker在屏幕上,不跟随地图移动</span></span><br><span class="line">	 	screenMarker.setPositionByPixels(screenPosition.x,screenPosition.y);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 添加一个从地上生长的Marker</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addGrowMarker</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(growMarker == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="type">MarkerOptions</span> <span class="variable">markerOptions</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MarkerOptions</span>().icon(BitmapDescriptorFactory</span><br><span class="line">					.defaultMarker(BitmapDescriptorFactory.HUE_AZURE))</span><br><span class="line">					.position(latlng);</span><br><span class="line">			growMarker = aMap.addMarker(markerOptions);</span><br><span class="line">		&#125; </span><br><span class="line">		</span><br><span class="line">		startGrowAnimation();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 地上生长的Marker</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startGrowAnimation</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(growMarker != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="type">Animation</span> <span class="variable">animation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScaleAnimation</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">			animation.setInterpolator(<span class="keyword">new</span> <span class="title class_">LinearInterpolator</span>());</span><br><span class="line">			<span class="comment">//整个移动所需要的时间</span></span><br><span class="line">			animation.setDuration(<span class="number">1000</span>);</span><br><span class="line">			<span class="comment">//设置动画</span></span><br><span class="line">			growMarker.setAnimation(animation);</span><br><span class="line">			<span class="comment">//开始动画</span></span><br><span class="line">			growMarker.startAnimation();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 屏幕中心marker 跳动</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startJumpAnimation</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (screenMarker != <span class="literal">null</span> ) &#123;</span><br><span class="line">			<span class="comment">//根据屏幕距离计算需要移动的目标点</span></span><br><span class="line">			<span class="keyword">final</span> <span class="type">LatLng</span> <span class="variable">latLng</span> <span class="operator">=</span> screenMarker.getPosition();</span><br><span class="line">			<span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span>  aMap.getProjection().toScreenLocation(latLng);</span><br><span class="line">			point.y -= dip2px(<span class="built_in">this</span>,<span class="number">125</span>);</span><br><span class="line">			<span class="type">LatLng</span> <span class="variable">target</span> <span class="operator">=</span> aMap.getProjection()</span><br><span class="line">					.fromScreenLocation(point);</span><br><span class="line">			<span class="comment">//使用TranslateAnimation,填写一个需要移动的目标点</span></span><br><span class="line">			<span class="type">Animation</span> <span class="variable">animation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TranslateAnimation</span>(target);</span><br><span class="line">			animation.setInterpolator(<span class="keyword">new</span> <span class="title class_">Interpolator</span>() &#123;</span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getInterpolation</span><span class="params">(<span class="type">float</span> input)</span> &#123;</span><br><span class="line">					<span class="comment">// 模拟重加速度的interpolator</span></span><br><span class="line">					<span class="keyword">if</span>(input &lt;= <span class="number">0.5</span>) &#123;</span><br><span class="line">						<span class="keyword">return</span> (<span class="type">float</span>) (<span class="number">0.5f</span> - <span class="number">2</span> * (<span class="number">0.5</span> - input) * (<span class="number">0.5</span> - input));</span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="keyword">return</span> (<span class="type">float</span>) (<span class="number">0.5f</span> - Math.sqrt((input - <span class="number">0.5f</span>)*(<span class="number">1.5f</span> - input)));</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">			<span class="comment">//整个移动所需要的时间</span></span><br><span class="line">			animation.setDuration(<span class="number">600</span>);</span><br><span class="line">			<span class="comment">//设置动画</span></span><br><span class="line">			screenMarker.setAnimation(animation);</span><br><span class="line">			<span class="comment">//开始动画</span></span><br><span class="line">			screenMarker.startAnimation();</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Log.e(<span class="string">&quot;amap&quot;</span>,<span class="string">&quot;screenMarker is null&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//dip和px转换</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dip2px</span><span class="params">(Context context, <span class="type">float</span> dpValue)</span> &#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="type">float</span> <span class="variable">scale</span> <span class="operator">=</span> context.getResources().getDisplayMetrics().density;</span><br><span class="line">		<span class="keyword">return</span> (<span class="type">int</span>) (dpValue * scale + <span class="number">0.5f</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">		<span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 从地上生长的Marker</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">case</span> R.id.growMarker:</span><br><span class="line">			startGrowAnimation();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * marker 跳动动画</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">case</span> R.id.jumpMarker:</span><br><span class="line">			startJumpAnimation();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCameraChange</span><span class="params">(CameraPosition cameraPosition)</span> &#123;</span><br><span class="line">		<span class="type">LatLng</span> <span class="variable">target</span> <span class="operator">=</span> cameraPosition.target;</span><br><span class="line"><span class="comment">//		System.out.println(target.latitude+&quot;---&quot;+target.longitude);</span></span><br><span class="line">		getAddressByLatlng(target);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCameraChangeFinish</span><span class="params">(CameraPosition cameraPosition)</span> &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRegeocodeSearched</span><span class="params">(RegeocodeResult regeocodeResult, <span class="type">int</span> i)</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (regeocodeResult != <span class="literal">null</span> &amp;&amp; regeocodeResult.getRegeocodeAddress() != <span class="literal">null</span>) &#123;</span><br><span class="line">				<span class="type">RegeocodeAddress</span> <span class="variable">regeocodeAddress</span> <span class="operator">=</span> regeocodeResult.getRegeocodeAddress();</span><br><span class="line">				<span class="type">String</span> <span class="variable">formatAddress</span> <span class="operator">=</span> regeocodeAddress.getFormatAddress();</span><br><span class="line">				<span class="type">String</span> <span class="variable">simpleAddress</span> <span class="operator">=</span> formatAddress.substring(<span class="number">9</span>);</span><br><span class="line">				System.out.println(<span class="string">&quot;查询经纬度对应详细地址：\n&quot;</span> + simpleAddress);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//				NToast.shortToast(AMAPLocationActivity.this, &quot;没有搜索到结果&quot;);</span></span><br><span class="line">				System.out.println();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//			NToast.shortToast(AMAPLocationActivity.this, &quot;搜索失败,请检查网络&quot;);</span></span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onGeocodeSearched</span><span class="params">(GeocodeResult geocodeResult, <span class="type">int</span> i)</span> &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getAddressByLatlng</span><span class="params">(LatLng latLng)</span> &#123;</span><br><span class="line">		<span class="comment">//逆地理编码查询条件：逆地理编码查询的地理坐标点、查询范围、坐标类型。</span></span><br><span class="line">		<span class="type">LatLonPoint</span> <span class="variable">latLonPoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LatLonPoint</span>(latLng.latitude, latLng.longitude);</span><br><span class="line">		<span class="type">RegeocodeQuery</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RegeocodeQuery</span>(latLonPoint, <span class="number">500f</span>, GeocodeSearch.AMAP);</span><br><span class="line">		<span class="comment">//异步查询</span></span><br><span class="line">		geocodeSearch.getFromLocationAsyn(query);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="选择模糊定位的时候位置不可用"><a href="#选择模糊定位的时候位置不可用" class="headerlink" title="选择模糊定位的时候位置不可用"></a>选择模糊定位的时候位置不可用</h2><p>解决：关闭掉持续定位 <code>option.setOnceLocation(false);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AMapLocationClient</span> <span class="variable">locationClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AMapLocationClient</span>(context);  </span><br><span class="line"><span class="type">AMapLocationClientOption</span> <span class="variable">option</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AMapLocationClientOption</span>();  </span><br><span class="line">option.setOnceLocation(<span class="literal">false</span>);  </span><br><span class="line">option.setOnceLocationLatest(<span class="literal">false</span>);  </span><br><span class="line">option.setInterval(interval);  </span><br><span class="line">locationClient.setLocationOption(option);  </span><br><span class="line">locationClient.setLocationListener(aMapLocation -&gt; &#123;  </span><br><span class="line">	<span class="keyword">if</span> (listener != <span class="literal">null</span>) &#123;  </span><br><span class="line">		listener.onLocationChanged(aMapLocation);  </span><br><span class="line">		&#125;  </span><br><span class="line">	&#125;);  </span><br><span class="line">locationClient.startLocation();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果需要持续定位的场景，那么选择模糊定位的判断可以从已获取到的权限入手</p>
</blockquote>
<h2 id="百度定位移到项目中不可用"><a href="#百度定位移到项目中不可用" class="headerlink" title="百度定位移到项目中不可用"></a>百度定位移到项目中不可用</h2><ol>
<li>检查权限；检查是不是重新申请了key（一个包名对应一个key）；</li>
<li>用百度定位的时候要用<code>getApplicationContext()</code>，因为当前的context被销毁了虽然不报错，但是也不提供定位。</li>
</ol>
<h1 id="Bugly相关"><a href="#Bugly相关" class="headerlink" title="Bugly相关"></a>Bugly相关</h1><h2 id="Bugly-无法上报的问题"><a href="#Bugly-无法上报的问题" class="headerlink" title="Bugly 无法上报的问题"></a>Bugly 无法上报的问题</h2><ul>
<li>可能是加了自己的异常捕获导致的<br>解决：去掉自己的异常捕获</li>
</ul>
<h1 id="GreenDao的问题"><a href="#GreenDao的问题" class="headerlink" title="GreenDao的问题"></a>GreenDao的问题</h1><ul>
<li>复合主键<br>在数据库表多对多的关系中，中间表使用的是复合主键，在GreenDao中复合主键的表达方式是：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 复合主键</span></span><br><span class="line"><span class="meta">@Entity(indexes = &#123; @Index(value = &quot;studentId, teacherId&quot;, unique = true)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherStudent</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">long</span> studentId;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">long</span> teacherId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>多对多关系：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">	<span class="meta">@Id</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line">	<span class="meta">@ToMany</span></span><br><span class="line">	<span class="meta">@JoinEntity(entity = TeacherStudent.class, sourceProperty = &quot;studentId&quot;, targetProperty = &quot;teacherId&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;Teacher&gt; teachers;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span>&#123;</span><br><span class="line">	<span class="meta">@Id</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line">	<span class="meta">@ToMany</span></span><br><span class="line">	<span class="meta">@JoinEntity(entity = TeacherStudent.class, sourceProperty = &quot;teacherId&quot;, targetProperty = &quot;studentId&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>查询结果出现重复项：<br>当查询结果出现重复项的时候，使用函数.distinct()取消所有的重复项。</li>
<li>如果GreenDao报错时，首先是将自动生成的代码段删除然后重新编译</li>
</ul>
<h1 id="MVPArms失效问题"><a href="#MVPArms失效问题" class="headerlink" title="MVPArms失效问题"></a>MVPArms失效问题</h1><p>在AS4.1以上没有templates的issue<br><a href="https://github.com/JessYanCoding/MVPArmsTemplate/issues/26">https://github.com/JessYanCoding/MVPArmsTemplate/issues/26</a><br><a href="https://www.bigademo.com/2021/01/20/AndroidStudio%204.1%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1/index.html">https://www.bigademo.com/2021/01/20/AndroidStudio%204.1%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1/index.html</a><br>查看 <a href="https://shenbh.github.io/posts/8f94baaa/">AndroidStudio-代码快捷键&amp;模板</a> 的AS4.1上写模板【新方式】  </p>
<h1 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h1><h2 id="App-跳转微信小程序失败"><a href="#App-跳转微信小程序失败" class="headerlink" title="App 跳转微信小程序失败"></a>App 跳转微信小程序失败</h2><p> 安卓端调用微信小程序支付功能时候，一直失败，微信的app也调不起来。<br>对比了微信开放平台上的安卓应用的的appId 值，配置的包名、以及应用签名信息，确认都完全正确。微信的分享也正常，但是就是调不起来小程序，微信sdk给的错误信息如下：  </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">D/MicroMsg<span class="selector-class">.PaySdk</span><span class="selector-class">.WXFactory</span>: createWXAPI, appId = wx8c3653f8c376e8c4, checkSignature = false</span><br><span class="line"></span><br><span class="line"><span class="number">11645</span>-<span class="number">11645</span>/app<span class="selector-class">.laidianyi</span><span class="selector-class">.weilanshidai</span> D/MicroMsg<span class="selector-class">.SDK</span><span class="selector-class">.WXApiImplV10</span>: &lt;init&gt;, appId = wx8c3653f8c376e8c4, checkSignature = false</span><br><span class="line"></span><br><span class="line"><span class="number">11645</span>-<span class="number">11645</span>/app<span class="selector-class">.laidianyi</span><span class="selector-class">.weilanshidai</span> D/MicroMsg<span class="selector-class">.SDK</span><span class="selector-class">.WXMsgImplComm</span>: ignore wechat app signature validation</span><br><span class="line"></span><br><span class="line"><span class="number">11645</span>-<span class="number">11645</span>/app<span class="selector-class">.laidianyi</span><span class="selector-class">.weilanshidai</span> I/MicroMsg<span class="selector-class">.SDK</span><span class="selector-class">.WXApiImplV10</span>: sendReq, req type = <span class="number">19</span></span><br></pre></td></tr></table></figure>
<p>经过一系列尝试，原来是个人微信账号没有预览权限导致，换个有预览权限的微信账号，安卓app就能正常调起微信小程序了<br>备注：iOS 没有这个问题，只有安卓会出现这个问题</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓问题</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Java并发之synchronized实现原理</title>
    <url>/posts/c1735e0a/</url>
    <content><![CDATA[<h1 id="深入理解Java并发之synchronized实现原理"><a href="#深入理解Java并发之synchronized实现原理" class="headerlink" title="深入理解Java并发之synchronized实现原理"></a><a href="https://blog.csdn.net/javazejian/article/details/72828483">深入理解Java并发之synchronized实现原理</a></h1><p>线程安全是并发编程中的重要关注点，应该注意到的是，造成线程安全问题的主要诱因有两点，一是存在共享数据(也称临界资源)，二是存在多条线程共同操作共享数据。因此为了解决这个问题，我们可能需要这样一个方案，当存在多个线程操作共享数据时，需要保证同一时刻有且只有一个线程在操作共享数据，其他线程必须等到该线程处理完数据后再进行，这种方式有个高尚的名称叫<strong>互斥锁</strong>，即能达到互斥访问目的的锁，也就是说当一个共享数据被当前正在访问的线程加上互斥锁后，在同一个时刻，其他线程只能处于等待的状态，直到当前线程处理完毕释放该锁。在 Java 中，关键字 synchronized可以保证在同一个时刻，只有一个线程可以执行某个方法或者某个代码块(主要是对方法或者代码块中存在共享数据的操作)，同时我们还应该注意到synchronized另外一个重要的作用，synchronized可保证一个线程的变化(主要是共享数据的变化)被其他线程所看到（<strong>保证可见性</strong>，完全可以替代Volatile功能），这点确实也是很重要的。</p>
<h2 id="synchronized的三种应用方式"><a href="#synchronized的三种应用方式" class="headerlink" title="synchronized的三种应用方式"></a>synchronized的三种应用方式</h2><ul>
<li>修饰实例方法，作用于当前实例加锁，进入同步代码前要获得当前实例的锁    </li>
<li>修饰静态方法，作用于当前类对象加锁，进入同步代码前要获得当前类对象的锁</li>
<li>修饰代码块，指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁。<h3 id="synchronized作用于实例方法"><a href="#synchronized作用于实例方法" class="headerlink" title="synchronized作用于实例方法"></a>synchronized作用于实例方法</h3>所谓的实例对象锁就是用synchronized修饰实例对象中的实例方法，注意是<strong>实例方法不包括静态方法</strong>，如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountingSync</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="comment">//共享资源(临界资源)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * synchronized 修饰实例方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        AccountingSync instance=<span class="keyword">new</span> <span class="title class_">AccountingSync</span>();</span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>(instance);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> <span class="title class_">Thread</span>(instance);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出结果:</span></span><br><span class="line"><span class="comment">     * 2000000</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
上述代码中，我们开启两个线程操作同一个共享资源即变量i，由于<code>i++;</code>操作并不具备原子性，该操作是先读取值，然后写回一个新值，相当于原来的值加上1，分两步完成，如果第二个线程在第一个线程读取旧值和写回新值期间读取i的域值，那么第二个线程就会与第一个线程一起看到同一个值，并执行相同值的加1操作，这也就造成了线程安全失败，因此对于increase方法必须使用synchronized修饰，以便保证线程安全。此时我们应该注意到synchronized修饰的是实例方法increase，在这样的情况下，当前线程的锁便是实例对象instance，注意Java中的线程同步锁可以是任意对象。从代码执行结果来看确实是正确的，倘若我们没有使用synchronized关键字，其最终输出结果就很可能小于2000000，这便是synchronized关键字的作用。这里我们还需要意识到，当一个线程正在访问一个对象的 synchronized 实例方法，那么其他线程不能访问该对象的其他 synchronized 方法，毕竟<strong>一个对象只有一把锁</strong>，当一个线程获取了该对象的锁之后，其他线程无法获取该对象的锁，所以无法访问该对象的其他synchronized实例方法，但是<strong>其他线程还是可以访问该实例对象的其他非synchronized方法</strong>，当然如果是一个线程 A 需要访问实例对象 obj1 的 synchronized 方法 f1(当前对象锁是obj1)，另一个线程 B 需要访问实例对象 obj2 的 synchronized 方法 f2(当前对象锁是obj2)，这样是允许的，因为两个实例对象锁并不同相同，此时如果两个线程操作数据并非共享的，线程安全是有保障的，遗憾的是如果两个线程操作的是共享数据，那么线程安全就有可能无法保证了，如下代码将演示出该现象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountingSyncBad</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//new新实例</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">AccountingSyncBad</span>());</span><br><span class="line">        <span class="comment">//new新实例</span></span><br><span class="line">        Thread t2=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">AccountingSyncBad</span>());</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="comment">//join含义:当前线程A等待thread线程终止之后才能从thread.join()返回</span></span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
上述代码与前面不同的是我们同时创建了两个新实例AccountingSyncBad，然后启动两个不同的线程对共享变量i进行操作，但很遗憾操作结果是<code>1452317</code>而不是期望结果<code>2000000</code>，因为上述代码犯了严重的错误，虽然我们使用synchronized修饰了increase方法，但却new了两个不同的实例对象，这也就意味着存在着<strong>两个不同的实例对象锁</strong>，因此t1和t2都会进入各自的对象锁，也就是说t1和t2线程使用的是不同的锁，因此线程安全是无法保证的。解决这种困境的的方式是将synchronized作用于静态的increase方法，这样的话，对象锁就当前类对象，由于无论创建多少个实例对象，但对于的<strong>类对象拥有只有一个</strong>，所有在这样的情况下对象锁就是唯一的。下面我们看看如何使用将synchronized作用于静态的increase方法。</li>
</ul>
<h3 id="synchronized作用于静态方法"><a href="#synchronized作用于静态方法" class="headerlink" title="synchronized作用于静态方法"></a>synchronized作用于静态方法</h3><p>当synchronized作用于静态方法时，其锁就是<strong>当前类的class对象锁</strong>。由于静态成员不专属于任何一个实例对象，是类成员，因此通过class对象锁可以控制静态成员的并发操作。需要注意的是如果一个线程A调用一个实例对象的非static的synchronized方法，而线程B需要调用这个实例对象所属类的static的 synchronized方法，是允许的，不会发生互斥现象，因为访问static的 synchronized 方法占用的锁是<strong>当前类的class对象</strong>，而访问非静态 synchronized 方法占用的锁是<strong>当前实例对象锁</strong>，看如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountingSyncClass</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作用于静态方法,锁是当前class对象,也就是</span></span><br><span class="line"><span class="comment">     * AccountingSyncClass类对应的class对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非静态,访问时锁不一样不会发生互斥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increase4Obj</span><span class="params">()</span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//new新实例</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">AccountingSyncClass</span>());</span><br><span class="line">        <span class="comment">//new心事了</span></span><br><span class="line">        Thread t2=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">AccountingSyncClass</span>());</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();t2.start();</span><br><span class="line"></span><br><span class="line">        t1.join();t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于synchronized关键字修饰的是静态increase方法，与修饰实例方法不同的是，其锁对象是当前类的class对象。注意代码中的increase4Obj方法是实例方法，其对象锁是当前实例对象，如果别的线程调用该方法，将不会产生互斥现象，毕竟锁对象不同，但我们应该意识到这种情况下<strong>可能会发现线程安全问题</strong>(操作了共享静态变量i)。</p>
<h3 id="synchronized作用于同步代码块"><a href="#synchronized作用于同步代码块" class="headerlink" title="synchronized作用于同步代码块"></a>synchronized作用于同步代码块</h3><p>除了使用关键字修饰实例方法和静态方法外，还可以使用同步代码块，在某些情况下，我们编写的方法体可能比较大，同时存在一些比较耗时的操作，而需要同步的代码又只有一小部分，如果直接对整个方法进行同步操作，可能会得不偿失，此时我们可以使用同步代码块的方式对需要同步的代码进行包裹，这样就无需对整个方法进行同步操作了，同步代码块的使用示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountingSync</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> AccountingSync instance=<span class="keyword">new</span> <span class="title class_">AccountingSync</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//省略其他耗时操作....</span></span><br><span class="line">        <span class="comment">//使用同步代码块对变量i进行同步操作,锁对象为instance</span></span><br><span class="line">        <span class="keyword">synchronized</span>(instance)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>(instance);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> <span class="title class_">Thread</span>(instance);</span><br><span class="line">        t1.start();t2.start();</span><br><span class="line">        t1.join();t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从代码看出，将synchronized作用于一个给定的实例对象instance，即当前实例对象就是锁对象，每次当线程进入synchronized包裹的代码块时就会要求当前线程持有instance实例对象锁，如果当前有其他线程正持有该对象锁，那么新到的线程就必须等待，这样也就保证了每次只有一个线程执行<code>i++;</code>操作。当然除了instance作为对象外，我们还可以使用this对象(代表当前实例)或者当前类的class对象作为锁，如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//this,当前实例对象锁</span></span><br><span class="line"><span class="keyword">synchronized</span>(<span class="built_in">this</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//class对象锁</span></span><br><span class="line"><span class="keyword">synchronized</span>(AccountingSync.class)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>了解完synchronized的基本含义及其使用方式后，下面我们将进一步深入理解synchronized的底层实现原理。</p>
<h2 id="synchronized底层语义原理"><a href="#synchronized底层语义原理" class="headerlink" title="synchronized底层语义原理"></a>synchronized底层语义原理</h2><p>Java 虚拟机中的同步(Synchronization)基于进入和退出管程(Monitor)对象实现， 无论是显式同步(有明确的 monitorenter 和 monitorexit 指令,即同步代码块)还是隐式同步都是如此。在 Java 语言中，同步用的最多的地方可能是被 synchronized 修饰的同步方法。同步方法 并不是由 monitorenter 和 monitorexit 指令来实现同步的，而是由方法调用指令读取运行时常量池中方法的 ACC_SYNCHRONIZED 标志来隐式实现的，关于这点，稍后详细分析。下面先来了解一个概念Java对象头，这对深入理解synchronized实现原理非常关键。</p>
<h3 id="理解Java对象头与Monitor"><a href="#理解Java对象头与Monitor" class="headerlink" title="理解Java对象头与Monitor"></a>理解Java对象头与Monitor</h3><p>在JVM中，对象在内存中的布局分为三块区域：对象头、实例数据和对齐填充。如下：<br><img src="/posts/c1735e0a/%E5%A0%86%E5%86%85%E5%AD%98.png"></p>
<ul>
<li>实例变量：存放类的属性数据信息，包括父类的属性信息，如果是数组的实例部分还包括数组的长度，这部分内存<strong>按4字节对齐</strong>。</li>
</ul>
<ul>
<li>填充数据：由于虚拟机要求对象起始地址必须是8字节的整数倍。填充数据不是必须存在的，仅仅是为了字节对齐，这点了解即可。<br>而对于顶部，则是Java头对象，它实现synchronized的锁对象的基础，这点我们重点分析它，一般而言，synchronized使用的锁对象是存储在Java对象头里的，jvm中采用<strong>2个字</strong>来存储对象头(如果对象是数组则会分配<strong>3个字</strong>，多出来的1个字记录的是数组长度)，其主要结构是由Mark Word 和 Class Metadata Address 组成，其结构说明如下表：</li>
</ul>
<table>
<thead>
<tr>
<th>虚拟机位数</th>
<th>头对象结构</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>32&#x2F;64bit</td>
<td>Mark Word</td>
<td>存储对象的hashCode、锁信息或分代年龄或GC标志等信息</td>
</tr>
<tr>
<td>32&#x2F;64bit</td>
<td>Class Metadata Address</td>
<td>类型指针指向对象的类元数据，JVM通过这个指针确定该对象是哪个类的实例。</td>
</tr>
</tbody></table>
<p>其中Mark Word在默认情况下存储着对象的HashCode、分代年龄、锁标记位等以下是32位JVM的Mark Word默认存储结构：</p>
<table>
<thead>
<tr>
<th>锁状态</th>
<th>25bit</th>
<th>4bit</th>
<th>1bit是否是偏向锁</th>
<th>2bit 锁标志位</th>
</tr>
</thead>
<tbody><tr>
<td>无锁状态</td>
<td>对象HashCode</td>
<td>对象分代年龄</td>
<td>0</td>
<td>01</td>
</tr>
</tbody></table>
<p>由于对象头的信息是与对象自身定义的数据没有关系的额外存储成本，因此考虑到JVM的空间效率，Mark Word 被设计成为一个<strong>非固定的数据结构</strong>，以便存储更多有效的数据，它会根据对象本身的状态复用自己的存储空间，如32位JVM下，除了上述列出的Mark Word默认存储结构外，还有如下可能变化的结构：<br><img src="/posts/c1735e0a/MarkWord%E9%9D%9E%E5%9B%BA%E5%AE%9A%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="Mark Word非固定的数据结构"><br>其中轻量级锁和偏向锁是Java 6 对 synchronized 锁进行优化后新增加的，稍后我们会简要分析。这里我们主要分析一下重量级锁也就是通常说synchronized的对象锁，锁标识位为10，其中指针指向的是monitor对象（也称为管程或监视器锁）的起始地址。每个对象都存在着一个 monitor 与之关联，对象与其 monitor 之间的关系有存在多种实现方式，如monitor可以与对象一起创建销毁或当线程试图获取对象锁时自动生成，但当一个 monitor 被某个线程持有后，它便处于锁定状态。在Java虚拟机(HotSpot)中，monitor是由ObjectMonitor实现的，其主要数据结构如下（位于HotSpot虚拟机源码ObjectMonitor.hpp文件，C++实现的）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ObjectMonitor</span>() &#123;</span><br><span class="line">    _header       = <span class="literal">NULL</span>;</span><br><span class="line">    _count        = <span class="number">0</span>; <span class="comment">//记录个数</span></span><br><span class="line">    _waiters      = <span class="number">0</span>,</span><br><span class="line">    _recursions   = <span class="number">0</span>;</span><br><span class="line">    _object       = <span class="literal">NULL</span>;</span><br><span class="line">    _owner        = <span class="literal">NULL</span>;</span><br><span class="line">    _WaitSet      = <span class="literal">NULL</span>; <span class="comment">//处于wait状态的线程，会被加入到_WaitSet</span></span><br><span class="line">    _WaitSetLock  = <span class="number">0</span> ;</span><br><span class="line">    _Responsible  = <span class="literal">NULL</span> ;</span><br><span class="line">    _succ         = <span class="literal">NULL</span> ;</span><br><span class="line">    _cxq          = <span class="literal">NULL</span> ;</span><br><span class="line">    FreeNext      = <span class="literal">NULL</span> ;</span><br><span class="line">    _EntryList    = <span class="literal">NULL</span> ; <span class="comment">//处于等待锁block状态的线程，会被加入到该列表</span></span><br><span class="line">    _SpinFreq     = <span class="number">0</span> ;</span><br><span class="line">    _SpinClock    = <span class="number">0</span> ;</span><br><span class="line">    OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>ObjectMonitor中有两个队列，<code>_WaitSet</code> 和 <code>_EntryList</code>，用来保存ObjectWaiter对象列表( 每个等待锁的线程都会被封装成ObjectWaiter对象)，<code>_owner</code>指向持有ObjectMonitor对象的线程，当多个线程同时访问一段同步代码时，首先会进入<code> _EntryList</code> 集合，当线程获取到对象的monitor 后进入<code> _Owner</code> 区域并把monitor中的owner变量设置为当前线程同时monitor中的计数器count加1，若线程调用 wait() 方法，将释放当前持有的monitor，owner变量恢复为null，count自减1，同时该线程进入 WaitSet 集合中等待被唤醒。若当前线程执行完毕也将释放monitor(锁)并复位变量的值，以便其他线程进入获取monitor(锁)。如下图所示<br><img src="/posts/c1735e0a/ObjectMonitor%E4%B8%AD%E7%9A%84%E4%B8%A4%E4%B8%AA%E9%98%9F%E5%88%97%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png"><br>由此看来，monitor对象存在于每个Java对象的对象头中(存储的指针的指向)，synchronized锁便是通过这种方式获取锁的，也是为什么<strong>Java中任意对象可以作为锁</strong>的原因，同时也是notify&#x2F;notifyAll&#x2F;wait等方法存在于顶级对象Object中的原因(关于这点稍后还会进行分析)，ok~，有了上述知识基础后，下面我们将进一步分析synchronized在字节码层面的具体语义实现。</p>
<h3 id="synchronized代码块底层原理"><a href="#synchronized代码块底层原理" class="headerlink" title="synchronized代码块底层原理"></a>synchronized代码块底层原理</h3><p>现在我们重新定义一个synchronized修饰的同步代码块，在代码块中操作共享变量i，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncCodeBlock</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">syncTask</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//同步代码库</span></span><br><span class="line">       <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">           i++;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译上述代码并使用javap反编译后得到字节码如下(这里我们省略一部分没有必要的信息)：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Classfile</span> <span class="string">/Users/zejian/Downloads/Java8_Action/src/main/java/com/zejian/concurrencys/SyncCodeBlock.class</span></span><br><span class="line">  <span class="string">Last</span> <span class="string">modified</span> <span class="number">2017-6</span><span class="number">-2</span><span class="string">;</span> <span class="string">size</span> <span class="number">426</span> <span class="string">bytes</span></span><br><span class="line">  <span class="string">MD5</span> <span class="string">checksum</span> <span class="string">c80bc322c87b312de760942820b4fed5</span></span><br><span class="line">  <span class="string">Compiled</span> <span class="string">from</span> <span class="string">&quot;SyncCodeBlock.java&quot;</span></span><br><span class="line"><span class="string">public</span> <span class="string">class</span> <span class="string">com.zejian.concurrencys.SyncCodeBlock</span></span><br><span class="line">  <span class="attr">minor version:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">major version:</span> <span class="number">52</span></span><br><span class="line">  <span class="attr">flags:</span> <span class="string">ACC_PUBLIC,</span> <span class="string">ACC_SUPER</span></span><br><span class="line"><span class="attr">Constant pool:</span></span><br><span class="line">  <span class="string">//........省略常量池中数据</span></span><br><span class="line">  <span class="string">//构造函数</span></span><br><span class="line">  <span class="string">public</span> <span class="string">com.zejian.concurrencys.SyncCodeBlock();</span></span><br><span class="line">    <span class="attr">descriptor:</span> <span class="string">()V</span></span><br><span class="line">    <span class="attr">flags:</span> <span class="string">ACC_PUBLIC</span></span><br><span class="line">    <span class="attr">Code:</span></span><br><span class="line">      <span class="string">stack=1,</span> <span class="string">locals=1,</span> <span class="string">args_size=1</span></span><br><span class="line">         <span class="attr">0:</span> <span class="string">aload_0</span></span><br><span class="line">         <span class="attr">1:</span> <span class="string">invokespecial</span> <span class="comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="attr">4:</span> <span class="string">return</span></span><br><span class="line">      <span class="attr">LineNumberTable:</span></span><br><span class="line">        <span class="attr">line 7:</span> <span class="number">0</span></span><br><span class="line">  <span class="string">//===========主要看看syncTask方法实现================</span></span><br><span class="line">  <span class="string">public</span> <span class="string">void</span> <span class="string">syncTask();</span></span><br><span class="line">    <span class="attr">descriptor:</span> <span class="string">()V</span></span><br><span class="line">    <span class="attr">flags:</span> <span class="string">ACC_PUBLIC</span></span><br><span class="line">    <span class="attr">Code:</span></span><br><span class="line">      <span class="string">stack=3,</span> <span class="string">locals=3,</span> <span class="string">args_size=1</span></span><br><span class="line">         <span class="attr">0:</span> <span class="string">aload_0</span></span><br><span class="line">         <span class="attr">1:</span> <span class="string">dup</span></span><br><span class="line">         <span class="attr">2:</span> <span class="string">astore_1</span></span><br><span class="line">         <span class="attr">3:</span> <span class="string">monitorenter</span>  <span class="string">//注意此处，进入同步方法</span></span><br><span class="line">         <span class="attr">4:</span> <span class="string">aload_0</span></span><br><span class="line">         <span class="attr">5:</span> <span class="string">dup</span></span><br><span class="line">         <span class="attr">6:</span> <span class="string">getfield</span>      <span class="comment">#2             // Field i:I</span></span><br><span class="line">         <span class="attr">9:</span> <span class="string">iconst_1</span></span><br><span class="line">        <span class="attr">10:</span> <span class="string">iadd</span></span><br><span class="line">        <span class="attr">11:</span> <span class="string">putfield</span>      <span class="comment">#2            // Field i:I</span></span><br><span class="line">        <span class="attr">14:</span> <span class="string">aload_1</span></span><br><span class="line">        <span class="attr">15:</span> <span class="string">monitorexit</span>   <span class="string">//注意此处，退出同步方法</span></span><br><span class="line">        <span class="attr">16:</span> <span class="string">goto</span>          <span class="number">24</span></span><br><span class="line">        <span class="attr">19:</span> <span class="string">astore_2</span></span><br><span class="line">        <span class="attr">20:</span> <span class="string">aload_1</span></span><br><span class="line">        <span class="attr">21:</span> <span class="string">monitorexit</span> <span class="string">//注意此处，退出同步方法</span></span><br><span class="line">        <span class="attr">22:</span> <span class="string">aload_2</span></span><br><span class="line">        <span class="attr">23:</span> <span class="string">athrow</span></span><br><span class="line">        <span class="attr">24:</span> <span class="string">return</span></span><br><span class="line">      <span class="attr">Exception table:</span></span><br><span class="line">      <span class="string">//省略其他字节码.......</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="attr">SourceFile:</span> <span class="string">&quot;SyncCodeBlock.java&quot;</span></span><br></pre></td></tr></table></figure>
<p>我们主要关注字节码中的如下代码</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>: monitorenter  <span class="regexp">//</span>进入同步方法</span><br><span class="line"><span class="regexp">//</span>..........省略其他  </span><br><span class="line"><span class="number">15</span>: monitorexit   <span class="regexp">//</span>退出同步方法</span><br><span class="line"><span class="number">16</span>: goto          <span class="number">24</span></span><br><span class="line"><span class="regexp">//</span>省略其他.......</span><br><span class="line"><span class="number">21</span>: monitorexit <span class="regexp">//</span>退出同步方法</span><br></pre></td></tr></table></figure>
<p>从字节码中可知同步语句块的实现使用的是 <strong>monitorenter</strong> 和 <strong>monitorexit 指令</strong>，其中monitorenter指令指向同步代码块的开始位置，monitorexit指令则指明同步代码块的结束位置，当执行monitorenter指令时，当前线程将试图获取 objectref(即对象锁) 所对应的 monitor 的持有权，当 objectref 的 monitor 的进入计数器为 0，那线程可以成功取得 monitor，并将计数器值设置为 1，取锁成功。如果当前线程已经拥有 objectref 的 monitor 的持有权，那它可以重入这个 monitor (关于重入性稍后会分析)，重入时计数器的值也会加 1。倘若其他线程已经拥有 objectref 的 monitor 的所有权，那当前线程将被阻塞，直到正在执行线程执行完毕，即monitorexit指令被执行，执行线程将释放 monitor(锁)并设置计数器值为0 ，其他线程将有机会持有 monitor 。值得注意的是编译器将会确保无论方法通过何种方式完成，方法中调用过的每条 monitorenter 指令都有执行其对应 monitorexit 指令，而无论这个方法是正常结束还是异常结束。为了保证在方法异常完成时 monitorenter 和 monitorexit 指令依然可以正确配对执行，编译器会自动产生一个异常处理器，这个异常处理器声明可处理所有的异常，它的目的就是用来执行 monitorexit 指令。<strong>从字节码中也可以看出多了一个monitorexit指令，它就是异常结束时被执行的释放monitor 的指令</strong>。</p>
<h3 id="synchronized方法底层原理"><a href="#synchronized方法底层原理" class="headerlink" title="synchronized方法底层原理"></a>synchronized方法底层原理</h3><p>方法级的同步是<strong>隐式</strong>，即无需通过字节码指令来控制的，它实现在方法调用和返回操作之中。JVM可以从方法常量池中的方法表结构(method_info Structure) 中的 ACC_SYNCHRONIZED 访问标志区分一个方法是否同步方法。当方法调用时，调用指令将会检查方法的ACC_SYNCHRONIZED 访问标志是否被设置，如果设置了，执行线程将先持有monitor（虚拟机规范中用的是管程一词）， 然后再执行方法，最后在方法完成(无论是正常完成还是非正常完成)时释放monitor。在方法执行期间，执行线程持有了monitor，其他任何线程都无法再获得同一个monitor。如果一个同步方法执行期间抛出了异常，并且在方法内部无法处理此异常，那这个同步方法所持有的monitor将在异常抛到同步方法之外时自动释放。下面我们看看字节码层面如何实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncMethod</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">syncTask</span><span class="params">()</span>&#123;</span><br><span class="line">           i++;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用javap反编译后的字节码如下：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">Classfile <span class="regexp">/Users/</span>zejian<span class="regexp">/Downloads/</span>Java8_Action<span class="regexp">/src/m</span>ain<span class="regexp">/java/</span>com<span class="regexp">/zejian/</span>concurrencys/SyncMethod.<span class="keyword">class</span></span><br><span class="line">  Last modified <span class="number">2017</span>-<span class="number">6</span>-<span class="number">2</span>; <span class="keyword">size</span> <span class="number">308</span> bytes</span><br><span class="line">  MD5 checksum f34075a8c059ea65e4cc2fa610e0cd94</span><br><span class="line">  Compiled <span class="keyword">from</span> <span class="string">&quot;SyncMethod.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> com.zejian.concurrencys.SyncMethod</span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//省略没必要的字节码</span></span><br><span class="line">  <span class="comment">//==================syncTask方法======================</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> syncTask();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    <span class="comment">//方法标识ACC_PUBLIC代表public修饰，ACC_SYNCHRONIZED指明该方法为同步方法</span></span><br><span class="line">    flags: ACC_PUBLIC, ACC_SYNCHRONIZED</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: dup</span><br><span class="line">         <span class="number">2</span>: getfield      #<span class="number">2</span>                  <span class="comment">// Field i:I</span></span><br><span class="line">         <span class="number">5</span>: iconst_1</span><br><span class="line">         <span class="number">6</span>: iadd</span><br><span class="line">         <span class="number">7</span>: putfield      #<span class="number">2</span>                  <span class="comment">// Field i:I</span></span><br><span class="line">        <span class="number">10</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">12</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;SyncMethod.java&quot;</span></span><br></pre></td></tr></table></figure>
<p>从字节码中可以看出，synchronized修饰的方法并没有monitorenter指令和monitorexit指令，取得代之的确实是<strong>ACC_SYNCHRONIZED标识</strong>，该标识指明了该方法是一个同步方法，JVM通过该 ACC_SYNCHRONIZED 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。这便是synchronized锁在同步代码块和同步方法上实现的基本原理。同时我们还必须注意到的是在Java早期版本中，synchronized属于重量级锁，效率低下，因为监视器锁（monitor）是依赖于底层的操作系统的Mutex Lock来实现的，而操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，这也是为什么早期的synchronized效率低的原因。庆幸的是在Java 6之后Java官方对从JVM层面对synchronized较大优化，所以现在的synchronized锁效率也优化得很不错了，Java 6之后，为了减少获得锁和释放锁所带来的性能消耗，引入了轻量级锁和偏向锁，接下来我们将简单了解一下Java官方在JVM层面对synchronized锁的优化。</p>
<h3 id="Java虚拟机对synchronized的优化"><a href="#Java虚拟机对synchronized的优化" class="headerlink" title="Java虚拟机对synchronized的优化"></a>Java虚拟机对synchronized的优化</h3><p>锁的状态总共有四种，<strong>无锁状态、偏向锁、轻量级锁和重量级锁</strong>。随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级的重量级锁，但是锁的<strong>升级是单向的</strong>，也就是说只能从低到高升级，不会出现锁的降级，关于重量级锁，前面我们已详细分析过，下面我们将介绍偏向锁和轻量级锁以及JVM的其他优化手段，这里并不打算深入到每个锁的实现和转换过程更多地是阐述Java虚拟机所提供的每个锁的核心优化思想，毕竟涉及到具体过程比较繁琐，如需了解详细过程可以查阅《深入理解Java虚拟机原理》。</p>
<h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><p>偏向锁是Java 6之后加入的新锁，它是一种针对加锁操作的优化手段，经过研究发现，在大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，因此为了<strong>减少同一线程获取锁</strong>(会涉及到一些CAS操作,耗时)的代价而引入偏向锁。偏向锁的核心思想是，如果一个线程获得了锁，那么锁就进入偏向模式，此时Mark Word 的结构也变为偏向锁结构，当这个线程再次请求锁时，无需再做任何同步操作，即获取锁的过程，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能。所以，对于没有锁竞争的场合，偏向锁有很好的优化效果，毕竟极有可能连续多次是同一个线程申请相同的锁。但是对于锁竞争比较激烈的场合，偏向锁就失效了，因为这样场合极有可能每次申请锁的线程都是不相同的，因此这种场合下不应该使用偏向锁，否则会得不偿失，需要注意的是，偏向锁失败后，并不会立即膨胀为重量级锁，而是<strong>先升级为轻量级锁</strong>。下面我们接着了解轻量级锁。</p>
<h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><p>倘若偏向锁失败，虚拟机并不会立即升级为重量级锁，它还会尝试使用一种称为轻量级锁的优化手段(1.6之后加入的)，此时Mark Word 的结构也变为轻量级锁的结构。轻量级锁能够提升程序性能的依据是“<strong>对绝大部分的锁，在整个同步周期内都不存在竞争</strong>”，注意这是经验数据。需要了解的是，轻量级锁所适应的场景是<strong>线程交替执行同步块的场合</strong>，如果存在同一时间访问同一锁的场合，就会导致轻量级锁膨胀为重量级锁。</p>
<h4 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h4><p>轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此自旋锁会假设在不久将来，当前的线程可以获得锁，因此虚拟机会<strong>让当前想要获取锁的线程做几个空循环</strong>(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。</p>
<h4 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h4><p>消除锁是虚拟机另外一种锁的优化，这种优化更彻底，Java虚拟机在JIT编译时(可以简单理解为当某段代码即将第一次被执行时进行编译，又称即时编译)，通过对运行上下文的扫描，去除不可能存在共享资源竞争的锁，通过这种方式消除没有必要的锁，可以节省毫无意义的请求锁时间，如下StringBuffer的append是一个同步方法，但是在add方法中的StringBuffer属于一个局部变量，并且不会被其他线程所使用，因此StringBuffer不可能存在共享资源竞争的情景，JVM会自动将其锁消除。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消除StringBuffer同步锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBufferRemoveSync</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String str1, String str2)</span> &#123;</span><br><span class="line">        <span class="comment">//StringBuffer是线程安全,由于sb只会在append方法中使用,不可能被其他线程引用</span></span><br><span class="line">        <span class="comment">//因此sb属于不可能共享的资源,JVM会自动消除内部的锁</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        sb.append(str1).append(str2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBufferRemoveSync</span> <span class="variable">rmsync</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBufferRemoveSync</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            rmsync.add(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="关于synchronized可能需要了解的关键点"><a href="#关于synchronized可能需要了解的关键点" class="headerlink" title="关于synchronized可能需要了解的关键点"></a>关于synchronized可能需要了解的关键点</h2><h3 id="synchronized的可重入性"><a href="#synchronized的可重入性" class="headerlink" title="synchronized的可重入性"></a>synchronized的可重入性</h3><p>从互斥锁的设计上来说，当一个线程试图操作一个由其他线程持有的对象锁的临界资源时，将会处于阻塞状态，但当一个线程再次请求自己持有对象锁的临界资源时，这种情况属于重入锁，请求将会成功，在java中synchronized是基于<strong>原子性的内部锁机制</strong>，是可重入的，因此在一个线程调用synchronized方法的同时在其方法体内部调用该对象另一个synchronized方法，也就是说一个线程得到一个对象锁后再次请求该对象锁，是允许的，这就是synchronized的可重入性。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountingSync</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> AccountingSync instance=<span class="keyword">new</span> <span class="title class_">AccountingSync</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//this,当前实例对象锁</span></span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="built_in">this</span>)&#123;</span><br><span class="line">                i++;</span><br><span class="line">                increase();<span class="comment">//synchronized的可重入性</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span>&#123;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>(instance);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> <span class="title class_">Thread</span>(instance);</span><br><span class="line">        t1.start();t2.start();</span><br><span class="line">        t1.join();t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正如代码所演示的，在获取当前实例对象锁后进入synchronized代码块执行同步代码，并在代码块中调用了当前实例对象的另外一个synchronized方法，再次请求当前实例锁时，将被允许，进而执行方法体代码，这就是重入锁最直接的体现，需要特别注意另外一种情况，<strong>当子类继承父类时，子类也是可以通过可重入锁调用父类的同步方法</strong>。注意由于synchronized是基于monitor实现的，因此每次重入，monitor中的计数器仍会加1。</p>
<h3 id="线程中断与synchronized"><a href="#线程中断与synchronized" class="headerlink" title="线程中断与synchronized"></a>线程中断与synchronized</h3><h4 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h4><p>正如中断二字所表达的意义，在线程运行(run方法)中间打断它，在Java中，提供了以下3个有关线程中断的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//中断线程（实例方法）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> Thread.interrupt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断线程是否被中断（实例方法）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> Thread.isInterrupted();</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否被中断并清除当前中断状态（静态方法）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> Thread.interrupted();</span><br></pre></td></tr></table></figure>
<p>当一个线程处于被阻塞状态或者试图执行一个阻塞操作时，使用<code>Thread.interrupt()</code>方式中断该线程，注意此时将会抛出一个InterruptedException的异常，同时中断状态将会被复位(由中断状态改为非中断状态)，如下代码将演示该过程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterruputSleepThread3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//while在try中，通过异常中断就可以退出run循环</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                        <span class="comment">//当前线程处于阻塞状态，异常必须捕捉处理，无法往外抛出</span></span><br><span class="line">                        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Interruted When Sleep&quot;</span>);</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">interrupt</span> <span class="operator">=</span> <span class="built_in">this</span>.isInterrupted();</span><br><span class="line">                    <span class="comment">//中断状态被复位</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;interrupt:&quot;</span>+interrupt);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//中断处于阻塞状态的线程</span></span><br><span class="line">        t1.interrupt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出结果:</span></span><br><span class="line"><span class="comment">           Interruted When Sleep</span></span><br><span class="line"><span class="comment">           interrupt:false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上述代码所示，我们创建一个线程，并在线程中调用了sleep方法从而使用线程进入阻塞状态，启动线程后，调用线程实例对象的<code>interrupt</code>方法中断阻塞异常，并抛出InterruptedException异常，此时中断状态也将被复位。这里有些人可能会诧异，为什么不用<code>Thread.sleep(2000);</code>而是用<code>TimeUnit.SECONDS.sleep(2);</code>其实原因很简单，前者使用时并没有明确的单位说明，而后者非常明确表达秒的单位，事实上后者的内部实现最终还是调用了<code>Thread.sleep(2000);</code>，但为了编写的代码语义更清晰，建议使用<code>TimeUnit.SECONDS.sleep(2);</code>的方式，注意TimeUnit是个枚举类型。ok~，除了阻塞中断的情景，我们还可能会遇到处于运行期且非阻塞的状态的线程，这种情况下，直接调用<code>Thread.interrupt()</code>中断线程是不会得到任响应的，如下代码，将无法中断非阻塞状态下的线程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterruputThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;未被中断&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        t1.interrupt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出结果(无限执行):</span></span><br><span class="line"><span class="comment">             未被中断</span></span><br><span class="line"><span class="comment">             未被中断</span></span><br><span class="line"><span class="comment">             未被中断</span></span><br><span class="line"><span class="comment">             ......</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然我们调用了interrupt方法，但线程t1并未被中断，因为处于非阻塞状态的线程需要我们手动进行中断检测并结束程序，改进后代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterruputThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="comment">//判断当前线程是否被中断</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.isInterrupted())&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;线程中断&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;已跳出循环,线程中断!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        t1.interrupt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出结果:</span></span><br><span class="line"><span class="comment">            线程中断</span></span><br><span class="line"><span class="comment">            已跳出循环,线程中断!</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>是的，我们在代码中使用了实例方法isInterrupted判断线程是否已被中断，如果被中断将跳出循环以此结束线程,注意非阻塞状态调用<code>interrupt()</code>并不会导致中断状态重置。综合所述，可以简单总结一下中断两种情况，一种是当线程处于阻塞状态或者试图执行一个阻塞操作时，我们可以使用实例方法interrupt()进行线程中断，执行中断操作后将会抛出interruptException异常(该异常必须捕捉无法向外抛出)并将中断状态复位，另外一种是当线程处于运行状态时，我们也可调用实例方法interrupt()进行线程中断，但同时必须手动判断中断状态，并编写中断线程的代码(其实就是结束run方法体的代码)。有时我们在编码时可能需要兼顾以上两种情况，那么就可以如下编写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//判断当前线程是否已中断,注意interrupted方法是静态的,执行后会对中断状态进行复位</span></span><br><span class="line">    <span class="keyword">while</span> (!Thread.interrupted()) &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="中断与synchronized"><a href="#中断与synchronized" class="headerlink" title="中断与synchronized"></a>中断与synchronized</h4><p>事实上线程的中断操作对于正在等待获取的锁对象的synchronized方法或者代码块并不起作用，也就是对于synchronized来说，如果一个线程在等待锁，那么结果只有两种，要么它获得这把锁继续执行，要么它就保存等待，即使调用中断线程的方法，也不会生效。演示代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zejian on 2017/6/2.</span></span><br><span class="line"><span class="comment"> * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedBlocked</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Trying to call f()&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) <span class="comment">// Never releases lock</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在构造器中创建新线程并启动获取对象锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SynchronizedBlocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//该线程已持有当前实例锁</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                f(); <span class="comment">// Lock acquired by this thread</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//中断判断</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;中断线程!!&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                f();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">SynchronizedBlocked</span> <span class="variable">sync</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedBlocked</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(sync);</span><br><span class="line">        <span class="comment">//启动后调用f()方法,无法获取当前实例锁处于等待状态</span></span><br><span class="line">        t.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//中断线程,无法生效</span></span><br><span class="line">        t.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们在SynchronizedBlocked构造函数中创建一个新线程并启动获取调用f()获取到当前实例锁，由于SynchronizedBlocked自身也是线程，启动后在其run方法中也调用了f()，但由于对象锁被其他线程占用，导致t线程只能等到锁，此时我们调用了t.interrupt();但并不能中断线程。</p>
<h3 id="等待唤醒机制与synchronized"><a href="#等待唤醒机制与synchronized" class="headerlink" title="等待唤醒机制与synchronized"></a>等待唤醒机制与synchronized</h3><p>所谓等待唤醒机制本篇主要指的是notify&#x2F;notifyAll和wait方法，在使用这3个方法时，必须处于synchronized代码块或者synchronized方法中，否则就会抛出IllegalMonitorStateException异常，这是因为调用这几个方法前必须拿到当前对象的监视器monitor对象，也就是说notify&#x2F;notifyAll和wait方法依赖于monitor对象，在前面的分析中，我们知道monitor 存在于对象头的Mark Word 中(存储monitor引用指针)，而synchronized关键字可以获取 monitor ，这也就是为什么notify&#x2F;notifyAll和wait方法必须在synchronized代码块或者synchronized方法调用的原因。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">       obj.wait();</span><br><span class="line">       obj.notify();</span><br><span class="line">       obj.notifyAll();         </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>需要特别理解的一点是，与sleep方法不同的是wait方法调用完成后，线程将被暂停，但wait方法将会释放当前持有的监视器锁(monitor)，直到有线程调用notify&#x2F;notifyAll方法后方能继续执行，而sleep方法只让线程休眠并不释放锁。同时notify&#x2F;notifyAll方法调用后，并不会马上释放监视器锁，而是在相应的synchronized(){}&#x2F;synchronized方法执行结束后才自动释放锁。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>MPAndroidChart</title>
    <url>/posts/e77ac4ba/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://github.com/PhilJay/MPAndroidChart">https://github.com/PhilJay/MPAndroidChart</a></p>
<h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><h2 id="https-www-jianshu-com-p-185e50a70aa7"><a href="#https-www-jianshu-com-p-185e50a70aa7" class="headerlink" title="https://www.jianshu.com/p/185e50a70aa7"></a><a href="https://www.jianshu.com/p/185e50a70aa7">https://www.jianshu.com/p/185e50a70aa7</a></h2><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/posts/e77ac4ba/MPAndroidChart%E6%95%88%E6%9E%9C%E5%9B%BE.webp" alt="img"></p>
<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.github.mikephil.charting.charts.LineChart</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/lineChart&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;@dimen/activity_horizontal_margin&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;@dimen/activity_horizontal_margin&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;@dimen/activity_horizontal_margin&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;220dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_centerInParent</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lineChart = (LineChart) findViewById(R.id.lineChart);</span><br><span class="line">initLineChart(<span class="comment">/**数据集**/</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化曲线图表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 数据集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initLineChart</span><span class="params">(<span class="keyword">final</span> List&lt;Integer&gt; list)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//显示边界</span></span><br><span class="line">	lineChart.setDrawBorders(<span class="literal">false</span>);</span><br><span class="line">	<span class="comment">//设置数据</span></span><br><span class="line">	List&lt;Entry&gt; entries = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); I++)</span><br><span class="line">	&#123;</span><br><span class="line">		entries.add(<span class="keyword">new</span> <span class="title class_">Entry</span>(i, (<span class="type">float</span>) list.get(i)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//一个LineDataSet就是一条线</span></span><br><span class="line">	<span class="type">LineDataSet</span> <span class="variable">lineDataSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LineDataSet</span>(entries, <span class="string">&quot;&quot;</span>);</span><br><span class="line">	<span class="comment">//线颜色</span></span><br><span class="line">	lineDataSet.setColor(Color.parseColor(<span class="string">&quot;#F15A4A&quot;</span>));</span><br><span class="line">	<span class="comment">//线宽度</span></span><br><span class="line">	lineDataSet.setLineWidth(<span class="number">1.6f</span>);</span><br><span class="line">	<span class="comment">//不显示圆点</span></span><br><span class="line">	lineDataSet.setDrawCircles(<span class="literal">false</span>);</span><br><span class="line">	<span class="comment">//线条平滑</span></span><br><span class="line">	lineDataSet.setMode(LineDataSet.Mode.HORIZONTAL_BEZIER);</span><br><span class="line">	<span class="comment">//设置折线图填充</span></span><br><span class="line"><span class="comment">//        lineDataSet.setDrawFilled(true);</span></span><br><span class="line">	<span class="type">LineData</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LineData</span>(lineDataSet);</span><br><span class="line">	<span class="comment">//无数据时显示的文字</span></span><br><span class="line">	lineChart.setNoDataText(<span class="string">&quot;暂无数据&quot;</span>);</span><br><span class="line">	<span class="comment">//折线图不显示数值</span></span><br><span class="line">	data.setDrawValues(<span class="literal">false</span>);</span><br><span class="line">	<span class="comment">//得到X轴</span></span><br><span class="line">	<span class="type">XAxis</span> <span class="variable">xAxis</span> <span class="operator">=</span> lineChart.getXAxis();</span><br><span class="line">	<span class="comment">//设置X轴的位置（默认在上方)</span></span><br><span class="line">	xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);</span><br><span class="line">	<span class="comment">//设置X轴坐标之间的最小间隔</span></span><br><span class="line">	xAxis.setGranularity(<span class="number">1f</span>);</span><br><span class="line">	<span class="comment">//设置X轴的刻度数量，第二个参数为true,将会画出明确数量（带有小数点），但是可能值导致不均匀，默认（6，false）</span></span><br><span class="line">	xAxis.setLabelCount(list.size() / <span class="number">6</span>, <span class="literal">false</span>);</span><br><span class="line">	<span class="comment">//设置X轴的值（最小值、最大值、然后会根据设置的刻度数量自动分配刻度显示）</span></span><br><span class="line">	xAxis.setAxisMinimum(<span class="number">0f</span>);</span><br><span class="line">	xAxis.setAxisMaximum((<span class="type">float</span>) list.size());</span><br><span class="line">	<span class="comment">//不显示网格线</span></span><br><span class="line">	xAxis.setDrawGridLines(<span class="literal">false</span>);</span><br><span class="line">	<span class="comment">// 标签倾斜</span></span><br><span class="line">	xAxis.setLabelRotationAngle(<span class="number">45</span>);</span><br><span class="line">	<span class="comment">//设置X轴值为字符串</span></span><br><span class="line">	xAxis.setValueFormatter(<span class="keyword">new</span> <span class="title class_">IAxisValueFormatter</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> String <span class="title function_">getFormattedValue</span><span class="params">(<span class="type">float</span> value, AxisBase axis)</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> <span class="variable">IValue</span> <span class="operator">=</span> (<span class="type">int</span>) value;</span><br><span class="line">			<span class="type">CharSequence</span> <span class="variable">format</span> <span class="operator">=</span> DateFormat.format(<span class="string">&quot;MM/dd&quot;</span>,</span><br><span class="line">					System.currentTimeMillis()-(<span class="type">long</span>)(list.size()-IValue)*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">			<span class="keyword">return</span> format.toString();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="comment">//得到Y轴</span></span><br><span class="line">	<span class="type">YAxis</span> <span class="variable">yAxis</span> <span class="operator">=</span> lineChart.getAxisLeft();</span><br><span class="line">	<span class="type">YAxis</span> <span class="variable">rightYAxis</span> <span class="operator">=</span> lineChart.getAxisRight();</span><br><span class="line">	<span class="comment">//设置Y轴是否显示</span></span><br><span class="line">	rightYAxis.setEnabled(<span class="literal">false</span>); <span class="comment">//右侧Y轴不显示</span></span><br><span class="line">	<span class="comment">//设置y轴坐标之间的最小间隔</span></span><br><span class="line">	<span class="comment">//不显示网格线</span></span><br><span class="line">	yAxis.setDrawGridLines(<span class="literal">false</span>);</span><br><span class="line">   <span class="comment">//设置Y轴坐标之间的最小间隔</span></span><br><span class="line">	yAxis.setGranularity(<span class="number">1</span>);</span><br><span class="line">	<span class="comment">//设置y轴的刻度数量</span></span><br><span class="line">	<span class="comment">//+2：最大值n就有n+1个刻度，在加上y轴多一个单位长度，为了好看，so+2</span></span><br><span class="line">	yAxis.setLabelCount(Collections.max(list) + <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">	<span class="comment">//设置从Y轴值</span></span><br><span class="line">	yAxis.setAxisMinimum(<span class="number">0f</span>);</span><br><span class="line">	<span class="comment">//+1:y轴多一个单位长度，为了好看</span></span><br><span class="line">	yAxis.setAxisMaximum(Collections.max(list) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//y轴</span></span><br><span class="line">	yAxis.setValueFormatter(<span class="keyword">new</span> <span class="title class_">IAxisValueFormatter</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> String <span class="title function_">getFormattedValue</span><span class="params">(<span class="type">float</span> value, AxisBase axis)</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> <span class="variable">IValue</span> <span class="operator">=</span> (<span class="type">int</span>) value;</span><br><span class="line">			<span class="keyword">return</span> String.valueOf(IValue);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="comment">//图例：得到Lengend</span></span><br><span class="line">	<span class="type">Legend</span> <span class="variable">legend</span> <span class="operator">=</span> lineChart.getLegend();</span><br><span class="line">	<span class="comment">//隐藏Lengend</span></span><br><span class="line">	legend.setEnabled(<span class="literal">false</span>);</span><br><span class="line">	<span class="comment">//隐藏描述</span></span><br><span class="line">	<span class="type">Description</span> <span class="variable">description</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Description</span>();</span><br><span class="line">	description.setEnabled(<span class="literal">false</span>);</span><br><span class="line">	lineChart.setDescription(description);</span><br><span class="line">	<span class="comment">//折线图点的标记</span></span><br><span class="line">	<span class="type">MyMarkerView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyMarkerView</span>(<span class="built_in">this</span>);</span><br><span class="line">	lineChart.setMarker(mv);</span><br><span class="line">	<span class="comment">//设置数据</span></span><br><span class="line">	lineChart.setData(data);</span><br><span class="line">	<span class="comment">//图标刷新</span></span><br><span class="line">	lineChart.invalidate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义折线图标记"><a href="#自定义折线图标记" class="headerlink" title="自定义折线图标记"></a>自定义折线图标记</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMarkerView</span> <span class="keyword">extends</span> <span class="title class_">MarkerView</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView tvContent;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">DecimalFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;##0&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyMarkerView</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, R.layout.layout_markerview);<span class="comment">//这个布局自己定义</span></span><br><span class="line">        tvContent = (TextView) findViewById(R.id.tvContent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//显示的内容</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refreshContent</span><span class="params">(Entry e, Highlight highlight)</span> &#123;</span><br><span class="line">        tvContent.setText(format(e.getX())+<span class="string">&quot;\n&quot;</span>+format.format(e.getY())+<span class="string">&quot;辆&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.refreshContent(e, highlight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//标记相对于折线图的偏移量</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MPPointF <span class="title function_">getOffset</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MPPointF</span>(-(getWidth() / <span class="number">2</span>), -getHeight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//时间格式化（显示今日往前30天的每一天日期）</span></span><br><span class="line">    <span class="keyword">public</span> String  <span class="title function_">format</span><span class="params">(<span class="type">float</span> x)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">CharSequence</span> <span class="variable">format</span> <span class="operator">=</span> DateFormat.format(<span class="string">&quot;MM月dd日&quot;</span>,</span><br><span class="line">                System.currentTimeMillis()-(<span class="type">long</span>) (<span class="number">30</span>-(<span class="type">int</span>)x)*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> format.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h3><ol>
<li>当图表放在scrollview或者listview中，会发现上下不能缩放，出现滑动冲突，解决方法如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解决滑动冲突</span></span><br><span class="line">lineChart.setOnTouchListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnTouchListener()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouch</span><span class="params">(View v, MotionEvent event)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">switch</span> (event.getAction())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">			&#123;</span><br><span class="line">				scrollview.requestDisallowInterceptTouchEvent(<span class="literal">true</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">			<span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">			&#123;</span><br><span class="line">				scrollview.requestDisallowInterceptTouchEvent(<span class="literal">false</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>X轴的标注显示不完整<br> 这里要注意<br> lineChart.setData(data);&#x2F;&#x2F;设置数据<br> 这个方法一定要放在最后</li>
</ol>
<h2 id="https-zhuanlan-zhihu-com-p-22134046"><a href="#https-zhuanlan-zhihu-com-p-22134046" class="headerlink" title="https://zhuanlan.zhihu.com/p/22134046"></a><a href="https://zhuanlan.zhihu.com/p/22134046">https://zhuanlan.zhihu.com/p/22134046</a></h2><h1 id="HorizontalBarChart圆角"><a href="#HorizontalBarChart圆角" class="headerlink" title="HorizontalBarChart圆角"></a>HorizontalBarChart圆角</h1><p><a href="https://blog.csdn.net/qq_40129067/article/details/108799871">https://blog.csdn.net/qq_40129067/article/details/108799871</a></p>
<p>HorizontalBarChartRenderer.java 中</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找到</span></span><br><span class="line"><span class="comment">//c.drawRect(buffer.buffer[j], buffer.buffer[j + 1], buffer.buffer[j + 2],buffer.buffer[j + 3], mRenderPaint);</span></span><br><span class="line"><span class="comment">//改成</span></span><br><span class="line">RectF rectF=<span class="keyword">new</span> <span class="constructor">RectF(<span class="params">buffer</span>.<span class="params">buffer</span>[<span class="params">j</span>], <span class="params">buffer</span>.<span class="params">buffer</span>[<span class="params">j</span> + 1], <span class="params">buffer</span>.<span class="params">buffer</span>[<span class="params">j</span> + 2],<span class="params">buffer</span>.<span class="params">buffer</span>[<span class="params">j</span> + 3])</span>;</span><br><span class="line">c.draw<span class="constructor">RoundRect(<span class="params">rectF</span>,(<span class="params">float</span>)</span><span class="number">90</span>,(<span class="built_in">float</span>)<span class="number">90</span>,mRenderPaint);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>需设置 </p>
<ol>
<li><p>chart.getAxisLeft().setEnabled(true);</p>
</li>
<li><p>chart.setFitBars(true);</p>
</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>图表</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Hilt</title>
    <url>/posts/a37451f0/</url>
    <content><![CDATA[<h2 id="Hilt-的使用"><a href="#Hilt-的使用" class="headerlink" title="Hilt 的使用"></a>Hilt 的使用</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>用 <code>@Inject</code> 对变量进⾏注解，表示「这个变量要用依赖注入的⽅式来加载」： </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inject</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> user: User</span><br></pre></td></tr></table></figure>

<p>用 <code>@Inject</code> 对依赖的类的构造函数进⾏注解，表示「当要提供这个类的对象的时候，调用这个函数来创 </p>
<p>建对象」： </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">constructor</span></span>(<span class="keyword">var</span> id: <span class="built_in">Int</span>, <span class="keyword">var</span> name: String, <span class="keyword">var</span> moo d: String) &#123;</span><br><span class="line">    <span class="meta">@Inject</span> <span class="keyword">constructor</span>() : <span class="keyword">this</span>(<span class="number">1</span>, <span class="string">&quot;扔物线&quot;</span>, <span class="string">&quot;毫⽆波澜&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，要记得用 <code>@AndroidEntryPoint</code> 指出要被注入依赖的组件类： </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AndroidEntryPoint</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123; </span><br><span class="line">    ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以及，用 <code>@HiltAndroidApp</code> 来宣布你的 <code>Application</code> 要使用 Hilt： </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HiltAndroidApp</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HiltApp</span> : <span class="type">Application</span></span>()</span><br></pre></td></tr></table></figure>



<h3 id="作用域（范围内共享数据）"><a href="#作用域（范围内共享数据）" class="headerlink" title="作用域（范围内共享数据）"></a>作用域（范围内共享数据）</h3><p>额外的作用域注解： </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ActivityScoped</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">constructor</span></span>(<span class="keyword">var</span> id: <span class="built_in">Int</span>, <span class="keyword">var</span> name: String, <span class="keyword">var</span> moo d: String) &#123;</span><br><span class="line">    <span class="meta">@Inject</span> <span class="keyword">constructor</span>() : <span class="keyword">this</span>(<span class="number">1</span>, <span class="string">&quot;扔物线&quot;</span>, <span class="string">&quot;毫⽆波澜&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="更多提供依赖的⽅式"><a href="#更多提供依赖的⽅式" class="headerlink" title="更多提供依赖的⽅式"></a>更多提供依赖的⽅式</h2><h3 id="类型绑定"><a href="#类型绑定" class="headerlink" title="类型绑定"></a>类型绑定</h3><p><code>@Binds</code> ： </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span> </span><br><span class="line"><span class="meta">@InstallIn(ActivityComponent::class)</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HiltModule</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Binds</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">bindAny</span><span class="params">(user: <span class="type">User</span>)</span></span>: Any </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="直接提供代码"><a href="#直接提供代码" class="headerlink" title="直接提供代码"></a>直接提供代码</h3><p><code>@Provides</code> ： </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span> </span><br><span class="line"><span class="meta">@InstallIn(ActivityComponent::class)</span> </span><br><span class="line"><span class="keyword">object</span> HiltModule2 &#123; </span><br><span class="line">    <span class="meta">@Provides</span> </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">provideUser</span><span class="params">()</span></span>: User &#123; </span><br><span class="line">        <span class="keyword">val</span> user = User() </span><br><span class="line">        user.name = <span class="string">&quot;丢物线&quot;</span> </span><br><span class="line">        user.mood = <span class="string">&quot;难过&quot;</span> </span><br><span class="line">        <span class="keyword">return</span> user </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="Hilt-有什么用"><a href="#Hilt-有什么用" class="headerlink" title="Hilt 有什么用"></a>Hilt 有什么用</h2><h3 id="什么是依赖注入"><a href="#什么是依赖注入" class="headerlink" title="什么是依赖注入"></a>什么是依赖注入</h3><ul>
<li><p>依赖：⼀个类⾥⾯有变量，这些变量就是这个类的依赖，或者说，这个类依赖这些变量。 </p>
</li>
<li><p>依赖注入：内部依赖的值不由你类⾃⼰来提供，⽽是由外部来交给这个类。</p>
</li>
</ul>
<h3 id="依赖注入有什么用"><a href="#依赖注入有什么用" class="headerlink" title="依赖注入有什么用"></a>依赖注入有什么用</h3><ul>
<li>依赖注入的作用：⾃动加载。 </li>
<li>⾃动加载的作用：数据共享。 </li>
<li>不共享的数据，需要依赖注入吗？ <ul>
<li>多数不需要，有⼀种例外：多处被使用，并且加载⽅式⼀致的。作用是「省事」。</li>
</ul>
</li>
</ul>
<h3 id="Hilt-的作用"><a href="#Hilt-的作用" class="headerlink" title="Hilt 的作用"></a>Hilt 的作用</h3><p>更⽅便地使用依赖注入。 </p>
<p>「那我如果不需要依赖注入呢？」——听完课了怎么可能还这么说，再去听⼀遍课吧。 </p>
<h2 id="Dagger"><a href="#Dagger" class="headerlink" title="Dagger"></a>Dagger</h2><h3 id="Dagger-为什么不好用"><a href="#Dagger-为什么不好用" class="headerlink" title="Dagger 为什么不好用"></a>Dagger 为什么不好用</h3><ol>
<li><p>因为它完备和灵活的功能，导致了⼀些上⼿成本。——可以被 Hilt 解决。 </p>
</li>
<li><p>依赖关系⽆法追踪。——可以被新版 Android Studio 解决。 </p>
</li>
<li><p>很多⼈不懂依赖注入。——需要⾃⼰解决（听完课的可以自己解决）。</p>
</li>
</ol>
<h3 id="Hilt-会有-Dagger-的问题吗？"><a href="#Hilt-会有-Dagger-的问题吗？" class="headerlink" title="Hilt 会有 Dagger 的问题吗？"></a>Hilt 会有 Dagger 的问题吗？</h3><p>不会的。但是有前提： </p>
<ul>
<li>你要用新版 Android Studio </li>
<li>你要听我的，不要乱用，先想明⽩再用</li>
</ul>
<h3 id="Dagger、Koin-和-Hilt-对比"><a href="#Dagger、Koin-和-Hilt-对比" class="headerlink" title="Dagger、Koin 和 Hilt 对比"></a>Dagger、Koin 和 Hilt 对比</h3><ul>
<li><p>易用性：Hilt &#x3D; Koin &gt; Dagger </p>
</li>
<li><p>性能：Dagger &#x3D; Hilt &gt; Koin </p>
</li>
<li><p>依赖图的安全性：Dagger &#x3D; Hilt &gt; Koin </p>
</li>
<li><p>依赖关系的追踪：Dagger &#x3D; Hilt &gt; Koin </p>
</li>
<li><p>编译时性能： Koin &gt; Dagger &#x3D; Hilt </p>
</li>
<li><p>运⾏时性能：Dagger &#x3D; Hilt &gt; Koin</p>
</li>
</ul>
<h2 id="依赖注入和视图绑定"><a href="#依赖注入和视图绑定" class="headerlink" title="依赖注入和视图绑定"></a>依赖注入和视图绑定</h2><p>依赖注入和视图绑定的区别： </p>
<ul>
<li>依赖注入：我要，怎么来的我不管； </li>
<li>视图绑定：我要，⽽且我很明确需要这么这么加载，但我希望你把这件事做了。</li>
</ul>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
  </entry>
  <entry>
    <title>版本相关-Android13</title>
    <url>/posts/710ef989/</url>
    <content><![CDATA[<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><ul>
<li>Android 13适配（Null大佬的）：<a href="https://www.jianshu.com/p/e087c0d3b4a9#comments">https://www.jianshu.com/p/e087c0d3b4a9#comments</a></li>
</ul>
<p><a href="https://juejin.cn/post/7260913522962956347">targetSDK&#x3D;33</a></p>
<ol>
<li><p>如果AS的功能有问题（如无法智能提示）则升级AS。</p>
</li>
<li><p><a href="https://developer.android.google.cn/studio/releases/gradle-plugin?hl=zh-cn#android_gradle_plugin_and_android_studio_compatibility">升级了AS则AGP也要升级</a></p>
<table>
<thead>
<tr>
<th align="left">Android Studio 版本</th>
<th align="left">所需插件版本</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Giraffe | 2022.3.1</td>
<td align="left">3.2-8.1</td>
</tr>
<tr>
<td align="left">Flamingo | 2022.2.1</td>
<td align="left">3.2-8.0</td>
</tr>
<tr>
<td align="left">Electric Eel | 2022.1.1</td>
<td align="left">3.2-7.4</td>
</tr>
<tr>
<td align="left">Dolphin | 2021.3.1</td>
<td align="left">3.2-7.3</td>
</tr>
<tr>
<td align="left">Chipmunk | 2021.2.1</td>
<td align="left">3.2-7.2</td>
</tr>
<tr>
<td align="left">Bumblebee | 2021.1.1</td>
<td align="left">3.2-7.1</td>
</tr>
<tr>
<td align="left">Arctic Fox | 2020.3.1</td>
<td align="left">3.1-7.0</td>
</tr>
</tbody></table>
</li>
<li><p>如果升级到AGP8.1，碰到<code>android LintModelSeveirty requires Java 61, the current is 55</code>那么jdk也要升级到17</p>
<p>JDK的内部版本如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">49</span> = Java <span class="number">5</span> ; <span class="number">50</span> = Java <span class="number">6</span> ; <span class="number">51</span> = Java <span class="number">7</span> ; <span class="number">52</span> = Java <span class="number">8</span></span><br><span class="line"><span class="number">53</span> = Java <span class="number">9</span> ; <span class="number">54</span> = Java <span class="number">10</span></span><br><span class="line"><span class="number">55</span> = Java <span class="number">11</span> ; <span class="number">56</span> = Java <span class="number">12</span> ; <span class="number">57</span> = Java <span class="number">13</span> ; <span class="number">58</span> = Java <span class="number">14</span>; <span class="number">59</span> = Java <span class="number">15</span> ; <span class="number">60</span> = Java <span class="number">16</span></span><br><span class="line"><span class="number">61</span> = Java <span class="number">17</span> ; <span class="number">62</span> = Java <span class="number">18</span> ; <span class="number">63</span> = Java <span class="number">19</span> ; <span class="number">64</span> = Java <span class="number">20</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">最低版本</th>
<th align="left">默认版本</th>
<th align="left">备注</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">Gradle</td>
<td align="left">8.0</td>
<td align="left">8.0</td>
<td>如需了解详情，请参阅<a href="https://developer.android.google.cn/studio/releases/gradle-plugin?buildsystem=ndk-build&hl=zh-cn#updating-gradle">更新 Gradle</a>。</td>
</tr>
<tr>
<td align="left">SDK Build Tools</td>
<td align="left">33.0.1</td>
<td align="left">33.0.1</td>
<td><a href="https://developer.android.google.cn/studio/intro/update?hl=zh-cn#sdk-manager">安装</a>或<a href="https://developer.android.google.cn/studio/releases/build-tools?hl=zh-cn">配置</a> SDK Build Tools。</td>
</tr>
<tr>
<td align="left">NDK</td>
<td align="left">不适用</td>
<td align="left">25.1.8937393</td>
<td><a href="https://developer.android.google.cn/studio/projects/install-ndk?hl=zh-cn#specific-version">安装</a>或<a href="https://developer.android.google.cn/studio/projects/install-ndk?hl=zh-cn#apply-specific-version">配置</a>其他版本的 NDK。</td>
</tr>
<tr>
<td align="left">JDK</td>
<td align="left">17</td>
<td align="left">17</td>
<td>如需了解详情，请参阅<a href="https://developer.android.google.cn/studio/intro/studio-config?hl=zh-cn#jdk">设置 JDK 版本</a>。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">最低版本</th>
<th align="left">默认版本</th>
<th align="left">备注</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">Gradle</td>
<td align="left">7.5</td>
<td align="left">7.5</td>
<td>如需了解详情，请参阅<a href="https://developer.android.google.cn/studio/releases/gradle-plugin?buildsystem=ndk-build&hl=zh-cn#updating-gradle">更新 Gradle</a>。</td>
</tr>
<tr>
<td align="left">SDK Build Tools</td>
<td align="left">30.0.3</td>
<td align="left">30.0.3</td>
<td><a href="https://developer.android.google.cn/studio/intro/update?hl=zh-cn#sdk-manager">安装</a>或<a href="https://developer.android.google.cn/studio/releases/build-tools?hl=zh-cn">配置</a> SDK Build Tools。</td>
</tr>
<tr>
<td align="left">NDK</td>
<td align="left">不适用</td>
<td align="left">23.1.7779620</td>
<td><a href="https://developer.android.google.cn/studio/projects/install-ndk?hl=zh-cn#specific-version">安装</a>或<a href="https://developer.android.google.cn/studio/projects/install-ndk?hl=zh-cn#apply-specific-version">配置</a>其他版本的 NDK。</td>
</tr>
<tr>
<td align="left">JDK</td>
<td align="left">11</td>
<td align="left">11</td>
<td>如需了解详情，请参阅<a href="https://developer.android.google.cn/studio/intro/studio-config?hl=zh-cn#jdk">设置 JDK 版本</a>。</td>
</tr>
</tbody></table>
<p>如果用新的AS，则可以直接使用AS内置的JDK即可。在AS中设置：<code>Settings&gt;Build,Execution,Deployment&gt;Build Tools&gt;Gradle&gt;右侧Gradle JDK</code>里选中<code>jbr-17</code>即可（jbr是指jetbrains runtime）</p>
</li>
<li><p>kotlin与AGP是相互独立的，可以不用升级kotlin（<code>kotlin-android-extensions</code>在kotlin 1.8被remove了，升级到kotlin 1.8就得用<code>findViewById</code>或是<code>ViewBinding</code>了）</p>
</li>
</ol>
<h1 id="Android13"><a href="#Android13" class="headerlink" title="Android13"></a>Android13</h1><h2 id="Android-13版本特性"><a href="#Android-13版本特性" class="headerlink" title="Android 13版本特性"></a>Android 13版本特性</h2><h3 id="相册权限"><a href="#相册权限" class="headerlink" title="相册权限"></a>相册权限</h3><p><strong>如果是 TargetSDK 在 Android 13 以下，不需要处理，如果在 Android 13 以及以上 ，需要增加申请权限</strong>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_MEDIA_IMAGES&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_MEDIA_AUDIO&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_MEDIA_VIDEO&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>链接：<a href="https://juejin.cn/post/7099762078977622053">https://juejin.cn/post/7099762078977622053</a></p>
</blockquote>
<h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><h1 id="升级API相关问题"><a href="#升级API相关问题" class="headerlink" title="升级API相关问题"></a>升级API相关问题</h1>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓版本</tag>
      </tags>
  </entry>
  <entry>
    <title>UI-进度条</title>
    <url>/posts/17f39621/</url>
    <content><![CDATA[<h1 id="自定义酷炫的进度条"><a href="#自定义酷炫的进度条" class="headerlink" title="自定义酷炫的进度条"></a><a href="https://blog.csdn.net/daydayup05/article/details/122275983">自定义酷炫的进度条</a></h1><h2 id="效果图：【目前没有接入外部数据，是自身有的进度在跳】"><a href="#效果图：【目前没有接入外部数据，是自身有的进度在跳】" class="headerlink" title="效果图：【目前没有接入外部数据，是自身有的进度在跳】"></a>效果图：【目前没有接入外部数据，是自身有的进度在跳】</h2><p><img src="/posts/17f39621/%E7%BB%9A%E4%B8%BD%E7%9A%84%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%95%88%E6%9E%9C%E5%9B%BE.gif" alt="img"></p>
<p>源码地址：<a href="https://gitee.com/tu_erhongjiang/android-progress-bar">https://gitee.com/tu_erhongjiang/android-progress-bar</a></p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="绘制背景圆形矩形"><a href="#绘制背景圆形矩形" class="headerlink" title="绘制背景圆形矩形"></a>绘制背景圆形矩形</h3><p>画出一个圆形矩形，RectF里面传递的是矩形左上角和右下角的xy坐标，用来确定矩形的位置和大小，然后在内部画出一个原型矩形：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">drawBackground</span><span class="params">(Canvas canvas)</span>&#123;</span><br><span class="line">   <span class="comment">//圆角矩形</span></span><br><span class="line">    <span class="type">RectF</span> <span class="variable">rectF</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RectF</span>(padding, padding, mWidth - padding, mHeight - padding);</span><br><span class="line">    canvas.drawRoundRect(rectF, round, round, mPaintRoundRect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="绘制进度"><a href="#绘制进度" class="headerlink" title="绘制进度"></a>绘制进度</h3><p>里面的进度条也是圆形矩形，不过进度条的画笔是实心的。内部进度条矩形的大小略小于外面的矩形（这里是减掉strokeWidth）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">drawProgress</span><span class="params">(Canvas canvas)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (process!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">RectF</span> <span class="variable">rectProgress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RectF</span>(padding + strokeWidth, padding + strokeWidth, process, mHeight - padding - strokeWidth);<span class="comment">//内部进度条</span></span><br><span class="line">        canvas.drawRoundRect(rectProgress, round, round, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="绘制文字"><a href="#绘制文字" class="headerlink" title="绘制文字"></a>绘制文字</h3><p><code>getWidth()/2</code>是中间位置的x坐标，但从这里开始绘制文字的话不能实现居中的效果，需要计算出文字的长度再把文字整体左移。<code>mTxtWidth/2</code>是文字的中心位置，也就是把文字的中心位置移到矩形中心位置就可以实现居中的效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateText</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">finishedText</span> <span class="operator">=</span> getResources().getString(R.string.finished);</span><br><span class="line">    <span class="type">String</span> <span class="variable">defaultText</span> <span class="operator">=</span> getResources().getString(R.string.defaultText);</span><br><span class="line">    <span class="type">int</span> <span class="variable">percent</span> <span class="operator">=</span> (<span class="type">int</span>) (process / (mWidth - padding - strokeWidth) * <span class="number">100</span>);</span><br><span class="line">    Paint.<span class="type">FontMetrics</span> <span class="variable">fm</span> <span class="operator">=</span> mPaintText.getFontMetrics();</span><br><span class="line">    <span class="type">int</span> <span class="variable">mTxtWidth</span> <span class="operator">=</span> (<span class="type">int</span>) mPaintText.measureText(finishedText, <span class="number">0</span>, defaultText.length());</span><br><span class="line">    <span class="type">int</span> <span class="variable">mTxtHeight</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil(fm.descent - fm.ascent);</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> getWidth() / <span class="number">2</span> - mTxtWidth / <span class="number">2</span>; <span class="comment">//文字在画布中的x坐标</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> getHeight() / <span class="number">2</span> + mTxtHeight / <span class="number">4</span>; <span class="comment">//文字在画布中的y坐标</span></span><br><span class="line">    <span class="keyword">if</span> (percent &lt; <span class="number">100</span>) &#123;</span><br><span class="line">        canvas.drawText(percent + <span class="string">&quot;%&quot;</span>, x, y, mPaintText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        canvas.drawText(finishedText, x, y, mPaintText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="加入动画"><a href="#加入动画" class="headerlink" title="加入动画"></a>加入动画</h3><p>让进度条动起来，这里用到的是属性动画中的<code>ValueAnimator</code>，这种动画不能直接修改view，类似于timer，需要我们传递一个数值范围和执行时间。比如说3秒内从1加到100，然后在接口回调时拿到当前的进度，执行view的<code>invalidate()</code>方法属性<code>UI</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//属性动画</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ValueAnimator</span> <span class="variable">valueAnimator</span> <span class="operator">=</span> ValueAnimator.ofFloat(<span class="number">0</span>, mWidth - padding - strokeWidth);</span><br><span class="line">    valueAnimator.setDuration(duration);</span><br><span class="line">    valueAnimator.setInterpolator(<span class="keyword">new</span> <span class="title class_">DecelerateInterpolator</span>());</span><br><span class="line">    valueAnimator.addUpdateListener(animation -&gt; &#123;</span><br><span class="line">        process = (<span class="type">float</span>) animation.getAnimatedValue();</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;);</span><br><span class="line">    valueAnimator.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.animation.ValueAnimator;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.RectF;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.util.TypedValue;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.DecelerateInterpolator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HorizontalProgressView</span> <span class="keyword">extends</span> <span class="title class_">View</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line">    <span class="keyword">private</span> Paint mPaintRoundRect;</span><br><span class="line">    <span class="keyword">private</span> Paint mPaintText;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mHeight;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">padding</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">strokeWidth</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">textSize</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">duration</span> <span class="operator">=</span> <span class="number">3500</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> round;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> process;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HorizontalProgressView</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HorizontalProgressView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HorizontalProgressView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化画笔</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        mPaintRoundRect = <span class="keyword">new</span> <span class="title class_">Paint</span>();<span class="comment">//圆角矩形</span></span><br><span class="line">        mPaintRoundRect.setColor(getResources().getColor(R.color.back));<span class="comment">//圆角矩形颜色</span></span><br><span class="line">        mPaintRoundRect.setAntiAlias(<span class="literal">true</span>);<span class="comment">// 抗锯齿效果</span></span><br><span class="line">        mPaintRoundRect.setStyle(Paint.Style.STROKE);<span class="comment">//设置画笔样式</span></span><br><span class="line">        mPaintRoundRect.setStrokeWidth(strokeWidth);<span class="comment">//设置画笔宽度</span></span><br><span class="line"></span><br><span class="line">        mPaint = <span class="keyword">new</span> <span class="title class_">Paint</span>();</span><br><span class="line">        mPaint.setColor(getResources().getColor(R.color.inner));</span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);</span><br><span class="line">        mPaint.setAntiAlias(<span class="literal">true</span>);</span><br><span class="line">        mPaint.setStrokeWidth(strokeWidth);</span><br><span class="line"></span><br><span class="line">        mPaintText = <span class="keyword">new</span> <span class="title class_">Paint</span>();</span><br><span class="line">        mPaintText.setAntiAlias(<span class="literal">true</span>);</span><br><span class="line">        mPaintText.setStyle(Paint.Style.FILL);</span><br><span class="line">        mPaintText.setColor(getResources().getColor(R.color.back));</span><br><span class="line">        mPaintText.setTextSize(sp2px(textSize));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPadding</span><span class="params">(<span class="type">int</span> padding)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.padding = padding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrokeWidth</span><span class="params">(<span class="type">int</span> strokeWidth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strokeWidth = strokeWidth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTextSize</span><span class="params">(<span class="type">int</span> textSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.textSize = textSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDuration</span><span class="params">(<span class="type">long</span> duration)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.duration = duration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">widthSpecMode</span> <span class="operator">=</span> MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">heightSpecMode</span> <span class="operator">=</span> MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">widthSpecSize</span> <span class="operator">=</span> MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        <span class="type">int</span> <span class="variable">heightSpecSize</span> <span class="operator">=</span> MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">        <span class="comment">//MeasureSpec.EXACTLY，精确尺寸</span></span><br><span class="line">        <span class="keyword">if</span> (widthSpecMode == MeasureSpec.EXACTLY || widthSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">            mWidth = widthSpecSize;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mWidth = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//MeasureSpec.AT_MOST，最大尺寸，只要不超过父控件允许的最大尺寸即可，MeasureSpec.UNSPECIFIED未指定尺寸</span></span><br><span class="line">        <span class="keyword">if</span> (heightSpecMode == MeasureSpec.AT_MOST || heightSpecMode == MeasureSpec.UNSPECIFIED) &#123;</span><br><span class="line">            mHeight = defaultHeight();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mHeight = heightSpecSize;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置控件实际大小</span></span><br><span class="line">        round = mHeight / <span class="number">2</span>;<span class="comment">//圆角半径</span></span><br><span class="line">        setMeasuredDimension(mWidth, mHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line">        drawBackground(canvas);<span class="comment">//绘制背景矩形</span></span><br><span class="line">        drawProgress(canvas);<span class="comment">//绘制进度</span></span><br><span class="line">        updateText(canvas);<span class="comment">//处理文字</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">drawBackground</span><span class="params">(Canvas canvas)</span>&#123;</span><br><span class="line">        <span class="type">RectF</span> <span class="variable">rectF</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RectF</span>(padding, padding, mWidth - padding, mHeight - padding);<span class="comment">//圆角矩形</span></span><br><span class="line">        canvas.drawRoundRect(rectF, round, round, mPaintRoundRect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">drawProgress</span><span class="params">(Canvas canvas)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (process!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">RectF</span> <span class="variable">rectProgress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RectF</span>(padding + strokeWidth, padding + strokeWidth, process, mHeight - padding - strokeWidth);<span class="comment">//内部进度条</span></span><br><span class="line">            canvas.drawRoundRect(rectProgress, round, round, mPaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateText</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">finishedText</span> <span class="operator">=</span> getResources().getString(R.string.finished);</span><br><span class="line">        <span class="type">String</span> <span class="variable">defaultText</span> <span class="operator">=</span> getResources().getString(R.string.defaultText);</span><br><span class="line">        <span class="type">int</span> <span class="variable">percent</span> <span class="operator">=</span> (<span class="type">int</span>) (process / (mWidth - padding - strokeWidth) * <span class="number">100</span>);</span><br><span class="line">        Paint.<span class="type">FontMetrics</span> <span class="variable">fm</span> <span class="operator">=</span> mPaintText.getFontMetrics();</span><br><span class="line">        <span class="type">int</span> <span class="variable">mTxtWidth</span> <span class="operator">=</span> (<span class="type">int</span>) mPaintText.measureText(finishedText, <span class="number">0</span>, defaultText.length());</span><br><span class="line">        <span class="type">int</span> <span class="variable">mTxtHeight</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil(fm.descent - fm.ascent);</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> getWidth() / <span class="number">2</span> - mTxtWidth / <span class="number">2</span>; <span class="comment">//文字在画布中的x坐标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> getHeight() / <span class="number">2</span> + mTxtHeight / <span class="number">4</span>; <span class="comment">//文字在画布中的y坐标</span></span><br><span class="line">        <span class="keyword">if</span> (percent &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            canvas.drawText(percent + <span class="string">&quot;%&quot;</span>, x, y, mPaintText);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            canvas.drawText(finishedText, x, y, mPaintText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性动画</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ValueAnimator</span> <span class="variable">valueAnimator</span> <span class="operator">=</span> ValueAnimator.ofFloat(<span class="number">0</span>, mWidth - padding - strokeWidth);</span><br><span class="line">        valueAnimator.setDuration(duration);</span><br><span class="line">        valueAnimator.setInterpolator(<span class="keyword">new</span> <span class="title class_">DecelerateInterpolator</span>());</span><br><span class="line">        valueAnimator.addUpdateListener(animation -&gt; &#123;</span><br><span class="line">            process = (<span class="type">float</span>) animation.getAnimatedValue();</span><br><span class="line">            invalidate();</span><br><span class="line">        &#125;);</span><br><span class="line">        valueAnimator.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">sp2px</span><span class="params">(<span class="type">int</span> sp)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, sp,</span><br><span class="line">                                               getResources().getDisplayMetrics());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进度条默认高度，未设置高度时使用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">defaultHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">scale</span> <span class="operator">=</span> getContext().getResources().getDisplayMetrics().density;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (<span class="number">20</span> * scale + <span class="number">0.5f</span> * (<span class="number">20</span> &gt;= <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="网上库"><a href="#网上库" class="headerlink" title="网上库"></a>网上库</h1><p><a href="https://blog.csdn.net/shenggaofei/article/details/101721895">https://blog.csdn.net/shenggaofei/article/details/101721895</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>进度条</tag>
      </tags>
  </entry>
  <entry>
    <title>Uniapp与原生</title>
    <url>/posts/d1dd5ac9/</url>
    <content><![CDATA[<p><a name="这是要跳转的地方的锚点"></a></p>
<h1 id="Uniapp和原生sayhello交互"><a href="#Uniapp和原生sayhello交互" class="headerlink" title="Uniapp和原生sayhello交互"></a><a href="https://blog.csdn.net/qq_37980878/article/details/123154196">Uniapp和原生sayhello交互</a></h1><blockquote>
<p>把uniapp的resources代码导出给安卓使用</p>
</blockquote>
<h2 id="HBuilderX（写uniapp代码）"><a href="#HBuilderX（写uniapp代码）" class="headerlink" title="HBuilderX（写uniapp代码）"></a>HBuilderX（写uniapp代码）</h2><ol>
<li><p>下载HBuilderX稳定版（与上述原文发布时候的不大一样了） <a href="https://www.dcloud.io/hbuilderx.html">https://www.dcloud.io/hbuilderx.html</a></p>
<p>我下载的是 3.7.8.20230323 版本</p>
</li>
<li><p>用HBuilderX新建项目，选择默认模版即可</p>
</li>
<li><p>更改 <code>pages/index/index.vue</code> 内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;view class=&quot;content&quot;&gt;</span><br><span class="line">		&lt;image class=&quot;logo&quot; src=&quot;/static/logo.png&quot;&gt;&lt;/image&gt;</span><br><span class="line">		&lt;view class=&quot;text-area&quot;&gt;</span><br><span class="line">			&lt;text class=&quot;title&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/text&gt;</span><br><span class="line">		&lt;/view&gt;</span><br><span class="line">		&lt;button type=&quot;default&quot; @click=&quot;sayhello&quot;&gt;调用原生方法-异步回调（调用的方法名sayhello与安卓中的方法名一致）&lt;/button&gt;</span><br><span class="line">	&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	const myModule = uni.requireNativePlugin(&#x27;MyModule&#x27;) //MyModule与Android中建的插件名一致</span><br><span class="line">	export default &#123;</span><br><span class="line">		data() &#123;</span><br><span class="line">			return &#123;</span><br><span class="line">				title: &#x27;Hello&#x27;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		onLoad() &#123;</span><br><span class="line"></span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line">			sayhello() &#123;</span><br><span class="line">				myModule.sayhello(&#123; //这是给安卓方法传参，并toast回调的内容</span><br><span class="line">					&#x27;name&#x27;: &#x27;张三&#x27;,</span><br><span class="line">					&#x27;age&#x27;: 20,</span><br><span class="line">					&#x27;words&#x27;: &quot;你好!&quot;</span><br><span class="line">				&#125;, (ret) =&gt; &#123;</span><br><span class="line">					uni.showToast(&#123;</span><br><span class="line">						title: ret</span><br><span class="line">					&#125;)</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">	.content &#123;</span><br><span class="line">		display: flex;</span><br><span class="line">		flex-direction: column;</span><br><span class="line">		align-items: center;</span><br><span class="line">		justify-content: center;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	.logo &#123;</span><br><span class="line">		height: 200rpx;</span><br><span class="line">		width: 200rpx;</span><br><span class="line">		margin-top: 200rpx;</span><br><span class="line">		margin-left: auto;</span><br><span class="line">		margin-right: auto;</span><br><span class="line">		margin-bottom: 50rpx;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	.text-area &#123;</span><br><span class="line">		display: flex;</span><br><span class="line">		justify-content: center;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	.title &#123;</span><br><span class="line">		font-size: 36rpx;</span><br><span class="line">		color: #8f8f94;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成本地打包app资源备用</p>
<p>工具栏：发行》原生App-本地打包(L)》生成本地打包App资源(R)</p>
<p>生成的内容在 <code>unpackage/resources/</code> 文件夹下，这个文件夹下的内容等下要复制到 AndroidStudio 中使用</p>
<blockquote>
<p>这个步骤会要求填写 appid（uniapp唯一码），有链接可以跳到 DCloud 平台</p>
</blockquote>
</li>
</ol>
<h2 id="在DCloud平台进行注册"><a href="#在DCloud平台进行注册" class="headerlink" title="在DCloud平台进行注册"></a>在DCloud平台进行注册</h2><ol>
<li><p>在<a href="https://dev.dcloud.net.cn/pages/app/list">开发者中心</a>，点击刚刚生成的应用的名称。</p>
</li>
<li><p>点“Android云端证书”，生成证书。这个证书下载下来【就是Android那边的 jks 签名文件。等下复制到Android项目app目录下】</p>
</li>
<li><p>本地命令行窗口：使用 keytool 命令查看 SHA1、SHA256</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">keytool -v -<span class="type">list</span> -keystore 下载下来的keystore的绝对路径</span><br></pre></td></tr></table></figure>
</li>
<li><p>把 SHA1、SHA256填写到 开发者中心》各平台信息，点提交之后，可以查看“离线打包key”【等下复制到 Android 项目的 <code>AndroidManifest.xml</code>中替换<code>dcloud_appkey</code>的value值】</p>
</li>
</ol>
<h2 id="Android项目"><a href="#Android项目" class="headerlink" title="Android项目"></a>Android项目</h2><ol>
<li><p><a href="https://nativesupport.dcloud.net.cn/AppDocs/download/android.html#">下载官方demo</a> ：<br>2023年03月23日发布——HBuilderX（3.7.8.20230323）</p>
<ul>
<li><a href="https://pan.baidu.com/s/14SZ-CjlbaNtGHk3CpamgXQ">百度云</a>，提取码: 7rfu</li>
<li><a href="https://caiyun.139.com/m/i?115Co8vWaK6Kr">和彩云</a>，提取码: mUU4</li>
</ul>
</li>
<li><p>解压后，用Android Studio打开 <code>UniPlugin-Hello-AS</code> 项目</p>
</li>
<li><p>创建自己的module</p>
<p><img src="/posts/d1dd5ac9/UniPluginHelloAS-%E9%85%8D%E7%BD%AE.png" alt="创建自己的module"></p>
<p>在刚创建的module的<code>build.gradle</code>中的<code>dependencies</code>内添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compileOnly fileTree(<span class="attr">dir:</span> <span class="string">&#x27;../app/libs&#x27;</span>, <span class="attr">include:</span> [<span class="string">&#x27;uniapp-v8-release.aar&#x27;</span>])</span><br><span class="line"> </span><br><span class="line">compileOnly <span class="string">&#x27;androidx.recyclerview:recyclerview:1.0.0&#x27;</span></span><br><span class="line">compileOnly <span class="string">&#x27;androidx.legacy:legacy-support-v4:1.0.0&#x27;</span></span><br><span class="line">compileOnly <span class="string">&#x27;androidx.appcompat:appcompat:1.0.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.alibaba:fastjson:1.1.46.android&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.facebook.fresco:fresco:1.13.0&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>app/build.gradle</code>中的<code>dependencies</code> 内添加 <code>implementation project(&#39;:mylibrary&#39;)</code></p>
</li>
<li><p>把 <code>app/src/main/assets/apps</code> 下的 <code>__UNIX_E_</code> 删除，把HbuilderX生成的本地资源（HBuilderX项目下<code>unpackage/resources/</code>文件夹下的内容）复制进来</p>
</li>
<li><p><code>app/src/main/assets/data/dcloud_control.xml</code>文件修改 appid（<code>__UNI__7F90CC3</code>），跟复制到 <code>app/src/main/assets/apps</code>的名称一致</p>
</li>
<li><p>写Andorid代码，供uniapp调用【注意名称】</p>
<p>在我们刚创建的module中写代码【<code>mylibrary/src/main/java/com.ab.mylibrary</code>下新建MyModule类】：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ab.mylibrary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.dcloud.feature.uniapp.annotation.UniJSMethod;</span><br><span class="line"><span class="keyword">import</span> io.dcloud.feature.uniapp.bridge.UniJSCallback;</span><br><span class="line"><span class="keyword">import</span> io.dcloud.feature.uniapp.common.UniModule;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * desc   :</span></span><br><span class="line"><span class="comment"> * author : shenbh</span></span><br><span class="line"><span class="comment"> * time   : 2023-3-27 08:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyModule</span> <span class="keyword">extends</span> <span class="title class_">UniModule</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span><span class="string">&quot;MyModule&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@UniJSMethod(uiThread = true)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayhello</span><span class="params">(JSONObject options, UniJSCallback callback)</span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;testAsyncFunc--&quot;</span> + options);</span><br><span class="line">        <span class="keyword">if</span> (callback != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span>  <span class="operator">=</span>options.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            Toast.makeText(mUniSDKInstance.getContext(), name, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">            data.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">            data.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;我是李四&quot;</span>);</span><br><span class="line">            callback.invoke(data);</span><br><span class="line"><span class="comment">//            callback.invokeAndKeepAlive(data);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>app/src/main/assets/dcloud_uniplugins.json</code>文件中添加我们创建的module</p>
<p><img src="/posts/d1dd5ac9/UniPluginHelloAS-Android%E4%BB%A3%E7%A0%81%E4%B8%8Adcloud_uniplugins%E9%85%8D%E7%BD%AE.png" alt="image-20230327101039199"></p>
</li>
</ol>
<h1 id="把Android项目弄成插件给uniapp调用"><a href="#把Android项目弄成插件给uniapp调用" class="headerlink" title="把Android项目弄成插件给uniapp调用"></a><a href="./https://blog.csdn.net/haduwi/article/details/124422976">把Android项目弄成插件给uniapp调用</a></h1><p>接上述的 <a href="./#%E8%BF%99%E6%98%AF%E8%A6%81%E8%B7%B3%E8%BD%AC%E7%9A%84%E5%9C%B0%E6%96%B9%E7%9A%84%E9%94%9A%E7%82%B9">Uniapp和原生sayhello交互</a></p>
<ol>
<li><p>AS打包生成原生插件aar</p>
<p>AS右侧Gradle》自己创建的module下的other》bundleReleaseAar。双击进行aar发行版打包</p>
<p>生成在<code>自己创建的module下build/outputs/aar</code>路径下</p>
<p><img src="/posts/d1dd5ac9/UniPluginHelloAS-%E6%89%93%E5%87%BA%E6%9D%A5%E7%9A%84aar%E5%8C%85.png" alt="image-20230328142343033"></p>
</li>
<li><p>HBuilderX引入aar</p>
<p><img src="/posts/d1dd5ac9/UniPluginHelloAS-uniapp%E4%BB%A3%E7%A0%81%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE2.png" alt="image-20230328144447755"></p>
</li>
<li><p>HBuilderX选择本地插件</p>
<p><img src="/posts/d1dd5ac9/UniPluginHelloAS-uniapp%E4%BB%A3%E7%A0%81%E4%B8%8A%E7%9A%84manifest%E9%85%8D%E7%BD%AE.png" alt="image-20230328144803832"></p>
</li>
<li><p>制作自定义调试基座</p>
<p><img src="/posts/d1dd5ac9/UniPluginHelloAS-uniapp%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BF%90%E8%A1%8C.png" alt="image-20230328145003095"></p>
<blockquote>
<p><strong>注意：如果出现已经制作自定义调试基座，但是没有运行基座选择这一选项的情况。请重新进行自定义基座打包，直到出现运行基座选择为止！</strong></p>
</blockquote>
<p><img src="/posts/d1dd5ac9/UniPluginHelloAS-uniapp%E4%BB%A3%E7%A0%81%E7%9A%84%E6%89%93%E5%8C%85.png" alt="image-20230328145457629"></p>
</li>
</ol>
<blockquote>
<p>注意！！！</p>
<ol>
<li>uniapp测试aar包的时候，<strong>每次</strong>变动aar包内容都要重新<strong>云打包</strong>！！！再用自定义调试基座运行</li>
<li>uniapp云打包要求只能有一个aar包</li>
</ol>
</blockquote>
<h1 id="代码（原生插件）"><a href="#代码（原生插件）" class="headerlink" title="代码（原生插件）"></a>代码（原生插件）</h1><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="app运行后，未配置appkey或配置错误"><a href="#app运行后，未配置appkey或配置错误" class="headerlink" title="app运行后，未配置appkey或配置错误"></a>app运行后，未配置appkey或配置错误</h2><p>解决：</p>
<ol>
<li><p>app&#x2F;src&#x2F;main&#x2F;AndroidManifest.xml中，替换成具体的值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:name</span>=<span class="string">&quot;dcloud_appkey&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:value</span>=<span class="string">&quot;4201732dc35d8c819f0556c7ea9e0dd9&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>app&#x2F;src&#x2F;main&#x2F;assets&#x2F;：替换apps的内容，修改<code>data/dcloud_control.xml</code>的appid值，修改<code>dcloud_uniplugins.json</code>内容</p>
<p><img src="/posts/d1dd5ac9/UniPluginHelloAS-Android%E4%BB%A3%E7%A0%81%E4%B8%8Adcloud_control%E9%85%8D%E7%BD%AE.png" alt="image-20230406152144232"></p>
</li>
<li><p>更改keystore，更改成跟appid相对应得（在dcloud官网申请的keystore）</p>
<p>更改<code>app/build.gradle</code>的config内容</p>
<blockquote>
<p>注意：keystore、applicationId、appid都要对应上</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>UI-ImageView</title>
    <url>/posts/e71d1f6d/</url>
    <content><![CDATA[<h1 id="ScaleType属性"><a href="#ScaleType属性" class="headerlink" title="ScaleType属性"></a>ScaleType属性</h1><h2 id="ScaleType-FIT-CENTER-默认"><a href="#ScaleType-FIT-CENTER-默认" class="headerlink" title="ScaleType.FIT_CENTER 默认"></a>ScaleType.FIT_CENTER 默认</h2><p>该模式是<code>ImageView</code>的默认模式，如果没有设置<code>ScaleType</code>时，将采用这种模式展示图片。在该模式下，图片会被<strong>等比缩放</strong>到能够填充控件大小，并居中展示：</p>
<p><img src="/posts/e71d1f6d/imageview%E9%BB%98%E8%AE%A4%E7%9A%84FIT_CENTER.png" alt="img"></p>
<p>这里例子里因为图片宽大于高，于是被缩放到控件大小并居中展示，上下会留白。如果图片的高大于宽，那么居中显示就会在左右留白。</p>
<h2 id="ScaleType-FIT-START"><a href="#ScaleType-FIT-START" class="headerlink" title="ScaleType.FIT_START"></a>ScaleType.FIT_START</h2><p>图片等比缩放到控件大小，并放置在控件的上边或左边展示。如图所示，此模式下会在<code>ImageView</code>的下半部分留白，如果图片高度大于宽，那么就会在<code>ImageView</code>的右半部份留白。</p>
<p><img src="/posts/e71d1f6d/imageview%E7%9A%84FIT_START.png" alt="img"></p>
<h2 id="ScaleType-FIT-END"><a href="#ScaleType-FIT-END" class="headerlink" title="ScaleType.FIT_END"></a>ScaleType.FIT_END</h2><p>图片等比缩放到控件大小，并放置在控件的下边或右边展示。如图所示，此模式下会在<code>ImageView</code>的上半部分留白，如果图片高度大于宽，那么就会在<code>ImageView</code>的左半部分留白。</p>
<p><img src="/posts/e71d1f6d/imageview%E7%9A%84FIT_END.webp" alt="img"></p>
<h2 id="ScaleType-FIT-XY"><a href="#ScaleType-FIT-XY" class="headerlink" title="ScaleType.FIT_XY"></a>ScaleType.FIT_XY</h2><p>图片缩放到控件大小，完全填充控件大小展示。<strong>注意，此模式不是等比缩放</strong>。这个模式理解也是最简单的，如图：</p>
<p><img src="/posts/e71d1f6d/imageview%E7%9A%84FIT_XY.png" alt="img"></p>
<h2 id="ScaleType-CENTER"><a href="#ScaleType-CENTER" class="headerlink" title="ScaleType.CENTER"></a>ScaleType.CENTER</h2><p>不使用缩放，<code>ImageView</code>会展示图片的中心部分，即图片的中心点和<code>ImageView</code>的中心点重叠，如图。如果图片的大小小于控件的宽高，那么图片会被居中显示。</p>
<p><img src="/posts/e71d1f6d/imageview%E7%9A%84CENTER.png" alt="img"></p>
<h2 id="ScaleType-CENTER-CROP-常用"><a href="#ScaleType-CENTER-CROP-常用" class="headerlink" title="ScaleType.CENTER_CROP 常用"></a>ScaleType.CENTER_CROP 常用</h2><p>在该模式下，图片会被<strong>等比缩放</strong>直到完全填充整个<code>ImageView</code>，并居中显示。该模式也是最常用的模式了。如图可以看到，图片的高度是能完全展示出来的：</p>
<p><img src="/posts/e71d1f6d/imageview%E5%B8%B8%E7%94%A8%E7%9A%84CENTER_CROP.png" alt="img"></p>
<h2 id="ScaleType-CENTER-INSIDE"><a href="#ScaleType-CENTER-INSIDE" class="headerlink" title="ScaleType.CENTER_INSIDE"></a>ScaleType.CENTER_INSIDE</h2><p>使用此模式以完全展示图片的内容为目的。图片将被等比缩放到能够完整展示在<code>ImageView</code>中并居中，如果图片大小小于控件大小，那么就直接居中展示该图片：</p>
<p><img src="/posts/e71d1f6d/imageview%E7%9A%84CENTER_INSIDE.png" alt="img"></p>
<p>这里大家看到这个模式的效果与<code>ScaleType.FIT_CENTER</code>的效果相同，这是因为所用图片是是大于<code>ImageView</code>的大小的，如果图片是小于控件大小，那么就能够看出来这两个模式下的差别了。</p>
<h2 id="ScaleType-MATRIX"><a href="#ScaleType-MATRIX" class="headerlink" title="ScaleType.MATRIX"></a>ScaleType.MATRIX</h2><p>一般情况下重点都放在最后，在这八种<code>ScaleType</code>中，这个模式就是重点了。该模式需要与<code>ImageView.setImageMatrix(Matrix matrix)</code> 配合使用，因为该模式需要用于指定一个变换矩阵用于指定图片如何展示。其实前面的7种模式都是通过<code>ImageView</code>在内部生成了相应的变换矩阵，等于是提供了该模式的一种特定值，使用这个模式只要传入相应矩阵，也就能实现上述七种显示效果。<br>关于如何使用矩阵的内容，不是很快能说完，所以这里就不说了。<br>另外注意，在使用时，需要先调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">imageView.setScaleType(ImageView.ScaleType.MATRIX);</span><br></pre></td></tr></table></figure>

<p>再调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">imageView.setImageMatrix(matrix);</span><br></pre></td></tr></table></figure>

<p><strong>注意顺序不要搞错</strong>，否则会出现问题的。下面看一下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">imageView.setScaleType(ImageView.ScaleType.MATRIX);  <span class="comment">//设置为矩阵模式</span></span><br><span class="line"></span><br><span class="line"><span class="type">Matrix</span> <span class="variable">matrix</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();           <span class="comment">//创建一个单位矩阵</span></span><br><span class="line">matrix.setTranslate(<span class="number">100</span>, <span class="number">100</span>);          <span class="comment">//平移x和y各100单位</span></span><br><span class="line">matrix.preRotate(<span class="number">30</span>);                   <span class="comment">//顺时针旋转30度</span></span><br><span class="line">imageView.setImageMatrix(matrix);       <span class="comment">//设置并应用矩阵</span></span><br></pre></td></tr></table></figure>

<p>每行代码都有注释，其展示的效果如下图显示。</p>
<p><img src="/posts/e71d1f6d/imageview%E7%9A%84MATRIX.png" alt="img"></p>
<h1 id="ImageView相关问题"><a href="#ImageView相关问题" class="headerlink" title="ImageView相关问题"></a>ImageView相关问题</h1><h2 id="问题：ImageView滑动屏幕后显示异常（部分iv变大）"><a href="#问题：ImageView滑动屏幕后显示异常（部分iv变大）" class="headerlink" title="问题：ImageView滑动屏幕后显示异常（部分iv变大）"></a>问题：ImageView滑动屏幕后显示异常（部分iv变大）</h2><p>现象：LinearLayout内有一排iv，iv的scaleType为centerCrop，LinearLayout为RecyclerView内一个item，滑动Rc后iv显示内容变大了</p>
<p>排查过程：用Layout Inspector查看变形的iv的drawing–isOpaque()为false。第一个iv未变形，其isOpaque()为true</p>
<p>解决：尝试修改iv的android:setScaleType&#x3D;”fitXY”，问题解决了</p>
<p>解决后再次用Layout Inspector查看，所有iv的drawing–isOpaque()为true</p>
<h2 id="ImageView用wrap-content后还有空白边距"><a href="#ImageView用wrap-content后还有空白边距" class="headerlink" title="ImageView用wrap_content后还有空白边距"></a>ImageView用wrap_content后还有空白边距</h2><p>解决：加上属性 android:adjustViewBounds&#x3D;”true”</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>UI-折叠布局CollapsingToolbarLayout</title>
    <url>/posts/a662775/</url>
    <content><![CDATA[<h1 id="CollapsingToolbarLayout"><a href="#CollapsingToolbarLayout" class="headerlink" title="CollapsingToolbarLayout"></a><a href="https://blog.csdn.net/qq_36642554/article/details/106929280"><code>CollapsingToolbarLayout</code></a></h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>一个<code>FrameLayout</code></li>
<li>用于实现可折叠的标题栏，通常在子布局中放一个<code>Toolbar</code></li>
<li><strong>必须作为 <code>AppBarLayout</code> 的子类，才能发挥出效果</strong></li>
</ul>
<h2 id="xml属性"><a href="#xml属性" class="headerlink" title="xml属性"></a>xml属性</h2><p>在 <code>CollapsingToolbarLayout</code> 中的部分属性</p>
<ul>
<li><code>collapsedTitleGravity</code>：折叠态标题位置</li>
<li><code>collapsedTitleTextAppearance</code>：折叠态标题外观</li>
<li><code>expandedTitleGravity</code>：扩展态标题位置</li>
<li><code>expandedTitleMargin*</code>：扩展态标题的<code>Margin</code>。注意与<code>expandedTitleGravity</code>可能冲突</li>
<li><code>expandedTitleTextAppearance</code>：扩展态后标题的外观</li>
<li><code>contentScrim</code>：折叠态后<code>Toolbar</code>颜色</li>
<li><code>scrimAnimationDuration</code>：收缩或展开时颜色动画持续时间。需要设置<code>contentScrim</code>生效</li>
<li><code>scrimVisibleHeightTrigger</code>：触发高度。小于的时候，展示<code>contentScrim</code>，否则不展示</li>
<li><code>toolbarId</code>：折叠态的时候显示的<code>Toolbar</code>的<code>id</code></li>
</ul>
<p>在 <code>CollapsingToolbarLayout</code> 中还需要使用 <code>AppBarLayout</code> 中的属性</p>
<ul>
<li><code>app:layout_scrollFlags</code>：具体参考<code>AppBarLayout</code>中的<code>Flag</code>用法</li>
</ul>
<p>在 <code>CollapsingToolbarLayout</code> 子<code>view</code>中用到的属性（<code>CollapsingToolbarLayout.LayoutParams</code>）</p>
<ul>
<li><p><code>layout_collapseMode</code> ：折叠模式。三种取值</p>
<ul>
<li><p><code>COLLAPSE_MODE_OFF</code> (none) ：等于没设置</p>
</li>
<li><p><code>COLLAPSE_MODE_PARALLAX</code> (parallax) ：view将以视差方式滚动</p>
<p><img src="/posts/a662775/%E6%BB%91%E5%8A%A8%E6%94%B6%E7%BC%A9%E6%95%88%E6%9E%9C%E5%9B%BE2.gif"></p>
<p>上面大图部分的父<code>View</code>是<code>CollapsingToolbarLayout</code>，对<code>ImageView</code>设置了<code>parallax</code>，效果就是上下各一半的减少，最后显示的位置是<strong>图片的正中央</strong></p>
</li>
<li><p><code>COLLAPSE_MODE_PIN</code> (pin) ：<code>view</code>固定在适当位置，直到达到<code>CollapsingToolbarLayout</code>底部。就相当于<code>View</code>被整个推上去或者拉下来的效果</p>
<p><img src="/posts/a662775/%E6%BB%91%E5%8A%A8%E5%8F%97%E8%AF%B4%E6%95%88%E6%9E%9C%E5%9B%BE1.gif"></p>
</li>
</ul>
</li>
<li><p><code>layout_collapseParallaxMultiplier</code> ： 视差系数。<code>layout_collapseMode</code>设置为<code>parallax</code>才生效。不设置视差系数，默认为<code>0.5</code>，就是收缩时上下各自收缩一半。视差系数决定下面收缩比例。</p>
<p>如：对<code>ImageView</code>设置视差系数为0.2，可以看到收缩的时候，下面收缩的比较慢，上面收缩的比较快。实际上下面没收缩2px，上面就收缩8px，收缩速度是下面的4倍</p>
</li>
</ul>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>597直聘的</p>
<p><img src="/posts/a662775/597%E7%9B%B4%E8%81%98%E9%A6%96%E9%A1%B5%E7%9A%84%E6%BB%91%E5%8A%A8%E6%8A%98%E5%8F%A0%E6%95%88%E6%9E%9C%E5%9B%BE%E5%B8%83%E5%B1%80.png" alt="Img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//布局关闭时顶部距离</span></span><br><span class="line"><span class="type">float</span> <span class="variable">LL_SEARCH_MIN_TOP_MARGIN</span> <span class="operator">=</span> KStatusBarUtils.getStatusBarHeight(getContext());</span><br><span class="line"><span class="type">float</span> <span class="variable">TV_LOGO_MAX_TOP_MARGIN</span> <span class="operator">=</span> KDisplayUtils.dip2px(getContext(), <span class="number">11.5f</span>);</span><br><span class="line"><span class="comment">//这边是用的AppBarLayout位移监听</span></span><br><span class="line">mBinding.appbarHomePosition</span><br><span class="line">    .addOnOffsetChangedListener((appBarLayout, verticalOffset) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCurrentAppBarOffset == verticalOffset) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mBinding != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//设置开关banner的滚动</span></span><br><span class="line">            setBannerTurning(verticalOffset == <span class="number">0</span>);</span><br><span class="line">            <span class="comment">//布局位移过程中设置顶部标题的透明度</span></span><br><span class="line">            <span class="type">float</span> <span class="variable">dy</span> <span class="operator">=</span> Math.abs(verticalOffset * <span class="number">0.6f</span>);</span><br><span class="line">            <span class="type">float</span> <span class="variable">logoTopMargin</span> <span class="operator">=</span> (<span class="type">float</span>) (TV_LOGO_MAX_TOP_MARGIN - dy * <span class="number">0.5</span>);</span><br><span class="line">            <span class="type">float</span> <span class="variable">logoAlpha</span> <span class="operator">=</span> <span class="number">255</span> * logoTopMargin / TV_LOGO_MAX_TOP_MARGIN;</span><br><span class="line">            <span class="keyword">if</span> (logoAlpha &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                logoAlpha = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mBinding.toolbarHomePosition.getLeftIconView(<span class="number">0</span>).setImageAlpha((<span class="type">int</span>) logoAlpha);</span><br><span class="line">            <span class="comment">//处理布局的边界问题</span></span><br><span class="line">            <span class="type">float</span> <span class="variable">searchLayoutNewTopMargin</span> <span class="operator">=</span> LL_SEARCH_MAX_TOP_MARGIN - dy;</span><br><span class="line">            <span class="keyword">if</span> (searchLayoutNewTopMargin &lt; LL_SEARCH_MIN_TOP_MARGIN) &#123;</span><br><span class="line">                searchLayoutNewTopMargin = LL_SEARCH_MIN_TOP_MARGIN;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//设置相关控件的LayoutParams 此处使用的是MarginLayoutParams，便于设置params的topMargin属性</span></span><br><span class="line">            mSearchBarParams.topMargin = (<span class="type">int</span>) searchLayoutNewTopMargin;</span><br><span class="line">            mBinding.homeSearchBar.setLayoutParams(mSearchBarParams);</span><br><span class="line">            mBinding.homeSearchBar.setViewsAlpha(logoAlpha);</span><br><span class="line"></span><br><span class="line">            mCurrentAppBarOffset = verticalOffset;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>布局</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--顶部标题栏，可根据监听AppBarLayout的位移来计算，最后一个child覆盖另一个child--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:background</span>=<span class="string">&quot;@color/colorWhite&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">app:contentInsetEnd</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">app:contentInsetStart</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">app:layout_collapseMode</span>=<span class="string">&quot;pin&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">app:layout_scrollFlags</span>=<span class="string">&quot;exitUntilCollapsed|enterAlways|enterAlwaysCollapsed&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--顶部标题栏（待覆盖的child）--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">com.xm597.app.project.ui.position.view.HomePositionToolbar</span></span></span><br><span class="line"><span class="tag">			<span class="attr">android:id</span>=<span class="string">&quot;@+id/toolbar_home_position&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">android:background</span>=<span class="string">&quot;@color/colorEE5647&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--（AppBarLayout往上位移）最终覆盖的child--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">com.xm597.app.project.ui.position.view.HomePositionToolbarV1</span></span></span><br><span class="line"><span class="tag">			<span class="attr">android:id</span>=<span class="string">&quot;@+id/home_search_bar&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">android:layout_marginEnd</span>=<span class="string">&quot;@dimen/viewSize8&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">com.scwang.smart.refresh.layout.SmartRefreshLayout</span></span></span><br><span class="line"><span class="tag">		<span class="attr">...</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span></span></span><br><span class="line"><span class="tag">			<span class="attr">android:id</span>=<span class="string">&quot;@+id/cdl_home_position&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;<span class="name">com.google.android.material.appbar.AppBarLayout</span></span></span><br><span class="line"><span class="tag">				<span class="attr">android:id</span>=<span class="string">&quot;@+id/appbar_home_position&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">android:background</span>=<span class="string">&quot;@color/colorWhite&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">				<span class="tag">&lt;<span class="name">com.google.android.material.appbar.CollapsingToolbarLayout</span></span></span><br><span class="line"><span class="tag">					<span class="attr">android:id</span>=<span class="string">&quot;@+id/ctl_home_position&quot;</span></span></span><br><span class="line"><span class="tag">					<span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">					<span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">					<span class="attr">android:background</span>=<span class="string">&quot;@color/colorWhite&quot;</span></span></span><br><span class="line"><span class="tag">					<span class="attr">app:contentScrim</span>=<span class="string">&quot;@color/colorWhite&quot;</span></span></span><br><span class="line"><span class="tag">					<span class="attr">app:layout_scrollFlags</span>=<span class="string">&quot;scroll|exitUntilCollapsed&quot;</span></span></span><br><span class="line"><span class="tag">					<span class="attr">app:scrimAnimationDuration</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!--跟随移动，最终折叠的部分--&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">						<span class="attr">...</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">com.google.android.material.appbar.CollapsingToolbarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">				<span class="comment">&lt;!--跟随移动，最终悬浮的部分【可选】--&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;/<span class="name">com.google.android.material.appbar.AppBarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--底部普通内容--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">				<span class="attr">...</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;/<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">com.scwang.smart.refresh.layout.SmartRefreshLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓UI</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView核心要点</title>
    <url>/posts/c460ab34/</url>
    <content><![CDATA[<h1 id="RecyclerView核心要点"><a href="#RecyclerView核心要点" class="headerlink" title="RecyclerView核心要点"></a><code>RecyclerView</code>核心要点</h1><h2 id="RecyclerView是什么？"><a href="#RecyclerView是什么？" class="headerlink" title="RecyclerView是什么？"></a><code>RecyclerView</code>是什么？</h2><blockquote>
<p>A <strong>flexible</strong> view for providing<br>a <strong>limited</strong> window into<br>a <strong>large</strong> data set</p>
</blockquote>
<p><img src="/posts/c460ab34/image-20221219135334818.png" alt="image-20221219135334818"></p>
<h3 id="ListView的局限"><a href="#ListView的局限" class="headerlink" title="ListView的局限"></a><code>ListView</code>的局限</h3><ul>
<li>只有纵向列表一种布局  </li>
<li>没有支持动画的 API</li>
<li>接口设计和系统不一致<ul>
<li><code>setOnItemClickListener()</code></li>
<li><code>setOnItemLongClickListener()</code></li>
<li><code>setSelection()</code></li>
</ul>
</li>
<li>没有强制实现 <code>ViewHodler</code></li>
<li>性能不如 <code>RecyclerView</code></li>
</ul>
<h3 id="RecyclerView的优势"><a href="#RecyclerView的优势" class="headerlink" title="RecyclerView的优势"></a><code>RecyclerView</code>的优势</h3><ul>
<li>默认支持<code>Linear</code>，<code>Grid</code>，<code>Staggered Grid</code>三种布局</li>
<li>友好的<code>ItemAnimator</code>动画API</li>
<li>强制实现<code>ViewHolder</code></li>
<li>解耦的架构设计</li>
<li>相比<code>ListView</code>更好的性能</li>
</ul>
<h3 id="LayoutManager支持的布局"><a href="#LayoutManager支持的布局" class="headerlink" title="LayoutManager支持的布局"></a><code>LayoutManager</code>支持的布局</h3><p><img src="/posts/c460ab34/image-20221219135803610.png" alt="image-20221219135803610"></p>
<h3 id="RecyclerView的重要组件"><a href="#RecyclerView的重要组件" class="headerlink" title="RecyclerView的重要组件"></a><code>RecyclerView</code>的重要组件</h3><p><img src="/posts/c460ab34/image-20221219135856099.png" alt="image-20221219135856099"></p>
<h2 id="RecyclerView-Demo"><a href="#RecyclerView-Demo" class="headerlink" title="RecyclerView Demo"></a>RecyclerView Demo</h2><h3 id="ViewHolder究竟是什么？"><a href="#ViewHolder究竟是什么？" class="headerlink" title="ViewHolder究竟是什么？"></a>ViewHolder究竟是什么？</h3><ul>
<li><p>View holder 和 item view 是什么关系？一对一？一对多？多对多？</p>
</li>
<li><p>View holder 解决的是什么问题？</p>
</li>
<li><p>View hodler 的 ListView item view 的复用有什么关系</p>
</li>
</ul>
<h4 id="没有实现view-hodler的getView"><a href="#没有实现view-hodler的getView" class="headerlink" title="没有实现view hodler的getView()"></a>没有实现<code>view hodler</code>的<code>getView()</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleListViewAdapter</span> <span class="keyword">extends</span> <span class="title class_">BaseAdapter</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getView</span><span class="params">(<span class="type">int</span> position, View convertView, ViewGroup parent)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(convertView == <span class="literal">null</span>)&#123;</span><br><span class="line">            convertView = LayoutInflater.from(parent.getContext())</span><br><span class="line">                .inflate(R.layout.list_view, parent, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ImageView</span> <span class="variable">avatar</span> <span class="operator">=</span> convertView.findViewById(R.id.user_avatar);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">name</span> <span class="operator">=</span> convertView.findViewById(R.id.user_name);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">title</span> <span class="operator">=</span> convertView.findViewById(R.id.user_title);</span><br><span class="line">        </span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getItem(position);</span><br><span class="line">        Glide.with(parent.getContext()).load(user.avatarUrl()).into(avatar);</span><br><span class="line">        name.setText(user.name);</span><br><span class="line">        title.setText(user.title);</span><br><span class="line">        <span class="keyword">return</span> convertView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现了view-holder的getView"><a href="#实现了view-holder的getView" class="headerlink" title="实现了view holder的getView()"></a>实现了<code>view holder</code>的<code>getView()</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleListViewAdapter</span> <span class="keyword">extends</span> <span class="title class_">BaseAdapter</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getView</span><span class="params">(<span class="type">int</span> position, View convertView, ViewGroup parent)</span>&#123;</span><br><span class="line">        UserViewHolder holder;</span><br><span class="line">        <span class="keyword">if</span>(convertView == <span class="literal">null</span>)&#123;</span><br><span class="line">            convertView = LayoutInflater.from(parent.getContext())</span><br><span class="line">                .inflate(R.layout.list_view, parent, <span class="literal">false</span>);</span><br><span class="line">            holder = <span class="keyword">new</span> <span class="title class_">UserViewHolder</span>(convertView);</span><br><span class="line">            holder.avatar = convertView.findViewById(R.id.user_avatar);</span><br><span class="line">            holder.name = convertView.findViewById(R.id.user_name);</span><br><span class="line">            holder.title = convertView.findViewById(R.id.user_title);</span><br><span class="line">            convertView.setTag(holder);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            holder = (UserViewHolder)convertView.getTag();</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getItem(position);</span><br><span class="line">        Glide.with(parent.getContext()).load(user.avatarUrl()).into(holder.avatar);</span><br><span class="line">        holder.name.setText(user.name);</span><br><span class="line">        holder.title.setText(user.title);</span><br><span class="line">        <span class="keyword">return</span> convertView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Item-view和view-holder一一对应"><a href="#Item-view和view-holder一一对应" class="headerlink" title="Item view和view holder一一对应"></a><code>Item view</code>和<code>view holder</code>一一对应</h4><p><img src="/posts/c460ab34/image-20221219160157885.png" alt="image-20221219160157885"></p>
<h4 id="View-holder最佳实践"><a href="#View-holder最佳实践" class="headerlink" title="View holder最佳实践"></a>View holder最佳实践</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UserViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder&#123;</span><br><span class="line">    ImageView avatar;</span><br><span class="line">    TextView name;</span><br><span class="line">    UserVIewHolder(<span class="meta">@Nonull</span> View itemView)&#123;</span><br><span class="line">        <span class="built_in">super</span>(itemView);</span><br><span class="line">        avatar = itemView.findViewById(R.id.avatar);</span><br><span class="line">        name = itemView.findViewById(R.id.name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bindTo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="comment">//bind data to UI</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void onBindViewHolder(UserViewHolder holder, int postion)&#123;</span></span><br><span class="line"><span class="comment">//    holder.bindTo(userList.get(position));</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="RecyclerView缓存机制"><a href="#RecyclerView缓存机制" class="headerlink" title="RecyclerView缓存机制"></a>RecyclerView缓存机制</h2><h3 id="ListView缓存图示一"><a href="#ListView缓存图示一" class="headerlink" title="ListView缓存图示一"></a>ListView缓存图示一</h3><p><img src="/posts/c460ab34/image-20221219164349788.png" alt="image-20221219164349788"></p>
<h3 id="ListView缓存图示二"><a href="#ListView缓存图示二" class="headerlink" title="ListView缓存图示二"></a>ListView缓存图示二</h3><p><img src="/posts/c460ab34/image-20221219164435276.png" alt="image-20221219164435276"></p>
<h3 id="RecyclerView缓存图示一"><a href="#RecyclerView缓存图示一" class="headerlink" title="RecyclerView缓存图示一"></a>RecyclerView缓存图示一</h3><p><img src="/posts/c460ab34/image-20221219164639192.png" alt="image-20221219164639192"></p>
<h3 id="RecyclerView缓存图示二"><a href="#RecyclerView缓存图示二" class="headerlink" title="RecyclerView缓存图示二"></a>RecyclerView缓存图示二</h3><p><img src="/posts/c460ab34/image-20221219164726509.png" alt="image-20221219164726509"></p>
<h3 id="ViewCacheExtension-Example"><a href="#ViewCacheExtension-Example" class="headerlink" title="ViewCacheExtension Example"></a>ViewCacheExtension Example</h3><ul>
<li>广告卡片<ul>
<li>每一页一共有4个广告</li>
<li>这些广告短期内不会发生变化</li>
</ul>
</li>
<li>每次滑入一个广告卡片，一般情况下都需要重新绑定</li>
<li>Cache 只关心 position，不关心 view type</li>
<li>RecycledViewPool 只关心 view type，都需要重新绑定</li>
<li>在 ViewCacheExtension 里保持4个广告Card缓存</li>
</ul>
<p>注意：列表中 item&#x2F;广告的 impression 统计</p>
<ul>
<li>ListView 通过 getView() 统计</li>
<li>RecyclerView 通过 onBindViewHolder() 统计？<strong>可能错误！</strong></li>
<li>通过 onViewAttachedToWindow() 统计</li>
</ul>
<h2 id="RecyclerView性能优化策略"><a href="#RecyclerView性能优化策略" class="headerlink" title="RecyclerView性能优化策略"></a>RecyclerView性能优化策略</h2><h3 id="在onBindViewHolder里设置点击监听？"><a href="#在onBindViewHolder里设置点击监听？" class="headerlink" title="在onBindViewHolder里设置点击监听？"></a>在onBindViewHolder里设置点击监听？</h3><blockquote>
<p>onBindViewHodler里设置点击监听器会导致重复创建对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="type">int</span> position)</span>&#123;</span><br><span class="line">        holder.itemView.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="改成在onCreateViewHolder里设置点击监听！"><a href="#改成在onCreateViewHolder里设置点击监听！" class="headerlink" title="改成在onCreateViewHolder里设置点击监听！"></a>改成在onCreateViewHolder里设置点击监听！</h3><blockquote>
<p>View-ViewHolder-View.OnClickListener 三者一一对应</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SimpleViewHolder</span> <span class="variable">holder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleViewHolder</span>();</span><br><span class="line">        holder.itemView.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="type">int</span> position)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用LinearLayoutManager-setInitialPrefetchItemCount"><a href="#使用LinearLayoutManager-setInitialPrefetchItemCount" class="headerlink" title="使用LinearLayoutManager.setInitialPrefetchItemCount()"></a>使用LinearLayoutManager.setInitialPrefetchItemCount()</h3><p><img src="/posts/c460ab34/image-20221219171601392.png" alt="image-20221219171601392">  <img src="/posts/c460ab34/image-20221219171628111.png" alt="image-20221219171628111"></p>
<ul>
<li>用户滑动到横向滑动的 item RecyclerView 的时候，由于需要创建更复杂的 RecyclerView 以及多个子 view，可能会导致页面卡顿</li>
<li>由于 RenderThread 的存在，RecyclerView 会进行 prefetch</li>
<li>LinearLayoutManager.setInitialPrefetchItemCount(横向列表初次显示时可见的item个数)<ul>
<li>只有 LinearLayoutManager 有这个API</li>
<li>只有嵌套在内部的 RecyclerView 才会生效</li>
</ul>
</li>
</ul>
<h3 id="RecyclerView-setHasFixedSize"><a href="#RecyclerView-setHasFixedSize" class="headerlink" title="RecyclerView.setHasFixedSize()"></a>RecyclerView.setHasFixedSize()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">onContentsChanged</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mHasFixedSize)&#123;</span><br><span class="line">        layoutChildren();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        requestLayout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果 Adapter 的数据变化不会导致 RecyclerView 的大小变化 –》 RecyclerView.setHasFixedSize(true)</p>
</blockquote>
<h3 id="多个-RecyclerView-共用-RecycledViewPool"><a href="#多个-RecyclerView-共用-RecycledViewPool" class="headerlink" title="多个 RecyclerView 共用 RecycledViewPool"></a>多个 RecyclerView 共用 RecycledViewPool</h3><p><img src="/posts/c460ab34/image-20221219172830681.png" alt="image-20221219172830681"></p>
<p>共用 RecycledViewPool 代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RecyclerView.<span class="type">RecycledViewPool</span> <span class="variable">recycledViewPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecyclerView</span>.RecycledViewPool();</span><br><span class="line">recyclerView1.setRecyclerViewPool(recycledViewPool);</span><br><span class="line">recyclerView2.setRecyclerViewPool(recycledViewPool);</span><br><span class="line">recyclerView3.setRecyclerViewPool(recycledViewPool);</span><br></pre></td></tr></table></figure>



<h3 id="DiffUtil"><a href="#DiffUtil" class="headerlink" title="DiffUtil"></a>DiffUtil</h3><ul>
<li><p>DiffUtil is a utility class that can <strong>calculate the difference between two lists</strong> and <strong>output a list of update operations</strong> that <strong>converts the first list into the second one</strong>. </p>
</li>
<li><p>局部更新方法 notifyItemXXX() 不适用于所有情况</p>
</li>
<li><p>notifyDataSetChange() 会导致整个布局重绘，重新绑定所有 ViewHolder，而且会失去可能的动画效果</p>
</li>
<li><p>DiffUtil 适用于整个页面需要刷新，但是有部分数据可能相同的情况</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Callback</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getOldListSize</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getNewListSize</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">areItemsTheSame</span><span class="params">(<span class="type">int</span> oldItemPosition, <span class="type">int</span> newItemPosition)</span>;       <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">areContentsTheSame</span><span class="params">(<span class="type">int</span> oldItemPosition, <span class="type">int</span> newItemPosition)</span>;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getChangePayload</span><span class="params">(<span class="type">int</span> oldItemPosition, <span class="type">int</span> newItemPosition)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="DiffUtil-Callback逻辑"><a href="#DiffUtil-Callback逻辑" class="headerlink" title="DiffUtil.Callback逻辑"></a>DiffUtil.Callback逻辑</h4><p><img src="/posts/c460ab34/image-20221220093215675.png" alt="image-20221220093215675"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDiffCallback</span> <span class="keyword">extends</span> <span class="title class_">DiffUtil</span>.Callback&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; oldList;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; newList;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDiffCallback</span><span class="params">(List&lt;User&gt; oldList, List&lt;User&gt; newList)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.oldList = oldList;</span><br><span class="line">        <span class="built_in">this</span>.newList = newList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOldListSize</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> oldList.size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNewListSize</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newList.size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">areItemsTheSame</span><span class="params">(<span class="type">int</span> oldItemPosition, <span class="type">int</span> newItemPosition)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> oldList.get(oldItemPosition).id == newList.get(newItemPosition).id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">areContentsTheSame</span><span class="params">(<span class="type">int</span> oldItemPosition, <span class="type">int</span> newItemPosition)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">oldUser</span> <span class="operator">=</span> oldList.get(oldItemPosition);</span><br><span class="line">        <span class="type">User</span> <span class="variable">newUser</span> <span class="operator">=</span> newList.get(newItemPosition);</span><br><span class="line">        <span class="keyword">return</span> oldUser.id == newUser.id &amp;&amp; oldUser.name.equals(newUser.name)</span><br><span class="line">            &amp;&amp; oldUser.profession.equals(newUser.profession);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDiffCallback</span> <span class="keyword">extends</span> <span class="title class_">DiffUtil</span>.Callback&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; oldList;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; newList;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getChangePayload</span><span class="params">(<span class="type">int</span> oldItemPosition, <span class="type">int</span> newItemPosition)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">oldUser</span> <span class="operator">=</span> oldList.get(oldItemPosition);</span><br><span class="line">        <span class="type">User</span> <span class="variable">newUser</span> <span class="operator">=</span> newList.get(newItemPosition);</span><br><span class="line">        <span class="type">Bundle</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">        <span class="keyword">if</span>(oldUser.id != newUser.id)&#123;</span><br><span class="line">            payload.putLong(User.KEY_ID, newUser.id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!oldUser.name.equals(newUser.name))&#123;</span><br><span class="line">            payload.putString(User.KEY_NAME, newUser.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!oldUser.profession.equals(newUser.profession))&#123;</span><br><span class="line">            payload.putString(User.KEY_PROF, newUser.profession);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(payload.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> payload;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShowcaseRVAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;ShowcaseRvAdapter.UserViewHolder&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ShowcaseRVAdapter</span><span class="params">()</span>&#123;</span><br><span class="line">        userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(UserRepo.USER_LIST);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swapData</span><span class="params">(List&lt;User&gt; newList, <span class="type">boolean</span> diff)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(diff)&#123;</span><br><span class="line">            DiffUtil.<span class="type">DiffResult</span> <span class="variable">diffResult</span> <span class="operator">=</span> DiffUtil.calculateDiff(<span class="keyword">new</span> <span class="title class_">UserDiffCallback</span>(userList, newList), <span class="literal">false</span>);</span><br><span class="line">            userList = newList;</span><br><span class="line">            diffResult.dispatchUpdatesTo(<span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userList = newList;</span><br><span class="line">            notifyDataSetChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShowcaseRVAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;ShowcaseRvAdapter.UserViewHolder&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ShowcaseRVAdapter.UserViewHolder holder, <span class="type">int</span> position)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userList.get(position);</span><br><span class="line">        holder.name.setText(user.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindVIewHolder</span><span class="params">(<span class="meta">@NonNull</span> UserViewHolder holder, <span class="type">int</span> position, <span class="meta">@NonNull</span> List&lt;Object&gt; payloads)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(payloads.isEmpty())&#123;</span><br><span class="line">            onBindViewHolder(holder, position);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Bundle</span> <span class="variable">payload</span> <span class="operator">=</span> (Bundle) payloads.get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(String key: payload.keySet())&#123;</span><br><span class="line">                <span class="keyword">switch</span>(key)&#123;</span><br><span class="line">                    <span class="keyword">case</span> User.KEY_NAME:</span><br><span class="line">                        holder.name.setText(payload.getString(key));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="在列表很大的时候异步计算diff"><a href="#在列表很大的时候异步计算diff" class="headerlink" title="在列表很大的时候异步计算diff"></a>在列表很大的时候异步计算diff</h4><ul>
<li>使用 Thread&#x2F;Handler 将 DiffResult 发送到主线程</li>
<li>使用 RxJava 将 calculateDiff 操作放到后台线程</li>
<li>使用 Google 提供的 AsyncListDiffer(Executor)&#x2F;ListAdapter</li>
</ul>
<h4 id="AsyncListDiffer-x2F-ListAdapter-代码示例"><a href="#AsyncListDiffer-x2F-ListAdapter-代码示例" class="headerlink" title="AsyncListDiffer &#x2F; ListAdapter 代码示例"></a>AsyncListDiffer &#x2F; ListAdapter 代码示例</h4><ul>
<li><a href="https://developer.android.com/reference/androidx/recyclerview/widget/AsyncListDiffer">https://developer.android.com/reference/androidx/recyclerview/widget/AsyncListDiffer</a></li>
<li><a href="https://developer.android.com/reference/androidx/recyclerview/widget/ListAdapter">https://developer.android.com/reference/androidx/recyclerview/widget/ListAdapter</a></li>
</ul>
<h2 id="为什么ItemDecoration可以绘制分割线？"><a href="#为什么ItemDecoration可以绘制分割线？" class="headerlink" title="为什么ItemDecoration可以绘制分割线？"></a>为什么ItemDecoration可以绘制分割线？</h2><p><img src="/posts/c460ab34/image-20221220103857479.png" alt="image-20221220103857479"></p>
<p><img src="/posts/c460ab34/image-20221220103913261.png" alt="image-20221220103913261"></p>
<h3 id="Overlay-Divider-代码"><a href="#Overlay-Divider-代码" class="headerlink" title="Overlay Divider 代码"></a>Overlay Divider 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverlayDivider</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ItemDecoration&#123;</span><br><span class="line">    <span class="meta">@Overrid</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDrawOver</span><span class="params">(Canvas c, RecyclerView parent, RecyclerView.State state)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL_LSIT) &#123;</span><br><span class="line">            drawVertical(c, parent);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            drawHorizontal(c, parent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">drawVertical</span><span class="params">(Canvas c, RecyclerView parent)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">drawHorizontal</span><span class="params">(Canvas c, RecyclerView parent)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//不需要覆写 getItemOffsets()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/c460ab34/image-20221220104340595.png" alt="image-20221220104340595"></p>
<h3 id="ItemDecoration-还可以做什么？"><a href="#ItemDecoration-还可以做什么？" class="headerlink" title="ItemDecoration 还可以做什么？"></a>ItemDecoration 还可以做什么？</h3><ul>
<li><p>Drawing dividers between items</p>
</li>
<li><p>Highlights</p>
<p><img src="/posts/c460ab34/image-20221220104447264.png" alt="image-20221220104447264"></p>
</li>
<li><p>Visual grouping boundaries</p>
<p><img src="/posts/c460ab34/image-20221220104510540.png" alt="image-20221220104510540"></p>
</li>
</ul>
<h2 id="RecyclerView-更多知识"><a href="#RecyclerView-更多知识" class="headerlink" title="RecyclerView 更多知识"></a>RecyclerView 更多知识</h2><ul>
<li><a href="https://github.com/h6ah4i/android-advancedrecyclerview">https://github.com/h6ah4i/android-advancedrecyclerview</a></li>
<li><a href="https://advancedrecyclerview.h6ah4i.com/">https://advancedrecyclerview.h6ah4i.com/</a></li>
</ul>
]]></content>
      <categories>
        <category>Hencoder</category>
      </categories>
      <tags>
        <tag>hencoder</tag>
        <tag>RecyclerView</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程和线程同步</title>
    <url>/posts/5acf31fb/</url>
    <content><![CDATA[<h1 id="Java多线程和线程同步"><a href="#Java多线程和线程同步" class="headerlink" title="Java多线程和线程同步"></a>Java多线程和线程同步</h1><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><ul>
<li><p>进程和线程</p>
<ul>
<li>操作系统中运行多个软件</li>
<li>一个运行中的软件可能包含多个进程</li>
<li>一个运行中的进程可能包含多个线程</li>
</ul>
</li>
<li><p>CPU线程和操作系统线程</p>
<ul>
<li>CPU线程<ul>
<li>多核CPU的每个核各自独立运行，因此每个核一个线程</li>
<li>“四核八线程”：CPU硬件方在硬件级别对CPU进行了一核多线程的支持（本质上依然是每个核一个线程）</li>
<li>单核CPU也可以运行多线程操作系统</li>
</ul>
</li>
</ul>
</li>
<li><p>线程是什么：按代码顺序执行下来，执行完毕就结束的一条线</p>
<ul>
<li><p>UI线程为什么不会结束？</p>
<p>因为它在初始化完毕后会执行死循环，循环的内容是刷新界面</p>
</li>
</ul>
</li>
</ul>
<h2 id="多线程的使用"><a href="#多线程的使用" class="headerlink" title="多线程的使用"></a>多线程的使用</h2><ul>
<li><p>Thread 和 Runnable</p>
<ul>
<li><p>Thread</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread  started!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure>
</li>
<li><p>Runnable</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread with Runnable started!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure>
</li>
<li><p>ThreadFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ThreadFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>()&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r, <span class="string">&quot;Thread - &quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread.currentThread().getName() &quot;</span> + <span class="string">&quot; started!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> factory.newThread(runnable);</span><br><span class="line">thread.start();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> factory.newThread(runnable);</span><br><span class="line">thread1.start();</span><br></pre></td></tr></table></figure>
</li>
<li><p>Executor 和线程池</p>
<ul>
<li><p>常用：<code>newCachedThreadPool()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread with Runnable started!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">executor.execute(runnable);</span><br><span class="line">executor.execute(runnable);</span><br><span class="line">executor.execute(runnable);</span><br></pre></td></tr></table></figure>
</li>
<li><p>短时批量处理：<code>newFixedThreadPool()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">for</span>(Bitmap bitmap: bitmaps)&#123;</span><br><span class="line">    executor.execute(bitmapProcessor(bitmap));</span><br><span class="line">&#125;</span><br><span class="line">executor.shutdown();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Callable 和 Future</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Callable&lt;String&gt; callable = <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;String&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Done!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">Future&lt;String&gt; future = executor.submit(callable);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> future.get();</span><br><span class="line">    System.out.println(<span class="string">&quot;result: &quot;</span> + result);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="线程同步和线程安全"><a href="#线程同步和线程安全" class="headerlink" title="线程同步和线程安全"></a>线程同步和线程安全</h2><ul>
<li><p>synchronized</p>
<ul>
<li><p>synchronized 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">count</span><span class="params">(<span class="type">int</span> newValue)</span>&#123;</span><br><span class="line">    x = newValue;</span><br><span class="line">    y = newValue;</span><br><span class="line">    <span class="keyword">if</span>(x != y)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;x: &quot;</span> + x + <span class="string">&quot; , y: &quot;</span>+ y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>synchronized 代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">count</span><span class="params">(<span class="type">int</span> newValue)</span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="built_in">this</span>)&#123;</span><br><span class="line">        x = newValue;</span><br><span class="line">        y = newValue;</span><br><span class="line">        <span class="keyword">if</span>(x != y)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;x: &quot;</span> + x + <span class="string">&quot; , y: &quot;</span>+ y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(monitor1)&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(monitor2)&#123;</span><br><span class="line">        name = x + <span class="string">&quot;-&quot;</span> + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>synchronized 的本质</p>
<ul>
<li><p>保证方法内部或代码块内部资源（数据）的<strong>互斥访问</strong>。即同一时间、由同一个Monitor监视的代码，最多只能有一个线程在访问</p>
<p><img src="/posts/5acf31fb/image-20221219100714539.png" alt="image-20221219100714539"></p>
</li>
<li><p>保证线程之间对监视资源的<strong>数据同步</strong>。即，任何线程在获取到<code>Monitor</code>后的第一时间，会先将共享内存中的数据复制到自己的缓存中；任何线程在释放<code>Monitor</code>的第一时间，会先将缓存中的数据复制到共享内存中。</p>
<p><img src="/posts/5acf31fb/image-20221219100942682.png" alt="image-20221219100942682"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><code>volatile</code></p>
<ul>
<li>保证加了<code>volatile</code>关键字的字段的操作具有<strong>原子性</strong>和<strong>同步性</strong>，其中<strong>原子性</strong>相当于实现了针对单一字段的线程间互斥访问。因此<code>volatile</code>可以看作简化版的<code>synchronized</code>。</li>
<li><code>volatile</code>只对基本类型（byte、char、short、int、long、float、double、boolean）的赋值操作和对象的引用赋值操作有效。</li>
</ul>
</li>
<li><p><code>java.util.concurrent.atomic</code>包：</p>
<ul>
<li><p>下面有<code>AtomicInteger</code> <code>AtomicBoolean</code>等类，作用和<code>volatile</code>基本一致，可以看作是通用版的<code>volatile</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">atomicInteger.getAndIncrement();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>Lock / ReentrantReadWriteLock</code></p>
<ul>
<li><p>同样是“加锁”机制。但使用方式更灵活，同时也更麻烦一些。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    x ++;</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>finally的作用：保证在方法提前结束或出现 Exception 的时候，依然能正常释放锁。</p>
</blockquote>
</li>
<li><p>一般并不会只是使用<code>Lock</code>，而是会使用更复杂的锁，例如<code>ReadWriteLock</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ReentrantReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"><span class="type">Lock</span> <span class="variable">readLock</span> <span class="operator">=</span> lock.readLock();</span><br><span class="line"><span class="type">Lock</span> <span class="variable">writeLock</span> <span class="operator">=</span> lock.writeLock();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">count</span><span class="params">()</span>&#123;</span><br><span class="line">    writeLock.lock();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        x++;</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        writeLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> time)</span>&#123;</span><br><span class="line">    readLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tiem; i++)&#123;</span><br><span class="line">            System.out.print(x + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        readLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>线程安全问题的本质：</p>
<p>在多个线程访问共同的资源时，在某<strong>一个线程</strong>对资源进行<strong>写操作的中途</strong>（写入已经开始，但还没结束），<strong>其他线程</strong>对这个<strong>写了一半的资源</strong>进行了<strong>读操作</strong>。或者基于这个<strong>写了一半的资源</strong>进行了<strong>写操作</strong>，导致出现<strong>数据错误</strong>。</p>
</li>
<li><p>锁机制的本质：</p>
<p>通过对共享资源进行访问限制，让同一时间只有一个线程可以访问资源，保证了数据的准确性。</p>
</li>
<li><p>不论是线程安全问题，还是针对线程安全问题所衍生出的锁机制，它们的核心都在于<strong>共享的资源</strong>，而不是某个方法或者某几行代码。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hencoder</category>
      </categories>
      <tags>
        <tag>hencoder</tag>
        <tag>Java多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>手写热更新</title>
    <url>/posts/f19b19b8/</url>
    <content><![CDATA[<h1 id="手写热更新"><a href="#手写热更新" class="headerlink" title="手写热更新"></a>手写热更新</h1><h2 id="热更新-x2F-热修复"><a href="#热更新-x2F-热修复" class="headerlink" title="热更新 &#x2F; 热修复"></a>热更新 <strong>&#x2F;</strong> 热修复</h2><p>不安装新版本的软件，直接从⽹络下载新功能模块来对软件进⾏局部更新</p>
<h2 id="热更新和插件化的区别"><a href="#热更新和插件化的区别" class="headerlink" title="热更新和插件化的区别"></a>热更新和插件化的区别</h2><p>区别有两点</p>
<ol>
<li><p>插件化的内容在原 App 中没有，⽽热更新是原 App 中的内容做了改动</p>
</li>
<li><p>插件化在代码中有固定的⼊⼝，⽽热更新则可能改变任何⼀个位置的代码</p>
</li>
</ol>
<h2 id="热更新的原理"><a href="#热更新的原理" class="headerlink" title="热更新的原理"></a>热更新的原理</h2><ul>
<li>ClassLoader 的 dex ⽂件替换</li>
<li>直接修改字节码</li>
</ul>
<h2 id="前置知识：loadClass-的类加载过程"><a href="#前置知识：loadClass-的类加载过程" class="headerlink" title="前置知识：loadClass() 的类加载过程"></a>前置知识：<strong>loadClass()</strong> 的类加载过程</h2><ul>
<li><p>宏观上：是⼀个带缓存的、从上到下的加载过程（即⽹上所说的「<strong>双亲委托机制</strong>」）</p>
</li>
<li><p>对于具体的⼀个 ClassLo00000000ader：</p>
<ul>
<li>先从⾃⼰的缓存中取</li>
<li>⾃⼰没有缓存，就找⽗ ClassLoader 要（parent.loadClass()） </li>
<li>⽗ View 也没有，就⾃⼰加载（fifindClass()）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数resolve没用到，是java中的loadClass有两个参数，此处与它一致</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) </span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">    <span class="comment">//First,check if the class has already been loaded</span></span><br><span class="line">    Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(parent != <span class="literal">null</span>)&#123;</span><br><span class="line">                c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                c = findBootstrapClassOrNull(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            <span class="comment">//ClassNotFoundException thrown if class not found</span></span><br><span class="line">            <span class="comment">//from the non-null parent class loader</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(c == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//If still not found, then invoke findClass in order</span></span><br><span class="line">            <span class="comment">//to find the class.</span></span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>BaseDexClassLoader</code> 或者它的⼦类（<code>DexClassLoader</code>、<code>PathClassLoader</code> 等）的 <code>fifindClass()</code>：</p>
<ul>
<li>通过它的 <code>pathList.fifindClass()</code></li>
<li>它的 <code>pathList.loadClass()</code> 通过 <code>DexPathList</code> 的 <code>dexElements</code> 的 <code>fifindClass()</code></li>
<li>所以热更新的关键在于，把补丁 dex ⽂件加载放进⼀个 Element，并且插⼊到dexElements 这个数组的<strong>前⾯</strong>（插⼊到后⾯的话会被忽略掉）【先加载过的class，之后再遇到相同class就不会再加载】</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/main/assets/apk/27_hot_update-debug.apk</span></span><br><span class="line"><span class="type">File</span> <span class="variable">apk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(getCacheDir() + <span class="string">&quot;/27_hot_update-debug.apk&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!apk.exists())&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span>getAssets().open(<span class="string">&quot;apk/27_hot_update-debug.apk&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> is.available();</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[size];</span><br><span class="line">        is.read(buffer);</span><br><span class="line">        is.close();</span><br><span class="line">        </span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(apk);</span><br><span class="line">        fos.write(buffer);</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> getClassLoader();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">loaderClass</span> <span class="operator">=</span> BaseDexClassLoader.class;</span><br><span class="line">    <span class="type">Field</span> <span class="variable">pathListField</span> <span class="operator">=</span> loaderClass.getDeclaredField(<span class="string">&quot;pathList&quot;</span>);</span><br><span class="line">    pathListField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">pathListObject</span> <span class="operator">=</span> pathListField.get(classLoader);</span><br><span class="line">    <span class="type">Class</span> <span class="variable">pathListClass</span> <span class="operator">=</span> pathListObject.getClass();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">dexElementsField</span> <span class="operator">=</span> pathListClass.getDeclaredField(<span class="string">&quot;dexElements&quot;</span>);</span><br><span class="line">    dexElementsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//classLoader.pathList.dexElements = ???</span></span><br><span class="line">    <span class="type">PathClassLoader</span> <span class="variable">newClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PathClassLoader</span>(apk.getPath(), <span class="literal">null</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">newPathListObject</span> <span class="operator">=</span> pathListField.get(newClassLoader);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">newDexElementsObject</span> <span class="operator">=</span> dexElementsField.get(newPathListObject);</span><br><span class="line">    dexElementsField.set(pathListObject, newDexElementsObject);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="⼿写热更新"><a href="#⼿写热更新" class="headerlink" title="⼿写热更新"></a>⼿写热更新</h2><ul>
<li><p>因为⽆法在更新之前就指定要更新谁；所以不能定义新的 <code>ClassLoader</code>，⽽只能选择对 <code>ClassLoader</code> 进⾏修改，让它能够加载补丁⾥⾯的类</p>
</li>
<li><p>因为补丁的类在原先的 App 中已经存在，所以应该把补丁的 <code>Element</code> 对象插⼊到 <code>dexElements</code> 的前⾯才⾏，插⼊到后⾯会被忽略掉。</p>
</li>
<li><p>具体的做法：<strong>反射</strong></p>
<ol>
<li><p>⾃⼰⽤补丁创建⼀个 <code>PathClassLoader</code></p>
</li>
<li><p>把补丁 <code>PathClassLoader</code> ⾥⾯的 <code>elements</code> 替换到旧的⾥⾯去</p>
</li>
<li><p>注意：</p>
<ol>
<li>尽早加载热更新（通⽤⼿段是把加载过程放在 <code>Application.attachBaseContext()</code>）</li>
<li>热更新下载完成后在需要时先杀死程序才能让补丁⽣效</li>
</ol>
</li>
<li><p>优化：热更新没必要把所有内容都打过来，只要把改变的类拿过来就⾏了</p>
<ul>
<li>⽤ d8 把指定的 class 打包进 dex</li>
</ul>
</li>
<li><p>完整化：从⽹上加载</p>
</li>
<li><p>再优化：把打包过程写⼀个 task</p>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>其他IT</category>
      </categories>
      <tags>
        <tag>hencoder</tag>
      </tags>
  </entry>
  <entry>
    <title>从Retrofit的原理来看HTTP</title>
    <url>/posts/f30d7e89/</url>
    <content><![CDATA[<h1 id="Retrofit使用方法简介"><a href="#Retrofit使用方法简介" class="headerlink" title="Retrofit使用方法简介"></a>Retrofit使用方法简介</h1><ol>
<li><p>创建一个interface作为Web Service的请求集合，在里面用注解（Annotation）写入需要配置的请求方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GitHubService</span>&#123;</span><br><span class="line">    <span class="meta">@GET(&quot;users/&#123;user&#125;/repos&quot;)</span></span><br><span class="line">    Call&lt;List&lt;Repo&gt;&gt; <span class="title function_">listRepos</span><span class="params">(<span class="meta">@Path(&quot;user&quot;)</span> String user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在正式代码里用<code>Retrofit</code>创建出<code>interface</code>的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Retrofit</span> <span class="variable">retrofit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">    .baseUrl(<span class="string">&quot;https://api.github.com/&quot;</span>)</span><br><span class="line">    .build();</span><br><span class="line"><span class="type">GitHubService</span> <span class="variable">service</span> <span class="operator">=</span> retrofit.create(GitHubService.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用创建出的<code>Service</code>实例的对应方法，创建出相应的可以用来发起网络请求的<code>Call</code>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Call&lt;List&lt;Repo&gt;&gt; repos = service.listRepos(<span class="string">&quot;octocat&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>Call.execute()</code>或者<code>Call.enqueue()</code>来发起请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">repos.enqueue(callback);</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Retrofit源码结构总结"><a href="#Retrofit源码结构总结" class="headerlink" title="Retrofit源码结构总结"></a><code>Retrofit</code>源码结构总结</h1><ul>
<li><p>通过<code>Retrofit.create(Class)</code>方法创建出<code>Service interface</code>的实例，从而使得<code>Service</code>中配置的方法变得可用，这是<code>Retrofit</code>代码结构的<strong>核心</strong>；</p>
</li>
<li><p><code>Retrofit.create()</code>方法内部，使用的是<code>Proxy.newProxyInstance()</code>方法来创建<code>Service</code>实例。这个方法会为参数中的多个<code>interface</code>（具体到<code>Retrofit</code>来说，是固定传入一个<code>interface</code>）创建一个对象，这个对象实现了所有<code>interface</code>的每个方法，并且每个方法的实现都是雷同的：调用对象实例内部的一个<code>InvocationHandler</code>成员变量的<code>invoke()</code>方法，并把自己的方法信息传递进去。这样就在实质上实现了代理逻辑：<code>interface</code>中的方法全部由另一个设定的<code>InvocationHandler</code>对象来进行代理操作。并且，这些方法的具体实现是在运行时生成<code>interface</code>实例时才确定的，而不是在编译时（虽然在编译时就已经可用通过代码逻辑推断出来）。这就是网上所说的“动态代理机制”的具体含义。</p>
</li>
<li><p>因此，<code>invoke()</code>方法中的逻辑，就是<code>Retrofit</code>创建<code>Service</code>实例的<strong>关键</strong>。这个方法内有三行关键代码，共同组成了具体逻辑：</p>
<ol>
<li><p><code>ServiceMethod</code>的创建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">loadServiceMethod(method)</span><br></pre></td></tr></table></figure>

<p>这行代码负责读取<code>interface</code>中原方法的信息（包括返回值类型、方法注解、参数类型、参数 注解），并将这些信息做初步分析。实际返回的是一个<code>CallAdapted</code>。</p>
</li>
<li><p><code>OkHttpCall</code>的创建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">OkHttpCall</span>&lt;&gt;(requestFactory, args, callFactory, responseConverter)</span><br></pre></td></tr></table></figure>

<p><code>OkHttpCall</code>是<code>retrofit2.Call</code>的子类。这行代码负责将<code>ServiceMethod</code>解读到的信息（主要是一个）</p>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>hencoder</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle配置文件拆解</title>
    <url>/posts/63b1bf55/</url>
    <content><![CDATA[<h1 id="Gradle配置文件拆解"><a href="#Gradle配置文件拆解" class="headerlink" title="Gradle配置文件拆解"></a>Gradle配置文件拆解</h1><p><code>gradle</code>配置文件里的内容其实“方法调用”，长得类似与<code>json</code>，其实是<code>groovy</code>中的“<strong>闭包</strong>”(<code>Closure</code>)知识：把方法当作形参传递进去</p>
<p><code>java</code>中无法把方法当形参传递，有类似的监听（把方法放进一个类中，用匿名内部类的形式把类的对象传进去）（里面的回调就是延后执行的）【<code>=&gt;</code>闭包内容不一定马上执行】</p>
<p><code>java8</code>之后有了<code>lambda</code><strong>表达式</strong>，可以简化写法，实际传的还是匿名内部类的对象</p>
<p>闭包是最后一个参数，可以挪到<code>()</code>外</p>
<p><code>buildscript</code>的<code>repositories</code>控制<code>dependencies</code>的来源，<code>dependencies</code>控制插件的来源</p>
<p><code>classpath</code>在具体实现类中<code>DefaultDependencyHandler.groovy</code>也找不到，但这个<code>groovy</code>中有定义<code>methodMissing</code>方法</p>
<h2 id="Gradle是什么"><a href="#Gradle是什么" class="headerlink" title="Gradle是什么"></a>Gradle是什么</h2><ul>
<li>是构建工具，不是语言</li>
<li>它用了<code>Groovy</code>这个语言，创造了一种<code>DSL</code>，但它本身不是语言</li>
</ul>
<h2 id="怎么构建"><a href="#怎么构建" class="headerlink" title="怎么构建"></a>怎么构建</h2><ul>
<li>按照<code>gradle</code>的规则（<code>build.gradle</code>、<code>settings.gradle</code>、<code>gradle-wrapper</code>、<code>gradle</code>语法）</li>
</ul>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><ul>
<li>相当于可以被传递的代码块</li>
</ul>
<h2 id="compile，implementation-和-api"><a href="#compile，implementation-和-api" class="headerlink" title="compile，implementation 和 api"></a><code>compile</code>，<code>implementation</code> 和 <code>api</code></h2><ul>
<li><p><code>implementation</code>：不会传递依赖</p>
</li>
<li><p><code>compile / api</code>：会传递依赖；<code>api</code>是<code>compile</code>的替代品，效果完全等同</p>
</li>
<li><p>当依赖被传递时，二级依赖的改动会导致0级项目重新编译；当依赖不传递时，二级依赖的改动不会导致0级项目重新编译</p>
</li>
</ul>
<h1 id="Gradle项目结构，以及Task"><a href="#Gradle项目结构，以及Task" class="headerlink" title="Gradle项目结构，以及Task"></a>Gradle项目结构，以及Task</h1><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><ul>
<li><p>单 <code>project</code>：<code>build.gradle</code></p>
</li>
<li><p>多 <code>project</code>：由<code>settings.gradle</code>配置多个</p>
<p>查找 <code>settings</code> 的顺序：</p>
<ol>
<li>当前目录</li>
<li>兄弟目录 <code>master</code></li>
<li>父目录</li>
</ol>
</li>
</ul>
<h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><ul>
<li><p>使用方法：<code>./gradlew taskName</code></p>
</li>
<li><p>task 的结构：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task taskName&#123;</span><br><span class="line">    初始化代码</span><br><span class="line">    doFirst&#123;</span><br><span class="line">        task 代码</span><br><span class="line">    &#125;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        task 代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>doFirst()</code>、<code>doLast()</code>和普通代码段的区别：</p>
<ul>
<li>普通代码段：在<code>task</code>创建过程中就会被执行，发生在<code>configuration</code>阶段</li>
<li><code>doFirst()</code> 和 <code>doLast()</code>：在<code>task</code>执行过程中被执行，发生在<code>execution</code>阶段。如果用户没有直接或间接执行<code>task</code>，那么它的<code>doLast()</code>和<code>doFirst()</code>代码不会被执行</li>
<li><code>doFirst()</code> 和 <code>doLast()</code>都是<code>task</code>代码，其中<code>doFirst()</code>是往队列的前面插入代码，<code>doLast()</code>是往队列的后面插入代码</li>
</ul>
</li>
<li><p><code>task</code>的依赖：可以使用 <code>task taskA(dependsOn: b)</code> 的形式来指定依赖。指定依赖后，<code>task</code>会在自己执行前先执行自己依赖的<code>task</code></p>
</li>
</ul>
<h1 id="Gradle执行的生命周期"><a href="#Gradle执行的生命周期" class="headerlink" title="Gradle执行的生命周期"></a>Gradle执行的生命周期</h1><p>三个阶段：</p>
<ul>
<li>初始化阶段：执⾏ settings.gradle，确定主 project 和⼦ project</li>
<li>定义阶段：执⾏每个 project 的 bulid.gradle，确定出所有 task 所组成的<strong>有向⽆环图</strong></li>
<li>执⾏阶段：按照上⼀阶段所确定出的有向⽆环图来执⾏指定的 task</li>
</ul>
<p>在阶段之间插⼊代码：</p>
<ul>
<li><p>⼀⼆阶段之间：</p>
<p>settings.gradle 的最后</p>
</li>
<li><p>⼆三阶段之间：</p>
</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">afterEvaluate &#123;</span><br><span class="line">	插⼊代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Gradle</category>
      </categories>
      <tags>
        <tag>hencoder</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose</title>
    <url>/posts/5c090a7e/</url>
    <content><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p>入门教程：<a href="https://zhuanlan.zhihu.com/p/433581686">https://zhuanlan.zhihu.com/p/433581686</a></p>
<p>官网：<a href="https://developer.android.google.cn/jetpack/compose/tutorial">Android Compose 教程</a></p>
<ul>
<li>Jetpack Compose：是个利用“声明式编程”构建Android原生界面（UI）的<strong>工具包</strong></li>
<li>环境要求：<ul>
<li><code>ComposeApp</code>仅支持 <code>Kotlin</code>；</li>
<li>最低 <code>sdk</code> 版本为21（Android5.0）；</li>
<li>可用Android Studio（2020-3-1以上）、Idea</li>
<li><code>jdk11</code>以上</li>
</ul>
</li>
<li>用<code>@Compose</code>注解的方法，只能被<code>@Compose</code>注解的方法中调用</li>
<li><code>Modifier</code>：设置<code>UI位置</code>、<code>padding</code>等<ul>
<li><code>Modifier.plus(otherModifier)</code> &#x2F;&#x2F;把其他的modifier加入到当前的Modifier中</li>
<li><code>fillMaxHeight</code>（填充整个高度）、<code>fillMaxWidth</code>、<code>fillMaxSize</code> 类似于 match_patch、填充整个父布局</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
  </entry>
  <entry>
    <title>Java-注解</title>
    <url>/posts/461a3f3a/</url>
    <content><![CDATA[<p><a href="https://www.runoob.com/w3cnote/java-annotation.html">Java 注解（Annotation） | 菜鸟教程 (runoob.com)</a></p>
<p>Java注解（Annotation）又称Java标注，可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。JVM可以保留标注内容，在运行时可以获取到标注内容。</p>
<p>支持自定义Java标注。</p>
<h2 id="内置的注解"><a href="#内置的注解" class="headerlink" title="内置的注解"></a>内置的注解</h2><p>Java定义了一套注解，有7个，3个在<code>java.lang</code>中，4个在<code>java.lang.annotation</code>中。</p>
<p>作用在代码的注解是</p>
<ul>
<li><p>@Override</p>
<p>检查该方法是否是重写方法</p>
</li>
<li><p>@Deprecated</p>
<p>标记过时方法，使用该方法时会报编译警告</p>
</li>
<li><p>@SuppressWarnings</p>
<p>指示编译器去忽略注解中声明的警告</p>
</li>
</ul>
<p>作用在其他注解的注解（或者说 <code>元注解</code>）是：</p>
<ul>
<li><p>@Retention</p>
<p>标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问</p>
</li>
<li><p>@Documented</p>
<p>标记这些注解是否包含在用户文档中</p>
</li>
<li><p>@Target</p>
<p>标记这个注解应该是哪种Java成员</p>
</li>
<li><p>@Inherited</p>
<p>标记这个注解是继承于哪个注解类（默认 注解并没有继承于任何子类）</p>
</li>
</ul>
<p>从Java7开始，额外添加了3个注解：</p>
<ul>
<li><p>@SafeVarargs</p>
<p>Java7开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告</p>
</li>
<li><p>@FunctionalInterface</p>
<p>Java8开始支持，标识一个匿名函数或函数式接口</p>
</li>
<li><p>@Repeatable</p>
<p>Java8开始支持，标识某注解可以在同一个声明上使用多次</p>
</li>
</ul>
<h2 id="Annotation架构"><a href="#Annotation架构" class="headerlink" title="Annotation架构"></a>Annotation架构</h2><p><img src="https://www.runoob.com/wp-content/uploads/2019/08/28123151-d471f82eb2bc4812b46cc5ff3e9e6b82.jpg" alt="Annotation架构"></p>
<ul>
<li><p>一个Annotation和一个RetentionPolicy（<strong>策略属性</strong>）关联</p>
<p>可以理解为：每个Annotation对象，都会有唯一的RetentionPolicy属性。</p>
</li>
<li><p>一个Annotation和1~n个ElementType关联</p>
<p>可以理解为：对于每个Annotation对象，可以有若干个ElementType属性。</p>
</li>
<li><p>Annotation有许多实现类 ，包括：Deprecated、Documented、Inherited、Override等等</p>
<p>Annotation的每个实现类，都“和1个 RetentionPolicy 关联” 并且 “和 1~n 个 ElementType 关联”</p>
</li>
</ul>
<h3 id="图中左侧部分"><a href="#图中左侧部分" class="headerlink" title="图中左侧部分"></a>图中左侧部分</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/08/28123653-84d14b886429482bb601dc97155220fb.jpg" alt="Annotation左侧部分"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Annotation.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> java.lang.annotation;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Annotation</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">toString</span><span class="params">()</span>;</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; annotationType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ElementType.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> java.lang.annotation;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ElementType</span>&#123;</span><br><span class="line">    TYPE,               <span class="comment">/* 类、接口（包括注释类型）或枚举声明  */</span></span><br><span class="line">    FIELD,              <span class="comment">/* 字段声明（包括枚举常量）  */</span></span><br><span class="line">    METHOD,             <span class="comment">/* 方法声明  */</span></span><br><span class="line">    PARAMETER,          <span class="comment">/* 参数声明  */</span></span><br><span class="line">    CONSTRUCTOR,        <span class="comment">/* 构造方法声明  */</span></span><br><span class="line">    LOCAL_VARIABLE,     <span class="comment">/* 局部变量声明  */</span></span><br><span class="line">    ANNOTATION_TYPE,    <span class="comment">/* 注释类型声明  */</span></span><br><span class="line">    PACKAGE             <span class="comment">/* 包声明  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RetentionPolicy.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> java.lang.annotation;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RetentionPolicy</span>&#123;</span><br><span class="line">    SOURCE,            <span class="comment">/* Annotation信息仅存在于编译器处理期间，编译器处理完之后就没有该Annotation信息了  */</span></span><br><span class="line">    CLASS,             <span class="comment">/* 编译器将Annotation存储于类对应的.class文件中。默认行为  */</span></span><br><span class="line">    RUNTIME            <span class="comment">/* 编译器将Annotation存储于class文件中，并且可由JVM读入 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<code>@Retention(RetentionPolicy.Class)</code> 是 <code>Annotation</code>的默认行为</p>
</blockquote>
<ul>
<li><p>例子: @Override</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>修饰方法的时候，意味着该方法覆盖父类的方法。</li>
<li>在编译期间进行语法检查！【编译处理完后，@Override就没作用了】</li>
</ul>
</li>
<li><p>自定义注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation1&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>@interface</code></p>
<p><strong>是必须的</strong>。意味着它就是个实现了（实现细节由编译器完成）<code>java.lang.annotation.Annotation</code>的<code>Annotation</code>注解。</p>
<p>注意：它和 <code>implemented</code> 实现接口不同。通过 <code>@interface</code> 定义注解后，该注解不能继承其他的注解或接口。</p>
</li>
<li><p><code>@Documented</code></p>
<p>非必须。类和方法的 <code>Annotation</code> 在缺省情况下不会出现在 <code>javadoc</code> 中。使用了 <code>@Documented</code> 后就可以出现在 <code>javadoc</code> 中。</p>
</li>
<li><p><code>@Target(ElementType.TYPE)</code></p>
<p>非必须。若有<code>@Target</code>，则该 <code>Annotation</code> 只能用在它指定的地方；若没有 <code>@Target</code>，则该<code>Annotation</code>可用于任何地方。</p>
</li>
<li><p><code>@Retention(RetentionPolicy.RUNTIME)</code></p>
<p>非必须。指定 <code>Annotation</code> 的策略属性。如果没有 <code>@Retention</code>，则默认是 <code>RetentionPolicy.CLASS</code> 类型</p>
</li>
</ul>
</li>
</ul>
<h3 id="图中右侧部分"><a href="#图中右侧部分" class="headerlink" title="图中右侧部分"></a>图中右侧部分</h3><p><img src="https://www.runoob.com/wp-content/uploads/2019/08/28124653-adf73c4cdcce4a63b7bf78efbe1a9cdf.jpg" alt="Annotation右侧"></p>
<p>右侧是Java自带的Annotation</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Deprecated</span>  -- <span class="variable">@Deprecated</span> 所标注内容，不再被建议使用。</span><br><span class="line"><span class="variable">@Override</span>    -- <span class="variable">@Override</span> 只能标注方法，表示该方法覆盖父类中的方法。</span><br><span class="line"><span class="variable">@Documented</span>  -- <span class="variable">@Documented</span> 所标注内容，可以出现在javadoc中。</span><br><span class="line"><span class="variable">@Inherited</span>   -- <span class="variable">@Inherited</span>只能被用来标注“Annotation类型”，它所标注的Annotation具有继承性。</span><br><span class="line"><span class="variable">@Retention</span>   -- <span class="variable">@Retention</span>只能被用来标注“Annotation类型”，而且它被用来指定Annotation的RetentionPolicy属性。</span><br><span class="line"><span class="variable">@Target</span>      -- <span class="variable">@Target</span>只能被用来标注“Annotation类型”，而且它被用来指定Annotation的ElementType属性。</span><br><span class="line"><span class="variable">@SuppressWarnings</span> -- <span class="variable">@SuppressWarnings</span> 所标注内容产生的警告，编译器会对这些警告保持静默。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>定义MyAnnotation（有@Inherited）。父类用MyAnnotation注解，则子类也具有了MyAnnotation注解。</p>
<p>如果MyAnnotation（没有@Inherited），则父类有MyAnnotation注解，子类没有MyAnnotation注解。</p>
</blockquote>
<p>SupressWarnings常用的关键字的表格</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">deprecation  <span class="comment">-- 使用了不赞成使用的类或方法时的警告</span></span><br><span class="line">unchecked    <span class="comment">-- 执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型。</span></span><br><span class="line">fallthrough  <span class="comment">-- 当 Switch 程序块直接通往下一种情况而没有 Break 时的警告。</span></span><br><span class="line"><span class="type">path</span>         <span class="comment">-- 在类路径、源文件路径等中有不存在的路径时的警告。</span></span><br><span class="line"><span class="type">serial</span>       <span class="comment">-- 当在可序列化的类上缺少 serialVersionUID 定义时的警告。</span></span><br><span class="line">finally      <span class="comment">-- 任何 finally 子句不能正常完成时的警告。</span></span><br><span class="line"><span class="keyword">all</span>          <span class="comment">-- 关于以上所有情况的警告。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用@SuppressWarnings的例子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SupressWarningTest</span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(value=&#123;&quot;deprecation&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">113</span>, <span class="number">8</span>, <span class="number">26</span>);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-BigDecimal运算</title>
    <url>/posts/685cc360/</url>
    <content><![CDATA[<h1 id="BigDecimal加减乘除计算"><a href="#BigDecimal加减乘除计算" class="headerlink" title="BigDecimal加减乘除计算"></a><a href="https://www.jianshu.com/p/683b2406342f">BigDecimal加减乘除计算</a></h1><ul>
<li>加法：<code>add()函数</code></li>
<li>减法：<code>subtract()函数</code></li>
<li>乘法：<code>multiply()函数</code></li>
<li>除法：<code>divide()函数</code></li>
<li>绝对值：<code>abs()函数</code></li>
</ul>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">valueSec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">1000000</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">valueThi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(-<span class="number">1000000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//尽量用字符串的形式初始化</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">stringFir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.005&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">stringSec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1000000&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">stringThi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;-1000000&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">addVal</span> <span class="operator">=</span> valueFir.add(valueSec);</span><br><span class="line">System.out.println(<span class="string">&quot;加法用value结果：&quot;</span> + addVal);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">addStr</span> <span class="operator">=</span> stringFir.add(stringSec);</span><br><span class="line">System.out.println(<span class="string">&quot;加法用string结果：&quot;</span> + addStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//减法</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">subtractVal</span> <span class="operator">=</span> valueFir.subtract(valueSec);</span><br><span class="line">System.out.println(<span class="string">&quot;减法value结果：&quot;</span> + subtractVal);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">subtractStr</span> <span class="operator">=</span> stringFir.subtract(stringSec);</span><br><span class="line">System.out.println(<span class="string">&quot;减法用string结果：&quot;</span> + subtractStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘法</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">multiplyVal</span> <span class="operator">=</span> valueFir.multiply(valueSec);</span><br><span class="line">System.out.println(<span class="string">&quot;乘法用value结果：&quot;</span> + multiplyVal);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">multiplyStr</span> <span class="operator">=</span> stringFir.multiply(stringSec);</span><br><span class="line">System.out.println(<span class="string">&quot;乘法用string结果：&quot;</span> + multiplyStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绝对值</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">absVal</span> <span class="operator">=</span> valueThi.abs();</span><br><span class="line">System.out.println(<span class="string">&quot;绝对值用value结果：&quot;</span> + absVal);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">absStr</span> <span class="operator">=</span> stringThi.abs();</span><br><span class="line">System.out.println(<span class="string">&quot;绝对值用string结果：&quot;</span> + absStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//除法</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">divideVal</span> <span class="operator">=</span> valueSec.divide(valueFir, <span class="number">20</span>, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">System.out.println(<span class="string">&quot;除法用value结果：&quot;</span> + divideVal);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">divideStr</span> <span class="operator">=</span> stringSec.divide(stringFir, <span class="number">20</span>, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">System.out.println(<span class="string">&quot;除法用string结果：&quot;</span> + divideStr);</span><br></pre></td></tr></table></figure>

<p>根据结果，初始化建议使用<code>String</code>：</p>
<p><img src="/posts/685cc360/webp.webp" alt="img"></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li><code>System.out.println()</code>中的数字默认是<code>double</code>类型的，<code>double</code>类型小数计算不精准。</li>
<li>使用<code>BigDecimal</code>类构造方法传入<code>double</code>类型时，计算的结果也是不精确的。</li>
</ol>
<p>因为不是所有的浮点数都能够被精确的表示成一个<code>double</code> 类型值，因此它会被表示成与它最接近的 <code>double</code> 类型的值。必须改用传入<code>String</code>的构造方法。这一点在<code>BigDecimal</code>类的构造方法注释中有说明。</p>
<h2 id="除法divide"><a href="#除法divide" class="headerlink" title="除法divide()"></a>除法divide()</h2><p>使用除法函数在divide的时候要设置各种参数，要有除数、精确的小数位数和舍入模式，不然会出现报错。源码如下：</p>
<p><img src="/posts/685cc360/image-20240409174219045.png" alt="image-20240409174219045"></p>
<h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">Dividend</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">divisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">res1</span> <span class="operator">=</span> Dividend.divide(divisor,<span class="number">3</span>,BigDecimal.ROUND_UP);</span><br><span class="line">    System.out.println(<span class="string">&quot;除法ROUND_UP：&quot;</span>+res1);</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">res2</span> <span class="operator">=</span> Dividend.divide(divisor,<span class="number">3</span>,BigDecimal.ROUND_DOWN);</span><br><span class="line">    System.out.println(<span class="string">&quot;除法ROUND_DOWN：&quot;</span>+res2);</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">res3</span> <span class="operator">=</span> Dividend.divide(divisor,<span class="number">3</span>,BigDecimal.ROUND_CEILING);</span><br><span class="line">    System.out.println(<span class="string">&quot;除法ROUND_CEILING：&quot;</span>+res3);</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">res4</span> <span class="operator">=</span> Dividend.divide(divisor,<span class="number">3</span>,BigDecimal.ROUND_FLOOR);</span><br><span class="line">    System.out.println(<span class="string">&quot;除法ROUND_FLOOR：&quot;</span>+res4);</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">res5</span> <span class="operator">=</span> Dividend.divide(divisor,<span class="number">3</span>,BigDecimal.ROUND_HALF_UP);</span><br><span class="line">    System.out.println(<span class="string">&quot;除法ROUND_HALF_UP：&quot;</span>+res5);</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">res6</span> <span class="operator">=</span> Dividend.divide(divisor,<span class="number">3</span>,BigDecimal.ROUND_HALF_DOWN);</span><br><span class="line">    System.out.println(<span class="string">&quot;除法ROUND_HALF_DOWN：&quot;</span>+res6);</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">res7</span> <span class="operator">=</span> Dividend.divide(divisor,<span class="number">3</span>,BigDecimal.ROUND_HALF_EVEN);</span><br><span class="line">    System.out.println(<span class="string">&quot;除法ROUND_HALF_EVEN：&quot;</span>+res7);</span><br><span class="line">    <span class="type">BigDecimal</span> <span class="variable">res8</span> <span class="operator">=</span> Dividend.divide(divisor,<span class="number">3</span>,BigDecimal.ROUND_UNNECESSARY);</span><br><span class="line">    System.out.println(<span class="string">&quot;除法ROUND_UNNECESSARY：&quot;</span>+res8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/posts/685cc360/image-20240409174209311.png" alt="image-20240409174209311"></p>
<h2 id="舍入模式"><a href="#舍入模式" class="headerlink" title="舍入模式"></a>舍入模式</h2><ol>
<li><p><code>ROUND_UP</code></p>
<p>舍入远离零的舍入模式。在丢弃非零部分之前始终增加数字(始终对非零舍弃部分前面的数字加1)。注意，此舍入模式始终不会减少计算值的大小。</p>
</li>
<li><p><code>ROUND_DOWN</code></p>
<p>接近零的舍入模式。在丢弃某部分之前始终不增加数字(从不对舍弃部分前面的数字加1，即截短)。注意，此舍入模式始终不会增加计算值的大小。</p>
</li>
<li><p><code>ROUND_CEILING</code></p>
<p>接近正无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUND_UP 相同；如果为负，则舍入行为与 ROUND_DOWN 相同。注意，此舍入模式始终不会减少计算值。</p>
</li>
<li><p><code>ROUND_FLOOR</code></p>
<p>接近负无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUND_DOWN 相同；如果为负，则舍入行为与 ROUND_UP 相同。注意，此舍入模式始终不会增加计算值。</p>
</li>
<li><p><code>ROUND_HALF_UP</code></p>
<p>向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。如果舍弃部分 &gt;&#x3D; 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同。注意，这是我们大多数人在小学时就学过的舍入模式(四舍五入)。</p>
</li>
<li><p><code>ROUND_HALF_DOWN</code></p>
<p>向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为上舍入的舍入模式。如果舍弃部分 &gt; 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同(五舍六入)。</p>
</li>
<li><p><code>ROUND_HALF_EVEN</code></p>
<p>向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。如果舍弃部分左边的数字为奇数，则舍入行为与 ROUND_HALF_UP 相同；如果为偶数，则舍入行为与 ROUND_HALF_DOWN 相同。注意，在重复进行一系列计算时，此舍入模式可以将累加错误减到最小。此舍入模式也称为“银行家舍入法”，主要在美国使用。四舍六入，五分两种情况。如果前一位为奇数，则入位，否则舍去。</p>
<p>以下例子为保留小数点1位，那么这种舍入方式下的结果。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>.<span class="number">15</span>&gt;<span class="number">1</span>.<span class="number">2</span> <span class="number">1</span>.<span class="number">25</span>&gt;<span class="number">1</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ROUND_UNNECESSARY</code></p>
<p>断言请求的操作具有精确的结果，因此不需要舍入。如果对获得精确结果的操作指定此舍入模式，则抛出ArithmeticException。</p>
<p><img src="/posts/685cc360/image-20240409174150627.png" alt="image-20240409174150627"></p>
</li>
</ol>
<h1 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a><a href="https://mp.weixin.qq.com/s/5e87MWCsiewH-fuNW_CCZA">工具推荐</a></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vivo.ars.util;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于高精确处理常用的数学运算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticUtils</span> &#123;</span><br><span class="line">    <span class="comment">//默认除法运算精度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEF_DIV_SCALE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v1));</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">add</span><span class="params">(String v1, String v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">add</span><span class="params">(String v1, String v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sub</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v1));</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">sub</span><span class="params">(String v1, String v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sub</span><span class="params">(String v1, String v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">mul</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v1));</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">mul</span><span class="params">(String v1, String v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">mul</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v1));</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> round(b1.multiply(b2).doubleValue(), scale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">mul</span><span class="params">(String v1, String v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到</span></span><br><span class="line"><span class="comment">     * 小数点以后10位，以后的数字四舍五入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">div</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> div(v1, v2, DEF_DIV_SCALE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指</span></span><br><span class="line"><span class="comment">     * 定精度，以后的数字四舍五入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 表示表示需要精确到小数点以后几位。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">div</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v1));</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指</span></span><br><span class="line"><span class="comment">     * 定精度，以后的数字四舍五入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 表示需要精确到小数点以后几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">div</span><span class="params">(String v1, String v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="keyword">return</span> b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的小数位四舍五入处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v     需要四舍五入的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">round</span><span class="params">(<span class="type">double</span> v, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(Double.toString(v));</span><br><span class="line">        <span class="keyword">return</span> b.setScale(scale, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的小数位四舍五入处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v     需要四舍五入的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">round</span><span class="params">(String v, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v);</span><br><span class="line">        <span class="keyword">return</span> b.setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取余数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 余数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">remainder</span><span class="params">(String v1, String v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.remainder(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取余数  BigDecimal</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 余数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">remainder</span><span class="params">(BigDecimal v1, BigDecimal v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v1.remainder(v2).setScale(scale, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被比较数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 比较数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果v1 大于v2 则 返回true 否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(String v1, String v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="type">int</span> <span class="variable">bj</span> <span class="operator">=</span> b1.compareTo(b2);</span><br><span class="line">        <span class="type">boolean</span> res;</span><br><span class="line">        <span class="keyword">if</span> (bj &gt; <span class="number">0</span>)</span><br><span class="line">            res = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java代码片段</category>
      </categories>
  </entry>
  <entry>
    <title>Java-日期</title>
    <url>/posts/9972d096/</url>
    <content><![CDATA[<h1 id="今年你因为YYYY-MM-dd被锤了么？"><a href="#今年你因为YYYY-MM-dd被锤了么？" class="headerlink" title="今年你因为YYYY-MM-dd被锤了么？"></a><a href="https://juejin.cn/post/7045824361881665549?utm_source=gold_browser_extension">今年你因为YYYY-MM-dd被锤了么？</a></h1><p>背景：使用<code>YYYY-MM-dd</code>，还是<code>yyyy-MM-dd</code></p>
<p>结论：使用<code>yyyy-MM-dd</code></p>
<p>原因：因为<code>YYYY</code>是<code>week-based-year</code>，即当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，那么这周就算人下一年。</p>
<p>具体代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tests</span> &#123; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">df1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;YYYY-MM-dd&quot;</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">df2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        c.set(Calendar.YEAR, <span class="number">2021</span>);</span><br><span class="line">        c.set(Calendar.MONTH, <span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2021年12月25日周六</span></span><br><span class="line">        c.set(Calendar.DATE, <span class="number">25</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;YYYY-MM-dd = &quot;</span> + df1.format(c.getTime()));</span><br><span class="line">        System.out.println(<span class="string">&quot;yyyy-MM-dd = &quot;</span> + df2.format(c.getTime()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分割线</span></span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2021年12月26日 周日</span></span><br><span class="line">        c.set(Calendar.DATE, <span class="number">26</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;YYYY-MM-dd = &quot;</span> + df1.format(c.getTime()));</span><br><span class="line">        System.out.println(<span class="string">&quot;yyyy-MM-dd = &quot;</span> + df2.format(c.getTime()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">//输出</span><br><span class="line"><span class="attribute">YYYY-MM-dd</span> <span class="operator">=</span> <span class="number">2021</span>-<span class="number">12</span>-<span class="number">25</span></span><br><span class="line"><span class="attribute">yyyy-MM-dd</span> <span class="operator">=</span> <span class="number">2021</span>-<span class="number">12</span>-<span class="number">25</span></span><br><span class="line"><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">YYYY-MM-dd</span> <span class="operator">=</span> <span class="number">2022</span>-<span class="number">12</span>-<span class="number">26</span></span><br><span class="line"><span class="attribute">yyyy-MM-dd</span> <span class="operator">=</span> <span class="number">2021</span>-<span class="number">12</span>-<span class="number">26</span></span><br></pre></td></tr></table></figure>

<p><code>YYYY-MM-dd</code>格式化<code>2021年12月26日</code>会到2022年。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-编程优化</title>
    <url>/posts/f928caa5/</url>
    <content><![CDATA[<ul>
<li>[不使用 !&#x3D; null](#不使用 !&#x3D;null)</li>
<li><a href="#%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97-%E5%A4%96%E5%B0%8F%E5%86%85%E5%A4%A7">循环嵌套-外小内大</a></li>
<li><a href="#%E6%8F%90%E5%8F%96%E4%B8%8E%E5%BE%AA%E7%8E%AF%E6%97%A0%E5%85%B3%E7%9A%84%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E6%94%BE%E5%BE%AA%E7%8E%AF%E5%A4%96">提取与循环无关的表达式-放在循环外</a></li>
<li><a href="#%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7-%E6%94%BE%E5%BE%AA%E7%8E%AF%E5%A4%96">异常捕获-放在循环外</a></li>
</ul>
<span id="more"></span>


<h1 id="不使用-x3D-null"><a href="#不使用-x3D-null" class="headerlink" title="不使用 !&#x3D;null"></a><a href="https://mp.weixin.qq.com/s/jlsFNbt8dwu2NGiaeNIGJg">不使用 !&#x3D;null</a></h1><h2 id="一些实践建议："><a href="#一些实践建议：" class="headerlink" title="一些实践建议："></a>一些实践建议：</h2><ol>
<li><p>返回类型是<code>collections</code>，返回结果为空时，可以返回一个空的<code>collections</code>（empty list）而不是返回<code>null</code>，这样就可以大胆地处理这个返回。（忽略判空）</p>
</li>
<li><p>返回类型不是<code>collections</code>，那么就返回个空对象（而非null对象），举例：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Parser</span>&#123;</span><br><span class="line">    Action <span class="title function_">findAction</span><span class="params">(String userInput)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个例子里调用 <code>Parser#findAction</code>会有空指针问题。改造下（使用<code>Null Object pattern（空对象模式）</code>）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">MyParser</span> <span class="keyword">implements</span> <span class="title class_">Parser</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Action</span> <span class="variable">DO_NOTHING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Action</span>()&#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>&#123;</span><br><span class="line">          <span class="comment">/* do nothing */</span></span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> Action <span class="title function_">findAction</span><span class="params">(String userInput)</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="comment">/* we can&#x27;t find any actions */</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> DO_NOTHING;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对比这俩例子的调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冗余：每获取一个对象，就判一次空</span></span><br><span class="line"><span class="type">Parser</span> <span class="variable">parser</span> <span class="operator">=</span> ParserFactory.getParser();</span><br><span class="line"><span class="keyword">if</span> (parser == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// now what?</span></span><br><span class="line">    <span class="comment">// this would be an example of where null isn&#x27;t (or shouldn&#x27;t be) a valid response</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Action</span> <span class="variable">action</span> <span class="operator">=</span> parser.findAction(someInput);</span><br><span class="line"><span class="keyword">if</span> (action == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// do nothing</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    action.doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//精简</span></span><br><span class="line">ParserFactory.getParser().findAction(someInput).doSomething();</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="其他回答精选"><a href="#其他回答精选" class="headerlink" title="其他回答精选"></a>其他回答精选</h2><ol>
<li>如果要用equal方法，请用object&lt;不可能为空&gt;.equal(object&lt;可能为空&gt;))<br>例如：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;bar&quot;</span>.equals(foo)</span><br><span class="line"> <span class="comment">//而不是</span></span><br><span class="line"> foo.equals(<span class="string">&quot;bar&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>Java8或者guava lib中，提供了Optional类，这是一个元素容器，通过它来封装对象，可以减少判空。不过代码量还是不少。不爽。</li>
<li>如果你想返回null，请停下来想一想，这个地方是否更应该抛出一个异常</li>
</ol>
<h1 id="代码优化技巧"><a href="#代码优化技巧" class="headerlink" title="代码优化技巧"></a>代码优化技巧</h1><h2 id="循环嵌套-外小内大"><a href="#循环嵌套-外小内大" class="headerlink" title="循环嵌套-外小内大"></a>循环嵌套-外小内大</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stratTime = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">endTime = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">&quot;外大内小耗时：&quot;</span>+ (endTime - stratTime));</span><br></pre></td></tr></table></figure>
<p>应改为  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stratTime = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10000000</span>; j++) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">endTime = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">&quot;外小内大耗时：&quot;</span>+(endTime - stratTime));</span><br></pre></td></tr></table></figure>
<p>前者耗时：200192114<br>后者耗时：97995997  </p>
<h2 id="提取与循环无关的表达式-放循环外"><a href="#提取与循环无关的表达式-放循环外" class="headerlink" title="提取与循环无关的表达式-放循环外"></a>提取与循环无关的表达式-放循环外</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fstratTime = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">    i=i*a*b;</span><br><span class="line">&#125;</span><br><span class="line">endTime = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">&quot;未提取耗时：&quot;</span>+(endTime - stratTime));</span><br></pre></td></tr></table></figure>

<p>应改为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stratTime = System.nanoTime();</span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">endTime = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">&quot;优化list耗时：&quot;</span>+(endTime - stratTime));</span><br></pre></td></tr></table></figure>

<p>前者耗时：27375<br>后者耗时：2444 （<code>list.size()</code>每次循环都会被执行一次）</p>
<h2 id="异常捕获-放循环外"><a href="#异常捕获-放循环外" class="headerlink" title="异常捕获-放循环外"></a>异常捕获-放循环外</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stratTime = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">endTime = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">&quot;在内部捕获异常耗时：&quot;</span>+(endTime - stratTime));</span><br></pre></td></tr></table></figure>

<p>应改为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stratTime = System.nanoTime();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">    &#125;<span class="comment">//加入Java开发交流君样：756584822一起吹水聊天</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">endTime = System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">&quot;在外部捕获异常耗时：&quot;</span>+(endTime - stratTime));</span><br></pre></td></tr></table></figure>

<p>前者耗时：12150142<br>后者耗时：1955 （捕获异常非常耗时）</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>枚举相关</title>
    <url>/posts/5df24c20/</url>
    <content><![CDATA[<h1 id="传入code找value值"><a href="#传入code找value值" class="headerlink" title="传入code找value值"></a>传入code找value值</h1><h2 id="第一种：name-value"><a href="#第一种：name-value" class="headerlink" title="第一种：name-value"></a>第一种：name-value</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * driver-class-name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">JdbcDriverTypeEnum</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mysql</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MYSQL(<span class="string">&quot;MYSQL&quot;</span>,<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    JdbcDriverTypeEnum(String name, String value) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDriverType</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (JdbcDriverTypeEnum type : JdbcDriverTypeEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.equals(type.getName())) &#123;</span><br><span class="line">                <span class="keyword">return</span> type.value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="自己的实例"><a href="#自己的实例" class="headerlink" title="自己的实例"></a>自己的实例</h3><p>在枚举类中添加获取枚举对象的方法（注意：<strong>values()就是所有枚举对象数组</strong>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xm597.common.constants;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lyk</span></span><br><span class="line"><span class="comment"> * time 2021/7/12 10:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ApiErrorCodeEnum</span> &#123;</span><br><span class="line">	API_ERROR_CODE_1000(-<span class="number">1000</span>, <span class="string">&quot;请重新下载最新版本！&quot;</span>),</span><br><span class="line">	API_ERROR_CODE_1005(-<span class="number">1005</span>, <span class="string">&quot;公司营业执照审核未通过！&quot;</span>),</span><br><span class="line">	API_ERROR_CODE_1006(-<span class="number">1006</span>, <span class="string">&quot;请完善公司基础信息！&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line"></span><br><span class="line">	ApiErrorCodeEnum(<span class="type">int</span> code, String msg) &#123;</span><br><span class="line">		<span class="built_in">this</span>.code = code;</span><br><span class="line">		<span class="built_in">this</span>.msg = msg;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ApiErrorCodeEnum <span class="title function_">getInstance</span><span class="params">(<span class="type">int</span> code)</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (ApiErrorCodeEnum value : values()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (code == value.getCode())&#123;</span><br><span class="line">				<span class="keyword">return</span> value;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> code;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> msg;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getJustTipsMsg</span><span class="params">(<span class="type">int</span> apiErrorCode)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ApiErrorCodeEnum.getInstance(apiErrorCode) != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ApiErrorCodeEnum.getInstance(apiErrorCode).getMsg();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="第二种：value"><a href="#第二种：value" class="headerlink" title="第二种：value"></a>第二种：value</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">JdbcDriverTypeEnum</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mysql</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MYSQL(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>),</span><br><span class="line">    ORACLE(<span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    JdbcDriverTypeEnum(String value) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDriverType</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (JdbcDriverTypeEnum enumValue : values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.equals(name, enumValue.name())) &#123;</span><br><span class="line">                <span class="keyword">return</span> enumValue.value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="枚举内容可以同时放不同的基本类型数据"><a href="#枚举内容可以同时放不同的基本类型数据" class="headerlink" title="枚举内容可以同时放不同的基本类型数据"></a>枚举内容可以同时放不同的基本类型数据</h1><blockquote>
<p>这种情况虽然暂时没有用到</p>
</blockquote>
<p>比如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">TypeEnum</span>&#123;</span><br><span class="line">    MYSQL(<span class="string">&quot;hello&quot;</span>), ORACLE(<span class="number">123</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    </span><br><span class="line">    TypeEnum(String name)&#123;</span><br><span class="line">        <span class="built_in">this</span>.name  = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    TypeEnum(<span class="type">int</span> index)&#123;</span><br><span class="line">        <span class="built_in">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.index;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContext</span><span class="params">(Context context)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Context <span class="title function_">getContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        </span><br><span class="line">        <span class="type">TypeEnum</span> <span class="variable">type1</span> <span class="operator">=</span> TypeEnum.MYSQL.setContext(<span class="built_in">this</span>);</span><br><span class="line">        <span class="type">TypeEnum</span> <span class="variable">type2</span> <span class="operator">=</span> TypeEnum.ORACLE.setContext(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//上面这俩取到的Context是同一个对象，type1.getContext()===type2.getContext()</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(type1.getName());<span class="comment">//h</span></span><br><span class="line">        System.out.println(type2.getIndex());<span class="comment">//123</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java代码片段</category>
      </categories>
      <tags>
        <tag>Java代码片段</tag>
      </tags>
  </entry>
  <entry>
    <title>口水话理解设计模式</title>
    <url>/posts/bbb6fccb/</url>
    <content><![CDATA[<h1 id="口水话理解设计模式"><a href="#口水话理解设计模式" class="headerlink" title="口水话理解设计模式"></a>口水话理解设计模式</h1><h2 id="01-工厂方法"><a href="#01-工厂方法" class="headerlink" title="01 工厂方法"></a>01 工厂方法</h2><p>追 MM 少不了请吃饭了，麦当劳的鸡翅和肯德基的鸡翅都是 MM 爱吃的东西，虽然口味有所不同，但不管你带 MM 去麦当劳或肯德基，只管向服务员说「来四个鸡翅」就行了。麦当劳和肯德基就是生产鸡翅的 Factory 工厂模式：客户类和工厂类分开。<br>消费者任何时候需要某种产品，只需向工厂请求即可。消费者无须修改就可以接纳新产品。缺点是当产品修改时，工厂类也要做相应的修改。如：如何创建及如何向客户端提供。</p>
<h2 id="02-建造者模式"><a href="#02-建造者模式" class="headerlink" title="02 建造者模式"></a>02 建造者模式</h2><p>MM 最爱听的就是「我爱你」这句话了，见到不同地方的 MM，要能够用她们的方言跟她说这句话哦，我有一个多种语言翻译机，上面每种语言都有一个按键，见到 MM 我只要按对应的键，它就能够用相应的语言说出「我爱你」这句话了，国外的 MM 也可以轻松搞掂，这就是我的「我爱你」builder。<br>建造模式：将产品的内部表象和产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。建造模式使得产品内部表象可以独立的变化，客户不必知道产品内部组成的细节。建造模式可以强制实行一种分步骤进行的建造过程。</p>
<h2 id="03-抽象工厂"><a href="#03-抽象工厂" class="headerlink" title="03 抽象工厂"></a>03 抽象工厂</h2><p>请 MM 去麦当劳吃汉堡，不同的 MM 有不同的口味，要每个都记住是一件烦人的事情，我一般采用 Factory Method 模式，带着 MM 到服务员那儿，说「要一个汉堡」，具体要什么样的汉堡呢，让 MM 直接跟服务员说就行了。<br>工厂方法模式：核心工厂类不再负责所有产品的创建，而是将具体创建的工作交给子类去做，成为一个抽象工厂角色，仅负责给出具体工厂类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节。</p>
<h2 id="04-原型模式"><a href="#04-原型模式" class="headerlink" title="04 原型模式"></a>04 原型模式</h2><p>跟 MM 用 QQ 聊天，一定要说些深情的话语了，我搜集了好多肉麻的情话，需要时只要 copy 出来放到 QQ 里面就行了，这就是我的情话 prototype 了。（100 块钱一份，你要不要）<br>原始模型模式：通过给出一个原型对象来指明所要创建的对象的类型，然后用复制这个原型对象的方法创建出更多同类型的对象。原始模型模式允许动态的增加或减少产品类，产品类不需要非得有任何事先确定的等级结构，原始模型模式适用于任何的等级结构。缺点是每一个类都必须配备一个克隆方法。</p>
<h2 id="05-单态模式"><a href="#05-单态模式" class="headerlink" title="05 单态模式"></a>05 单态模式</h2><p>俺有 6 个漂亮的老婆，她们的老公都是我，我就是我们家里的老公 Sigleton，她们只要说道「老公」，都是指的同一个人，那就是我 (刚才做了个梦啦，哪有这么好的事)<br>单例模式：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式。单例模式只应在有真正的 “单一实例” 的需求时才可使用。</p>
<h2 id="06-适配器模式"><a href="#06-适配器模式" class="headerlink" title="06 适配器模式"></a>06 适配器模式</h2><p>在朋友聚会上碰到了一个美女 Sarah，从香港来的，可我不会说粤语，她不会说普通话，只好求助于我的朋友 kent 了，他作为我和 Sarah 之间的 Adapter，让我和 Sarah 可以相互交谈了 (也不知道他会不会耍我)<br>适配器（变压器）模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口原因不匹配而无法一起工作的两个类能够一起工作。适配类可以根据参数返还一个合适的实例给客户端。</p>
<h2 id="07-桥梁模式"><a href="#07-桥梁模式" class="headerlink" title="07 桥梁模式"></a>07 桥梁模式</h2><p>早上碰到 MM，要说早上好，晚上碰到 MM，要说晚上好；碰到 MM 穿了件新衣服，要说你的衣服好漂亮哦，碰到 MM 新做的发型，要说你的头发好漂亮哦。不要问我 “早上碰到 MM 新做了个发型怎么说” 这种问题，自己用 BRIDGE 组合一下不就行了<br>桥梁模式：将抽象化与实现化脱耦，使得二者可以独立的变化，也就是说将他们之间的强关联变成弱关联，也就是指在一个软件系统的抽象化和实现化之间使用组合 &#x2F; 聚合关系而不是继承关系，从而使两者可以独立的变化。</p>
<h2 id="08-合成模式"><a href="#08-合成模式" class="headerlink" title="08 合成模式"></a>08 合成模式</h2><p>Mary 今天过生日。“我过生日，你要送我一件礼物。”“嗯，好吧，去商店，你自己挑。”“这件 T 恤挺漂亮，买，这条裙子好看，买，这个包也不错，买。”“喂，买了三件了呀，我只答应送一件礼物的哦。”“什么呀，T 恤加裙子加包包，正好配成一套呀，小姐，麻烦你包起来。”“……”，MM 都会用 Composite 模式了，你会了没有？<br>合成模式：合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式就是一个处理对象的树结构的模式。合成模式把部分与整体的关系用树结构表示出来。合成模式使得客户端把一个个单独的成分对象和由他们复合而成的合成对象同等看待。</p>
<h2 id="09-装饰模式"><a href="#09-装饰模式" class="headerlink" title="09 装饰模式"></a>09 装饰模式</h2><p>Mary 过完轮到 Sarly 过生日，还是不要叫她自己挑了，不然这个月伙食费肯定玩完，拿出我去年在华山顶上照的照片，在背面写上 “最好的的礼物，就是爱你的 Fita”，再到街上礼品店买了个像框（卖礼品的 MM 也很漂亮哦），再找隔壁搞美术设计的 Mike 设计了一个漂亮的盒子装起来……，我们都是 Decorator，最终都在修饰我这个人呀，怎么样，看懂了吗？<br>装饰模式：装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案，提供比继承更多的灵活性。动态给一个对象增加功能，这些功能可以再动态的撤消。增加由一些基本功能的排列组合而产生的非常大量的功能。</p>
<h2 id="10-门面模式"><a href="#10-门面模式" class="headerlink" title="10 门面模式"></a>10 门面模式</h2><p>我有一个专业的 Nikon 相机，我就喜欢自己手动调光圈、快门，这样照出来的照片才专业，但 MM 可不懂这些，教了半天也不会。幸好相机有 Facade 设计模式，把相机调整到自动档，只要对准目标按快门就行了，一切由相机自动调整，这样 MM 也可以用这个相机给我拍张照片了。门面模式：外部与一个子系统的通信必须通过一个统一的门面对象进行。<br>门面模式提供一个高层次的接口，使得子系统更易于使用。每一个子系统只有一个门面类，而且此门面类只有一个实例，也就是说它是一个单例模式。但整个系统可以有多个门面类。</p>
<h2 id="11-享元模式"><a href="#11-享元模式" class="headerlink" title="11 享元模式"></a>11 享元模式</h2><p>每天跟 MM 发短信，手指都累死了，最近买了个新手机，可以把一些常用的句子存在手机里，要用的时候，直接拿出来，在前面加上 MM 的名字就可以发送了，再不用一个字一个字敲了。共享的句子就是 Flyweight，MM 的名字就是提取出来的外部特征，根据上下文情况使用。享元模式：FLYWEIGHT 在拳击比赛中指最轻量级。<br>享元模式以共享的方式高效的支持大量的细粒度对象。享元模式能做到共享的关键是区分内蕴状态和外蕴状态。内蕴状态存储在享元内部，不会随环境的改变而有所不同。外蕴状态是随环境的改变而改变的。外蕴状态不能影响内蕴状态，它们是相互独立的。<br>将可以共享的状态和不可以共享的状态从常规类中区分开来，将不可以共享的状态从类里剔除出去。客户端不可以直接创建被共享的对象，而应当使用一个工厂对象负责创建被共享的对象。享元模式大幅度的降低内存中对象的数量。</p>
<h2 id="12-代理模式"><a href="#12-代理模式" class="headerlink" title="12 代理模式"></a>12 代理模式</h2><p>跟 MM 在网上聊天，一开头总是 “hi, 你好”,“你从哪儿来呀？”“你多大了？”“身高多少呀？” 这些话，真烦人，写个程序做为我的 Proxy 吧，凡是接收到这些话都设置好了自己的回答，接收到其他的话时再通知我回答，怎么样，酷吧。<br>代理模式：代理模式给某一个对象提供一个代理对象，并由代理对象控制对源对象的引用。代理就是一个人或一个机构代表另一个人或者一个机构采取行动。某些情况下，客户不想或者不能够直接引用一个对象，代理对象可以在客户和目标对象直接起到中介的作用。<br>客户端分辨不出代理主题对象与真实主题对象。代理模式可以并不知道真正的被代理对象，而仅仅持有一个被代理对象的接口，这时候代理对象不能够创建被代理对象，被代理对象必须有系统的其他角色代为创建并传入。</p>
<h2 id="13-责任链模式"><a href="#13-责任链模式" class="headerlink" title="13 责任链模式"></a>13 责任链模式</h2><p>晚上去上英语课，为了好开溜坐到了最后一排，哇，前面坐了好几个漂亮的 MM 哎，找张纸条，写上 “Hi, 可以做我的女朋友吗？如果不愿意请向前传”，纸条就一个接一个的传上去了，糟糕，传到第一排的 MM 把纸条传给老师了，听说是个老处女呀，快跑！<br>责任链模式：在责任链模式中，很多对象由每一个对象对其下家的引用而接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。客户并不知道链上的哪一个对象最终处理这个请求，系统可以在不影响客户端的情况下动态的重新组织链和分配责任。处理者有两个选择：承担责任或者把责任推给下家。一个请求可以最终不被任何接收端对象所接受。</p>
<h2 id="14-命令模式"><a href="#14-命令模式" class="headerlink" title="14 命令模式"></a>14 命令模式</h2><p>俺有一个 MM 家里管得特别严，没法见面，只好借助于她弟弟在我们俩之间传送信息，她对我有什么指示，就写一张纸条让她弟弟带给我。这不，她弟弟又传送过来一个 COMMAND，为了感谢他，我请他吃了碗杂酱面，哪知道他说：“我同时给我姐姐三个男朋友送 COMMAND，就数你最小气，才请我吃面。”<br>命令模式：命令模式把一个请求或者操作封装到一个对象中。命令模式把发出命令的责任和执行命令的责任分割开，委派给不同的对象。命令模式允许请求的一方和发送的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否执行，何时被执行以及是怎么被执行的。系统支持命令的撤消。</p>
<h2 id="15-解释器模式"><a href="#15-解释器模式" class="headerlink" title="15 解释器模式"></a>15 解释器模式</h2><p>俺有一个《泡 MM 真经》，上面有各种泡 MM 的攻略，比如说去吃西餐的步骤、去看电影的方法等等，跟 MM 约会时，只要做一个 Interpreter，照着上面的脚本执行就可以了。<br>解释器模式：给定一个语言后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。客户端可以使用这个解释器来解释这个语言中的句子。解释器模式将描述怎样在有了一个简单的文法后，使用模式设计解释这些语句。<br>在解释器模式里面提到的语言是指任何解释器对象能够解释的任何组合。在解释器模式中需要定义一个代表文法的命令类的等级结构，也就是一系列的组合规则。每一个命令对象都有一个解释方法，代表对命令对象的解释。命令对象的等级结构中的对象的任何排列组合都是一个语言。</p>
<h2 id="16-迭代模式"><a href="#16-迭代模式" class="headerlink" title="16 迭代模式"></a>16 迭代模式</h2><p>我爱上了 Mary，不顾一切的向她求婚。Mary：“想要我跟你结婚，得答应我的条件” 我：“什么条件我都答应，你说吧” Mary：“我看上了那个一克拉的钻石” 我：“我买，我买，还有吗？” Mary：“我看上了湖边的那栋别墅” 我：“我买，我买，还有吗？” Mary：“我看上那辆法拉利跑车” 我脑袋嗡的一声，坐在椅子上，一咬牙：“我买，我买，还有吗？”<br>迭代模式：迭代模式可以顺序访问一个聚集中的元素而不必暴露聚集的内部表象。多个对象聚在一起形成的总体称之为聚集，聚集对象是能够包容一组对象的容器对象。迭代子模式将迭代逻辑封装到一个独立的子对象中，从而与聚集本身隔开。<br>迭代模式简化了聚集的界面。每一个聚集对象都可以有一个或一个以上的迭代子对象，每一个迭代子的迭代状态可以是彼此独立的。迭代算法可以独立于聚集角色变化。</p>
<h2 id="17-调停者模式"><a href="#17-调停者模式" class="headerlink" title="17 调停者模式"></a>17 调停者模式</h2><p>四个 MM 打麻将，相互之间谁应该给谁多少钱算不清楚了，幸亏当时我在旁边，按照各自的筹码数算钱，赚了钱的从我这里拿，赔了钱的也付给我，一切就 OK 啦，俺得到了四个 MM 的电话。调停者模式：调停者模式包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用。从而使他们可以松散偶合。<br>当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。保证这些作用可以彼此独立的变化。调停者模式将多对多的相互作用转化为一对多的相互作用。调停者模式将对象的行为和协作抽象化，把对象在小尺度的行为上与其他对象的相互作用分开处理。</p>
<h2 id="18-备忘录模式"><a href="#18-备忘录模式" class="headerlink" title="18 备忘录模式"></a>18 备忘录模式</h2><p>同时跟几个 MM 聊天时，一定要记清楚刚才跟 MM 说了些什么话，不然 MM 发现了会不高兴的哦，幸亏我有个备忘录，刚才与哪个 MM 说了什么话我都拷贝一份放到备忘录里面保存，这样可以随时察看以前的记录啦。<br>备忘录模式：备忘录对象是一个用来存储另外一个对象内部状态的快照的对象。备忘录模式的用意是在不破坏封装的条件下，将一个对象的状态捉住，并外部化，存储起来，从而可以在将来合适的时候把这个对象还原到存储起来的状态。</p>
<h2 id="19-观察者模式"><a href="#19-观察者模式" class="headerlink" title="19 观察者模式"></a>19 观察者模式</h2><p>想知道咱们公司最新 MM 情报吗？加入公司的 MM 情报邮件组就行了，tom 负责搜集情报，他发现的新情报不用一个一个通知我们，直接发布给邮件组，我们作为订阅者（观察者）就可以及时收到情报啦。<br>观察者模式：观察者模式定义了一种一队多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。</p>
<h2 id="20-状态模式"><a href="#20-状态模式" class="headerlink" title="20 状态模式"></a>20 状态模式</h2><p>跟 MM 交往时，一定要注意她的状态哦，在不同的状态时她的行为会有不同，比如你约她今天晚上去看电影，对你没兴趣的 MM 就会说 “有事情啦”，对你不讨厌但还没喜欢上的 MM 就会说 “好啊，不过可以带上我同事么？”，已经喜欢上你的 MM 就会说 “几点钟？看完电影再去泡吧怎么样？”，当然你看电影过程中表现良好的话，也可以把 MM 的状态从不讨厌不喜欢变成喜欢哦。<br>状态模式：状态模式允许一个对象在其内部状态改变的时候改变行为。这个对象看上去象是改变了它的类一样。状态模式把所研究的对象的行为包装在不同的状态对象里，每一个状态对象都属于一个抽象状态类的一个子类。<br>状态模式的意图是让一个对象在其内部状态改变的时候，其行为也随之改变。状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。</p>
<h2 id="21-策略模式"><a href="#21-策略模式" class="headerlink" title="21 策略模式"></a>21 策略模式</h2><p>跟不同类型的 MM 约会，要用不同的策略，有的请电影比较好，有的则去吃小吃效果不错，有的去海边浪漫最合适，单目的都是为了得到 MM 的芳心，我的追 MM 锦囊中有好多 Strategy 哦。策略模式：策略模式针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。<br>策略模式使得算法可以在不影响到客户端的情况下发生变化。策略模把行为和环境分开。环境类负责维持和查询行为类，各种算法在具体的策略类中提供。由于算法和环境独立开来，算法的增减，修改都不会影响到环境和客户端。</p>
<h2 id="22-模板方法模式"><a href="#22-模板方法模式" class="headerlink" title="22 模板方法模式"></a>22 模板方法模式</h2><p>看过《如何说服女生shangchuang》这部经典文章吗？女生从认识到上床的不变的步骤分为巧遇、打破僵局、展开追求、接吻、前戏、动手、爱抚、进去八大步骤 (Template method)，但每个步骤针对不同的情况，都有不一样的做法，这就要看你随机应变啦 (具体实现)；<br>模板方法模式：模板方法模式准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。先制定一个顶级逻辑框架，而将逻辑的细节留给具体的子类去实现。</p>
<h2 id="23-访问者模式"><a href="#23-访问者模式" class="headerlink" title="23 访问者模式"></a>23 访问者模式</h2><p>情人节到了，要给每个 MM 送一束鲜花和一张卡片，可是每个 MM 送的花都要针对她个人的特点，每张卡片也要根据个人的特点来挑，我一个人哪搞得清楚，还是找花店老板和礼品店老板做一下 Visitor，让花店老板根据 MM 的特点选一束花，让礼品店老板也根据每个人特点选一张卡，这样就轻松多了；</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-枚举</title>
    <url>/posts/822f7f86/</url>
    <content><![CDATA[<h1 id="枚举不带值"><a href="#枚举不带值" class="headerlink" title="枚举不带值"></a>枚举不带值</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">MobileCodeActionEnum</span> &#123;</span><br><span class="line">   MOBILE_LOGIN, THIRD_LOGIN_BIND, CHANGE_PASS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (mAuthAct == MobileCodeActionEnum.MOBILE_LOGIN) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mAuthAct == MobileCodeActionEnum.THIRD_LOGIN_BIND) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mAuthAct == MobileCodeActionEnum.CHANGE_PASS) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="枚举带值"><a href="#枚举带值" class="headerlink" title="枚举带值"></a>枚举带值</h1><h2 id="枚举带单值"><a href="#枚举带单值" class="headerlink" title="枚举带单值"></a>枚举带单值</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">LoginTypeEnum</span> &#123;</span><br><span class="line">	ACCOUNT_LOGIN(<span class="string">&quot;account_login&quot;</span>), MOBILE_LOGIN(<span class="string">&quot;mobile_login&quot;</span>), THIRD_LOGIN(<span class="string">&quot;third_login&quot;</span>),</span><br><span class="line">	ONE_CLICK_LOGIN(<span class="string">&quot;one_click_login&quot;</span>), MOBILE_BIND(<span class="string">&quot;mobile_bind&quot;</span>), ACCOUNT_BIND(<span class="string">&quot;account_bind&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String loginType;</span><br><span class="line">	<span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">	LoginTypeEnum(String loginType) &#123;</span><br><span class="line">		<span class="built_in">this</span>.loginType = loginType;</span><br><span class="line">		<span class="keyword">if</span> (TextUtils.equals(loginType, <span class="string">&quot;account_login&quot;</span>)) &#123;</span><br><span class="line">			title = <span class="string">&quot;密码登录&quot;</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (TextUtils.equals(loginType, <span class="string">&quot;mobile_login&quot;</span>)) &#123;</span><br><span class="line">			title = <span class="string">&quot;手机号登录/注册&quot;</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (TextUtils.equals(loginType, <span class="string">&quot;mobile_bind&quot;</span>)) &#123;</span><br><span class="line">			title = <span class="string">&quot;手机号绑定&quot;</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (TextUtils.equals(loginType, <span class="string">&quot;account_bind&quot;</span>)) &#123;</span><br><span class="line">			title = <span class="string">&quot;账号绑定&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getLoginType</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> loginType;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getTitle</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> title;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其中 mLoginType 是 LoginTypeEnum 类型。</span></span><br><span class="line"><span class="comment">//如 LoginTypeEnum mLoginTyp = LoginTypeEnum.ACCOUNT_LOGIN;</span></span><br><span class="line"><span class="keyword">if</span> (mLoginType != LoginTypeEnum.ACCOUNT_LOGIN) &#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="枚举带多值"><a href="#枚举带多值" class="headerlink" title="枚举带多值"></a>枚举带多值</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ApiErrorCodeEnum</span> &#123;</span><br><span class="line">   TOKEN_INVALID(-<span class="number">1001</span>, <span class="string">&quot;token失效，请重新登陆&quot;</span>), UNBIND_597_ACCOUNT(-<span class="number">1106</span>, <span class="string">&quot;未绑定597账号！&quot;</span>),</span><br><span class="line">   MOBILE_BLACKLISTED(-<span class="number">1107</span>, <span class="string">&quot;该手机已被加入黑名单！&quot;</span>),MOBILE_CODE_AUTH_FAILED(-<span class="number">1109</span>,<span class="string">&quot;手机验证码错误&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line"></span><br><span class="line">   ApiErrorCodeEnum(<span class="type">int</span> code, String msg) &#123;</span><br><span class="line">      <span class="built_in">this</span>.code = code;</span><br><span class="line">      <span class="built_in">this</span>.msg = msg;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> code;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> msg;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其中code为int型</span></span><br><span class="line"><span class="keyword">if</span> (code == ApiErrorCodeEnum.UNBIND_597_ACCOUNT.getCode()) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//取枚举中的某个字段的值。如取某个状态的msg值</span></span><br><span class="line">    System.out.println(ApiErrorCodeEnum.UNBIND_597_ACCOUNT.getMsg());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>UI-ScalableImageView</title>
    <url>/posts/c8bc8e59/</url>
    <content><![CDATA[<h1 id="ScalableImageView"><a href="#ScalableImageView" class="headerlink" title="ScalableImageView"></a>ScalableImageView</h1><h2 id="放缩和移动"><a href="#放缩和移动" class="headerlink" title="放缩和移动"></a>放缩和移动</h2><p>由于有两次移动，⼀次是初始偏移，另⼀次是随⼿指拖动，所以要分开两次写 <code>translate()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">canvas.translate(offsetX * scalingFraction, offsetY * scalingFraction); <span class="comment">//⼆次⼿动偏移</span></span><br><span class="line"><span class="type">float</span> <span class="variable">imageScale</span> <span class="operator">=</span> smallImageScale + (bigImageScale - smallImageScale) * scalingFraction;</span><br><span class="line">canvas.scale(imageScale, imageScale, getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>); <span class="comment">//放缩</span></span><br><span class="line">canvas.translate(originalOffsetX, originalOffsetY); <span class="comment">// 初始偏移</span></span><br><span class="line">canvas.drawBitmap(bitmap, <span class="number">0</span>, <span class="number">0</span>, paint);</span><br></pre></td></tr></table></figure>

<h2 id="GestrueDetector"><a href="#GestrueDetector" class="headerlink" title="GestrueDetector"></a>GestrueDetector</h2><p>⽤于在点击和⻓按之外，增加其他⼿势的监听，例如双击、滑动。通过在 <code>View.onTouchEvent()</code> ⾥调⽤ <code>GestureDetector.onTouchEvent()</code> ，以代理的形式来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gestureDetector.onTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="GeasureDetector-的默认监听器：OnGestureListener"><a href="#GeasureDetector-的默认监听器：OnGestureListener" class="headerlink" title="GeasureDetector 的默认监听器：OnGestureListener"></a>GeasureDetector 的默认监听器：OnGestureListener</h2><p>通过构造⽅法 <code>GeasureDetector(Context, OnGestureListener)</code> 来配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">gestureDetector = <span class="keyword">new</span> <span class="title class_">GestureDetector</span>(context, gestureListener);</span><br></pre></td></tr></table></figure>

<p><code>OnGestureListener</code> 的⼏个回调⽅法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onDown</span><span class="params">(MotionEvent e)</span> &#123;</span><br><span class="line">    <span class="comment">// 每次 ACTION_DOWN 事件出现的时候都会被调⽤，在这⾥返回 true 可以保证必然消费掉事件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onShowPress</span><span class="params">(MotionEvent e)</span> &#123;</span><br><span class="line">    <span class="comment">// ⽤户按下 100ms 不松⼿后会被调⽤，⽤于标记「可以显示按下状态了」</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onSingleTapUp</span><span class="params">(MotionEvent e)</span> &#123;</span><br><span class="line">    <span class="comment">// ⽤户单击时被调⽤(⻓按后松⼿不会调⽤、双击的第⼆下时不会被调⽤)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onScroll</span><span class="params">(MotionEvent downEvent, MotionEvent event, <span class="type">float</span></span></span><br><span class="line"><span class="params">                        distanceX, <span class="type">float</span> distanceY)</span> &#123;</span><br><span class="line">    <span class="comment">// ⽤户滑动时被调⽤</span></span><br><span class="line">    <span class="comment">// 第⼀个事件是⽤户按下时的 ACTION_DOWN 事件，第⼆个事件是当前事件</span></span><br><span class="line">    <span class="comment">// 偏移是按下时的位置 - 当前事件的位置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLongPress</span><span class="params">(MotionEvent e)</span> &#123;</span><br><span class="line">    <span class="comment">// ⽤户⻓按（按下 500ms 不松⼿）后会被调⽤</span></span><br><span class="line">    <span class="comment">// 这个 500ms 在 GestureDetectorCompat 中变成了 600ms (？？？) &#125;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onFling</span><span class="params">(MotionEvent e1, MotionEvent e2, <span class="type">float</span> velocityX, <span class="type">float</span> velocityY)</span> &#123;</span><br><span class="line">        <span class="comment">// ⽤于滑动时迅速抬起时被调⽤，⽤于⽤户希望控件进⾏惯性滑动的场景</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="双击监听器：OnDoubleTapListener"><a href="#双击监听器：OnDoubleTapListener" class="headerlink" title="双击监听器：OnDoubleTapListener"></a>双击监听器：OnDoubleTapListener</h2><p>通过 <code>GestureDetector.setOnDoubleTapListener(OnDoubleTapListener)</code> 来配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">gestureDetector.setOnDoubleTapListener(doubleTapListener);</span><br></pre></td></tr></table></figure>

<p><code>OnDoubleTapListener</code> 的⼏个回调⽅法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onSingleTapConfirmed</span><span class="params">(MotionEvent e)</span> &#123;</span><br><span class="line">    <span class="comment">// ⽤户单击时被调⽤</span></span><br><span class="line">    <span class="comment">// 和 onSingltTapUp() 的区别在于，⽤户的⼀次点击不会⽴即调⽤这个⽅法，⽽是在⼀定</span></span><br><span class="line">    时间后（300ms），确认⽤户没有进⾏双击，这个⽅法才会被调⽤</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onDoubleTap</span><span class="params">(MotionEvent e)</span> &#123;</span><br><span class="line">    <span class="comment">// ⽤户双击时被调⽤</span></span><br><span class="line">    <span class="comment">// 注意：第⼆次触摸到屏幕时就调⽤，⽽不是抬起时</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onDoubleTapEvent</span><span class="params">(MotionEvent e)</span> &#123;</span><br><span class="line">    <span class="comment">// ⽤户双击第⼆次按下时、第⼆次按下后移动时、第⼆次按下后抬起时都会被调⽤</span></span><br><span class="line">    <span class="comment">// 常⽤于「双击拖拽」的场景</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h2 id="OverScroller"><a href="#OverScroller" class="headerlink" title="OverScroller"></a>OverScroller</h2><p>⽤于⾃动计算滑动的偏移。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">scroller = <span class="keyword">new</span> <span class="title class_">OverScroller</span>(context);</span><br></pre></td></tr></table></figure>

<p>常⽤于 <code>onFling()</code> ⽅法中，调⽤ <code>OverScroller.fling()</code> ⽅法来启动惯性滑动的计算：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onFling</span><span class="params">(MotionEvent e1, MotionEvent e2, <span class="type">float</span> velocityX, </span></span><br><span class="line"><span class="params">                       <span class="type">float</span> velocityY)</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化滑动</span></span><br><span class="line">    scroller.fling(startX, startY, velocityX, velocityY, minX, maxX, minY, </span><br><span class="line">                   maxY);</span><br><span class="line">    <span class="comment">// 下⼀帧刷新</span></span><br><span class="line">    postOnAnimation(flingRunner);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 计算此时的位置，并且如果滑动已经结束，就停⽌</span></span><br><span class="line">    <span class="keyword">if</span> (scroller.computeScrollOffset()) &#123;</span><br><span class="line">        <span class="comment">// 把此时的位置应⽤于界⾯</span></span><br><span class="line">        offsetX = scroller.getCurrX();</span><br><span class="line">        offsetY = scroller.getCurrY();</span><br><span class="line">        invalidate();</span><br><span class="line">        <span class="comment">// 下⼀帧刷新</span></span><br><span class="line">        postOnAnimation(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>hencoder</tag>
      </tags>
  </entry>
  <entry>
    <title>触摸反馈基础</title>
    <url>/posts/c91a6b3e/</url>
    <content><![CDATA[<h1 id="触摸反馈基础"><a href="#触摸反馈基础" class="headerlink" title="触摸反馈基础"></a>触摸反馈基础</h1><h2 id="自定义单-View-的触摸反馈"><a href="#自定义单-View-的触摸反馈" class="headerlink" title="自定义单 View 的触摸反馈"></a>自定义单 View 的触摸反馈</h2><ul>
<li>重写 <code>onTouchEvent()</code>，在⽅法内部定制触摸反馈算法<ul>
<li>是否消费事件取决于 <code>ACTION_DOWN</code> 事件是否返回 <code>true</code></li>
<li><code>MotionEvent</code><ul>
<li><code>getActionMasked()</code> 和 <code>getAction()</code></li>
<li><code>POINTER_DOWN</code> &#x2F; <code>POINTER_UP</code> 和 <code>getActionIndex()</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="View-onTouchEvent"><a href="#View-onTouchEvent" class="headerlink" title="View.onTouchEvent()"></a><code>View.onTouchEvent()</code></h2><ul>
<li>当⽤户按下（<code>ACTION_DOWN</code>）：<ul>
<li>如果不在滑动控件中，切换⾄按下状态，并注册⻓按计时器</li>
<li>如果在滑动控件中，切换⾄预按下状态，并注册按下计时器</li>
</ul>
</li>
<li>当进⼊按下状态并移动（<code>ACTION_MOVE</code>）：<ul>
<li>重绘 <code>Ripple Effect</code></li>
<li>如果移动出自⼰的范围，自我标记本次事件失效，忽略后续事件</li>
</ul>
</li>
<li>当⽤户抬起（<code>ACTION_UP</code>）：<ul>
<li>如果是按下状态并且未触发⻓按，切换⾄抬起状态并触发点击事件，并清除⼀切状态</li>
<li>如果已经触发⻓按，切换⾄抬起状态并清除⼀切状态</li>
</ul>
</li>
<li>当事件意外结束（<code>ACTION_CANCEL</code>）：<ul>
<li>切换⾄抬起状态，并清除⼀切状态</li>
</ul>
</li>
</ul>
<h2 id="自定义-ViewGroup-的触摸反馈"><a href="#自定义-ViewGroup-的触摸反馈" class="headerlink" title="自定义 ViewGroup 的触摸反馈"></a>自定义 <code>ViewGroup</code> 的触摸反馈</h2><ul>
<li><p>除了重写 <code>onTouchEvent()</code> ，还需要重写 <code>onInterceptTouchEvent()</code></p>
</li>
<li><p><code>onInterceptTouchEvent()</code> 不⽤在第⼀时间返回 <code>true</code>，⽽是在任意事件，需要拦截的时候返回 <code>true</code> 就⾏</p>
</li>
</ul>
<h2 id="触摸反馈的流程"><a href="#触摸反馈的流程" class="headerlink" title="触摸反馈的流程"></a>触摸反馈的流程</h2><ul>
<li><code>Activity.dispatchTouchEvent()</code><ul>
<li>递归: <code>ViewGroup(View).dispatchTouchEvent()</code><ul>
<li><code>ViewGroup.onInterceptTouchEvent()</code></li>
<li><code>child.dispatchTouchEvent()</code></li>
<li><code>super.dispatchTouchEvent()</code><ul>
<li><code>View.onTouchEvent()</code></li>
</ul>
</li>
</ul>
</li>
<li><code>Activity.onTouchEvent()</code></li>
</ul>
</li>
</ul>
<h2 id="View-dispatchTouchEvent"><a href="#View-dispatchTouchEvent" class="headerlink" title="View.dispatchTouchEvent()"></a><code>View.dispatchTouchEvent()</code></h2><ul>
<li><p>如果设置了 <code>OnTouchListener</code>，调⽤ <code>OnTouchListener.onTouch()</code></p>
<ul>
<li>如果 <code>OnTouchListener</code> 消费了事件，返回 <code>true</code></li>
<li>如果 <code>OnTouchListener</code> 没有消费事件，继续调⽤自⼰的 <code>onTouchEvent()</code>，并返回和 <code>onTouchEvent()</code> 相同的结果</li>
</ul>
</li>
<li><p>如果没有设置 <code>OnTouchListener</code>，同上</p>
</li>
</ul>
<h2 id="ViewGroup-dispatchTouchEvent"><a href="#ViewGroup-dispatchTouchEvent" class="headerlink" title="ViewGroup.dispatchTouchEvent()"></a><code>ViewGroup.dispatchTouchEvent()</code></h2><ul>
<li><p>如果是⽤户初次按下（<code>ACTION_DOWN</code>），清空 <code>TouchTargets</code> 和 <code>DISALLOW_INTERCEPT</code> 标记</p>
</li>
<li><p>拦截处理</p>
</li>
<li><p>如果不拦截并且不是 <code>CANCEL</code> 事件，并且是 <code>DOWN</code> 或者 <code>POINTER_DOWN</code>，尝试把 <code>pointer</code>（手指）通过 <code>TouchTarget</code> 分配给子 <code>View</code>；并且如果分配给了新的子 <code>View</code>，调⽤ <code>child.dispatchTouchEvent()</code> 把事件传给子 View</p>
</li>
<li><p>看有没有 <code>TouchTarget</code></p>
<ul>
<li>如果没有，调⽤自⼰的 <code>super.dispatchTouchEvent()</code></li>
<li>如果有，调⽤ <code>child.dispatchTouchEvent()</code> 把事件传给对应的子 <code>View</code>（如果有的话）</li>
</ul>
</li>
<li><p>如果是 <code>POINTER_UP</code>，从 <code>TouchTargets</code> 中清除 <code>POINTER</code> 信息；如果是 <code>UP</code> 或 <code>CANCEL</code>，重置状态</p>
</li>
</ul>
<h2 id="TouchTarget"><a href="#TouchTarget" class="headerlink" title="TouchTarget"></a><code>TouchTarget</code></h2><ul>
<li>作用：记录每个子 <code>View</code> 是被哪些 <code>pointer</code>（手指）按下的</li>
<li>结构：单向链表</li>
</ul>
<h2 id="拦截处理"><a href="#拦截处理" class="headerlink" title="拦截处理"></a>拦截处理</h2><ul>
<li>如果不是初次按下，并且没有 <code>TouchTarget</code>，直接拦截</li>
<li>如果是初次按下，或者有 <code>TouchTarget</code><ul>
<li>如果设置了 <code>disallow intercept</code>，不拦截</li>
<li>否则，调⽤ <code>onInterceptTouchEvent()</code>，如果返回 <code>true</code> 则拦截，返回 <code>false</code> 则不拦截</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>hencoder</tag>
      </tags>
  </entry>
  <entry>
    <title>UI-自定义布局</title>
    <url>/posts/ebd2a6a1/</url>
    <content><![CDATA[<h1 id="自定义布局"><a href="#自定义布局" class="headerlink" title="自定义布局"></a>自定义布局</h1><h2 id="布局过程"><a href="#布局过程" class="headerlink" title="布局过程"></a>布局过程</h2><ul>
<li>确定每个 <code>View</code>的位置和尺⼨</li>
<li>作用：为绘制和触摸范围做⽀持<ul>
<li>绘制：知道往哪⾥绘制</li>
<li>触摸反馈：知道用户点的是哪⾥</li>
</ul>
</li>
</ul>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul>
<li>从整体看：<ul>
<li>测量流程：从根 <code>View</code>递归调用每⼀级子 <code>View</code>的 <code>measure()</code> ⽅法，对它们进⾏测量</li>
<li>布局流程：从根 <code>View</code>递归调用每⼀级子 <code>View</code>的 <code>layout()</code> ⽅法，把测量过程得出的子 <code>View</code> 的位置和尺⼨传给子 <code>View</code>，子 <code>View</code>保存</li>
<li>为什么要分两个流程？</li>
</ul>
</li>
<li>从个体看，对于每个 <code>View</code>：<ol>
<li>运⾏前，开发者在 <code>xml</code> ⽂件⾥写⼊对 <code>View</code>的布局要求 <code>layout_xxx</code></li>
<li>⽗ <code>View</code>在自己的 <code>onMeasure()</code> 中，根据开发者在 <code>xml</code> 中写的对子 <code>View</code>的要求，和自己的可用空间，得出对子 <code>View</code>的具体尺⼨要求</li>
<li>子 <code>View</code>在自己的 <code>onMeasure()</code> 中，根据自己的特性算出自己的期望尺⼨如果是 <code>ViewGroup</code>，还会在这⾥调用每个子 <code>View</code>的 <code>measure()</code> 进⾏测量</li>
<li>⽗ <code>View</code>在子 <code>View</code>计算出期望尺⼨后，得出子 <code>View</code>的实际尺⼨和位置</li>
<li>子 <code>View</code>在自己的 <code>layout()</code> ⽅法中，将⽗ <code>View</code>传进来的自己的实际尺⼨和位置保存如果是 ViewGroup，还会在 onLayout() ⾥调用每个字 <code>View</code>的 layout() 把它们的尺⼨位置传给它们</li>
</ol>
</li>
</ul>
<h2 id="具体开发"><a href="#具体开发" class="headerlink" title="具体开发"></a>具体开发</h2><ul>
<li><p>继承已有的 <code>View</code>，简单改写它们的尺⼨：重写 <code>onMeasure()</code>：<code>SquareImageView</code></p>
<ol>
<li><p>重写 <code>onMeasure()</code></p>
</li>
<li><p>用 <code>getMeasuredWidth()</code> 和 <code>getMeasured</code>size<code>()</code> 获取到测量出的尺⼨</p>
</li>
<li><p>计算出最终要的尺⼨</p>
</li>
<li><p>用 <code>setMeasuredDimension(width, height)</code> 把结果保存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">    <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> getMeasuredWidth();</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> getMeasuredHeight();</span><br><span class="line">    <span class="type">int</span> `size` = Math.min(width, height);</span><br><span class="line">    setMeasuredDimension(`size`, `size`);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>对自定义 <code>View</code>完全进⾏自定义尺⼨计算：重写 <code>onMeasure()</code>：<code>CircleView</code></p>
<ol>
<li><p>重写 <code>onMeasure()</code></p>
</li>
<li><p>计算出自己的尺⼨</p>
</li>
<li><p>用 <code>resolve</code>size<code>()</code> 或者 <code>resolve</code>size<code>AndState()</code> 修正结果</p>
<ul>
<li><code>resolve</code>size<code>()</code> &#x2F; <code>resolve</code>size<code>AndState()</code> 内部实现（⼀定读⼀下代码，这个极少需要自己写，但⾯试时很多时候会考）：<ul>
<li>⾸先用 <code>MeasureSpec.getMode(measureSpec)</code> 和<code>MeasureSpec.get</code>size<code>(measureSpec)</code> 取出⽗ 对自己的尺⼨限制类型和具体限制尺⼨；</li>
<li>如果 <code>measure spec</code> 的 <code>mode</code> 是 <code>EXACTLY</code>，表示⽗ <code>View</code>对子 <code>View</code>的尺⼨做出了精确限制，所以就放弃计算出的 <code>size</code>，直接选用 <code>measure spec</code> 的 <code>size</code>；</li>
<li>如果 <code>measure spec</code> 的 <code>mode</code> 是 <code>AT_MOST</code>，表示⽗ <code>View</code>对子 <code>View</code>的尺⼨只限制了上限，需要看情况：<ul>
<li>如果计算出的 <code>size</code> 不⼤于 <code>spec</code> 中限制的 <code>size</code>，表示尺⼨没有超出限制，所以选用计算出的 <code>size</code>；</li>
<li>⽽如果计算出的 <code>size</code> ⼤于 <code>spec</code> 中限制的 <code>size</code>，表示尺⼨超限了，所以选用spec 的 <code>size</code>，并且在 resolve<code>size</code>AndState() 中会添加标志 <code>MEASURED_STATE_TOO_SMALL</code>（这个标志可以辅助⽗ <code>View</code>做测量和布局的计算；</li>
</ul>
</li>
<li>如果 <code>measure spec</code> 的 <code>mode</code> 是 <code>UNSPECIFIED</code>，表示⽗ <code>View</code>对子 <code>View</code>没有任何尺⼨限制，所以直接选用计算出的 <code>size</code>，忽略 <code>spec</code> 中的 <code>size</code>。</li>
</ul>
</li>
</ul>
</li>
<li><p>使用 <code>setMeasuredDimension(width, height)</code> 保存结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> (<span class="type">int</span>) ((PADDING + RADIUS) * <span class="number">2</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> (<span class="type">int</span>) ((PADDING + RADIUS) * <span class="number">2</span>);</span><br><span class="line">    setMeasuredDimension(resolve`size`AndState(width, widthMeasureSpec, </span><br><span class="line">                                             <span class="number">0</span>),</span><br><span class="line">                         resolve`size`AndState(height, heightMeasureSpec, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>自定义 <code>Layout</code>：重写 <code>onMeasure()</code> 和 <code>onLayout()</code>：<code>TagLayout</code></p>
<ol>
<li><p>重写 <code>onMeasure()</code></p>
<ol>
<li><p>遍历每个子 <code>View</code>，用 <code>measureChildWidthMargins()</code> 测量子 <code>View</code></p>
<ul>
<li><p>需要重写 <code>generateLayoutParams()</code> 并返回 <code>MarginLayoutParams</code> 才能使用<code>measureChildWithMargins()</code> ⽅法</p>
</li>
<li><p>有些子 <code>View</code>可能需要重新测量（⽐如换⾏处）</p>
</li>
<li><p>测量完成后，得出子 <code>View</code>的实际位置和尺⼨，并暂时保存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span></span></span><br><span class="line"><span class="params">                         heightMeasureSpec)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; getChildCount(); i++) &#123;</span><br><span class="line">        `View`child = getChildAt(i);</span><br><span class="line">        <span class="type">Rect</span> <span class="variable">childBounds</span> <span class="operator">=</span> childrenBounds[i];</span><br><span class="line">        <span class="comment">// 测量子 View</span></span><br><span class="line">        measureChildWithMargins(child, widthMeasureSpec, </span><br><span class="line">                                widthUsed,</span><br><span class="line">                                heightMeasureSpec, heightUsed);</span><br><span class="line">        <span class="comment">// 保存子 `View`的位置和尺⼨</span></span><br><span class="line">        childBounds.set(childlLeft, childTop, childLeft</span><br><span class="line">                        + child.getMeasuredWidth(), chiltTop</span><br><span class="line">                        + child.getMeasuredHeight());</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算自己的尺⼨，并保存</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> ...;</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> ...;</span><br><span class="line">    setMeasuredDimension(resolve`size`AndState(width, </span><br><span class="line">                                             widthMeasureSpec, <span class="number">0</span>),</span><br><span class="line">                         resolve`size`AndState(height, heightMeasureSpec, </span><br><span class="line">                                             <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>measureChildWidthMargins()</code> 的内部实现（最好读⼀下代码，这个极少需要自己写，但⾯试时很多时候会考）：</p>
<ul>
<li><p>通过 <code>getChildMeasureSpec(int spec, int padding, int childDimension)</code> ⽅法计算出子 <code>View</code>的 <code>widthMeasureSpec</code> 和 <code>heightMeasureSpec</code>，然后调用 <code>child.measure()</code> ⽅法来让子 <code>View</code>自我测量；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ViewGroup.measureChildWithMargins() 源码</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">measureChildWithMargins</span><span class="params">(`View`child,</span></span><br><span class="line"><span class="params">                                       <span class="type">int</span> parentWidthMeasureSpec, <span class="type">int</span> widthUsed,</span></span><br><span class="line"><span class="params">                                       <span class="type">int</span> parentHeightMeasureSpec, <span class="type">int</span> heightUsed)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">MarginLayoutParams</span> <span class="variable">lp</span> <span class="operator">=</span></span><br><span class="line">        (MarginLayoutParams) child.getLayoutParams();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">childWidthMeasureSpec</span> <span class="operator">=</span></span><br><span class="line">        getChildMeasureSpec(parentWidthMeasureSpec,</span><br><span class="line">                            mPaddingLeft + mPaddingRight + lp.leftMargin</span><br><span class="line">                            + lp.rightMargin + widthUsed, lp.width);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">childHeightMeasureSpec</span> <span class="operator">=</span></span><br><span class="line">        getChildMeasureSpec(parentHeightMeasureSpec,</span><br><span class="line">                            mPaddingTop + mPaddingBottom + lp.topMargin</span><br><span class="line">                            + lp.bottomMargin + heightUsed, lp.height);</span><br><span class="line">    child.measure(childWidthMeasureSpec, </span><br><span class="line">                  childHeightMeasureSpec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>getChildMeasureSpec(int spec, int padding, int childDimension)</code> ⽅法的内部实现是，结合开发者设置的 <code>LayoutParams</code> 中的 <code>width</code> 和 <code>height</code> 与⽗ <code>View</code>自己的剩余可用空间，综合得出子 <code>View</code>的尺⼨限制，并使用 <code>MeasureSpec.makeMeasureSpec(size, mode)</code> 来求得结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ViewGroup.getChildMeasureSpec() 源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getChildMeasureSpec</span><span class="params">(<span class="type">int</span> spec, <span class="type">int</span></span></span><br><span class="line"><span class="params">                                      padding,</span></span><br><span class="line"><span class="params">                                      <span class="type">int</span> childDimension)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">specMode</span> <span class="operator">=</span> MeasureSpec.getMode(spec);</span><br><span class="line">    <span class="type">int</span> spec`size` = MeasureSpec.get`size`(spec);</span><br><span class="line">    <span class="type">int</span> `size` = Math.max(<span class="number">0</span>, spec`size` - padding);</span><br><span class="line">    <span class="type">int</span> result`size` = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">resultMode</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">            <span class="comment">// Parent has imposed an exact `size` on us</span></span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">            <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                result`size` = childDimension;</span><br><span class="line">                resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension ==</span><br><span class="line">                       LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">                <span class="comment">// Child wants to be our `size`. So be it.</span></span><br><span class="line">                result`size` = `size`;</span><br><span class="line">                resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension ==</span><br><span class="line">                       LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">                <span class="comment">// Child wants to determine its own `size`. It</span></span><br><span class="line">                can<span class="string">&#x27;t be</span></span><br><span class="line"><span class="string">                    // bigger than us.</span></span><br><span class="line"><span class="string">                    result`size` = `size`;</span></span><br><span class="line"><span class="string">                resultMode = MeasureSpec.AT_MOST; &#125;</span></span><br><span class="line"><span class="string">            break;</span></span><br><span class="line"><span class="string">            // Parent has imposed a maximum `size` on us</span></span><br><span class="line"><span class="string">        case MeasureSpec.AT_MOST:</span></span><br><span class="line"><span class="string">            if (childDimension &gt;= 0) &#123;</span></span><br><span class="line"><span class="string">                // Child wants a specific `size`... so be it</span></span><br><span class="line"><span class="string">                result`size` = childDimension;</span></span><br><span class="line"><span class="string">                resultMode = MeasureSpec.EXACTLY;</span></span><br><span class="line"><span class="string">            &#125; else if (childDimension ==</span></span><br><span class="line"><span class="string">                       LayoutParams.MATCH_PARENT) &#123;</span></span><br><span class="line"><span class="string">                // Child wants to be our `size`, but our `size` is</span></span><br><span class="line"><span class="string">                not fixed.</span></span><br><span class="line"><span class="string">                    // Constrain child to not be bigger than us.</span></span><br><span class="line"><span class="string">                    result`size` = `size`;</span></span><br><span class="line"><span class="string">                resultMode = MeasureSpec.AT_MOST;</span></span><br><span class="line"><span class="string">            &#125; else if (childDimension ==</span></span><br><span class="line"><span class="string">                       LayoutParams.WRAP_CONTENT) &#123;</span></span><br><span class="line"><span class="string">                // Child wants to determine its own `size`. It</span></span><br><span class="line"><span class="string">                can&#x27;</span>t be</span><br><span class="line">                    <span class="comment">// bigger than us.</span></span><br><span class="line">                    result`size` = `size`;</span><br><span class="line">                resultMode = MeasureSpec.AT_MOST; &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// Parent asked to see how big we want to be</span></span><br><span class="line">        <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class="line">            <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// Child wants a specific `size`... let him have</span></span><br><span class="line">                it</span><br><span class="line">                    result`size` = childDimension;</span><br><span class="line">                resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension ==</span><br><span class="line">                       LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">                <span class="comment">// Child wants to be our `size`... find out how</span></span><br><span class="line">                big it should</span><br><span class="line">                    <span class="comment">// be</span></span><br><span class="line">                    result`size` =</span><br><span class="line">                    View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : `size`;</span><br><span class="line">                resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension ==</span><br><span class="line">                       LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">                <span class="comment">// Child wants to determine its own `size`....</span></span><br><span class="line">                find out how</span><br><span class="line">                    <span class="comment">// big it should be</span></span><br><span class="line">                    result`size` =</span><br><span class="line">                    View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : `size`;</span><br><span class="line">                resultMode = MeasureSpec.UNSPECIFIED; &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//noinspection ResourceType</span></span><br><span class="line">    <span class="keyword">return</span> MeasureSpec.makeMeasureSpec(result`size`, </span><br><span class="line">                                       resultMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：源码中的分类⽅式是先⽐较自己的 <code>MeasureSpec</code> 中的 <code>mode</code>，再</p>
<p>⽐较开发者设置的 <code>layout_width</code> 和 <code>layout_height</code>，⽽我给出的判断⽅式</p>
<p>（下⾯的这⼏段内容）是先⽐较 <code>layout_width</code> 和 <code>layout_height</code>，再⽐较</p>
<p>自己 <code>MeasureSpec</code> 中的 <code>mode</code>。两种分类⽅法都能得出正确的结果，但</p>
<p>源码中的分类⽅法在逻辑上可能不够直观，如果你读源码理解困难，可以</p>
<p>尝试用我上⾯的这种⽅法来理解。</p>
</blockquote>
<ol>
<li>如果开发者写了具体值（例如 <code>layout_width=&quot;24dp&quot;</code>），就不用再考虑⽗<code>View</code>的剩余空间了，直接用<code> LayoutParams.width / height</code> 来作为子 <code>View</code>的限制 <code>size</code>，⽽限制 <code>mode</code> 为 <code>EXACTLY</code>（为什么？课堂上说过，因为软件的直接开发者——即 <code>xml</code> 布局⽂件的编写者——的意⻅最重要，发⽣冲突的时候应该以开发者的意⻅为准。换个⻆度说，如果真的由于冲突导致界⾯不正确，开发者可以通过修改 <code>xml</code> ⽂件来解决啊，所以开发者的意⻅是第⼀位，但你如果设计成冲突时开发者的意⻅不在第⼀位，就会导致软件的可配置性严重降低）；</li>
<li>如果开发者写的是 <code>MATCH_PARENT</code>，即要求填满⽗控件的可用空间，那么由于自己的可用空间和自己的两个 <code>MeasureSpec</code> 有关，所以需要根据自己的 <code>widthMeasureSpec</code> 或 <code>heightMeasureSpec</code> 中的 <code>mode</code> 来分情况判断：</li>
<li>如果自己的 <code>spec</code> 中的 <code>mode</code> 是 <code>EXACTLY</code> 或者 <code>AT_MOST</code>，说明自己的尺⼨有上限，那么把 <code>spec</code> 中的 <code>size</code> 减去自己的已用宽度或⾼度，就是自己可以给子 <code>View</code>的 <code>size</code>；⾄于 <code>mode</code>，就用 <code>EXACTLY</code>（注意：就算自己的 <code>mode</code> 是<code>AT_MOST</code>，传给子 <code>View</code>的也是<code>EXACTLY</code>，想不通的话好好琢磨⼀下）；</li>
<li>如果自己的 <code>spec</code> 中的 <code>mode</code> 是 <code>UNSPECIFIED</code>，说明自己的尺⼨没有上限，那么让子 <code>View</code>填满自己的可用空间就⽆从说起，因此选用退让⽅案：给子 <code>View</code>限制的 <code>mode</code> 就设置为 <code>UNSPECIFIED</code>，<code>size</code> 写 0 就好；</li>
<li>如果开发者写的是 <code>WRAP_CONTENT</code>，即要求子 <code>View</code>在不超限制的前提下自我测量，那么同样由于自己的可用空间和自己的两个 <code>MeasureSpec</code> 有关，所以也需要根据自己的 <code>widthMeasureSpec</code> 和 <code>heightMeasureSpec</code> 中的 <code>mode</code> 来分情况判断：</li>
<li>如果自己的 <code>spec</code> 中的 <code>mode</code> 是 <code>EXACTLY</code> 或者 <code>AT_MOST</code>，说明自己的尺⼨有上限，那么把 <code>spec</code> 中的 <code>size</code> 减去自己的已用宽度或⾼度，就是自己可以给子 <code>View</code>的尺⼨上限；⾄于 <code>mode</code>，就用 <code>AT_MOST</code>（注意，就算自己的 <code>mode</code> 是 <code>EXACTLY</code>，传给子 <code>View</code>的也是 <code>AT_MOST</code>，想不通的话好好琢磨⼀下；</li>
<li>如果自己的 <code>spec</code> 中的 <code>mode</code> 是 <code>UNSPECIFIED</code>，说明自己的尺⼨没有上限，那么也就不必限制子 <code>View</code>的上限，因此给子 <code>View</code>限制的<code>mode</code> 就设置为 <code>UNSPECIFIED</code>，<code>size</code> 写 0 就好。</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>测量出所有子 <code>View</code>的位置和尺⼨后，计算出自己的尺⼨，并用 <code>setMeasuredDimension(width, height)</code> 保存</p>
</li>
</ol>
</li>
<li><p>重写 <code>onLayout()</code></p>
<ul>
<li><p>遍历每个子 <code>View</code>，调用它们的 <code>layout()</code> ⽅法来将位置和尺⼨传给它们</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onLayout</span><span class="params">(<span class="type">boolean</span> changed, <span class="type">int</span> l, <span class="type">int</span> t, <span class="type">int</span> r, </span></span><br><span class="line"><span class="params">                        <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; getChildCount(); i++) &#123;</span><br><span class="line">        `View`child = getChildAt(i);</span><br><span class="line">        <span class="type">Rect</span> <span class="variable">childBounds</span> <span class="operator">=</span> childrenBounds[i];</span><br><span class="line">        <span class="comment">// 将每个子 `View`的位置和尺⼨传递给它</span></span><br><span class="line">        child.layout(childBounds.left, childBounds.top,</span><br><span class="line">                     childBounds.right, childBounds.bottom);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>hencoder</tag>
      </tags>
  </entry>
  <entry>
    <title>UI-Bitmap</title>
    <url>/posts/8be1679f/</url>
    <content><![CDATA[<h1 id="Bitmap和Drawable以及手写MaterialEditText"><a href="#Bitmap和Drawable以及手写MaterialEditText" class="headerlink" title="Bitmap和Drawable以及手写MaterialEditText"></a>Bitmap和Drawable以及手写MaterialEditText</h1><blockquote>
<p>hencoder课程</p>
</blockquote>
<h2 id="Bitmap-和-Drawable"><a href="#Bitmap-和-Drawable" class="headerlink" title="Bitmap 和 Drawable"></a><code>Bitmap</code> 和 <code>Drawable</code></h2><h3 id="Bitmap-是什么"><a href="#Bitmap-是什么" class="headerlink" title="Bitmap 是什么"></a><code>Bitmap</code> 是什么</h3><p><code>Bitmap</code> 是位图信息的存储，即⼀个矩形图像每个像素的颜⾊信息的存储器。</p>
<h3 id="Drawable-是什么"><a href="#Drawable-是什么" class="headerlink" title="Drawable 是什么"></a><code>Drawable</code> 是什么</h3><p><code>Drawable</code> 是⼀个可以调⽤ <code>Canvas</code> 来进⾏绘制的上层⼯具。调⽤ <code>Drawable.draw(Canvas)</code> 可以把 <code>Drawable</code> 设置的绘制内容绘制到 <code>Canvas</code> 中。</p>
<p><code>Drawable</code> 内部存储的是绘制规则，这个规则可以是⼀个具体的 <code>Bitmap</code>，也可以是⼀个纯粹的颜⾊，甚⾄可以是⼀个抽象的、灵活的描述。<code>Drawable</code> 可以不含有具体的像素信息，只要它含有的信息⾜以在 <code>draw(Canvas)</code> ⽅法被调⽤时进⾏绘制就够了。</p>
<p>由于 <code>Drawable</code> 存储的只是绘制规则，因此在它的 <code>draw()</code> ⽅法被调⽤前，需要先调⽤ <code>Drawable.setBounds()</code> 来为它设置绘制边界。</p>
<h3 id="Bitmap-和-Drawable-的互相转换"><a href="#Bitmap-和-Drawable-的互相转换" class="headerlink" title="Bitmap 和 Drawable 的互相转换"></a><code>Bitmap</code> 和 <code>Drawable</code> 的互相转换</h3><p>事实上，由于 <code>Bitmap</code> 和 <code>Drawable</code> 是两个不同的概念，因此确切地说它们并不是互相「转换」，⽽是从其中⼀个获得另⼀个的对象：</p>
<ul>
<li><p><code>Bitmap</code> -&gt; <code>Drawable</code>：创建⼀个 <code>BitmapDrawable</code>。</p>
</li>
<li><p><code>Drawable</code> -&gt; <code>Bitmap</code>：如果是 <code>BitmapDrawable</code>，使⽤ <code>BitmapDrawable.getBitmap()</code> 直接获取；如果不是，创建⼀个 <code>Bitmap</code> 和⼀个 <code>Canvas</code>，使⽤ <code>Drawable</code> 通过 <code>Canvas</code> 把内容绘制到 <code>Bitmap</code> 中。</p>
</li>
</ul>
<h3 id="⾃定义-Drawable"><a href="#⾃定义-Drawable" class="headerlink" title="⾃定义 Drawable"></a>⾃定义 <code>Drawable</code></h3><ul>
<li><p>怎么做？</p>
<ul>
<li>重写⼏个抽象⽅法</li>
<li>重写 <code>setAlpha()</code> 的时候记得重写 <code>getAlpha()</code></li>
<li>重写 <code>draw(Canvas) </code>⽅法，然后在⾥⾯做具体的绘制⼯作</li>
<li>例如：<code>MeshDrawable</code></li>
</ul>
</li>
<li><p>有⽤吗？</p>
<p>有⽤。它就是⼀个更加抽象和专注的、仅仅⽤于绘制的⾃定义 <code>View</code> 模块。</p>
</li>
<li><p>⽤来⼲嘛？</p>
<ul>
<li><p>需要共享在多个 <code>View</code> 之间的绘制代码，写在 <code>Drawable</code> ⾥，然后在多个⾃定义 <code>View</code> ⾥只</p>
</li>
<li><p>要引⽤相同的 <code>Drawable</code> 就好，⽽不⽤互相粘贴代码。</p>
</li>
<li><p>例如？</p>
<p>股票软件的多个蜡烛图界⾯，可以把共享的蜡烛图界⾯放进去</p>
</li>
</ul>
</li>
</ul>
<h2 id="手写-MaterialEditText"><a href="#手写-MaterialEditText" class="headerlink" title="手写 MaterialEditText"></a>手写 <code>MaterialEditText</code></h2><p>这部分的没有写讲义，多看看视频做笔记吧。</p>
<p>记得做作业！！</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>hencoder</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓-属性动画和硬件加速</title>
    <url>/posts/f3482f80/</url>
    <content><![CDATA[<h1 id="属性动画和硬件加速"><a href="#属性动画和硬件加速" class="headerlink" title="属性动画和硬件加速"></a>属性动画和硬件加速</h1><h2 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h2><h3 id="ViewPropertyAnimator"><a href="#ViewPropertyAnimator" class="headerlink" title="ViewPropertyAnimator"></a>ViewPropertyAnimator</h3><p>使⽤<code>View.animate()</code>创建对象，以及使⽤<code>ViewPropertyAnimator.translationX()</code>等⽅法来设置动画；<br>可以连续调⽤来设置多个动画；<br>可以⽤<code>setDuration()</code>来设置持续时间；<br>可以⽤<code>setStartDelay()</code>来设置开始延时；<br>以及其他⼀些便捷⽅法。</p>
<h3 id="ObjectAnimator"><a href="#ObjectAnimator" class="headerlink" title="ObjectAnimator"></a>ObjectAnimator</h3><p>使⽤<code>ObjectAnimator.ofXxx()</code>来创建对象，以及使⽤<code>ObjectAnimator.start()</code>来主动启动动画。它的优势在于，可以为⾃定义属性设置动画。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectAnimatoranimator=ObjectAnimator.ofObject(view, <span class="string">&quot;radius&quot;</span>, Utils.dp2px(<span class="number">200</span>));</span><br></pre></td></tr></table></figure>

<p>另外，⾃定义属性需要设置 <code>getter</code> 和 <code>setter</code> ⽅法，并且 <code>setter</code> ⽅法⾥需要调⽤<code>invalidate()</code>来触发重绘：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">publicfloatgetRadius() &#123;</span><br><span class="line">    returnradius;</span><br><span class="line">&#125;</span><br><span class="line">publicvoidsetRadius(floatradius) &#123;</span><br><span class="line">    <span class="built_in">this</span>.radius=radius;</span><br><span class="line">    invalidate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以使⽤<code>setDuration()</code>来设置持续时间；<br>可以⽤<code>setStartDelay()</code>来设置开始延时；<br>以及其他⼀些便捷⽅法。</p>
<h3 id="Interpolator"><a href="#Interpolator" class="headerlink" title="Interpolator"></a>Interpolator</h3><p>插值器，⽤于设置时间完成度到动画完成度的计算公式，直⽩地说即设置动画的速度曲线，通过<code>setInterpolator(Interpolator)</code>⽅法来设置。<br>常⽤的有<code>AccelerateDecelerateInterpolator</code> <code>AccelerateInterpolator</code><br><code>DecelerateInterpolator</code> <code>LinearInterpolator</code>。</p>
<h3 id="PropertyValuesHolder"><a href="#PropertyValuesHolder" class="headerlink" title="PropertyValuesHolder"></a>PropertyValuesHolder</h3><p>⽤于设置更加详细的动画，例如多个属性应⽤于同⼀个对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PropertyValuesHolderholder1=PropertyValuesHolder.ofFloat(<span class="string">&quot;radius&quot;</span>, Utils.dp2px(<span class="number">200</span>));</span><br><span class="line">PropertyValuesHolderholder2=PropertyValuesHolder.ofFloat(<span class="string">&quot;offset&quot;</span>, Utils.dp2px(<span class="number">100</span>));</span><br><span class="line">ObjectAnimatoranimator=PropertyValuesHolder.ofPropertyValuesHolder(view, holder1, holder2);</span><br></pre></td></tr></table></figure>

<p>或者，配合使⽤<code>Keyframe</code>，对⼀个属性分多个段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Keyframekeyframe1=Keyframe.ofFloat(<span class="number">0</span>, Utils.dpToPixel(<span class="number">100</span>));</span><br><span class="line">Keyframekeyframe2=Keyframe.ofFloat(<span class="number">0.5f</span>, Utils.dpToPixel(<span class="number">250</span>));</span><br><span class="line">Keyframekeyframe3=Keyframe.ofFloat(<span class="number">1</span>, Utils.dpToPixel(<span class="number">200</span>));</span><br><span class="line">PropertyValuesHolderholder=PropertyValuesHolder.ofKeyframe(<span class="string">&quot;radius&quot;</span>, keyframe1, keyframe2, keyframe3);</span><br><span class="line">ObjectAnimatoranimator=ObjectAnimator.ofPropertyValuesHolder(view, holder);</span><br></pre></td></tr></table></figure>

<h3 id="AnimatorSet"><a href="#AnimatorSet" class="headerlink" title="AnimatorSet"></a>AnimatorSet</h3><p>将多个 <code>Animator</code> 合并在⼀起使⽤，先后顺序或并列顺序都可以：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnimatorSetanimatorSet=newAnimatorSet();</span><br><span class="line">animatorSet.playTogether(animator1, animator2);</span><br><span class="line">animatorSet.start();</span><br></pre></td></tr></table></figure>

<h3 id="TypeEvaluator"><a href="#TypeEvaluator" class="headerlink" title="TypeEvaluator"></a>TypeEvaluator</h3><p>⽤于设置动画完成度到属性具体值的计算公式。默认的<code>ofInt()</code> <code>ofFloat()</code>已经有了⾃带的<code>IntEvaluatorFloatEvaluator</code>，但有的时候需要⾃⼰设置 <code>Evaluator</code>。例如，对于颜⾊，需要为 <code>int</code> 类型的颜⾊设置 <code>ArgbEvaluator</code>，⽽不是让它们使⽤ <code>IntEvaluator</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">animator.setEvaluator(newArgbEvaluator());</span><br></pre></td></tr></table></figure>

<p>如果你对 <code>ArgbEvaluator</code> 的效果不满意，也可以⾃⼰写⼀个<code>HsvEvaluator</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">publicclassHsvEvaluatorimplementsTypeEvaluator&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    publicObjectevaluate(floatfraction, ObjectstartValue, Object endValue) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外，对于不⽀持的类型，也可以使⽤<code>ofObject()</code>来在创建 <code>Animator</code> 的同时就设置上<br><code>Evaluator</code>，⽐如<code>NameEvaluator</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">publicclassNameEvaluatorimplementsTypeEvaluator&lt;String&gt; &#123;</span><br><span class="line">    List&lt;String&gt;names= ...;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    publicStringevaluate(floatfraction, StringstartValue, String endValue) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!names.contains(startValue)) &#123;</span><br><span class="line">            thrownewIllegalArgumentException(<span class="string">&quot;Start value not existed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!names.contains(endValue)) &#123;</span><br><span class="line">            thrownewIllegalArgumentException(<span class="string">&quot;End value not existed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        intindex= (<span class="type">int</span>) ((names.indexOf(endValue) - names.indexOf(startValue)) *fraction);</span><br><span class="line">        returnnames.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ObjectAnimatoranimator=ObjectAnimator.ofObject(view, <span class="string">&quot;name&quot;</span>, <span class="keyword">new</span> <span class="title class_">NameEvaluator</span>(), <span class="string">&quot;Jack&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Listeners"><a href="#Listeners" class="headerlink" title="Listeners"></a>Listeners</h3><p>和 <code>View</code> 的点击、⻓按监听器⼀样，<code>Animator</code> 也可以使⽤<code>setXxxListener()</code> <code>addXxxListener()</code>来设置监听器。</p>
<h3 id="ValueAnimator"><a href="#ValueAnimator" class="headerlink" title="ValueAnimator"></a>ValueAnimator</h3><p>这是最基本的 <code>Animator</code>，它不和具体的某个对象联动，⽽是直接对两个数值进⾏渐变计算。使⽤很少。</p>
<h2 id="硬件加速"><a href="#硬件加速" class="headerlink" title="硬件加速"></a>硬件加速</h2><h3 id="硬件加速是什么"><a href="#硬件加速是什么" class="headerlink" title="硬件加速是什么"></a>硬件加速是什么</h3><ul>
<li>使⽤ CPU 绘制到 Bitmap，然后把 Bitmap 贴到屏幕，就是软件绘制；</li>
<li>使⽤ CPU 把绘制内容转换成 GPU 操作，交给 GPU，由 GPU 负责真正的绘制，就叫硬件绘制；</li>
<li>使⽤ GPU 绘制就叫做硬件加速</li>
</ul>
<h3 id="怎么就加速了？"><a href="#怎么就加速了？" class="headerlink" title="怎么就加速了？"></a>怎么就加速了？</h3><ul>
<li>GPU 分摊了⼯作</li>
<li>GPU 绘制简单图形（例如⽅形、圆形、直线）在硬件设计上具有先天优势，会更快</li>
<li>流程得到优化（重绘流程涉及的内容更少）</li>
</ul>
<h3 id="硬件加速的缺陷："><a href="#硬件加速的缺陷：" class="headerlink" title="硬件加速的缺陷："></a>硬件加速的缺陷：</h3><p>兼容性。由于使⽤ GPU 的绘制（暂时）⽆法完成某些绘制，因此对于⼀些特定的 API，需要关闭硬件<br>加速来转回到使⽤ CPU 进⾏绘制。</p>
<h3 id="离屏缓冲："><a href="#离屏缓冲：" class="headerlink" title="离屏缓冲："></a>离屏缓冲：</h3><ul>
<li>离屏缓冲是什么：单独的⼀个绘制 View（或 View 的⼀部分）的区域</li>
<li><code>setLayerType()</code> 和 <code>saveLayer()</code><ul>
<li><code>setLayerType()</code> 是对整个 View，不能针对 <code>onDraw()</code> ⾥⾯的某⼀具体过程<ul>
<li>这个⽅法常⽤来关闭硬件加速，但它的定位和定义都不只是⼀个「硬件加速开关」。<br>它的作⽤是为绘制设置⼀个离屏缓冲，让后⾯的绘制都单独写在这个离屏缓冲内。如果参数填写<code>LAYER_TYPE_SOFTWARE</code>，会把离屏缓冲设置为⼀个 Bitmap ，即使⽤软件绘制来进⾏缓冲，这样就导致在设置离屏缓冲的同时，将硬件加速关闭了。但需要知道，这个⽅法被⽤来关闭硬件加速，只是因为 Android 并没有提供⼀个便捷的⽅法在 View 级别简单地开关硬件加速⽽已。</li>
</ul>
</li>
<li><code>saveLayer()</code> 是针对 Canvas 的，所以在 <code>onDraw()</code> ⾥可以使⽤ <code>saveLayer()</code> 来圈出具体哪部<br>分绘制要⽤离屏缓冲<ul>
<li>然⽽……最新的⽂档表示这个⽅法太重了，能不⽤就别⽤，尽量⽤ <code>setLayerType()</code> 代替</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>hencoder</tag>
      </tags>
  </entry>
  <entry>
    <title>UI-绘制</title>
    <url>/posts/db116c66/</url>
    <content><![CDATA[<h1 id="绘制（一）"><a href="#绘制（一）" class="headerlink" title="绘制（一）"></a>绘制（一）</h1><p><strong>最重要的是测量</strong></p>
<h3 id="本节目标"><a href="#本节目标" class="headerlink" title="本节目标"></a>本节目标</h3><p>掌握基本绘制的三个重点：</p>
<ol>
<li>图形的位置、尺寸、角度的计算</li>
<li>Xfermode 的使用</li>
<li>文字的位置和尺寸计算（挪到下一节）</li>
</ol>
<p>从而达到对于任意的图形、文字以及二者的结合都能轻松完成绘制。</p>
<p>绘制的 API 不是这一节内容的重点。</p>
<h3 id="绘制的基本要素："><a href="#绘制的基本要素：" class="headerlink" title="绘制的基本要素："></a>绘制的基本要素：</h3><ul>
<li><p>重写 <code>onDraw(Canvas)</code></p>
</li>
<li><p>使用 Canvas 来绘制</p>
</li>
<li><p>使用 Paint 来配置（调粗细、颜色等）</p>
</li>
<li><p>坐标系</p>
</li>
<li><p>尺寸单位是<strong>像素</strong>，而不是 dp。转换方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">dp2px</span><span class="params">(<span class="type">float</span> dp)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, Resources.getSystem().getDisplayMetrics());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Canvas常用API"><a href="#Canvas常用API" class="headerlink" title="Canvas常用API"></a>Canvas常用API</h3><ul>
<li>drawColor()</li>
<li>drawLine()</li>
<li>drawRect()</li>
<li>drawRoundRect()</li>
<li>drawCircle()</li>
<li>drawOval()</li>
<li>drawArc()</li>
<li>drawPoint()</li>
<li>drawPath()</li>
<li>drawBitmap()</li>
<li>drawText()</li>
</ul>
<p>dp转像素px</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">dp2px</span><span class="params">(<span class="type">float</span> dp)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> TypeValue.applyDimension(TypeValue.COMPLEX_UNIT_DIP, <span class="number">150</span>, Resources.getSystem().getDisplayMetrics());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>layout</code>结束后大小有变化才会调用<code>onSizeChanged()</code></p>
<p>cw：clockwise顺时针</p>
<p>ccw：counter clockwise逆时针</p>
<h3 id="Path-的方向以及封闭图形的内外判断："><a href="#Path-的方向以及封闭图形的内外判断：" class="headerlink" title="Path 的方向以及封闭图形的内外判断："></a>Path 的方向以及封闭图形的内外判断：</h3><ul>
<li><p><code>Winding</code>（画的方向）： 如果方向相反的穿插次数相等则为内部，不等则为外部：</p>
<ul>
<li><p>单圆： </p>
</li>
<li><p>双圆同向： <img src="/posts/db116c66/%E7%BB%98%E5%88%B61.png"></p>
<blockquote>
<p>中间的是内部（同方向的Winding是1+1&#x3D;2）</p>
</blockquote>
</li>
<li><p>双圆不同向： <img src="/posts/db116c66/%E7%BB%98%E5%88%B62.png"></p>
<blockquote>
<p>中间是外部（不同方向的Winding是1+（-1）&#x3D;0）</p>
</blockquote>
</li>
</ul>
</li>
<li><p><code>Even Odd</code>：不考虑方向。穿插奇数次则为内部，偶数次则为外部：（镂空效果可考虑它）</p>
<ul>
<li>单圆： </li>
<li>双圆：<img src="/posts/db116c66/%E7%BB%98%E5%88%B63.png"></li>
</ul>
</li>
</ul>
<h3 id="PathMeasure"><a href="#PathMeasure" class="headerlink" title="PathMeasure"></a><code>PathMeasure</code></h3><p>把 Path 对象填入，用于对 Path 做针对性的计算（例如图形周长<code>pathMeasure.getLength()</code>）。</p>
<h3 id="图形一：仪表盘"><a href="#图形一：仪表盘" class="headerlink" title="图形一：仪表盘"></a>图形一：仪表盘</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Dashboard <span class="keyword">extends</span> <span class="title class_">View</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ANGEL</span> <span class="operator">=</span> <span class="number">120</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">final</span> <span class="variable">RADIUS</span> <span class="operator">=</span> Utils.dp2px(<span class="number">150</span>);</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">final</span> <span class="variable">LENGTH</span> <span class="operator">=</span> Utils.dp2px(<span class="number">100</span>);<span class="comment">//指针长度</span></span><br><span class="line">  <span class="type">Paint</span> <span class="variable">paint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Paint</span>(Paint.ANTI_ALIAS_FLAG);<span class="comment">//抗锯齿</span></span><br><span class="line">  <span class="type">Path</span> <span class="variable">dash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>();<span class="comment">//这个是尺度线</span></span><br><span class="line">  PathDashPathEffect effect;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Dashbord</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>(context, attrs);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//单独大括号，会在构造方法调用super方法后调用</span></span><br><span class="line">  &#123;</span><br><span class="line">    paint.setStyle(Paint.Style.STROKE);</span><br><span class="line">    paint.setStrokeWidth(Utils.dp2px(<span class="number">2</span>));</span><br><span class="line">    dash.addRect(<span class="number">0</span>, <span class="number">0</span>, Utils.dp2px(<span class="number">2</span>), Utils.dp2px(<span class="number">10</span>), Path.Direction.CW);<span class="comment">//起始点(0,0)，宽度2，长度10，顺时针</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置刻度间距</span></span><br><span class="line">    <span class="type">Path</span> <span class="variable">arc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>();</span><br><span class="line">    arc.addArc(getWidth()/<span class="number">2</span>-RADIUS, getHeight()/<span class="number">2</span>-RADIUS, getWidth()/<span class="number">2</span>+RADIUS, getHeight()/<span class="number">2</span>+RADIUS, <span class="number">90</span>+ANGLE/<span class="number">2</span>, <span class="number">360</span>-ANGLE);</span><br><span class="line">    <span class="type">PathMeasure</span> <span class="variable">pathMeasure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PathMeasure</span>();</span><br><span class="line">    pathMeasure.getLength() / <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    effect = <span class="keyword">new</span> <span class="title class_">PathDashPathEffect</span>(dash, (pathMeasure.getLength()-Utils.dp2px(<span class="number">2</span>))/<span class="number">20</span>, <span class="number">0</span>, PathDashPathEffect.Style.ROTATE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line">    <span class="comment">//画线</span></span><br><span class="line">    canvas.drawArc(getWidth()/<span class="number">2</span>-RADIUS, getHeight()/<span class="number">2</span>-RADIUS, getWidth()/<span class="number">2</span>+RADIUS, getHeight()/<span class="number">2</span>+RADIUS, <span class="number">90</span>+ANGLE/<span class="number">2</span>, <span class="number">360</span>-ANGLE, <span class="literal">false</span>, paint);</span><br><span class="line">    <span class="comment">//画刻度</span></span><br><span class="line">    paint.setPathEffect(effect);</span><br><span class="line">    canvas.drawArc(getWidth()/<span class="number">2</span>-RADIUS, getHeight()/<span class="number">2</span>-RADIUS, getWidth()/<span class="number">2</span>+RADIUS, getHeight()/<span class="number">2</span>+RADIUS, <span class="number">90</span>+ANGLE/<span class="number">2</span>, <span class="number">360</span>-ANGLE, <span class="literal">false</span>, paint);</span><br><span class="line">    paint.setPathEffect(<span class="literal">null</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//画指针（涉及到三角函数）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">currenAngle</span> <span class="operator">=</span> <span class="number">90</span> + ;</span><br><span class="line">    canvas.drawLine(getWidth()/<span class="number">2</span>, getHeight()/<span class="number">2</span>, (<span class="type">float</span>)Math.cos(Math.toRadians(getAngleFromMark(<span class="number">5</span>))) * LENGTH, (<span class="type">float</span>)Math.sin(Math.toRadians(getAngleFromMark(<span class="number">5</span>))) * LENGTH, paint);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//从刻度获取夹角</span></span><br><span class="line">  <span class="type">int</span> <span class="title function_">getAngleFromMark</span><span class="params">(<span class="type">int</span> mark)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)(<span class="number">90</span> + ANGLE/<span class="number">2</span> <span class="comment">//起始角度</span></span><br><span class="line">      + (<span class="number">360</span>-ANGLE)/<span class="number">20</span> <span class="comment">//剩余角度</span></span><br><span class="line">      * mark);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>用 drawArc() 绘制弧形</p>
</li>
<li><p>三角函数的计算 横向的位移是 cos，纵向的位移是 sin</p>
</li>
<li><p>PathDashPathEffect</p>
<ul>
<li><p>加上 PathEffect 之后，就只绘制 effect，而不绘制原图形。所以需要弧线和刻度分别绘制，一共两次。</p>
</li>
<li><p>dash 的方向</p>
<ul>
<li><p>绘制 dash 的轨迹是这样的：</p>
</li>
<li><p>而由于 x 轴的正向是轨迹的正向（这是规定），所以实际上的物理模型是这样的：</p>
</li>
<li><p>那么，如果你要加上刻度，就应该这样设置：</p>
</li>
<li><p>然后，你的刻度就会沿着轨迹绘制：</p>
</li>
</ul>
</li>
<li><p>advance 计算</p>
</li>
</ul>
</li>
</ul>
<h3 id="图形二：饼图"><a href="#图形二：饼图" class="headerlink" title="图形二：饼图"></a>图形二：饼图</h3><ul>
<li>用 drawArc() 绘制扇形</li>
<li>用 Canvas.translate() 来移动扇形，并用 Canvas.save() 和 Canvas.restore() 来保存和恢复位置</li>
<li>用三角函数 cos 和 sin 来计算偏移</li>
</ul>
<h3 id="图形三：圆形图像"><a href="#图形三：圆形图像" class="headerlink" title="图形三：圆形图像"></a>图形三：圆形图像</h3><ul>
<li>Xfermode：<ul>
<li>为什么要 Xfermode？为了把多次绘制进行「合成」，例如蒙版效果：用 A 的形状和 B 的图案</li>
<li>怎么做？<ul>
<li>Canvs.saveLayer() 把绘制区域拉到单独的离屏缓冲里</li>
<li>绘制 A 图形</li>
<li>用 Paint.setXfermode() 设置 Xfermode</li>
<li>绘制 B 图形</li>
<li>用 Paint.setXfermode(null) 恢复 Xfermode</li>
<li>用 Canvas.re</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="绘制（二）"><a href="#绘制（二）" class="headerlink" title="绘制（二）"></a>绘制（二）</h1><h2 id="文字的测量"><a href="#文字的测量" class="headerlink" title="文字的测量"></a>文字的测量</h2><ul>
<li>绘制⽂字：<code>drawText()</code></li>
</ul>
<h3 id="文字测量难点之一：居中的纵向测量"><a href="#文字测量难点之一：居中的纵向测量" class="headerlink" title="文字测量难点之一：居中的纵向测量"></a>文字测量难点之一：居中的纵向测量</h3><ul>
<li>⽅式⼀：<code>Paint.getTextBounds(</code>) 之后，使⽤ <code>(bounds.top + bounds.bottom) / 2</code></li>
<li>⽅式⼆：<code>Paint.getFontMetrics()</code> 之后，使⽤ <code>(fontMetrics.ascend + fontMetrics.descend) / 2</code></li>
</ul>
<p><img src="/posts/db116c66/%E7%BB%98%E5%88%B64.png" alt="安卓/绘制"></p>
<h3 id="文字测量难点之二：左对⻬"><a href="#文字测量难点之二：左对⻬" class="headerlink" title="文字测量难点之二：左对⻬"></a>文字测量难点之二：左对⻬</h3><ul>
<li>用 <code>getTextBounds()</code> 之后的 <code>left</code> 来计算</li>
</ul>
<h3 id="文字测量难点-之三：换行"><a href="#文字测量难点-之三：换行" class="headerlink" title="文字测量难点 之三：换行"></a>文字测量难点 之三：换行</h3><ul>
<li>用 <code>breakText()</code> 来计算</li>
</ul>
<p><img src="/posts/db116c66/%E7%BB%98%E5%88%B65.png" alt="安卓/绘制2"></p>
<h2 id="Canvas-的范围裁切"><a href="#Canvas-的范围裁切" class="headerlink" title="Canvas 的范围裁切"></a>Canvas 的范围裁切</h2><ul>
<li><code>clipRect()</code></li>
<li><code>clipPath()</code>：<code>clipPath()</code>切出来的圆为什么没有抗锯齿效果？因为“强行切边”</li>
<li><code>clipOutRect()/clipOutPath()</code></li>
</ul>
<h2 id="Canvas-的几何变换"><a href="#Canvas-的几何变换" class="headerlink" title="Canvas 的几何变换"></a>Canvas 的几何变换</h2><ul>
<li><p><code>translate(x, y)</code></p>
</li>
<li><p><code>route(degree)</code></p>
</li>
<li><p><code>scale(x, y)</code></p>
</li>
<li><p><code>skew(x, y)</code></p>
<p>重点：<code>Canvas</code> 的集合变换参照的是 <code>View</code> 的坐标系，而绘制方法（<code>drawXxx()</code>）参照的是 <code>Canvas</code> 自己的坐标系。</p>
</li>
</ul>
<h3 id="关于多重变换"><a href="#关于多重变换" class="headerlink" title="关于多重变换"></a>关于多重变换</h3><p><code>Canvas</code> 的变换方法多次调用的时候，由于 <code>Canvas</code> 的坐标系会整体被变换，一次当平移、旋转、放缩、错切等变换多重存在的时候，<code>Canvas</code>的变换参数会非常难以计算，因此可以改用倒序的理解方式：</p>
<blockquote>
<p>将 Canvas 的变换理解为 Canvas 的坐标系不变，每次变换是只对内部的绘制内容进行变换，同时把 Canvas 的变换顺序看作是倒序的（即写在下面的变换先执行），可以更加方便进行多重变换的参数计算。</p>
</blockquote>
<h2 id="Matrix的几何变换"><a href="#Matrix的几何变换" class="headerlink" title="Matrix的几何变换"></a>Matrix的几何变换</h2><ul>
<li><code>preTranslate(x, y) / postTranslate(x, y)</code></li>
<li><code>preRotate(degree) / postRotate(degree)</code></li>
<li><code>preScale(x, y) / postScale(x, y)</code></li>
<li><code>preSkew(x, y) / postSkew(x, y)</code></li>
</ul>
<p>其中<code>preXxx()</code>效果和<code> Canvas</code> 的准同名⽅法相同，<code>postXxx()</code>效果和 <code>Canvas</code> 的准同名⽅法顺序相反。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果多次重复使⽤ <code>Matrix</code>，在使⽤之前需要⽤<code>Matrix.reset()</code>来把 <code>Matrix</code> 重置。</p>
<h2 id="使⽤-Camera-做三维旋转"><a href="#使⽤-Camera-做三维旋转" class="headerlink" title="使⽤ Camera 做三维旋转"></a>使⽤ Camera 做三维旋转</h2><ul>
<li><p><code>rotate() / rotateX() / rotateY() / rotateZ()</code></p>
</li>
<li><p><code>translate()</code></p>
</li>
<li><p><code>setLocation()</code></p>
<p>其中，⼀般只⽤<code>rotateX()</code>和<code>rorateY()</code>来做沿 x 轴或 y 轴的旋转，以及使⽤<code>setLocation()</code>来调整放缩的视觉幅度。<br>对 Camera 变换之后，要⽤ <code>Camera.applyToCanvas(Canvas)</code> 来应⽤到 <code>Canvas</code>。</p>
</li>
</ul>
<h3 id="setLocation"><a href="#setLocation" class="headerlink" title="setLocation()"></a><code>setLocation()</code></h3><p>这个⽅法⼀般前两个参数都填 <code>0</code>，第三个参数为负值。由于这个值的单位是硬编码写死的，因此像素密度越⾼的⼿机，相当于 <code>Camera</code> 距离 <code>View</code> 越近，所以最好把这个值写成与机器的 <code>density</code> 成正⽐的⼀个负值，例如 <code>-6 * density</code>。</p>
<p><img src="/posts/db116c66/%E7%BB%98%E5%88%B66.png" alt="安卓/绘制3"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>hencoder</tag>
      </tags>
  </entry>
  <entry>
    <title>从OkHttp的原理来看HTTP</title>
    <url>/posts/b883d81b/</url>
    <content><![CDATA[<p><a href="https://square.github.io/okhttp/">okhttp官网</a></p>
<h1 id="OkHttp讲义"><a href="#OkHttp讲义" class="headerlink" title="OkHttp讲义"></a>OkHttp讲义</h1><h2 id="OkHttp-使⽤⽅法简介"><a href="#OkHttp-使⽤⽅法简介" class="headerlink" title="OkHttp 使⽤⽅法简介"></a>OkHttp 使⽤⽅法简介</h2><ol>
<li><p>创建⼀个 <code>OkHttp</code> 的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder().build();</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 <code>Request</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">  .url(<span class="string">&quot;http://hencoder.com&quot;</span>) </span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 <code>Call</code> 并发起⽹络请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">client.newCall(request).enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Call call, IOException e)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    Log.d(<span class="string">&quot;okhttp response&quot;</span>, response.body().string());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>enqueue: 异步的</p>
<p>excute: 同步的</p>
</blockquote>
</li>
</ol>
<h2 id="OkHttp-源码总结"><a href="#OkHttp-源码总结" class="headerlink" title="OkHttp 源码总结"></a>OkHttp 源码总结</h2><ul>
<li><p><code>OkHttpClient</code> 相当于配置中⼼，所有的请求都会共享这些配置（例如出错是否重试、共享的连接池）。 <code>OkHttpClient</code> 中的配置主要有：</p>
<ul>
<li><code>Dispatcher dispatcher</code> ：调度器，⽤于调度后台发起的⽹络请求，有后台总请求数和单主机总请求数的控制。</li>
<li><code>List&lt;Protocol&gt; protocols</code> ：⽀持的应⽤层协议，即 <code>HTTP/1.1</code>、<code>HTTP/2</code> 等。</li>
<li><code>List&lt;ConnectionSpec&gt; connectionSpecs</code> ：应⽤层⽀持的 <code>Socket</code> 设置，即使⽤明⽂传输（⽤于 <code>HTTP</code>）还是某个版本的 <code>TLS</code>（⽤于 <code>HTTPS</code>）。其中的<code>clearText</code>（“明文”没有用加密）等同于<code>http</code></li>
<li><code>List&lt;Interceptor&gt; interceptors</code> ：⼤多数时候使⽤的 <code>Interceptor</code> 都应该配置到这⾥。</li>
<li><code>List&lt;Interceptor&gt; networkInterceptors</code> ：直接和⽹络请求交互的 <code>Interceptor</code> 配置到这⾥，例如如果你想查看返回的 <code>301</code> 报⽂或者未解压的 <code>Response Body</code>，需要在这⾥看。</li>
<li><code>CookieJar cookieJar</code> （饼干存储罐）：管理 <code>Cookie</code> 的控制器。<code>OkHttp</code> 提供了 <code>Cookie</code> 存取的判断⽀持（即什么时候需要存 <code>Cookie</code>，什么时候需要读取 <code>Cookie</code>，但没有给出具体的存取实现。<br>如果需要存取 <code>Cookie</code>，你得⾃⼰写实现，例如⽤ <code>Map</code> 存在内存⾥，或者⽤别的⽅式存在本地存储或者数据库。</li>
<li><code>Cache cache</code> ：<code>Cache</code> 存储的配置。默认是没有，如果需要⽤，得⾃⼰配置出 <code>Cache</code> 存储的⽂件位置以及存储空间上限。</li>
<li><code>HostnameVerifier hostnameVerifier</code> ：⽤于验证 <code>HTTPS</code> 握⼿过程中下载到的证书所属者是否和⾃⼰要访问的主机名⼀致。</li>
<li><strong>sokect是tcp的端口</strong>（http是没有端口一说）</li>
<li><code>CertificatePinner certificatePinner</code> ：⽤于设置 <code>HTTPS</code> 握⼿过程中针对某个<code>Host</code> 的 <code>Certifificate Public Key Pinner</code>，即把⽹站证书链中的每⼀个证书公钥直接拿来提前配置进 <code>OkHttpClient</code> ⾥去，<strong>以跳过本地根证书</strong>，直接从代码⾥进⾏认证。这种⽤法⽐较少⻅，⼀般⽤于防⽌⽹站证书被⼈仿制。</li>
<li><code>Authenticator authenticator</code> ：⽤于⾃动重新认证。配置之后，在请求收到 <code>401</code> （权限不足）状态码的响应是，会直接调⽤ <code>authenticator</code> ，⼿动加⼊ <code>Authorization header</code> 之后⾃动重新发起请求。</li>
<li><code>boolean followRedirects</code> ：遇到重定向的要求是，是否⾃动 <code>follow</code>。</li>
<li><code>boolean followSslRedirects</code> 在重定向时，如果原先请求的是 <code>http</code> ⽽重定向的⽬标是<code>https</code>，或者原先请求的是 <code>https</code> ⽽重定向的⽬标是 <code>http</code>，是否依然⾃动 <code>follow</code>。（记得，不是「是否⾃动 <code>follow HTTPS URL</code> 重定向的意思，⽽是是否⾃动 <code>follow</code> 在 <code>HTTP</code> 和<code>HTTPS</code> 之间切换的重定向）</li>
<li><code>boolean retryOnConnectionFailure</code> ：在请求失败的时候是否⾃动重试。注意，⼤多数的请求失败并不属于 <code>OkHttp</code> 所定义的「需要重试」，这种重试只适⽤于「同⼀个域名的多个 <code>IP</code> 切换重试」「<code>Socket</code> 失效重试」等情况。</li>
<li><code>int connectTimeout</code> ：建⽴连接（<code>TCP</code> 或 <code>TLS</code>）的超时时间。</li>
<li><code>int readTimeout</code> ：发起请求到读到响应数据的超时时间。</li>
<li><code>int writeTimeout</code> ：发起请求并被⽬标服务器接受的超时时间。（为什么？因为有时候对⽅服务器可能由于某种原因⽽不读取你的 <code>Request</code>）</li>
</ul>
</li>
<li><p><code>newCall(Request)</code> ⽅法会返回⼀个 <code>RealCall</code> 对象，它是 <code>Call</code> 接⼝的实现。当调⽤<code>RealCall.execute()</code> 的时候， <code>RealCall.getResponseWithInterceptorChain()</code> 会被调⽤，它会发起⽹络请求并拿到返回的响应，装进⼀个 <code>Response</code> 对象并作为返回值返回；<code>RealCall.enqueue()</code> 被调⽤的时候⼤同⼩异，区别在于 <code>enqueue()</code> 会使⽤ <code>Dispatcher</code>的线程池来把请求放在后台线程进⾏，但实质上使⽤的同样也是 <code>getResponseWithInterceptorChain()</code> ⽅法。</p>
</li>
<li><p><code>getResponseWithInterceptorChain()</code> ⽅法做的事：把所有配置好的 <code>Interceptor</code> 放在⼀个 <code>List</code> ⾥，然后作为参数，创建⼀个 <code>RealInterceptorChain</code> 对象，并调⽤ <code>chain.proceed(request)</code> 来发起请求和获取响应。</p>
</li>
<li><p>在 <code>RealInterceptorChain</code> 中，多个 <code>Interceptor</code> 会依次调⽤⾃⼰的 <code>intercept()</code> ⽅法。这个⽅法会做三件事：</p>
<ol>
<li>对请求进⾏预处理</li>
<li>预处理之后，重新调⽤ <code>RealIntercepterChain.proceed()</code> 把请求交给下⼀个 <code>Interceptor</code></li>
<li>在下⼀个 <code>Interceptor</code> 处理完成并返回之后，拿到 Response 进⾏后续处理</li>
</ol>
<blockquote>
<p>当然了，最后⼀个 Interceptor 的任务只有⼀个：做真正的⽹络请求并拿到响应</p>
</blockquote>
</li>
<li><p>从上到下，每级 <code>Interceptor</code> 做的事：</p>
<ul>
<li>⾸先是开发者使⽤ <code>addInterceptor(Interceptor)</code> 所设置的，它们会按照开发者的要求，在所有其他 <code>Interceptor</code> 处理之前，进⾏最早的预处理⼯作，以及在收到 <code>Response</code> 之后，做最后的善后⼯作。如果你有统⼀的 <code>header</code> 要添加，可以在这⾥设置；</li>
<li>然后是 <code>RetryAndFollowUpInterceptor</code> ：它负责在请求失败时的重试，以及重定向的⾃动后续请求。它的存在，可以让重试和重定向对于开发者是⽆感知的；</li>
<li><code>BridgeInterceptor</code> ：它负责⼀些不影响开发者开发，但影响 <code>HTTP</code> 交互的⼀些额外预处理。例如，<code>Content-Length</code> 的计算和添加、<code>gzip</code> 的⽀持（<code>Accept-Encoding: gzip</code>）、<code>gzip</code> 压缩数据的解包，都是发⽣在这⾥；</li>
<li><code>CacheInterceptor</code> ：它负责 <code>Cache</code> 的处理。把它放在后⾯的⽹络交互相关 <code>Interceptor</code> 的前⾯的好处是，如果本地有了可⽤的 <code>Cache</code>，⼀个请求可以在没有发⽣实质⽹络交互的情况下就返回缓存结果，⽽完全不需要开发者做出任何的额外⼯作，让 <code>Cache</code> 更加⽆感知；</li>
<li><code>ConnectInterceptor</code> ：它负责建⽴连接。在这⾥，<code>OkHttp</code> 会创建出⽹络请求所需要的 <code>TCP</code> 连接（如果是 <code>HTTP</code>），或者是建⽴在 <code>TCP</code> 连接之上的 <code>TLS</code> 连接（如果是 <code>HTTPS</code>），并且会创建出对应的 <code>HttpCodec</code> 对象（⽤于编码解码 <code>HTTP</code> 请求）；</li>
<li>然后是开发者使⽤ <code>addNetworkInterceptor(Interceptor)</code> 所设置的，它们的⾏为逻辑和使⽤ <code>addInterceptor(Interceptor)</code> 创建的⼀样，但由于位置不同，所以这⾥创建的 <code>Interceptor</code> 会看到每个请求和响应的数据（包括重定向以及重试的⼀些中间请求和响应），并且看到的是完整原始数据，⽽不是没有加 <code>Content-Length</code> 的请求数据，或者<code>Body</code> 还没有被 <code>gzip</code> 解压的响应数据。多数情况，这个⽅法不需要被使⽤；</li>
<li><code>CallServerInterceptor</code> ：它负责实质的请求与响应的 <code>I/O</code> 操作，即往 <code>Socket</code> ⾥写⼊请求数据，和从 <code>Socket</code> ⾥读取响应数据。</li>
</ul>
</li>
</ul>
<h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>阅读 <code>OkHttp</code> 源码，理解 <code>OkHttp</code> 原理，并尝试在不借助讲义的情况下讲出 <code>OkHttpClient</code> 中每个重要的成员变量的⽤途，以及每个 <code>Interceptor</code> 的实际作⽤。（不检查）</p>
<p><code>WebSocket</code>是<code>HTTP</code>的扩展，一般用于金融交易（股票等）</p>
<p><code>HTTP</code>是<code>C/S</code></p>
<p><code>HTTP</code>是无连接的，连接说的是<code>TCP</code>和<code>SSL</code>（<code>TLS</code>）连接</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>hencoder</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓-Dependencies依赖相关</title>
    <url>/posts/269438b3/</url>
    <content><![CDATA[<p>Gradle下载后的本地路径：打开AS，打开项目，更改为<code>Project</code>模式，找到<code>External Libraries</code>找某一个第三方库，然后点开，找个具体文件（比如<code>AndroidManifest.xml</code>）右键它选择<code>Open In Explorer</code>。</p>
<p>比如我现在的路径是：<code>D:\dev\.gradle\caches\transforms-2\files-2.1\</code></p>
<h1 id="依赖相关"><a href="#依赖相关" class="headerlink" title="依赖相关"></a>依赖相关</h1><h2 id="查看项目依赖"><a href="#查看项目依赖" class="headerlink" title="查看项目依赖"></a>查看项目依赖</h2><p>Terminal中输入：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">gradlew <span class="symbol">:app</span><span class="symbol">:dependencies</span></span><br></pre></td></tr></table></figure>



<h2 id="依赖多次（如果是同一个版本）没有问题"><a href="#依赖多次（如果是同一个版本）没有问题" class="headerlink" title="依赖多次（如果是同一个版本）没有问题"></a>依赖多次（如果是同一个版本）没有问题</h2><p>场景：moduleA依赖moduleB（B的libs中有个B.jar），moduleC依赖moduleA也依赖moduleB。moduleC调用这个B.jar，没有版本冲突等问题（因为是同一个版本的jar）</p>
<h2 id="exclude排除依赖中的某个group"><a href="#exclude排除依赖中的某个group" class="headerlink" title="exclude排除依赖中的某个group"></a>exclude排除依赖中的某个group</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单独排除某个模块中的依赖  </span></span><br><span class="line">compile(<span class="string">&#x27;com.h6ah4i.android.widget.advrecyclerview:advrecyclerview:0.11.0@aar&#x27;</span>) &#123;</span><br><span class="line">    exclude <span class="attr">group:</span> <span class="string">&#x27;com.android.support&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排除所有子依赖中的support依赖，统一使用主项目中的版本</span></span><br><span class="line">configurations &#123;</span><br><span class="line">    all*.exclude <span class="attr">group:</span> <span class="string">&#x27;com.android.support&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用法：exclude group:’ ‘, module: ‘ ‘ 【group和module两个参数可分别单独使用】</p>
<p>说明：排除某个依赖，可解决部分传递依赖。</p>
<p>使用场景：</p>
<ul>
<li>解决依赖冲突。若两个模块使用相同jar包的不同版本，gradle默认会使用最新版本的jar包，此时可通过exclude排除冲突。（版本冲突带来的问题最主要是API类或方法移除）</li>
<li>运行期无需此模块。</li>
<li>依赖传递无法找到时，可通过exclude排除。</li>
<li>版权原因需排除。</li>
</ul>
<h2 id="transitive是否传递本身的依赖给宿主程序"><a href="#transitive是否传递本身的依赖给宿主程序" class="headerlink" title="transitive是否传递本身的依赖给宿主程序"></a>transitive是否传递本身的依赖给宿主程序</h2><p>用法：transitive &#x3D; true | false</p>
<p>说明：是否传递本身的依赖给宿主程序（使用传递依赖时，Gradle会将传递依赖一起下载下来。compile默认时开启传递依赖）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">compile</span>(<span class="params"><span class="string">&#x27;com.alibaba.android:ultraviewpager:1.0.4@aar&#x27;</span></span>) &#123;</span><br><span class="line">    transitive = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@aar表示只下载该aar包，而不下该aar包所依赖的其他库。如果还不想使用@aar前提下的其依赖库，需要加transitive&#x3D;false（默认是true开启传递依赖）。其中transitive表示传递依赖（间接依赖）。</p>
<p>transitive&#x3D;true，等同于没有使用exclude排除依赖，每个包的依赖项都会被递归分析并添加进来。</p>
<p>transitive&#x3D;false，等同于用exclude排除依赖。</p>
<h2 id="force强制使用某版本"><a href="#force强制使用某版本" class="headerlink" title="force强制使用某版本"></a>force强制使用某版本</h2><p>用法：force &#x3D; true<br>作用：强制使用某个版本。出现冲突时，优先使用该版本解决。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 强制使用 support-v4 26.1.0版本</span></span><br><span class="line">compile(<span class="string">&#x27;com.android.support:support-v4:26.1.0&#x27;</span>) &#123;</span><br><span class="line">   force = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="综合例子"><a href="#综合例子" class="headerlink" title="综合例子"></a>综合例子</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile(<span class="string">&#x27;org.hibernate:hibernate:3.1&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 冲突时优先使用该版本</span></span><br><span class="line">    force = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依据构建名称排除</span></span><br><span class="line">    exclude <span class="attr">module:</span> <span class="string">&#x27;cglib&#x27;</span> </span><br><span class="line">    <span class="comment">// 依据组织名称排除</span></span><br><span class="line">    exclude <span class="attr">group:</span> <span class="string">&#x27;org.jmock&#x27;</span> </span><br><span class="line">    <span class="comment">// 依据组织名称+构件名称排除</span></span><br><span class="line">    exclude <span class="attr">group:</span> <span class="string">&#x27;org.unwanted&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;iAmBuggy&#x27;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为本依赖关闭依赖传递特性</span></span><br><span class="line">    transitive = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="api、implementation、compile、compileOnly、provided"><a href="#api、implementation、compile、compileOnly、provided" class="headerlink" title="api、implementation、compile、compileOnly、provided"></a><a href="https://blog.csdn.net/yuzhiqiang_1993/article/details/78366985">api、implementation、compile、compileOnly、provided</a></h2><ul>
<li><strong>implementation</strong>所依赖的库不会传递，只会在当前module中生效</li>
</ul>
<blockquote>
<p> 比如：moduleA 用implementation依赖了 base库，moduleB依赖moduleA后想调用base库内方法是不行的。</p>
</blockquote>
<ul>
<li><strong>api</strong>跟2.x版本的<strong>compile</strong>一样，具有“穿透性”，对其他module是<strong>可见的</strong></li>
<li><strong>compileOnly</strong>跟2.x版本的<strong>provided</strong>一样。只在编译时有效，不会参与打包</li>
</ul>
<blockquote>
<p>如果是自己创建的library给别人使用时，需要依赖 com.android.support的话，建议使用compileOnly，避免给使用者带来不便。</p>
</blockquote>
<table>
<thead>
<tr>
<th>2.x的gradle</th>
<th></th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>compile</td>
<td>api</td>
<td>传递。对其他module可见</td>
</tr>
<tr>
<td>porovided</td>
<td>compileOnly</td>
<td>不传递。不参与打包，只在编译时有效</td>
</tr>
<tr>
<td></td>
<td>implementation</td>
<td>不传递。在当前module中生效</td>
</tr>
<tr>
<td></td>
<td>runtimeOnly</td>
<td>会打到包中，运行时才有效。</td>
</tr>
<tr>
<td></td>
<td>testImplementation</td>
<td></td>
</tr>
<tr>
<td></td>
<td>androidTestImplementation</td>
<td></td>
</tr>
<tr>
<td>apt（在gradle2.2已过时）</td>
<td>annotationProcessor</td>
<td>自动化构建</td>
</tr>
</tbody></table>
<h3 id="APK"><a href="#APK" class="headerlink" title="APK"></a>APK</h3><p>只会打包到apk文件中，而不参与编译，所以不能在代码中直接调用jar中的类或方法，否则在编译时会报错</p>
<h3 id="Test-compile"><a href="#Test-compile" class="headerlink" title="Test compile"></a>Test compile</h3><p>Test compile 仅仅是针对单元<a href="http://lib.csdn.net/base/softwaretest">测试</a>代码的编译编译以及最终打包测试apk时有效，而对正常的debug或者release apk包不起作用。</p>
<h3 id="Debug-compile"><a href="#Debug-compile" class="headerlink" title="Debug compile"></a>Debug compile</h3><p>Debug compile 仅仅针对debug模式的编译和最终的debug apk打包。</p>
<h3 id="Release-compile"><a href="#Release-compile" class="headerlink" title="Release compile"></a>Release compile</h3><p>Release compile 仅仅针对Release 模式的编译和最终的Release apk打包。</p>
<h2 id="AS-library生成jar包和aar的方法总结"><a href="#AS-library生成jar包和aar的方法总结" class="headerlink" title="AS library生成jar包和aar的方法总结"></a>AS library生成jar包和aar的方法总结</h2><h3 id="生成jar包（针对的是类库library）"><a href="#生成jar包（针对的是类库library）" class="headerlink" title="生成jar包（针对的是类库library）"></a>生成jar包（针对的是类库<code>library</code>）</h3><ol>
<li>在 <code>library/build.gradle</code> 中的最后添加</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//task to delete the old jar</span></span><br><span class="line">task deleteOldJar(<span class="attr">type:</span> Delete) &#123;</span><br><span class="line">    delete <span class="string">&#x27;release/AndroidPlugin.jar&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//task to export contents as jar</span></span><br><span class="line">task exportJar(<span class="attr">type:</span> Copy) &#123;</span><br><span class="line">    from(<span class="string">&#x27;build/intermediates/bundles/release/&#x27;</span>)</span><br><span class="line">    into(<span class="string">&#x27;release/&#x27;</span>)</span><br><span class="line">    include(<span class="string">&#x27;classes.jar&#x27;</span>)</span><br><span class="line">    <span class="comment">///Rename the jar</span></span><br><span class="line">    rename(<span class="string">&#x27;classes.jar&#x27;</span>, <span class="string">&#x27;AndroidPlugin.jar&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exportJar.dependsOn(deleteOldJar, build)</span><br></pre></td></tr></table></figure>

<p>其中AndroidPlugin.jar就是生成的jar包名</p>
<ol start="2">
<li>实现上面操作之后 点击右边的Gradle侧边栏，选择library目录下<code>Tasks-&gt;other-&gt;exportJar</code>方法</li>
</ol>
<p>运行完毕后 你就可以在library项目文件下面的release文件夹里面找到生成的jar</p>
<h3 id="jar包的使用"><a href="#jar包的使用" class="headerlink" title="jar包的使用"></a>jar包的使用</h3><p>在<code>app/build.gradle</code>中<code>dependencies</code>中添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line">    <span class="comment">//添加jar</span></span><br><span class="line">    compile files(<span class="string">&#x27;libs/mytool_1.0.jar&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="生成aar包"><a href="#生成aar包" class="headerlink" title="生成aar包"></a>生成aar包</h3><ol>
<li>选择<code>library</code>目录下的 <code>Tasks-&gt;build-&gt;assembleRelease</code>方法</li>
<li>等待运行完毕后去 <code>buile-&gt;outputs-&gt;aar</code> 的文件夹下拷贝出来即可</li>
</ol>
<h3 id="aar包使用"><a href="#aar包使用" class="headerlink" title="aar包使用"></a>aar包使用</h3><ol>
<li><code>app/build.gradle</code>中，添加</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    flatDir &#123;</span><br><span class="line">        dirs <span class="string">&#x27;libs&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line">    <span class="comment">//添加aar</span></span><br><span class="line">    compile(<span class="attr">name:</span> <span class="string">&#x27;toollibrary-1.0&#x27;</span>, <span class="attr">ext:</span> <span class="string">&#x27;aar&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>指定ModuleB的aar、jar也在当前library中一起打包到aar中</p>
<p>在<code>library</code>的<code>build.gradle</code>中，最底部添加（dependencies外），然后执行 <code>gradlew genAar</code>任务</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把所有依赖的 jar 包拷贝至 build/outputs/aar/libs</span></span><br><span class="line">task syncAllJars() &#123;</span><br><span class="line">    <span class="comment">// 使用了绝对路径，需要根据实际情况调整</span></span><br><span class="line">    <span class="comment">// 将指定路径下的所有 jar 包，打包至被打包的路径下</span></span><br><span class="line">    <span class="keyword">def</span> dir = <span class="keyword">new</span> File(<span class="string">&#x27;D:\\code\\MyTests\\Android-SDK@3.7.9.81745_20230327\\ZHSDK\\app\\libs&#x27;</span>)</span><br><span class="line">    files(dir.listFiles()).each &#123; file -&gt;</span><br><span class="line">        <span class="keyword">if</span> (file.name.endsWith(<span class="string">&#x27;.jar&#x27;</span>)) &#123;</span><br><span class="line">            copy &#123;</span><br><span class="line">                into buildDir.getPath() + <span class="string">&quot;/outputs/aar/libs&quot;</span></span><br><span class="line">                from file.absolutePath</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把所有依赖的 aar 包中包含的 classes.jar</span></span><br><span class="line"><span class="comment">// 都拷贝到 build/outputs/aar/libs下，并重命名以不被覆盖</span></span><br><span class="line">task syncAllAars(<span class="attr">dependsOn:</span><span class="string">&#x27;:app:assemble&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">def</span> jarName</span><br><span class="line">    <span class="keyword">def</span> aarPath</span><br><span class="line">    <span class="keyword">def</span> destDir = buildDir.getPath()+<span class="string">&quot;/outputs/aar&quot;</span></span><br><span class="line">    <span class="comment">// 使用了绝对路径，需要根据实际情况调整</span></span><br><span class="line">    <span class="keyword">def</span> dir = <span class="keyword">new</span> File(<span class="string">&#x27;D:\\code\\MyTests\\Android-SDK@3.7.9.81745_20230327\\ZHSDK\\app\\libs&#x27;</span>)</span><br><span class="line">    files(dir.listFiles()).each &#123; file -&gt;</span><br><span class="line">        aarPath = file.absolutePath</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file.name.endsWith(<span class="string">&#x27;.aar&#x27;</span>)) &#123;</span><br><span class="line">            jarName = <span class="string">&quot;libs/&quot;</span> + file.name.replace(<span class="string">&quot;.aar&quot;</span>,<span class="string">&quot;.jar&quot;</span>)</span><br><span class="line">            copy &#123;</span><br><span class="line">                from zipTree(aarPath)</span><br><span class="line">                into destDir</span><br><span class="line">                include <span class="string">&quot;**/*&quot;</span></span><br><span class="line">                rename <span class="string">&#x27;classes.jar&#x27;</span>, jarName</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将多个 jar 包打包成一个 classes.jar</span></span><br><span class="line">task makeJar(<span class="attr">type:</span> Jar) &#123;</span><br><span class="line">    archiveName = <span class="string">&#x27;classes.jar&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> dir = <span class="keyword">new</span> File(buildDir.getPath()+<span class="string">&quot;/outputs/aar/libs&quot;</span>)</span><br><span class="line">    files(dir.listFiles()).each &#123; file -&gt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (file.name.endsWith(<span class="string">&#x27;.jar&#x27;</span>)) &#123;</span><br><span class="line">            from (project.zipTree(file.absolutePath))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    destinationDirectory = file(buildDir.getPath()+<span class="string">&quot;/outputs/aar&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task fataar(<span class="attr">dependsOn:</span>[syncAllAars, syncAllJars, makeJar]) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成最终 aar 包，libs 目录需要被排除</span></span><br><span class="line">task genAar(<span class="attr">dependsOn:</span>[fataar], <span class="attr">type:</span> Zip) &#123;</span><br><span class="line">    <span class="keyword">def</span> destDir = buildDir.getPath()+<span class="string">&quot;/outputs/aar&quot;</span></span><br><span class="line">    baseName <span class="string">&quot;wholeSDK&quot;</span></span><br><span class="line">    extension <span class="string">&quot;aar&quot;</span></span><br><span class="line">    version <span class="string">&#x27;1.1&#x27;</span></span><br><span class="line">    destinationDirectory = file(<span class="string">&#x27;libs/&#x27;</span>)</span><br><span class="line">    from destDir</span><br><span class="line">    exclude <span class="string">&quot;libs&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="AS-生成assert文件"><a href="#AS-生成assert文件" class="headerlink" title="AS 生成assert文件"></a>AS 生成assert文件</h2><ol>
<li><p>右键项目的某个module，选择Folder-&gt;Assets Folder即可</p>
</li>
<li><p>引用assert文件</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mWebView.loadUrl(<span class="string">&quot;file:///android_asset/test.html&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="aar包设置成本地"><a href="#aar包设置成本地" class="headerlink" title="aar包设置成本地"></a>aar包设置成本地</h2><p>拿oaid的aar包举例：</p>
<ol>
<li><p>项目根目录下创建文件夹localRepo；</p>
</li>
<li><p>在localRepo下创建文件夹oaid_sdk</p>
</li>
<li><p>localRepo&#x2F;oaid_sdk下</p>
<ol>
<li><p>新建<code>.gitignore</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/build</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建<code>build.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">configurations.maybeCreate(<span class="string">&quot;default&quot;</span>)</span><br><span class="line">artifacts.add(<span class="string">&quot;default&quot;</span>, file(<span class="string">&#x27;oaid_sdk_1.0.25.aar&#x27;</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>黏贴<code>oaid_sdk_1.0.25.aar</code></p>
</li>
</ol>
</li>
<li><p>在<code>settings.gradle</code>中添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">include <span class="string">&#x27;:localRepo:oaid_sdk&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用：<code>app/build.gradle</code>中添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">//移动安全联盟OAID</span></span><br><span class="line">    api project(<span class="attr">path:</span> <span class="string">&#x27;:localRepo:oaid_sdk&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="依赖的优雅写法"><a href="#依赖的优雅写法" class="headerlink" title="依赖的优雅写法"></a>依赖的优雅写法</h1><h2 id="使用buildSrc"><a href="#使用buildSrc" class="headerlink" title="使用buildSrc"></a>使用buildSrc</h2><blockquote>
<p>缺点：无法使用AGP</p>
</blockquote>
<ol>
<li><p>根目录下新建buildSrc</p>
<ul>
<li><p><code>\buildSrc\src\main\groovy\Config.groovy</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> applicationId = <span class="string">&quot;com.teach.aixuepinyin&quot;</span></span><br><span class="line">    <span class="keyword">static</span> appName = <span class="string">&#x27;AucFrame&#x27;</span></span><br><span class="line">    <span class="keyword">static</span> compileSdkVersion = <span class="number">28</span></span><br><span class="line">    <span class="keyword">static</span> minSdkVersion = <span class="number">19</span></span><br><span class="line">    <span class="keyword">static</span> targetSdkVersion = <span class="number">27</span></span><br><span class="line">    <span class="keyword">static</span> versionCode = <span class="number">202006</span><span class="comment">//100100 改打包版本改这个</span></span><br><span class="line">    <span class="keyword">static</span> versionName = <span class="string">&#x27;2.2.6&#x27;</span><span class="comment">// E.g. 1.9.72 =&gt; 1,009,072  改打包版本改这个</span></span><br><span class="line">    <span class="keyword">static</span> buildToolsVersion = <span class="string">&quot;28.0.2&quot;</span></span><br><span class="line">    <span class="keyword">static</span> support_version = <span class="string">&quot;27.1.1&quot;</span></span><br><span class="line">    <span class="keyword">static</span> retrofit2 = <span class="string">&quot;2.3.0&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> depConfig = [</span><br><span class="line"></span><br><span class="line">            <span class="attr">support :</span> [</span><br><span class="line">                    <span class="symbol">appcompat_v7:</span> <span class="string">&quot;com.android.support:appcompat-v7:$support_version&quot;</span>,</span><br><span class="line">                    <span class="attr">design      :</span> <span class="string">&quot;com.android.support:design:$support_version&quot;</span>,</span><br><span class="line">                    <span class="attr">multidex    :</span> <span class="string">&quot;com.android.support:multidex:1.0.3&quot;</span>,</span><br><span class="line">                    <span class="attr">constraint  :</span> <span class="string">&quot;com.android.support.constraint:constraint-layout:1.1.3&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">bugly :</span> <span class="string">&#x27;com.tencent.bugly:crashreport:3.3.3&#x27;</span>,</span><br><span class="line">            <span class="symbol">gsyvideoplayer:</span> <span class="string">&#x27;com.shuyu:GSYVideoPlayer:8.1.2&#x27;</span>,</span><br><span class="line">            <span class="symbol">eventbus:</span> <span class="string">&#x27;org.greenrobot:eventbus:3.0.0&#x27;</span>,</span><br><span class="line">            <span class="symbol">gson:</span> <span class="string">&#x27;com.google.code.gson:gson:2.8.5&#x27;</span>,</span><br><span class="line">            <span class="symbol">wechatsdk:</span> <span class="string">&#x27;com.tencent.mm.opensdk:wechat-sdk-android-without-mta:5.1.4&#x27;</span>,</span><br><span class="line">            <span class="symbol">immersionbar:</span> <span class="string">&#x27;com.gyf.immersionbar:immersionbar:3.0.0&#x27;</span>,</span><br><span class="line">            <span class="symbol">junit:</span> <span class="string">&#x27;junit:junit:4.12&#x27;</span>,</span><br><span class="line">            <span class="symbol">okhttp3:</span> <span class="string">&#x27;com.squareup.okhttp3:okhttp:3.11.0&#x27;</span>,</span><br><span class="line">            <span class="symbol">fastjson:</span> <span class="string">&#x27;com.alibaba:fastjson:1.2.54&#x27;</span>,</span><br><span class="line">            <span class="symbol">glide:</span> <span class="string">&#x27;com.github.bumptech.glide:glide:4.8.0&#x27;</span>,</span><br><span class="line">            <span class="symbol">smartRefreshLayout:</span> <span class="string">&#x27;com.scwang.smartrefresh:SmartRefreshLayout:1.0.4-4&#x27;</span>, <span class="comment">//版本随意（非必须，引用可以解决无法预览问题）</span></span><br><span class="line">            <span class="symbol">immersionbar:</span> <span class="string">&#x27;com.gyf.immersionbar:immersionbar:3.0.0&#x27;</span>,</span><br><span class="line">            <span class="symbol">utilcode:</span> <span class="string">&#x27;com.blankj:utilcode:1.30.5&#x27;</span>,</span><br><span class="line">            <span class="symbol">BaseRecyclerViewAdapterHelper:</span> <span class="string">&#x27;com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.40&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>\buildSrc\.gitignore</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/build</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>\buildSrc\build.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    google()</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line">apply &#123;</span><br><span class="line">    plugin <span class="string">&#x27;groovy&#x27;</span></span><br><span class="line">    plugin <span class="string">&#x27;java-gradle-plugin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation gradleApi()</span><br><span class="line">    implementation localGroovy()</span><br><span class="line">    implementation <span class="string">&quot;commons-io:commons-io:2.6&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用</p>
<ul>
<li><p>如<code>app\build.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion Config.compileSdkVersion</span><br><span class="line">    buildToolsVersion Config.buildToolsVersion</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId Config.applicationId</span><br><span class="line">        minSdkVersion Config.minSdkVersion</span><br><span class="line">        targetSdkVersion Config.targetSdkVersion</span><br><span class="line">        versionCode Config.versionCode</span><br><span class="line">        versionName Config.versionName</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    api fileTree(<span class="attr">include:</span> [<span class="string">&#x27;*.jar&#x27;</span>], <span class="attr">dir:</span> <span class="string">&#x27;libs&#x27;</span>)</span><br><span class="line">    testImplementation Config.depConfig.junit</span><br><span class="line">    implementation Config.depConfig.support.appcompat_v7</span><br><span class="line">    implementation Config.depConfig.support.design</span><br><span class="line">    implementation Config.depConfig.support.multidex</span><br><span class="line">    implementation Config.depConfig.support.constraint</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="抽取到congifg-gradle"><a href="#抽取到congifg-gradle" class="headerlink" title="抽取到congifg.gradle"></a>抽取到congifg.gradle</h2><ol>
<li><p>根目录新建 <code>config.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line"></span><br><span class="line">    android = [</span><br><span class="line">            <span class="attr">geren_applicationId        :</span> <span class="string">&quot;com.xm597.app&quot;</span>,</span><br><span class="line">            <span class="attr">qiye_applicationId         :</span> <span class="string">&quot;com.rcw597.app&quot;</span>,</span><br><span class="line">            <span class="attr">compileSdkVersion          :</span> <span class="number">29</span>,</span><br><span class="line">            <span class="attr">buildToolsVersion          :</span> <span class="string">&quot;30.0.2&quot;</span>,</span><br><span class="line">            <span class="attr">minSdkVersion              :</span> <span class="number">21</span>,</span><br><span class="line">            <span class="attr">targetSdkVersion           :</span> <span class="number">29</span>,</span><br><span class="line">            <span class="attr">versionCode                :</span> <span class="number">94</span>,</span><br><span class="line">            <span class="attr">versionName                :</span> <span class="string">&quot;5.0.7&quot;</span>,</span><br><span class="line">            <span class="attr">appSourceCompatibility     :</span> JavaVersion.VERSION_1_8,</span><br><span class="line">            <span class="attr">appTargetCompatibility     :</span> JavaVersion.VERSION_1_8,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    version = [</span><br><span class="line">            <span class="attr">androidSupportSdkVersion   :</span> <span class="string">&quot;28.0.0&quot;</span>,</span><br><span class="line">            <span class="attr">androidXSdkVersion         :</span> <span class="string">&quot;1.1.0&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">            <span class="comment">//support</span></span><br><span class="line">            <span class="string">&quot;support-annotations&quot;</span>      : <span class="string">&quot;com.android.support:support-annotations:$&#123;version[&quot;</span>androidSupportSdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//androidx</span></span><br><span class="line">            <span class="string">&quot;appcompat&quot;</span>                : <span class="string">&quot;androidx.appcompat:appcompat:$&#123;version[&quot;</span>androidXSdkVersion<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;legacy-support-v4&quot;</span>        : <span class="string">&quot;androidx.legacy:legacy-support-v4:1.0.0&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在根目录的<code>build.gradle</code>中引入<code>config.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat</span><br><span class="line"><span class="comment">//位置在首行</span></span><br><span class="line">apply <span class="attr">from:</span> <span class="string">&quot;config.gradle&quot;</span></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用：如 <code>app\build.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion rootProject.ext.android[<span class="string">&quot;compileSdkVersion&quot;</span>]</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isSingleModule.toBoolean()) &#123;</span><br><span class="line">            applicationId rootProject.ext.android[<span class="string">&quot;geren_applicationId&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        minSdkVersion rootProject.ext.android[<span class="string">&quot;minSdkVersion&quot;</span>]</span><br><span class="line">        targetSdkVersion rootProject.ext.android[<span class="string">&quot;targetSdkVersion&quot;</span>]</span><br><span class="line">        versionCode rootProject.ext.android[<span class="string">&quot;versionCode&quot;</span>]</span><br><span class="line">        versionName rootProject.ext.android[<span class="string">&quot;versionName&quot;</span>]</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(<span class="attr">dir:</span> <span class="string">&#x27;libs&#x27;</span>, <span class="attr">include:</span> [<span class="string">&#x27;*.jar&#x27;</span>])</span><br><span class="line">    <span class="comment">//ARouter</span></span><br><span class="line">    <span class="comment">// 要与compiler匹配使用，均使用最新版可以保证兼容</span></span><br><span class="line">    implementation(rootProject.ext.dependencies[<span class="string">&quot;arouter&quot;</span>]) &#123;</span><br><span class="line">        exclude <span class="attr">module:</span> <span class="string">&#x27;support-v4&#x27;</span></span><br><span class="line">        exclude <span class="attr">module:</span> <span class="string">&#x27;support-annotations&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    annotationProcessor rootProject.ext.dependencies[<span class="string">&quot;arouter-compiler&quot;</span>]</span><br><span class="line"></span><br><span class="line">    implementation rootProject.ext.dependencies[<span class="string">&quot;multidex&quot;</span>]</span><br><span class="line">    testImplementation rootProject.ext.dependencies[<span class="string">&quot;junit&quot;</span>]</span><br><span class="line">    androidTestImplementation rootProject.ext.dependencies[<span class="string">&quot;espresso-core&quot;</span>]</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//另外，还有种引用整个集合的方法，比如</span></span><br><span class="line">    <span class="comment">//if(!rootProject.ext.dependencies.isEmpty())&#123;</span></span><br><span class="line">    <span class="comment">//    implementation rootProject.ext.dependencies.values()</span></span><br><span class="line">    /&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="依赖相关问题"><a href="#依赖相关问题" class="headerlink" title="依赖相关问题"></a>依赖相关问题</h1><h2 id="Direct-local-aar-file-dependencies-are-not-supported"><a href="#Direct-local-aar-file-dependencies-are-not-supported" class="headerlink" title="Direct local .aar file dependencies are not supported"></a><a href="https://www.cnblogs.com/baiyuas/p/14383723.html">Direct local .aar file dependencies are not supported</a></h2><p><img src="/posts/269438b3/aar-are-not-supported.png" alt="安卓/aar-are-not-supported"></p>
<h3 id="法一：把aar放到单独的模块中，再去关联它"><a href="#法一：把aar放到单独的模块中，再去关联它" class="headerlink" title="法一：把aar放到单独的模块中，再去关联它"></a>法一：把aar放到单独的模块中，再去关联它</h3><ol>
<li><p>I recently encountered the same issue, the fix was to remove the library from <code>libs/</code> and import it using <code>File -&gt; New -&gt; New Module -&gt; Import .JAR/.AAR Package</code>, then referencing it in the library module <code>build.gradle</code> file:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation project(<span class="string">&quot;:imported_aar_module&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>上述的操作在AS4.2上界面变了，那么直接手动创建这些文件</p>
<ol>
<li><p>在项目根目录下手动创建个文件夹<code>localRepo</code>；</p>
</li>
<li><p>在<code>localRepo</code>文件夹下新建文件夹<code>com_heytap_msp-push</code>；</p>
</li>
<li><p>在<code>com_heytap_msp-push</code>文件夹下放入<code>com.heytap.msp-push-2.1.0.aar</code>，新建<code>build.gradle</code></p>
<p><img src="/posts/269438b3/AS%E8%A7%A3%E5%86%B3not-support-aar.png" alt="工具/AS解决not-support-aar"></p>
</li>
<li><p><code>build.gradle</code>内容：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">configurations.maybeCreate(<span class="string">&quot;default&quot;</span>)</span><br><span class="line">artifacts.add(<span class="string">&quot;default&quot;</span>, file(<span class="string">&#x27;com.heytap.msp-push-2.1.0.aar&#x27;</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>settings.gradle</code>中添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">include <span class="string">&#x27;:localRepo:com_heytap_msp_push&#x27;</span></span><br><span class="line">include <span class="string">&#x27;:localRepo:oaid_sdk&#x27;</span></span><br><span class="line">include <span class="string">&#x27;:localRepo:vivo_pushsdk&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在调用的<code>module</code>的<code>build.gradle</code>中添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    implementation project(<span class="attr">path:</span> <span class="string">&#x27;:localRepo:com_heytap_msp_push&#x27;</span>)</span><br><span class="line">    implementation project(<span class="attr">path:</span> <span class="string">&#x27;:localRepo:vivo_pushsdk&#x27;</span>)</span><br><span class="line">    implementation project(<span class="attr">path:</span> <span class="string">&#x27;:localRepo:oaid_sdk&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<p>（我没有按上述的解决，重新整理<code>AndroidManifest</code>文件，一些<code>*provider</code>、<code>*receiver</code>的要加 <code>android:exported=&quot;false&quot;</code>解决了上述的问题）</p>
<h3 id="法二-：用插件导出远程依赖库"><a href="#法二-：用插件导出远程依赖库" class="headerlink" title="法二 ：用插件导出远程依赖库"></a>法二 ：用插件导出远程依赖库</h3><p>另外一篇：<a href="https://blog.csdn.net/gaoshu28/article/details/113555589">Android 打包aar包含第三方aar</a></p>
<p>因项目需要，打包aar包含第三方aar，如果直接对module进行打包会产生一些问题。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">What went wrong:</span><br><span class="line">Direct local .aar <span class="keyword">file</span> <span class="keyword">dependencies</span> are not supported when building an AAR. The resulting AAR would be broken because the classes and Android resources <span class="keyword">from</span> <span class="keyword">any</span> local .aar <span class="keyword">file</span> <span class="keyword">dependencies</span> would not be packaged in the resulting AAR. <span class="keyword">Previous</span> versions of the Android Gradle Plugin produce broken AARs in <span class="keyword">this</span> <span class="keyword">case</span> too (despite not throwing <span class="keyword">this</span> error). The following direct local .aar <span class="keyword">file</span> <span class="keyword">dependencies</span> of the :httpLibrary <span class="keyword">project</span> caused <span class="keyword">this</span> error: D:\AndroidWorkSpace\mackSdk\mackSDK\httpLibrary\libs\xxxxx.aar</span><br></pre></td></tr></table></figure>

<p>错误信息说的很清楚构建aar不支持本地aar文件依赖</p>
<p><strong>解决方案：</strong><br><code>fat-aar</code> 能将依赖项合并并嵌入到生成的<code>aar</code>文件中。<br><code>fat-aar</code>项目地址：<a href="https://github.com/adwiv/android-fat-aar">https://github.com/adwiv/android-fat-aar</a></p>
<p>由于<code>fat-aar</code>不再维护，使用起来有诸多需要修改的地方，而不支持高版本的<code>gradle</code>，极其坑爹，踩坑后找到替代方案，支持高版本的<code>gradle</code>无需修改脚本文件<br><code>fat-aar-android</code>:<a href="https://github.com/kezong/fat-aar-android">https://github.com/kezong/fat-aar-android</a></p>
<ol>
<li><p>在需要打包成<code>aar</code>的<code>module</code>的<code>build.gradle</code>中加入如下代码</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.library&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.kezong.fat-aar&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在<code>dependencies</code>中以如下方式依赖第三方aar</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    embed(<span class="attr">name:</span><span class="string">&#x27;xxxxxrelease&#x27;</span>, <span class="attr">ext:</span><span class="string">&#x27;aar&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目根目录的<code>build.gradle</code>中添加如下代码</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript&#123;</span><br><span class="line">    repositories&#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        maven&#123;url <span class="string">&#x27;https://plugins.gradle.org/m2/&#x27;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies&#123;</span><br><span class="line">        classpath <span class="string">&quot;com.android.tools.build:gradle:4.0.1&quot;</span></span><br><span class="line">        classpath <span class="string">&#x27;com.kezong:fat-aar:1.3.1&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">allprojects&#123;</span><br><span class="line">    repositories&#123;</span><br><span class="line">        fatDir&#123;</span><br><span class="line">            dirs <span class="string">&#x27;libs&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行<code>module</code> 下<code>task</code> <code>assembleRelease</code> 打包<br>在 AS 右侧的 <code>module</code> 下找到 <code>assembleRelease</code>（在对应类包<code>httpLibrary</code>》<code>Tasks</code>》<code>other</code>》<code>assembleRelease</code></p>
<p>最终生成的<code>aar</code>在<code>module</code>下的<code>build</code>中<br>在 <code>httpLibrary/build/outputs/aar</code> 下会有个 <code>httpLibrary-release.aar</code></p>
</li>
</ol>
<h2 id="关于如果A是B的依赖，B是C的依赖，C中引用A中的类时候的问题"><a href="#关于如果A是B的依赖，B是C的依赖，C中引用A中的类时候的问题" class="headerlink" title="关于如果A是B的依赖，B是C的依赖，C中引用A中的类时候的问题"></a>关于如果A是B的依赖，B是C的依赖，C中引用A中的类时候的问题</h2><p>【依赖传递问题】</p>
<ol>
<li>其实是由于<code>compile</code>以及<code>implementation</code>这个问题引起的<br><code>implementation</code>引入的包只给当前项目用<br>而<code>compile</code>引入的包不止给当前项目用</li>
<li>在Google IO 相关话题的中提到了一个建议，<br>就是依赖首先应该设置为<code>implement</code>的，如果没有错，那就用<code>implement</code>，<br>如果有错，那么使用<code>api</code>指令，这样会使编译速度有所增快。</li>
</ol>
<h2 id="在主工程依赖-shop-模块的远程依赖时，无法找到依赖的本地-aar-相关"><a href="#在主工程依赖-shop-模块的远程依赖时，无法找到依赖的本地-aar-相关" class="headerlink" title="在主工程依赖 shop 模块的远程依赖时，无法找到依赖的本地 aar 相关"></a>在主工程依赖 shop 模块的远程依赖时，无法找到依赖的本地 aar 相关</h2><p><strong>场景</strong>：主工程app -&gt;  shop模块 -&gt; 依赖本地aar</p>
<p><strong>解决</strong>：将 本地 aar 放到远端，也是用远程依赖。</p>
<p><strong>原因</strong>：主要在于<code>Android 3.0</code> 后本地 <code>aar</code> 依赖无法越级传递依赖。可以看远端 <code>shop</code>模块 <code>maven</code>打包时生成的 <code>.pom</code> 文件，查看具体依赖，发现<code>gradle</code> 会把本地 <code>aar</code> 依赖也当做一份远端依赖进行配置，但是没有<code>group</code>等信息，如此在主工程中依赖 <code>shop</code> 模块是，直接编译不通过，因为会视为远端仓库的依赖，但实际并不存在。（根本原因未知）</p>
<h2 id="本地-jar-依赖和本地-aar-依赖的区别"><a href="#本地-jar-依赖和本地-aar-依赖的区别" class="headerlink" title="本地 jar 依赖和本地 aar 依赖的区别"></a>本地 <code>jar</code> 依赖和本地 <code>aar</code> 依赖的区别</h2><ul>
<li><strong>jar 文件</strong>只包含编译好的 <code>.class</code> 文件和清单文件，不包含资源文件。所以如果没有 <code>res</code> 资源文件，可以在打包时，将 <code>packaging</code> 配置为 <code>jar</code> 格式；</li>
<li><strong>aar 文件</strong>包含 <code>class</code> 以及 <code>/res</code> 目录下的所有资源文件。<br>查看 <code>gradle</code> 下载的远程依赖区别就很明显：</li>
</ul>
<p><img src="/posts/269438b3/981009fdgy1ge4m23rhc2j20u209ewff.jpg" alt="aar和jar包结构"></p>
<h2 id="zxing依赖冲突"><a href="#zxing依赖冲突" class="headerlink" title="zxing依赖冲突"></a>zxing依赖冲突</h2><blockquote>
<p>可以看工程的External Libraries（或者运行的时候AS的报错信息）（用来确认名称），知道某个<code>Duplicate class ...</code>是在哪个库底下</p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">debugImplementation(Config.depConfig.doraemonKit.debug)&#123;</span><br><span class="line">    exclude <span class="attr">group:</span> <span class="string">&#x27;com.google.zxing&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">releaseImplementation(Config.depConfig.doraemonKit.release)&#123;</span><br><span class="line">    exclude <span class="attr">group:</span> <span class="string">&#x27;com.google.zxing&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Could-not-determine-the-dependencies-of-task-‘-app-mergeReleaseAssets’"><a href="#Could-not-determine-the-dependencies-of-task-‘-app-mergeReleaseAssets’" class="headerlink" title="Could not determine the dependencies of task ‘:app:mergeReleaseAssets’"></a>Could not determine the dependencies of task ‘:app:mergeReleaseAssets’</h2><h2 id="Required-by-project-app-gt-id-zelory-compressor-2-1-0"><a href="#Required-by-project-app-gt-id-zelory-compressor-2-1-0" class="headerlink" title="Required by: project :app &gt; id.zelory:compressor:2.1.0"></a>Required by: project :app &gt; id.zelory:compressor:2.1.0</h2><p>问题：在AS的Terminal中输入<code>gradlew assembleRelease</code>会报<code>Required by: project :app &gt; id.zelory:compressor:2.1.0</code>错误（而在AS右侧，使用点击<code>assembleRelease</code>不会报错）</p>
<p>解决：</p>
<h2 id="so库相关"><a href="#so库相关" class="headerlink" title="so库相关"></a>so库相关</h2><h3 id="关于so库无法加载的问题"><a href="#关于so库无法加载的问题" class="headerlink" title="关于so库无法加载的问题"></a>关于so库无法加载的问题</h3><p>1、关于so库无法加载的问题，出现这样的报错：<br><code>java.lang.UnsatisfiedLinkError: dalvik.system.PathClassLoader[DexPathList[...</code><br>需要在module中的build.gradle 中的  android{}标签内填这些</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ndk</span> &#123;</span><br><span class="line">		abiFilters <span class="string">&quot;armeabi&quot;</span>, <span class="string">&quot;armeabi-v7a&quot;</span>, <span class="string">&quot;x86&quot;</span>, <span class="string">&quot;mips&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sourceSets</span>.main &#123;</span><br><span class="line">		jniLibs.srcDir <span class="string">&#x27;libs&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">		<span class="keyword">flatDir</span> &#123;</span><br><span class="line">    	dirs <span class="string">&#x27;libs&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="so库重复问题"><a href="#so库重复问题" class="headerlink" title="so库重复问题"></a>so库重复问题</h3><p>现象：报<code>More than one file was found with OS independent path &#39;lib/arm64-v8a/libpl_droidsonroids_gif.so&#39;</code></p>
<p>原因：so库重复了</p>
<p>解决：</p>
<p>方法一：在app的build.gradle中加入</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="regexp">//</span> 解决资源重复问题</span><br><span class="line">    packagingOptions &#123;</span><br><span class="line">        exclude <span class="string">&#x27;lib/mips/libpl_droidsonroids_gif.so&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：如果方法一不起效，查看build.gradle中添加的依赖库和libs中的库是否重复了，如果重复了那么把libs中的库删除即可。</p>
<h3 id="So文件加固检测安全问题"><a href="#So文件加固检测安全问题" class="headerlink" title="So文件加固检测安全问题"></a>So文件加固检测安全问题</h3><p>So文件为APK中包含的动态链接库文件，Android利用NDK技术将C&#x2F;C++语言实现的核心代码编译为So库文件供Java层调用。So文件被破解可能导致应用的核心功能代码和算法泄露。攻击者利用核心功能与算法可轻易抓取到客户端的敏感数据，并对其解密，导致用户的隐私泄露或直接财产损失。</p>
<p><strong>解决方案</strong></p>
<p>对so文件进行安全加固、可以使用第三方的安全平台so加固方案。</p>
<h3 id="So文件找不到问题：java-lang-UnsatisfiedLinkError"><a href="#So文件找不到问题：java-lang-UnsatisfiedLinkError" class="headerlink" title="So文件找不到问题：java.lang.UnsatisfiedLinkError"></a>So文件找不到问题：java.lang.UnsatisfiedLinkError</h3><p><code>couldn&#39;t find &quot;libijkffmpeg.so&quot;</code></p>
<p>报这个错误通常是so库加载失败，或者找不到执行的JNI方法。</p>
<p><strong>解决</strong>：</p>
<ol>
<li>建议检查so在安装的过程中是否丢失，没有放入指定的目录下。</li>
<li>调用loadLibrary时检查是否调用了正确的so文件名，并对其进行捕获，进行相应的处理，防止程序发生崩溃。</li>
<li>检查下so的架构是否跟设备架构一致（如在64-bit架构下调用32-bit的so）</li>
</ol>
<p>代码展示</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">ndk &#123;</span><br><span class="line">    <span class="comment">//根据需要 自行选择添加的对应cpu类型的.so库。</span></span><br><span class="line">    <span class="comment">//abiFilters &#x27;armeabi&#x27;, &#x27;armeabi-v7a&#x27;, &#x27;arm64-v8a&#x27;, &#x27;x86&#x27;, &#x27;mips&#x27;</span></span><br><span class="line">    abiFilters <span class="string">&#x27;armeabi-v7a&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="lib相关"><a href="#lib相关" class="headerlink" title="lib相关"></a>lib相关</h2><h3 id="关于lib库无法使用资源文件问题"><a href="#关于lib库无法使用资源文件问题" class="headerlink" title="关于lib库无法使用资源文件问题"></a>关于lib库无法使用资源文件问题</h3><p>有时候我们的lib包无法使用资源文件或者依赖之后编译不过，常见有以下几个情况<br>1、使用了switch case，由于依赖工程中监听事件判断的时候使用了<br>比如：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">		<span class="keyword">case</span> R.id.activtiy_scale_usb_permission:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>if else</code>代替了</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">int i <span class="operator">=</span> v.getId()<span class="comment">;</span></span><br><span class="line">if (i <span class="operator">=</span><span class="operator">=</span> R.id.activtiy_scale_usb_permission) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>注意：根本原因是lib库中id不是常量的所以不能使用switch，如果其它地方调用到了这个方法，也要记住是不是这个引起的</p>
<h2 id="aar相关"><a href="#aar相关" class="headerlink" title="aar相关"></a>aar相关</h2><h3 id="关于aar的包的问题"><a href="#关于aar的包的问题" class="headerlink" title="关于aar的包的问题"></a>关于aar的包的问题</h3><ol>
<li>moudle中的lib文件夹下的jar，aar和远程依赖必须用api引用否则APP依赖module后无法使用</li>
<li>如果moudle打包为aar给demo使用，则moudle中包含的aar和远程库无法引用，<br>必须再次导入demo中（应该是机制本身的原因，aar中无法引用aar和远程库）</li>
<li><a href="https://www.cnblogs.com/bellkosmos/p/6146349.html">多层级Module对aar引用问题</a>: <code>Failed to resolve::mylibrary-release</code></li>
</ol>
<p>现象：有个aar文件放到ModuleA，ModuleB依赖ModuleA则会在编译过程中发生找不到aar文件的异常（同样如果ModuleC依赖ModuleB，也会有找不到这个aar文件的异常（ModuleC等下也是跟ModuleB一样处理））</p>
<p>解决：</p>
<p>i. 在ModuleB的<code>build.gradle</code>的<code>dependencies</code>中加入<code>compile(name:&#39;svprogresshud-release&#39;, ext: &#39;aar&#39;)</code>；</p>
<p>ii. 在ModuleB的<code>build.gradle</code>的<code>android</code>中加入</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">repositories</span>&#123;</span><br><span class="line">	<span class="keyword">flatDir</span>&#123;</span><br><span class="line">		<span class="comment">//前面的是ModuleA的文件夹；后面的是本身ModuleB的</span></span><br><span class="line">		dirs <span class="string">&#x27;../common/libs&#x27;</span>, <span class="string">&#x27;libs&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="aar缓存问题"><a href="#aar缓存问题" class="headerlink" title="aar缓存问题"></a>aar缓存问题</h3><p>如果存在aar包缓存的问题，会发现一个问题：就是一直使用旧的aar包，而不是新的aar包</p>
<p>解决：所以有一点需要记住：直接关闭重新打开去解决</p>
<h3 id="library依赖别的Module，library导出aar，缺少Module中的aar"><a href="#library依赖别的Module，library导出aar，缺少Module中的aar" class="headerlink" title="library依赖别的Module，library导出aar，缺少Module中的aar"></a>library依赖别的Module，library导出aar，缺少Module中的aar</h3><p>解决：把每个module中的aar都复制到新项目上</p>
<h3 id="library导出aar丢失远程依赖"><a href="#library导出aar丢失远程依赖" class="headerlink" title="library导出aar丢失远程依赖"></a><a href="https://blog.csdn.net/qisan__/article/details/119642690">library导出aar丢失远程依赖</a></h3><ol>
<li><p>根目录<code>build.gradle</code>中添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//添加插件</span></span><br><span class="line">    classpath <span class="string">&#x27;com.github.kezong:fat-aar:1.3.6&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        flatDir &#123;</span><br><span class="line">            dirs <span class="string">&#x27;libs&#x27;</span> <span class="comment">//this way we can find the .aar file in libs folder</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>app/build.gradle</code>中添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">	<span class="comment">//需要插入aar包的远程依赖</span></span><br><span class="line">    embed  <span class="string">&#x27;com.alibaba:fastjson:1.2.83&#x27;</span></span><br><span class="line">    embed  <span class="string">&#x27;com.blankj:utilcodex:1.31.0&#x27;</span></span><br><span class="line">    embed <span class="string">&#x27;com.facebook.fresco:fresco:1.13.0&#x27;</span></span><br><span class="line">    embed <span class="string">&quot;androidx.multidex:multidex:2.0.1&quot;</span></span><br><span class="line">    embed <span class="string">&#x27;com.google.protobuf:protobuf-java:3.20.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>问题-集合</title>
    <url>/posts/ac3a14d8/</url>
    <content><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="java-util-ConcurrentModificationException"><a href="#java-util-ConcurrentModificationException" class="headerlink" title="java.util.ConcurrentModificationException"></a>java.util.ConcurrentModificationException</h2><blockquote>
<p>该异常表示迭代器迭代过程中，迭代对象发生了改变，如数据项增加或删除</p>
</blockquote>
<p>由于迭代对象不是线程安全，在迭代的过程中，会检查modCount是否和初始modCount即expectedModCount一致，如果不一致，则认为数据有变化，迭代终止并抛出异常。常出现的场景是，两个线程同时对集合进行操作，线程1对集合进行遍历，而线程2对集合进行增加、删除操作，此时将会发生ConcurrentModificationException异常。</p>
<p>解决：</p>
<ol>
<li>多线程访问时要增加<a href="https://so.csdn.net/so/search?q=%E5%90%8C%E6%AD%A5%E9%94%81&spm=1001.2101.3001.7020">同步锁</a></li>
<li>建议使用线程安全的集合：<ul>
<li>使用ConcurrentHashMap替换HashMap，CopyOnWriteArrayList替换ArrayList；</li>
<li>或使用使用Vector替换ArrayList，Vector是线程安全的。Vector的缺点：大量数据操作时，由于线程安全，性能比ArrayList低.</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓问题</tag>
      </tags>
  </entry>
  <entry>
    <title>UML相关</title>
    <url>/posts/555425691/</url>
    <content><![CDATA[<h1 id="泛化各种关系的强弱顺序"><a href="#泛化各种关系的强弱顺序" class="headerlink" title="泛化各种关系的强弱顺序"></a>泛化各种关系的强弱顺序</h1><p>各种关系的强弱顺序：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">泛化 <span class="operator">=</span> 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</span><br></pre></td></tr></table></figure>

<p>下面这张UML图，比较形象地展示了各种类图的关系：</p>
<p><img src="/posts/555425691/%E5%90%84%E7%A7%8D%E7%B1%BB%E5%9B%BE%E5%85%B3%E7%B3%BB.png" alt="其他/各种类图关系"></p>
<p>具体的：</p>
<p>在UML类图中，常见的有以下几种关系: 泛化（Generalization）, 实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)</p>
<h2 id="泛化（Generalization）"><a href="#泛化（Generalization）" class="headerlink" title="泛化（Generalization）"></a>泛化（Generalization<strong>）</strong></h2><p>【泛化关系】：是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。    </p>
<p>【箭头指向】：带三角箭头的实线，箭头指向父类</p>
<p><img src="/posts/555425691/%E6%B3%9B%E5%8C%96.png" alt="其他/泛化"></p>
<h2 id="实现（Realization）"><a href="#实现（Realization）" class="headerlink" title="实现（Realization）"></a>实现（Realization）</h2><p>【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现.    </p>
<p>【箭头指向】：带三角箭头的虚线，箭头指向接口</p>
<p><img src="/posts/555425691/%E5%AE%9E%E7%8E%B0.png" alt="其他/实现"></p>
<h2 id="组合（Composition）"><a href="#组合（Composition）" class="headerlink" title="组合（Composition）"></a>组合（Composition）</h2><p> 【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。    组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中<strong>代表整体的对象负责代表部分的对象的生命周期</strong>。</p>
<p>【代码体现】：成员变量</p>
<p>【箭头及指向】：带实心菱形的实线，菱形指向整体</p>
<p><img src="/posts/555425691/%E7%BB%84%E5%90%88.png" alt="其他/组合"></p>
<h2 id="聚合（Aggregation）"><a href="#聚合（Aggregation）" class="headerlink" title="聚合（Aggregation）"></a>聚合（Aggregation）</h2><p>【聚合关系】：是整体与部分的关系，且<strong>部分可以离开整体而单独存在</strong>。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。    聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。    </p>
<p>【代码体现】：成员变量    </p>
<p>【箭头及指向】：带空心菱形的实心线，菱形指向整体</p>
<p><img src="/posts/555425691/%E8%81%9A%E5%90%88.png" alt="其他/聚合"></p>
<h2 id="关联（Association"><a href="#关联（Association" class="headerlink" title="关联（Association**)**"></a>关联（Association**)**</h2><p>【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。    </p>
<p>【代码体现】：成员变量    </p>
<p>【箭头及指向】：带普通箭头的实心线，指向被拥有者</p>
<p><img src="/posts/555425691/%E5%85%B3%E8%81%94.png" alt="其他/关联"></p>
<p>上图中，老师与学生是双向关联，老师有多名学生，学生也可能有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。     </p>
<p>下图为自身关联： </p>
<p><img src="/posts/555425691/%E8%87%AA%E8%BA%AB%E5%85%B3%E8%81%94.png" alt="其他/自身关联"></p>
<h2 id="依赖（Dependency）"><a href="#依赖（Dependency）" class="headerlink" title="依赖（Dependency）"></a>依赖（Dependency）</h2><p>【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.    </p>
<p>【代码表现】：局部变量、方法的参数或者对静态方法的调用    </p>
<p>【箭头及指向】：带箭头的虚线，指向被使用者</p>
<p><img src="/posts/555425691/%E4%BE%9D%E8%B5%96.png" alt="其他/依赖"></p>
<h1 id="描述类的属性的可见性"><a href="#描述类的属性的可见性" class="headerlink" title="描述类的属性的可见性"></a>描述类的属性的可见性</h1><ol>
<li><code>+</code>：public公用的，该属性对所有类可见</li>
<li><code>#</code>：protected受保护的，对该类的子孙可见</li>
<li><code>-</code>：private私有的，只对该类本身可见</li>
<li><code>~</code>：package包的，只对同一包声明的其他类可见</li>
</ol>
<p><img src="/posts/555425691/SouthEast.png" alt="描述类的属性的可见性"></p>
]]></content>
      <categories>
        <category>其他IT</category>
      </categories>
      <tags>
        <tag>其他IT知识</tag>
      </tags>
  </entry>
  <entry>
    <title>UI相关问题</title>
    <url>/posts/3943419322/</url>
    <content><![CDATA[<h1 id="ListView相关"><a href="#ListView相关" class="headerlink" title="ListView相关"></a>ListView相关</h1><h2 id="ListView的setOnItemClickListener无效"><a href="#ListView的setOnItemClickListener无效" class="headerlink" title="ListView的setOnItemClickListener无效"></a>ListView的setOnItemClickListener无效</h2><p>问题：使用listview的时候遇到了设置item监听事件的时候在没有回调onItemClick 方法的问题</p>
<p>我的情况是在item中有一个Button按钮，所以不会回调。</p>
<p>解决：</p>
<p>法1. 在checkbox、button对应的view处加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:focusable=”false”</span><br><span class="line">android:clickable=”false”</span><br><span class="line">android:focusableInTouchMode=”false”</span><br></pre></td></tr></table></figure>

<p>法2. 在item最外层添加属性 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:descendantFocusability=”blocksDescendants”</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原因：当listview中包含button，checkbox等控件的时候，android会默认将focus给了这些控件，也就是说listview的item根本就获取不到focus，所以导致onitemclick时间不能触发</p>
</blockquote>
<h2 id="ArrayIndexOutOfBoundsException-with-custom-Android-Adapter-for-multiple-views-in-ListView"><a href="#ArrayIndexOutOfBoundsException-with-custom-Android-Adapter-for-multiple-views-in-ListView" class="headerlink" title="ArrayIndexOutOfBoundsException with custom Android Adapter for multiple views in ListView"></a><a href="https://stackoverflow.com/questions/2596547/arrayindexoutofboundsexception-with-custom-android-adapter-for-multiple-views-in">ArrayIndexOutOfBoundsException with custom Android Adapter for multiple views in ListView</a></h2><p><code>listView</code>有多种布局，可能是<code>getItemViewType()</code> &gt;&#x3D; <code>getViewTypeCount()</code> 导致的（检查<code>getViewTypeCount()</code>的值是不是写死了）</p>
<h2 id="ListView滑动到标题栏、导航栏上"><a href="#ListView滑动到标题栏、导航栏上" class="headerlink" title="ListView滑动到标题栏、导航栏上"></a>ListView滑动到标题栏、导航栏上</h2><p>现象：出现滑动ListView滑动到标题栏上、导航栏上。点击标题栏上tab（多tab页面）此tab会刷新成原来没有被覆盖的样子。</p>
<p>寻找问题的经历的步骤：</p>
<p>1、猜测是 PagerSlidingTabStrip（PagerSlidingTabStrip+Viewpager+Fragment）导致的，故替换成TabLlayout+ViewPager+Fragment来实现。结果还是不行</p>
<p><img src="http://ww1.sinaimg.cn/large/981009fdly1gjmjtvrgzaj20m40ongnd.jpg" alt="ListView滑动到标题栏、导航栏上1.png"></p>
<p>2、替换Activity、Adapter，只留item布局不一样，发现问题依然存在。所以定位问题是出在item布局上。查看了item布局发现有</p>
<p><img src="http://ww1.sinaimg.cn/large/981009fdly1gjmju631nhj20pv0n7myc.jpg" alt="ListView滑动到标题栏、导航栏上2.png"></p>
<p>替换了com.u1city.androidframe.customView.FilletFrameLayout为RelativeLayout发现正常了。但是圆角没有了，所以自定义圆角RelativeLayout，但是问题又出现了。所以定位到问题是圆角导致的。</p>
<p>最终版本：最外层用RelativeLayout，里面的圆角再通过别的方式来实现。</p>
<p><img src="http://ww1.sinaimg.cn/large/981009fdly1gjmjumvromj20mh0p9abo.jpg" alt="ListView滑动到标题栏、导航栏上3.png"></p>
<p><img src="http://ww1.sinaimg.cn/large/981009fdly1gjmjut1xyyj20yu0ofq3l.jpg" alt="ListView滑动到标题栏、导航栏上4.png"></p>
<h2 id="ListView套多个Editext和多个RatingBar错乱问题"><a href="#ListView套多个Editext和多个RatingBar错乱问题" class="headerlink" title="ListView套多个Editext和多个RatingBar错乱问题"></a>ListView套多个Editext和多个RatingBar错乱问题</h2><p>解决代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToEvaluateAdapter</span> <span class="keyword">extends</span> <span class="title class_">BaseAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LayoutInflater inflater;</span><br><span class="line">    <span class="keyword">private</span> List&lt;CommentInfo&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ToEvaluateAdapter</span><span class="params">(Context context, List&lt;CommentInfo&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">        inflater = LayoutInflater.from(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getItem</span><span class="params">(<span class="type">int</span> arg0)</span> &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">list</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="literal">null</span> : list.get(arg0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getItemId</span><span class="params">(<span class="type">int</span> arg0)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arg0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getView</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> position, View convertView, ViewGroup parent)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> ViewHolder viewHolder;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (convertView == <span class="literal">null</span>) &#123;</span><br><span class="line">            convertView = inflater.inflate(R.layout.home_toevaluate_listitem, <span class="literal">null</span>);</span><br><span class="line">            viewHolder = <span class="keyword">new</span> <span class="title class_">ViewHolder</span>(convertView);</span><br><span class="line">            convertView.setTag(viewHolder);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            viewHolder = (ViewHolder) convertView.getTag();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">CommentInfo</span> <span class="variable">commentInfo</span> <span class="operator">=</span> list.get(position);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*--------------------------------------EditText -begin-----------------------------------------*/</span></span><br><span class="line">        <span class="comment">//把CommentInfo与EditText进行绑定</span></span><br><span class="line">        viewHolder.home_toevaluate_content_edt.setTag(commentInfo);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        清除焦点</span></span><br><span class="line">        viewHolder.home_toevaluate_content_edt.clearFocus();</span><br><span class="line">        viewHolder.home_toevaluate_content_edt.addTextChangedListener(<span class="keyword">new</span> <span class="title class_">TextWatcher</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeTextChanged</span><span class="params">(CharSequence s, <span class="type">int</span> start, <span class="type">int</span> count, <span class="type">int</span> after)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTextChanged</span><span class="params">(CharSequence s, <span class="type">int</span> start, <span class="type">int</span> before, <span class="type">int</span> count)</span> &#123;</span><br><span class="line">                <span class="comment">//存储变化</span></span><br><span class="line">                <span class="type">CommentInfo</span> <span class="variable">commentInfo</span> <span class="operator">=</span> (CommentInfo) viewHolder.home_toevaluate_content_edt.getTag();</span><br><span class="line">                commentInfo.setContent(s + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterTextChanged</span><span class="params">(Editable s)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//大部分情况下，getview中有if必须有else</span></span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(commentInfo.getContent())) &#123;</span><br><span class="line">            viewHolder.home_toevaluate_content_edt.setText(commentInfo.getContent());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            viewHolder.home_toevaluate_content_edt.setText(<span class="string">&quot;&quot;</span>);<span class="comment">//没有数值时，这句不能省略，否则会导致别的item展示当前的数据</span></span><br><span class="line">            viewHolder.home_toevaluate_content_edt.setHint(<span class="string">&quot;说说哪里满意,帮助大家选择&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*--------------------------------------EditText -end-----------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*--------------------------------------RatingBar-begin-----------------------------------*/</span></span><br><span class="line">        <span class="comment">//方法一： 给RatingBar设置标记</span></span><br><span class="line"><span class="comment">//        viewHolder.ratingBar.setTag(position);</span></span><br><span class="line">        <span class="comment">//方法二： 把CommentInfo与RatingBar进行绑定</span></span><br><span class="line">        viewHolder.ratingBar.setTag(commentInfo);</span><br><span class="line">        <span class="comment">// 清除焦点</span></span><br><span class="line">        viewHolder.ratingBar.clearFocus();</span><br><span class="line">        <span class="comment">//滑动星星的时候</span></span><br><span class="line">        viewHolder.ratingBar.setOnRatingBarChangeListener(<span class="keyword">new</span> <span class="title class_">RatingBar</span>.OnRatingBarChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRatingChanged</span><span class="params">(RatingBar ratingBar, <span class="type">float</span> rating, <span class="type">boolean</span> fromUser)</span> &#123;</span><br><span class="line">                <span class="comment">//存储变化</span></span><br><span class="line"><span class="comment">//          方法一：获取标记的数据      CommentInfo commentInfo = getCommentInfo((Integer) ratingBar.getTag());</span></span><br><span class="line"><span class="comment">//                方法二：获取标记的数据</span></span><br><span class="line">                <span class="type">CommentInfo</span> <span class="variable">commentInfo</span> <span class="operator">=</span> (CommentInfo) viewHolder.ratingBar.getTag();</span><br><span class="line">                commentInfo.setGrade(rating);<span class="comment">//不要在这进行 *2 的操作，否则会导致每次的数值都翻倍，最终使RatingBar充满，只能在展示的时候进行 *2 展示</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (commentInfo.getGrade() == <span class="number">0</span>) &#123;</span><br><span class="line">                    viewHolder.home_toevaluate_value_tv.setText(<span class="string">&quot;请滑动星星评分&quot;</span>);</span><br><span class="line">                    viewHolder.home_toevaluate_value_tv.setTextColor(Color.BLACK);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    viewHolder.home_toevaluate_value_tv.setText(commentInfo.getGrade() * <span class="number">2</span> + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    viewHolder.home_toevaluate_value_tv.setTextColor(Color.GREEN);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (commentInfo.getGrade() == <span class="number">0</span>) &#123;</span><br><span class="line">            viewHolder.home_toevaluate_value_tv.setText(<span class="string">&quot;请滑动星星评分&quot;</span>);</span><br><span class="line">            viewHolder.home_toevaluate_value_tv.setTextColor(Color.BLACK);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            viewHolder.home_toevaluate_value_tv.setText(commentInfo.getGrade() * <span class="number">2</span> + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            viewHolder.home_toevaluate_value_tv.setTextColor(Color.GREEN);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        viewHolder.ratingBar.setRating(commentInfo.getGrade());</span><br><span class="line">        <span class="comment">/*--------------------------------------RatingBar-end-----------------------------------*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> convertView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法二：用于取出集合中的数据</span></span><br><span class="line">    <span class="keyword">private</span> CommentInfo <span class="title function_">getCommentInfo</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ViewHolder</span> &#123;</span><br><span class="line">        RatingBar ratingBar;</span><br><span class="line">        TextView home_toevaluate_value_tv;</span><br><span class="line">        EditText home_toevaluate_content_edt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ViewHolder</span><span class="params">(View convertView)</span> &#123;</span><br><span class="line">            ratingBar = (RatingBar) convertView.findViewById(R.id.home_toevaluate_ratingBar);</span><br><span class="line">            home_toevaluate_value_tv = (TextView) convertView.findViewById(R.id.home_toevaluate_value_tv);</span><br><span class="line">            home_toevaluate_content_edt = (EditText) convertView.findViewById(R.id.home_toevaluate_content_edt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//数据对外的接口</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CommentInfo&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在ListView历史复用中Edittext数据显示混乱"><a href="#在ListView历史复用中Edittext数据显示混乱" class="headerlink" title="在ListView历史复用中Edittext数据显示混乱"></a>在ListView历史复用中Edittext数据显示混乱</h2><p>解决在ListView历史复用中Edittext数据显示混乱</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//大部分情况下，getview中有if必须有else</span></span><br><span class="line"><span class="keyword">if</span>(!TextUtils.isEmpty(bean.getInput()))&#123;</span><br><span class="line">    vh.mEditText.setText(bean.getInput());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    vh.mEditText.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自己挖的坑，为空的时候设置了setHintText没有设置setText导致其他item项的EditText也会显示当前item的值</p>
<p><a href="http://blog.csdn.net/fan7983377/article/details/51516155">解决在ListView历史复用中Edittext数据显示混乱</a></p>
<h1 id="ExpandListView"><a href="#ExpandListView" class="headerlink" title="ExpandListView"></a>ExpandListView</h1><h2 id="ExpandListView滑动过程中发现显示错位问题"><a href="#ExpandListView滑动过程中发现显示错位问题" class="headerlink" title="ExpandListView滑动过程中发现显示错位问题"></a>ExpandListView滑动过程中发现显示错位问题</h2><p>过程中出现错位问题：隐藏区域上划时显示出图片，本应该显示文字。</p>
<p>发现错误原因：</p>
<p>View childView &#x3D;convertView;</p>
<p>View childView1 &#x3D;convertView;</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">getGroupView中写法为：</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ChildHolder childHolder;</span><br><span class="line"><span class="keyword">if</span> (groupPosition == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="type">View</span> <span class="variable">childView</span> <span class="operator">=</span>convertView;</span><br><span class="line">    <span class="keyword">if</span> (childView == <span class="literal">null</span>) &#123;</span><br><span class="line">        childView = LayoutInflater.from(context).inflate(R.layout.item_hdly_child1, <span class="literal">null</span>);</span><br><span class="line">        childHolder = <span class="keyword">new</span> <span class="title class_">ChildHolder</span>();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        childView.setTag(childHolder);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        childHolder = (ChildHolder) childView.getTag();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    convertView = childView;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">View</span> <span class="variable">childView1</span> <span class="operator">=</span>convertView;</span><br><span class="line">    <span class="keyword">if</span> (childView1 == <span class="literal">null</span>)&#123;</span><br><span class="line">        childHolder = <span class="keyword">new</span> <span class="title class_">ChildHolder</span>();</span><br><span class="line">        childView1 = LayoutInflater.from(context).inflate(R.layout.item_hdly_child2, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        childView1.setTag(childHolder);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        childHolder = (ChildHolder) childView1.getTag();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    convertView = childView1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正确源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rongshanghui.tastebychance.com.rongshanghui.zwdt.hdly;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.BaseExpandableListAdapter;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rongshanghui.tastebychance.com.rongshanghui.R;</span><br><span class="line"><span class="keyword">import</span> rongshanghui.tastebychance.com.rongshanghui.util.NoDoubleClickListener;</span><br><span class="line"><span class="keyword">import</span> rongshanghui.tastebychance.com.rongshanghui.util.PicassoUtils;</span><br><span class="line"><span class="keyword">import</span> rongshanghui.tastebychance.com.rongshanghui.zwdt.hdly.bean.HDLYBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by shenbinghong on 2018/1/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExpandListViewAdapter</span> <span class="keyword">extends</span> <span class="title class_">BaseExpandableListAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"><span class="comment">//    private LayoutInflater inflater = null;</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;HDLYBean&gt; groups;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExpandListViewAdapter</span><span class="params">(Context context, List&lt;HDLYBean&gt; groups)</span> &#123;</span><br><span class="line"><span class="comment">//        inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span></span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="built_in">this</span>.groups = groups;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getGroupCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> groups.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getChildrenCount</span><span class="params">(<span class="type">int</span> groupPosition)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> groups.get(groupPosition).getItems().size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getGroup</span><span class="params">(<span class="type">int</span> groupPosition)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> groups.get(groupPosition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> groupPosition, <span class="type">int</span> childPosition)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> groups.get(groupPosition).getItems().get(childPosition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getGroupId</span><span class="params">(<span class="type">int</span> groupPosition)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> groupPosition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getChildId</span><span class="params">(<span class="type">int</span> groupPosition, <span class="type">int</span> childPosition)</span> &#123;</span><br><span class="line"><span class="comment">//        return childPosition;</span></span><br><span class="line">        <span class="keyword">return</span> getCombinedChildId(groupPosition, childPosition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasStableIds</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getGroupView</span><span class="params">(<span class="type">int</span> groupPosition, <span class="type">boolean</span> isExpanded, View convertView, ViewGroup parent)</span> &#123;</span><br><span class="line">        GroupHolder groupHolder;</span><br><span class="line">        <span class="type">View</span> <span class="variable">groupView</span> <span class="operator">=</span> convertView;</span><br><span class="line">        <span class="keyword">if</span> (groupView == <span class="literal">null</span>) &#123;</span><br><span class="line">            groupView = LayoutInflater.from(context).inflate(R.layout.item_hdly_group, <span class="literal">null</span>);</span><br><span class="line">            groupHolder = <span class="keyword">new</span> <span class="title class_">GroupHolder</span>();</span><br><span class="line">            groupHolder.nameTv = (TextView) groupView.findViewById(R.id.item_hdly_group_tv);</span><br><span class="line">            groupView.setTag(groupHolder);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            groupHolder = (GroupHolder) groupView.getTag();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        groupHolder.nameTv.setText(groups.get(groupPosition).getName());</span><br><span class="line">        <span class="keyword">return</span> groupView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getChildView</span><span class="params">(<span class="type">int</span> groupPosition, <span class="type">int</span> childPosition, <span class="type">boolean</span> isLastChild, View convertView, ViewGroup parent)</span> &#123;</span><br><span class="line">        ChildHolder childHolder;</span><br><span class="line">        <span class="keyword">if</span> (groupPosition == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">View</span> <span class="variable">childView</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (childView == <span class="literal">null</span>) &#123;</span><br><span class="line">                childView = LayoutInflater.from(context).inflate(R.layout.item_hdly_child1, <span class="literal">null</span>);</span><br><span class="line">                childHolder = <span class="keyword">new</span> <span class="title class_">ChildHolder</span>();</span><br><span class="line">                childHolder.imgIv = (ImageView) childView.findViewById(R.id.hdly_child1__bg_iv);</span><br><span class="line">                childHolder.ckhfTv = (TextView) childView.findViewById(R.id.hdly_child1_ckhf_tv);</span><br><span class="line">                childHolder.lyTv = (TextView) childView.findViewById(R.id.hdly_child1_ly_tv);</span><br><span class="line">                childHolder.unreadTv = (TextView) childView.findViewById(R.id.unread);</span><br><span class="line">                childView.setTag(childHolder);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                childHolder = (ChildHolder) childView.getTag();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (childPosition == <span class="number">0</span>) &#123;</span><br><span class="line">                PicassoUtils.getinstance().loadNormalByPath(context, groups.get(groupPosition).getItems().get(childPosition).getAvator(), childHolder.imgIv);</span><br><span class="line">                <span class="keyword">if</span> (groups.get(groupPosition).getItems().get(childPosition).getHuifuNum() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    childHolder.unreadTv.setVisibility(View.VISIBLE);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    childHolder.unreadTv.setVisibility(View.INVISIBLE);</span><br><span class="line">                &#125;</span><br><span class="line">                childHolder.ckhfTv.setOnClickListener(<span class="keyword">new</span> <span class="title class_">NoDoubleClickListener</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNoDoubleClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                childHolder.lyTv.setOnClickListener(<span class="keyword">new</span> <span class="title class_">NoDoubleClickListener</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNoDoubleClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            convertView = childView;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">View</span> <span class="variable">childView1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (childView1 == <span class="literal">null</span>)&#123;</span><br><span class="line">                childHolder = <span class="keyword">new</span> <span class="title class_">ChildHolder</span>();</span><br><span class="line">                childView1 = LayoutInflater.from(context).inflate(R.layout.item_hdly_child2, <span class="literal">null</span>);</span><br><span class="line">                childHolder.nameTv = (TextView) childView1.findViewById(R.id.hdly_child2_name_tv);</span><br><span class="line">                childHolder.timeTv = (TextView) childView1.findViewById(R.id.hdly_child2_time_tv);</span><br><span class="line">                childView1.setTag(childHolder);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                childHolder = (ChildHolder) childView1.getTag();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (childHolder.nameTv != <span class="literal">null</span>)&#123;</span><br><span class="line">                childHolder.timeTv.setText(groups.get(groupPosition).getItems().get(childPosition).getTime());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (childHolder.timeTv != <span class="literal">null</span>) &#123;</span><br><span class="line">                childHolder.nameTv.setText(groups.get(groupPosition).getItems().get(childPosition).getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            convertView = childView1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> convertView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isChildSelectable</span><span class="params">(<span class="type">int</span> groupPosition, <span class="type">int</span> childPosition)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据方法名，此处应该表示二级条目是否可以被点击   先返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">GroupHolder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> TextView nameTv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ChildHolder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ImageView imgIv;</span><br><span class="line">        <span class="keyword">private</span> TextView ckhfTv,unreadTv,lyTv;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> TextView nameTv;</span><br><span class="line">        <span class="keyword">private</span> TextView timeTv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h1 id="NestedScrollView相关"><a href="#NestedScrollView相关" class="headerlink" title="NestedScrollView相关"></a>NestedScrollView相关</h1><h2 id="问题：NestedScrollView嵌套-RecyclerView，页面载入时总是滑到最底部"><a href="#问题：NestedScrollView嵌套-RecyclerView，页面载入时总是滑到最底部" class="headerlink" title="问题：NestedScrollView嵌套 RecyclerView，页面载入时总是滑到最底部"></a>问题：NestedScrollView嵌套 RecyclerView，页面载入时总是滑到最底部</h2><p>原因：由于 NestedScrollView 嵌套 RecyclerView，RecyclerView 占据焦点会导致 NestedScrollView 内容上滑</p>
<p>解决：</p>
<p>方法一：</p>
<p>在根布局设置<code>android:descendantFocusability=&quot;blocksDescendants&quot;</code></p>
<p>其中<code>android:descendantFocusability</code>有三种值：</p>
<ul>
<li><code>beforeDescendants</code>：viewGroup 会优先其子类控件而获取到焦点</li>
<li><code>afterDescendants</code>：viewGroup 只有当其子类控件不需要获取焦点时才获取焦点</li>
<li><code>blocksDescendants</code>：viewGroup会覆盖子类控件而直接获得焦点</li>
</ul>
<p>这种方法会造成页面中 EditText 焦点被抢导致无法输入，需要用第二种方法。</p>
<p>方法二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:focusable=<span class="string">&quot;true&quot;</span></span><br><span class="line">android:focusableInTouchMode=<span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure>

<p>方法三：</p>
<p>在<code>NestedScrollView</code>顶部第一个控件使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:focusable=<span class="string">&quot;true&quot;</span></span><br><span class="line">android:focusableInTouchMode=<span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure>

<p>这种方法不太可靠，因为有时可行，有时不可行。</p>
<h2 id="Called-attach-on-a-child-which-is-not-detached-ViewHolder"><a href="#Called-attach-on-a-child-which-is-not-detached-ViewHolder" class="headerlink" title="Called attach on a child which is not detached: ViewHolder"></a>Called attach on a child which is not detached: ViewHolder</h2><p>问题：java.lang.IllegalArgumentException: Called attach on a child which is not detached: ViewHolder</p>
<p>我是在使用RecyclerView更新了某个item的数据，调用notifyItemChanged()的时候出现的这个问题。具体也没有报是哪一行的问题，根据错误提示，意思是操作的这个viewholder当前不是被绑定的，因为RecyclerView有缓存机制，未在屏幕上显示的item会被暂时回收，即detached。</p>
<p>1、出现这个问题的原因是更新了不在屏幕中显示的item，解决办法是判断要更新的item是不是在屏幕中，判断方法是获取RecyclerView的LayoutManager，前提是RecyclerView设置的LayoutManager是LinearLayoutManager。获取第一个可见位置和最后一个可见位置的position，判断当前要更新的item的position在这个范围内才更新。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">LinearLayoutManager linearManager = (LinearLayoutManager) recyclerView.get<span class="constructor">LayoutManager()</span>;</span><br><span class="line"><span class="comment">//最后一个可见view的位置</span></span><br><span class="line"><span class="built_in">int</span> mLastVisibleItemPosition = linearManager.find<span class="constructor">LastVisibleItemPosition()</span>;</span><br><span class="line"><span class="comment">//第一个可见view的位置</span></span><br><span class="line"><span class="built_in">int</span> mFirstVisibleItemPosition = linearManager.find<span class="constructor">FirstVisibleItemPosition()</span>;</span><br></pre></td></tr></table></figure>

<p>2、但是我的列表只有一条数据，并且是在屏幕中显示的，我在notifyItemChanged(0)还是报了这个错，经过仔细研究代码，我发现我的RecyclerView添加了Header，这样position&#x3D;0的位置其实是header，所以出现了这样的问题。所以更新List中position位置的数据后要更新的Adapter的位置是position+1，改成notifyItemChanged(1)之后问题解决。</p>
<h1 id="spinner相关"><a href="#spinner相关" class="headerlink" title="spinner相关"></a>spinner相关</h1><h2 id="问题：自定义的适配"><a href="#问题：自定义的适配" class="headerlink" title="问题：自定义的适配"></a>问题：自定义的适配</h2><p>自定义的适配器问题：spinner在xml中需要记住设备background为null 才可以显示出下拉标志</p>
<blockquote>
<p>如果打算修改文字离下拉标志的距离可以通过设置在适配器中的padding来设置。因为这里的设置会直接影响默认位置的距离</p>
</blockquote>
<h1 id="点9图相关"><a href="#点9图相关" class="headerlink" title="点9图相关"></a>点9图相关</h1><h2 id="问题：点9图片导致其上图片显示未全屏问题"><a href="#问题：点9图片导致其上图片显示未全屏问题" class="headerlink" title="问题：点9图片导致其上图片显示未全屏问题"></a>问题：点9图片导致其上图片显示未全屏问题</h2><p>问题描述：</p>
<p>在app启动之后出现了启动页，在启动页上方会覆盖一张广告图。而广告图显示异常：只显示在左上角（屏幕2190x1900而广告图大小431x91）</p>
<p>处理过程：</p>
<ol>
<li><p>断点得知是这个广告图所在的ImageView的大小 getWidth()和getMeasureWidth()都是431，尝试在此ImageView前面动态设置大小：用了重新设置setLayoutParam，无效</p>
</li>
<li><p>比对上一版的apk是正常，尝试从svn上找动到的文件➡️找到了是启动页由原来的png改成点9图。</p>
</li>
</ol>
<p>原因：点9图的左侧上侧有拉伸，而右侧下侧是限制显示区域却没有设置，只设置了左侧和上侧。</p>
<p>解决：右侧、下侧都弄上“黑边”</p>
<h2 id="问题：点9图，出现“Error-Execution-failed-for-task-‘-app-mergeDebugResources’”"><a href="#问题：点9图，出现“Error-Execution-failed-for-task-‘-app-mergeDebugResources’”" class="headerlink" title="问题：点9图，出现“Error:Execution failed for task ‘:app:mergeDebugResources’”"></a>问题：点9图，出现“Error:Execution failed for task ‘:app:mergeDebugResources’”</h2><p>排查:</p>
<ol>
<li>检查图片是否是通过工具转成点9图的（不是手动改的后缀）</li>
<li>检查图片后缀名称是否是“.9.png.png”等两个后缀名，要保留一个</li>
<li>左、上可以分段黑边，<strong>右、下只能一条黑边</strong></li>
</ol>
<h1 id="Popupwindow"><a href="#Popupwindow" class="headerlink" title="Popupwindow"></a>Popupwindow</h1><h2 id="Unable-to-add-window"><a href="#Unable-to-add-window" class="headerlink" title="Unable to add window"></a>Unable to add window</h2><p>问题：Unable to add window – token null is not valid; is your activity running?</p>
<p>解决：不能在onCreate()中直接调用显示popupwindow</p>
<p>更改成在触发点击事件后才显示</p>
<h2 id="popupwindow的showAsDropDown失效"><a href="#popupwindow的showAsDropDown失效" class="headerlink" title="popupwindow的showAsDropDown失效"></a>popupwindow的showAsDropDown失效</h2><p>解决popupwindow的showAsDropDown失效问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">24</span>)&#123;</span><br><span class="line">    <span class="type">Rect</span> <span class="variable">visibleFrame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rect</span>();</span><br><span class="line">    view.getGlobalVisibleRect(visibleFrame);</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> view.getResources().getDisplayMetrics().heightPixels - visibleFrame.bottom;</span><br><span class="line">    baseExpandPopWindow.setHeight(height);</span><br><span class="line">    baseExpandPopWindow.showAsDropDown(view,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    baseExpandPopWindow.showAsDropDown(view,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="tablayout"><a href="#tablayout" class="headerlink" title="tablayout"></a>tablayout</h1><h2 id="tablayout点击显示灰色背景"><a href="#tablayout点击显示灰色背景" class="headerlink" title="tablayout点击显示灰色背景"></a>tablayout点击显示灰色背景</h2><p>解决：添加了<code>app:tabBackground=&quot;@color/white&quot;</code></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="setVisibility无效问题"><a href="#setVisibility无效问题" class="headerlink" title="setVisibility无效问题"></a>setVisibility无效问题</h2><p>现象：<code>view.setVisibility(View.INVISIBLE);</code>无效</p>
<p>原因一：对这个<code>view</code>设置了动画，且给此动画加了属性 <code>anim.setFillAfter(true);</code></p>
<p>解决：</p>
<ul>
<li>方案一：</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">anim.setFillAfter(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">view</span>.setVisibility(<span class="keyword">View</span>.INVISIBLE);</span><br></pre></td></tr></table></figure>

<ul>
<li>方案二：</li>
</ul>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"><span class="keyword">view</span>.clearAnimatio<span class="meta">n</span>();</span><br><span class="line"><span class="keyword">view</span>.setVisibility(<span class="keyword">View</span>.INVISIBLE);</span><br></pre></td></tr></table></figure>

<ul>
<li>方案三：</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">view</span>.postdelay延迟<span class="number">100</span>毫秒</span><br></pre></td></tr></table></figure>

<ul>
<li>方案四：</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">使用runOnUiThread的方式来实现</span><br></pre></td></tr></table></figure>

<p>如果上述方案都不可行，检查<code>Mainifest.xml</code>，去除<code>android:hardwareAccelerated=&quot;false&quot;</code></p>
<p>对于其他原因，在<code>setVisibility</code>隐藏之后加个刷新。<code>view.invalidate()</code>或<code>view.postinvalidate()</code>。前面俩无效再试试自身<code>requestLayout()</code>或父容器的<code>requestLayout()</code>来强制页面刷新。</p>
<h2 id="The-layout-in-layout-has-no-declaration-in-the-base-layout-folder"><a href="#The-layout-in-layout-has-no-declaration-in-the-base-layout-folder" class="headerlink" title="The layout  in layout has no declaration in the base layout folder"></a><a href="https://stackoverflow.com/questions/52547657/the-layout-layout-in-layout-has-no-declaration-in-the-base-layout-folder-erro">The layout  in layout has no declaration in the base layout folder</a></h2><p>解决：选择“Invalidata and Restart”重启AS</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓问题</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓问题-未归类</title>
    <url>/posts/1330169938/</url>
    <content><![CDATA[<h1 id="关于处理客户反馈的问题的步骤"><a href="#关于处理客户反馈的问题的步骤" class="headerlink" title="关于处理客户反馈的问题的步骤"></a>关于处理客户反馈的问题的步骤</h1><p>注意：要与客户的场景一致（正式线or测试线、账号密码、门店、操作步骤）</p>
<ol>
<li>与IOS比对<ol>
<li>IOS有一样的问题，初步判定是接口问题，抓接口反馈给后台<ol>
<li>IOS正常，安卓重现客户场景<ol>
<li>安卓正常：初步判定是版本不同的问题，找旧包抓接口</li>
<li>异常复现：如果有错误日志则通过日志定位问题；如果没有错误日志抓接口给后台</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="功能相关问题"><a href="#功能相关问题" class="headerlink" title="功能相关问题"></a>功能相关问题</h1><h2 id="Camera相机相关"><a href="#Camera相机相关" class="headerlink" title="Camera相机相关"></a>Camera相机相关</h2><h3 id="关于Camera横竖屏问题"><a href="#关于Camera横竖屏问题" class="headerlink" title="关于Camera横竖屏问题"></a>关于Camera横竖屏问题</h3><p>1、如果Camera处理的是横屏的倒是没有什么问题的</p>
<p>2、如果处理的是竖屏的话，那么原点是在右下角的或者左下角的，而不是跟横屏时候一样在左上角或者右上角</p>
<p>3、还有一个就是控件的坐标位置是根据左上角或者右上角来计算的，这点在处理Camera竖屏的时候一定要注意，不能根据控件的坐标来定义</p>
<h2 id="图片显示"><a href="#图片显示" class="headerlink" title="图片显示"></a>图片显示</h2><p>现象：燕谷坊遇到保存drawable然后取出来的时候是黑色的图片的情况</p>
<p>解决：保存bitmap图片，不要保存drawable图片</p>
<h1 id="编译相关问题"><a href="#编译相关问题" class="headerlink" title="编译相关问题"></a>编译相关问题</h1><h2 id="安卓编译报错解决方法"><a href="#安卓编译报错解决方法" class="headerlink" title="安卓编译报错解决方法"></a>安卓编译报错解决方法</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./gradlew</span> clean assembleDebug <span class="params">--stacktrace</span></span><br></pre></td></tr></table></figure>

<p>获取更多报错信息</p>
<h2 id="编译无法成功的问题"><a href="#编译无法成功的问题" class="headerlink" title="编译无法成功的问题"></a>编译无法成功的问题</h2><ul>
<li>这个很诡异的错误，90%都是由于自定义控件在xml的路径写错了引起的</li>
</ul>
<h1 id="未归类问题"><a href="#未归类问题" class="headerlink" title="未归类问题"></a>未归类问题</h1><h2 id="android-android-content-res-Resources-NotFoundException-String-resource-ID-https-www-cnblogs-com-mybkn-archive-2012-07-09-2582958-html"><a href="#android-android-content-res-Resources-NotFoundException-String-resource-ID-https-www-cnblogs-com-mybkn-archive-2012-07-09-2582958-html" class="headerlink" title="[android:android.content.res.Resources$NotFoundException: String resource ID #..](https://www.cnblogs.com/mybkn/archive/2012/07/09/2582958.html)"></a><code>[android:android.content.res.Resources$NotFoundException: String resource ID #..](https://www.cnblogs.com/mybkn/archive/2012/07/09/2582958.html)</code></h2><p>做Android应用开发的朋友有时候会遇到这样的Bug，</p>
<p><code>android.content.res.Resources$NotFoundException: String resource ID #0x0</code> 找不到资源文件<code>ID</code> <code>#0x0</code></p>
<p>原因分析如下：</p>
<p>遇到这种情况，很有可能是把一个<code>int</code>型业务数据的 设置<code>setText()</code>或者类似的方法中， 这样<code>Android</code>系统就会主动去资源文件当中寻找， 但是它不是一个资源文件<code>ID</code>， 所以就会报出这个<code>bug</code>。</p>
<p>解决：将<code>int</code>型业务数据，转换成<code>String</code>类型即可。</p>
<h2 id="android-content-res-Resources-NotFoundException"><a href="#android-content-res-Resources-NotFoundException" class="headerlink" title="android.content.res.Resources$NotFoundException"></a>android.content.res.Resources$NotFoundException</h2><p>Android资源不是可绘制的（颜色或路径） </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Resource is not <span class="selector-tag">a</span> Drawable (<span class="attribute">color</span> or path): TypedValue&#123;t=<span class="number">0</span>x2/d=<span class="number">0</span>x7f040151 a=<span class="number">2</span>&#125;</span><br><span class="line">android<span class="selector-class">.view</span><span class="selector-class">.LayoutInflater</span><span class="selector-class">.createView</span>(LayoutInflater<span class="selector-class">.java</span>:<span class="number">620</span>)</span><br></pre></td></tr></table></figure>

<p>异常分析：由于将图片资源拷贝到了<code>drawable-land-xhdpi</code>目录下，本来应该拷贝到<code>drawable-xhdpi</code>目录下</p>
<p><strong>解决方法：</strong></p>
<ul>
<li>1.引用的资源ID 是否能匹配到<code>R.java</code>文件中定义的资源；</li>
<li>2.是否因为缓存等原因导致编译<code>APK</code>时未把资源文件打包进去，可以把<code>APK</code>反编译检查下；</li>
<li>3.是否使用了一个错误的类型来引用了某个资源或者配置资源时存在错误；</li>
<li>4.是否将<code>Int</code>等整型变量作为了参数传给了<code>View.setText</code>调用，这种情况下该整型变量将被认为是一个资源<code>ID</code>号去资源列表中查找对应的资源，导致找不到对应资源错误；解决方法是做类型转换<code>View.setText(String.valueOf(Int id))</code>。</li>
</ul>
<h2 id="CompilationFailedException问题"><a href="#CompilationFailedException问题" class="headerlink" title="CompilationFailedException问题"></a>CompilationFailedException问题</h2><p><code>Caused by: org.gradle.api.internal.tasks.compile.CompilationFailedException: Compilation failed; see</code></p>
<p>删除<code>build/intermediates</code> 然后重新编译</p>
<p>当时遇到这个错误只知道是编译错误，不知道为什么，也定不了问题所在，网上说的一堆也试了，都没用</p>
<p>日志的错误说的也不清晰，有很多时候我都是Rebuild或清理工程就解决了，这次是因为集成极光分享，集成到一半又删了，没删干净，所以出现了这个问题，处理方法是把下图的文件夹删掉，重新编译,立马定位到代码块找不到极光的包，删除该代码就好了，因为上次集成极光编译是没问题的，删了极光后还有缓存，Android studio都没检测出来。</p>
<h2 id="app-transformResourcesWithMergeJavaResForDebug"><a href="#app-transformResourcesWithMergeJavaResForDebug" class="headerlink" title=":app:transformResourcesWithMergeJavaResForDebug"></a>:app:transformResourcesWithMergeJavaResForDebug</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">Error:Execution failed <span class="keyword">for</span> <span class="keyword">task</span> <span class="string">&#x27;:app:transformResourcesWithMergeJavaResForDebug&#x27;</span>. &gt; </span><br><span class="line">Unexpected scopes found in folder <span class="string">&#x27;D:\twoMoveMent\app\build\intermediates\transforms\mergeJavaRes\debug&#x27;</span>. </span><br><span class="line">Required: <span class="keyword">PROJECT</span>. Found: EXTERNAL_LIBRARIES, <span class="keyword">PROJECT</span>, SUB_PROJECTS</span><br></pre></td></tr></table></figure>

<p>解决方案：将bulid目录删掉 重新编译即可！！！！！少走弯路</p>
<h2 id="debug无法显示值的问题"><a href="#debug无法显示值的问题" class="headerlink" title="debug无法显示值的问题"></a>debug无法显示值的问题</h2><p>Android stdio IDE环境下debug代码不显示变量值，add to watch无效<br>解决方案：<br>修改app.gradle 文件下的testCoverageEnabled为false</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">	debug &#123;</span><br><span class="line">	    minifyEnabled <span class="literal">false</span></span><br><span class="line">	    signingConfig signingConfigs.debug</span><br><span class="line">	    testCoverageEnabled <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="NormalDemocompile-Classpath问题"><a href="#NormalDemocompile-Classpath问题" class="headerlink" title="NormalDemocompile Classpath问题"></a><code>NormalDemocompile Classpath</code>问题</h2><ol>
<li><code>Unable to resolve dependency for &#39;:face@NormalDemo/compileClasspath&#39;: Could not resolve project :aliveDetect.</code></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;openFile:E:/ProjectLandi/LandiTool/ScanFaceTool/face/build.gradle&quot;</span>&gt;</span>Open File<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;Unable to resolve dependency for <span class="symbol">&amp;#39;</span>:face@NormalDemo/compileClasspath<span class="symbol">&amp;#39;</span>: Could not resolve project :aliveDetect.&quot;</span>&gt;</span>Show Details<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>Unable to resolve dependency for &#39;:face@NormalDemoUnitTest/compileClasspath&#39;: Could not resolve project :aliveDetect.</code></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;openFile:E:/ProjectLandi/LandiTool/ScanFaceTool/face/build.gradle&quot;</span>&gt;</span>Open File<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;Unable to resolve dependency for <span class="symbol">&amp;#39;</span>:face@NormalDemoUnitTest/compileClasspath<span class="symbol">&amp;#39;</span>: Could not resolve project :aliveDetect.&quot;</span>&gt;</span>Show Details<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>答案：<br>出现以上情况就是因为<code>Could not resolve project :aliveDetect.</code>这个工程下的<code>gradle</code>有问题，配置跟宿主工程有点不一样才会造成这样的<br><code>aliveDetect</code>的<code>gradle</code>下面是这样的：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">	      release &#123;</span><br><span class="line">	          minifyEnabled <span class="literal">false</span></span><br><span class="line">	          proguardFiles get<span class="constructor">DefaultProguardFile(&#x27;<span class="params">proguard</span>-<span class="params">android</span>.<span class="params">txt</span>&#x27;)</span>, &#x27;proguard-rules.pro&#x27;</span><br><span class="line">	      &#125;</span><br><span class="line">	      debug &#123;</span><br><span class="line">	          minifyEnabled <span class="literal">false</span></span><br><span class="line">	          proguardFiles get<span class="constructor">DefaultProguardFile(&#x27;<span class="params">proguard</span>-<span class="params">android</span>.<span class="params">txt</span>&#x27;)</span>, &#x27;proguard-rules.pro&#x27;</span><br><span class="line">	      &#125;</span><br><span class="line">	  &#125;</span><br></pre></td></tr></table></figure>

<p>  app的gradle下面是这样的：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">     debug(&#123;</span><br><span class="line">         minifyEnabled <span class="literal">true</span></span><br><span class="line">         proguardFiles get<span class="constructor">DefaultProguardFile(&#x27;<span class="params">proguard</span>-<span class="params">android</span>.<span class="params">txt</span>&#x27;)</span>, &#x27;proguard-rules.pro&#x27;</span><br><span class="line">         signingConfig signingConfigs.config</span><br><span class="line">     &#125;)</span><br><span class="line">     demo(&#123;</span><br><span class="line">         minifyEnabled <span class="literal">true</span></span><br><span class="line">         proguardFiles get<span class="constructor">DefaultProguardFile(&#x27;<span class="params">proguard</span>-<span class="params">android</span>.<span class="params">txt</span>&#x27;)</span>, &#x27;proguard-rules.pro&#x27;</span><br><span class="line">         signingConfig signingConfigs.config</span><br><span class="line">     &#125;)</span><br><span class="line">     release &#123;</span><br><span class="line">         minifyEnabled <span class="literal">true</span></span><br><span class="line">         proguardFiles get<span class="constructor">DefaultProguardFile(&#x27;<span class="params">proguard</span>-<span class="params">android</span>.<span class="params">txt</span>&#x27;)</span>, &#x27;proguard-rules.pro&#x27;</span><br><span class="line">         signingConfig signingConfigs.config</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>注意到是因为<code>app</code>的<code>build.gradle</code>中多了一个<code>demo</code>，，，，，，就是这个<code>demo</code>引起的要么删除  要么就给我在<code>aliveDetect</code>这个地方添加，这样就不会有错误了，也可以编译过去<br>不会造成 编译之后出现<code>Try Again Open Messages View Show Log in Explorer.</code></p>
<h2 id="transformClassesWithInstantRunForNormalDebug问题"><a href="#transformClassesWithInstantRunForNormalDebug问题" class="headerlink" title="transformClassesWithInstantRunForNormalDebug问题"></a><code>transformClassesWithInstantRunForNormalDebug</code>问题</h2><p><code>java.lang.RuntimeException: com.android.build.api.transform.TransformException: java.lang.RuntimeException:Failed to find byte code for java/awt/RenderingHints$Key com.android.build.api.transform.TransformException:  java.io.IOException: Failed to find byte code for java/awt/RenderingHints$Key</code><br>切记这个要一致：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">compileOptions &#123;</span><br><span class="line">	    <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_7</span><br><span class="line">	    <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_7</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="java-lang-OutOfMemoryError"><a href="#java-lang-OutOfMemoryError" class="headerlink" title="java.lang.OutOfMemoryError"></a><code>java.lang.OutOfMemoryError</code></h2><p>问题：运行项目出现<code>java.lang.OutOfMemoryError: GC overhead limit exceeded...</code></p>
<p><strong>解决</strong>：在项目build.gradle中添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">      dexOptions &#123;</span><br><span class="line">            javaMaxHeapSize <span class="string">&quot;4g&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解决方案</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">该异常表示未能成功分配字节内存，通常是因为内存不足导致的内存溢出。</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[解决方案]</span>：OOM就是内存溢出，即Out of Memory。也就是说内存占有量超过了VM所分配的最大。怎么解决OOM，通常OOM都发生在需要用到大量内存的情况下（创建或解析Bitmap，分配特大的数组等），这里列举常见避免OOM的几个注意点：</span><br><span class="line"><span class="number">1</span>.适当调整图像大小。</span><br><span class="line"><span class="number">2</span>.采用合适的缓存策略。</span><br><span class="line"><span class="number">3</span>.采用低内存占用量的编码方式，比如Bitmap<span class="selector-class">.Config</span>.ARGB_4444比Bitmap<span class="selector-class">.Config</span>.ARGB_8888更省内存。</span><br><span class="line"><span class="number">4</span>.及时回收Bitmap。</span><br><span class="line"><span class="number">5</span>.不要在循环中创建过多的本地变量。</span><br><span class="line"><span class="number">6</span>.自定义对内存分配大小。</span><br><span class="line"><span class="number">7</span>.特殊情况可在mainfests的Application中增加 android:largeHeap=<span class="string">&quot;true&quot;</span>属性，比如临时创建多个小图片(地图marker)</span><br></pre></td></tr></table></figure>

<p>Picasso导致的OutOfMemoryError <strong>解决方案</strong>：</p>
<p>在application中添加<code>android:largeHead=&quot;true&quot;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:name</span>=<span class="string">&quot;.MyApplication&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:largeHeap</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:label</span>=<span class="string">&quot;融商会&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:windowSoftInputMode</span>=<span class="string">&quot;adjestPan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>







<h2 id="unable-to-unzip"><a href="#unable-to-unzip" class="headerlink" title="unable to unzip"></a><code>unable to unzip</code></h2><p>问题：Gradle build failed - unable to unzip</p>
<p>You have just to do in a Terminal (for have terminal : Select View &gt; Tool Windows &gt; Terminal) :</p>
<p>On Windows:</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gradlew cleanBuildCache</span></span><br></pre></td></tr></table></figure>

<p>On Mac or Linux:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gradlew cleanBuildCache</span><br></pre></td></tr></table></figure>

<p>And build Gradle</p>
<h2 id="app-javaPreCompileDebug"><a href="#app-javaPreCompileDebug" class="headerlink" title=":app:javaPreCompileDebug"></a>:app:javaPreCompileDebug</h2><p>在app的build中</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//添加如下配置就OK了</span></span><br><span class="line">        javaCompileOptions &#123; annotationProcessorOptions &#123; includeCompileClasspath = <span class="literal">true</span> &#125; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="java-lang-IllegalStateException非法状态异常"><a href="#java-lang-IllegalStateException非法状态异常" class="headerlink" title="java.lang.IllegalStateException非法状态异常"></a>java.lang.IllegalStateException非法状态异常</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">IllegalStateException: Can <span class="keyword">not</span> <span class="keyword">perform</span> this action <span class="keyword">after</span> onSaveInstanceState：</span><br></pre></td></tr></table></figure>

<p>onSaveInstanceState方法是在该Activity即将被销毁前调用，来保存Activity数据的，如果在保存完状态后再给它添加Fragment就会报错。</p>
<p><strong>解决：</strong></p>
<p>把<code>commit()</code>换成<code>commitAllowingStateLoss()</code></p>
<p><strong>其他延申</strong></p>
<ul>
<li>错误类型大致为以下几种：</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">java.lang.IllegalStateException：Can&#x27;t </span>change tag of fragment d&#123;e183845 <span class="comment">#0 d&#123;e183845&#125;&#125;: was d&#123;e183845&#125; now d&#123;e183845 #0 d&#123;e183845&#125;&#125;</span></span><br><span class="line"><span class="keyword">java.lang.IllegalStateException：Expected </span><span class="keyword">BEGIN_ARRAY </span><span class="keyword">but </span>was <span class="keyword">BEGIN_OBJECT </span><span class="built_in">at</span> line <span class="number">1</span> column <span class="number">37</span> path $<span class="meta">.data</span></span><br></pre></td></tr></table></figure>

<ul>
<li>第一种：我在显示fragment的代码中使用了：fragment.show(getSupportFragmentManager, fragment.toString());而这里是因为两次toString()结果不同，导致不同的tag指向的是同一个fragment。获取fragment的tag的正确方法应该是使用其提供的fragment.getTag()方法。</li>
<li>第二种：该异常是由于服务器错误返回的JSON字符串和服务器正常下时返回的JSON字符串结构不同,导致利用Gson解析的时候报了一个异常:本该去解析集合却强制去解析对象所致.解决办法:在使用Gson解析JSON时try cash一下,不报错按照正常逻辑继续解析,报异常则处理为请求失败逻辑即可.</li>
</ul>
<h2 id="IllegalStateException：Can’t-compress-a-recycled-bitmap"><a href="#IllegalStateException：Can’t-compress-a-recycled-bitmap" class="headerlink" title="IllegalStateException：Can’t compress a recycled bitmap"></a>IllegalStateException：Can’t compress a recycled bitmap</h2><p>无法压缩回收位图</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">Can<span class="comment">&#x27;t compress a recycled bitmap</span></span><br><span class="line">com.paidian.hwmc.utils.i.a(FileUtils.java:<span class="number">75</span>)</span><br></pre></td></tr></table></figure>

<p>如果位图已被回收，则希望抛出异常的方法将调用此值。知道了崩溃的具体位置，就该分析具体的原因呢！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">compress</span><span class="params">(CompressFormat format, <span class="type">int</span> quality, OutputStream stream)</span> &#123;</span><br><span class="line">    checkRecycled(<span class="string">&quot;Can&#x27;t compress a recycled bitmap&quot;</span>);</span><br><span class="line">    <span class="comment">//省略代码</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果位图已被回收，则希望抛出异常的方法将调用此值。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkRecycled</span><span class="params">(String errorMessage)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mRecycled) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>异常分析：<br>使用了已经被释放过内存的对象。对于<code>Bitmap</code>：<code>Bitmap  bitmap=一个bitmap对象</code>。使用过程中调用<code>bitmap.recycle()</code>，之后再使用bitmap就会报错。</p>
<p><code>bitmap.recycle()</code>解释：释放与此位图关联的本机对象，并清除对象数据的引用。这将不会同步释放对象数据。它只允许在没有其他引用的情况下对其进行垃圾手机。位图被标记为“死”，这意味着如果调用<code>getPixels()</code>或<code>setPixels()</code>它将抛出异常，而不会绘制任何内容。此操作不能反转，因此只有在确定没有进一步使用位图的情况下才应该调用该操作。这个一个高级调用，通常不需要调用，因为当没有对此位图的引用时，普通GC进程将释放此内存。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">Free</span> the native <span class="class"><span class="keyword">object</span> <span class="title">associated</span> <span class="keyword">with</span> <span class="title">this</span> <span class="title">bitmap</span>, <span class="title">and</span> <span class="title">clear</span> <span class="title">the</span> <span class="title">reference</span> <span class="title">to</span> <span class="title">the</span> <span class="title">pixel</span> <span class="title">data</span></span></span><br></pre></td></tr></table></figure>

<p><strong>解决方法：</strong></p>
<ol>
<li>在使用bitmap前增加判断<code>if(mBitmap.isRecycled()) return null;</code></li>
</ol>
<h2 id="java-lang-IllegalArgumentException参数不匹配异常"><a href="#java-lang-IllegalArgumentException参数不匹配异常" class="headerlink" title="java.lang.IllegalArgumentException参数不匹配异常"></a>java.lang.IllegalArgumentException参数不匹配异常</h2><p>参数不匹配异常，通常由于传递了不正确的参数导致</p>
<p>常见的出现场景</p>
<ul>
<li>Activity、Service状态异常；</li>
<li>非法URL；</li>
<li>UI线程操作。</li>
<li>Fragment中嵌套了子Fragment，Fragment被销毁，而内部Fragment未被销毁，所以导致再次加载时重复，在onDestroyView() 中将内部Fragment销毁即可</li>
<li>在请求网络的回调中使用了glide.into(view),view已经被销毁会导致该错误</li>
</ul>
<h2 id="java-lang-NullPointerException空指针异常"><a href="#java-lang-NullPointerException空指针异常" class="headerlink" title="java.lang.NullPointerException空指针异常"></a>java.lang.NullPointerException空指针异常</h2><p>解决方法：（采取不信任原则）</p>
<ol>
<li>方法形参要判空后才使用</li>
<li>全局变量容易被系统回收或者更改，使用全局变量前建议判空</li>
<li>第三方接口的调用，对返回值进行判空</li>
<li>请注意线程安全</li>
</ol>
<h2 id="android-view-WindowManager-BadTokenException异常，Toast报错Unable-to-add-window"><a href="#android-view-WindowManager-BadTokenException异常，Toast报错Unable-to-add-window" class="headerlink" title="android.view.WindowManager$BadTokenException异常，Toast报错Unable to add window"></a>android.view.WindowManager$BadTokenException异常，Toast报错Unable to add window</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">android.<span class="keyword">view</span>.WindowManager$BadTokenException</span><br><span class="line">    Unable <span class="keyword">to</span> <span class="keyword">add</span> <span class="keyword">window</span> <span class="comment">-- token android.os.BinderProxy@7f652b2 is not valid; is your activity running?</span></span><br></pre></td></tr></table></figure>

<p>异常分析：</p>
<ul>
<li>这个异常发生在Toast显示的时候，原因是因为token失效。通常情况下，一般是不会出现这种异常。但是由于在某些情况下， Android进程某个UI线程的某个消息阻塞。导致 TN 的 show 方法 post 出来 0 (显示) 消息位于该消息之后，迟迟没有执行。这时候，NotificationManager 的超时检测结束，删除了 WMS 服务中的 token 记录。删除 token 发生在 Android 进程 show 方法之前。这就导致了上面的异常。</li>
<li>测试代码。模拟一下异常的发生场景，其实很容易，只需要这样做就可以出现上面这个问题</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Toast</span>.</span></span>make<span class="constructor">Text(<span class="params">this</span>，<span class="string">&quot;潇湘剑雨-yc&quot;</span>，Toast.LENGTH_SHORT)</span>.show<span class="literal">()</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">20000</span>);</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">	e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<ul>
<li>第一种，既然是报is your activity running，那可以不可以在吐司之前先判断一下activity是否running呢？</li>
<li>第二种，抛出异常增加try-catch，代码如下所示，最后仍然无法解决问题<ul>
<li>按照源码分析，异常是发生在下一个UI线程消息中，因此在上一个ui线程消息中加入try-catch是没有意义的。而且用到吐司地方这么多，这样做也不方便啦！</li>
</ul>
</li>
<li>第三种，那就是自定义类似吐司Toast的view控件。个人建议除非要求非常高，不然不要这样做。毕竟发生这种异常还是比较少见的</li>
</ul>
<p>哪些情况会发生该问题？</p>
<ul>
<li>UI 线程执行了一条非常耗时的操作，比如加载图片等等，就类似上面用 sleep 模拟情况</li>
<li>进程退后台或者息屏了，系统为了减少电量或者某种原因，分配给进程的cpu时间减少,导致进程内的指令并不能被及时执行，这样一样会导致进程看起来”卡顿”的现象</li>
<li>当TN抛出消息的时候，前面有大量的 UI 线程消息等待执行，而每个 UI 线程消息虽然并不卡顿，但是总和如果超过了 NotificationManager 的超时时间，还是会出现问题</li>
</ul>
<h2 id="华为手机不打印Log"><a href="#华为手机不打印Log" class="headerlink" title="华为手机不打印Log"></a>华为手机不打印Log</h2><p>手机拨号盘输入 <code>*#*#2846579#*#*</code></p>
<p>进入设置页：</p>
<ol>
<li>后台设置–打开log日志</li>
<li>USB端口设置–Google模式（或生产模式）</li>
</ol>
<h2 id="SDK-not-initialized-or-invoked-in-wrong-process"><a href="#SDK-not-initialized-or-invoked-in-wrong-process" class="headerlink" title="SDK not initialized or invoked in wrong process!"></a>SDK not initialized or invoked in wrong process!</h2><p><img src="/posts/1330169938/sdk-not-initialized%E5%BC%82%E5%B8%B8.png" alt="安卓/sdk-not-initialized异常"></p>
<p>原因：这个是云信IM的初始化没有在Application中进行导致的，我是考虑到这个app要当成宿主的一个lib此时它的application是失效的，所以放到BaseActivity中进行初始化的。</p>
<p>宿主中调用了两个子app的云信IM初始化，其中一个报这个错误了。</p>
<p>解决：改成在宿主中实例化一遍云信IM即可，用到的key统一成一份，之后再跟后台商量着根据返回的内容加个类型来决定app是否显示这条信息【其中一个云信IM的初始化用开关进行关闭控制】</p>
<h1 id="“惜梦”整理的Android开发错误集锦"><a href="#“惜梦”整理的Android开发错误集锦" class="headerlink" title="“惜梦”整理的Android开发错误集锦"></a><a href="https://juejin.im/post/5e00734de51d455804256ee0?utm_source=gold_browser_extension">“惜梦”整理的Android开发错误集锦</a></h1>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓问题</tag>
      </tags>
  </entry>
  <entry>
    <title>Manifest</title>
    <url>/posts/45516a70/</url>
    <content><![CDATA[<h1 id="AndroidManifest清单文件"><a href="#AndroidManifest清单文件" class="headerlink" title="AndroidManifest清单文件"></a>AndroidManifest清单文件</h1><h2 id="合并优先级（低的合并到高的）【库清单-lt-主清单-lt-flavor的清单】"><a href="#合并优先级（低的合并到高的）【库清单-lt-主清单-lt-flavor的清单】" class="headerlink" title="合并优先级（低的合并到高的）【库清单&lt;主清单&lt;flavor的清单】"></a><a href="https://developer.android.google.cn/studio/build/manifest-merge">合并优先级（低的合并到高的）</a>【库清单&lt;主清单&lt;flavor的清单】</h2><p><img src="/posts/45516a70/%E6%B8%85%E5%8D%95%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B61.png" alt="安卓/清单文件合并优先级"></p>
<ul>
<li><p>有三种基本的清单文件可以互相合并，它们的合并优先级如下（按优先级由高到低的顺序）：</p>
<ol>
<li><p>构建变体的清单文件</p>
<p>如果变体有多个源代码集，则其清单优先级如下：</p>
<ol>
<li>构建变体清单（如 src&#x2F;demoDebug&#x2F;）</li>
<li>构建类型清单（如 src&#x2F;debug&#x2F;）</li>
<li>产品变种清单（如 src&#x2F;demo&#x2F;）<br>如果使用的是变种维度，则清单优先级与每个维度在 flavorDimensions 属性中的列示顺序（按优先级由高到低的顺序）对应。</li>
</ol>
</li>
<li><p>应用模块的注清单文件</p>
</li>
<li><p>所包含的库中的清单文件<br> 如果有多个库，则其清单优先级与依赖顺序（库出现在 Gradle dependencies 代码块中的顺序）一致。</p>
</li>
</ol>
</li>
<li><p>build.gradle中构建配置将替换合并后的清单文件中所有对应的属性。如：build.gradle中的 minSdkVersion 将替换 <uses-sdk> 清单元素中的匹配属性。为避免混淆，应去掉 <uses-sdk> 只在 build.gradle中定义这些属性。</uses-sdk></uses-sdk></p>
</li>
</ul>
<h2 id="合并冲突启发法"><a href="#合并冲突启发法" class="headerlink" title="合并冲突启发法"></a>合并冲突启发法</h2><table>
<thead>
<tr>
<th align="left">高优先级属性</th>
<th align="left">低优先级属性</th>
<th align="left">属性的合并结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">没有值</td>
<td align="left">没有值</td>
<td align="left">没有值（使用默认值）</td>
</tr>
<tr>
<td align="left">没有值</td>
<td align="left">值 B</td>
<td align="left">值 B</td>
</tr>
<tr>
<td align="left">值 A</td>
<td align="left">没有值</td>
<td align="left">值 A</td>
</tr>
<tr>
<td align="left">值 A</td>
<td align="left">值 A</td>
<td align="left">值 A</td>
</tr>
<tr>
<td align="left">值 A</td>
<td align="left">值 B</td>
<td align="left"><strong>冲突错误</strong> - 您必须添加<a href="https://developer.android.google.cn/studio/build/manifest-merge#merge_rule_markers">合并规则标记</a></td>
</tr>
</tbody></table>
<ul>
<li><p>在某些情况下，合并工具会采取其他行为方式来避免合并冲突：</p>
<ul>
<li><manifest> 元素中的属性绝不会合并在一起，只会使用优先级最高的清单中的属性。</manifest></li>
</ul>
</li>
<li><p><uses-feature> 和 <uses-library> 元素中 android:required 属性使用 OR 合并，这样如果发生冲突，系统将应用 “true” 并始终包含一个清单所需的功能或库。</uses-library></uses-feature></p>
<ul>
<li><p><uses-sdk> 元素中的属性始终使用优先级较高的清单中的值，但以下情况除外：</uses-sdk></p>
<ul>
<li><p>如果优先级低的清单中 minSdkVersion 值较高，除非应用 overrideLibrary 合并规则，否则会发生错误。</p>
</li>
<li><p>如果优先级低的清单中 minSdkVersion 值较低，则将会使用优先级高的清单中的值。也会添加所有必要的系统权限。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>绝不会在清单之间匹配 <intent-filter> 元素。每个该元素都被视为唯一的元素，并添加到合并后的清单中的共同父元素中。</intent-filter></p>
</li>
</ul>
<h3 id="合并规则标记"><a href="#合并规则标记" class="headerlink" title="合并规则标记"></a>合并规则标记</h3><p>所有标记都属于Android tools命名空间，需要添加对应的 xmlns:tools 命名空间 优先在优先级高的清单文件中查找这些标记。</p>
<h4 id="节点标记"><a href="#节点标记" class="headerlink" title="节点标记"></a>节点标记</h4><p>需要对整个XML元素（给定清单元素中的所有属性及其所有子标记）应用合并规则</p>
<ul>
<li><p><code>tools:node=&quot;merge&quot;</code></p>
<p>在没有冲突的情况下，使用<a href="https://developer.android.google.cn/studio/build/manifest-merge#merge_conflict_heuristics">合并冲突启发法</a>合并此标记中的所有属性以及所有嵌套元素。<strong>这是元素的默认行为</strong>。</p>
<p>低优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:windowSoftInputMode</span>=<span class="string">&quot;stateUnchanged&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.SEND&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>高优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:node</span>=<span class="string">&quot;merge&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>合并后的清单结果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:windowSoftInputMode</span>=<span class="string">&quot;stateUnchanged&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.SEND&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>tools:node=&quot;merge-only-attributes&quot;</code></p>
<p>仅合并此标记中的属性，不合并嵌套元素。</p>
<p>低优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:windowSoftInputMode</span>=<span class="string">&quot;stateUnchanged&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.SEND&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:type</span>=<span class="string">&quot;image/*&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>高优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:node</span>=<span class="string">&quot;merge-only-attributes&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>合并后的清单结果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:windowSoftInputMode</span>=<span class="string">&quot;stateUnchanged&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>tools:node=&quot;remove&quot;</code></p>
<p>从合并后的清单中移除此元素。虽然您似乎只需要删除此元素即可，但如果您发现合并后的清单中有不需要的元素，而且该元素是由不受您控制的优先级较低的清单文件（如导入的库）提供的，则必须使用此属性。</p>
<p>低优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity-alias</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.alias&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;cow&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:value</span>=<span class="string">&quot;@string/moo&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;duck&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:value</span>=<span class="string">&quot;@string/quack&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>高优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity-alias</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.alias&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;cow&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">tools:node</span>=<span class="string">&quot;remove&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>合并后的清单结果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity-alias</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.alias&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;duck&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:value</span>=<span class="string">&quot;@string/quack&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>tools:node=&quot;removeAll&quot;</code></p>
<p>与 <code>tools:node=&quot;remove&quot;</code> 类似，但它会移除与此元素类型匹配的所有元素（同一父元素内）。</p>
<p>低优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity-alias</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.alias&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;cow&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:value</span>=<span class="string">&quot;@string/moo&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;duck&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:value</span>=<span class="string">&quot;@string/quack&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>高优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity-alias</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.alias&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">tools:node</span>=<span class="string">&quot;removeAll&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>合并后的清单结果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity-alias</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.alias&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>tools:node=&quot;replace&quot;</code></p>
<p>完全替换优先级较低的元素。也就是说，如果优先级较低的清单中有匹配的元素，会将其忽略并完全按照此元素在此清单中显示的样子使用它。</p>
<p>低优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity-alias</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.alias&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;cow&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:value</span>=<span class="string">&quot;@string/moo&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;duck&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:value</span>=<span class="string">&quot;@string/quack&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>高优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity-alias</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.alias&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:node</span>=<span class="string">&quot;replace&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;fox&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:value</span>=<span class="string">&quot;@string/dingeringeding&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>合并后的清单结果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity-alias</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.alias&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;fox&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:value</span>=<span class="string">&quot;@string/dingeringeding&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>tools:node=&quot;strict&quot;</code></p>
<p>每当此元素在优先级较低的清单中与在优先级较高的清单中不完全匹配时，都会导致构建失败（除非已通过其他合并规则标记解决）。这会替换<a href="https://developer.android.google.cn/studio/build/manifest-merge#merge_conflict_heuristics">合并冲突启发式算法</a>。例如，如果优先级较低的清单只是包含一个额外的属性，构建就会失败（尽管默认行为是将该额外属性添加到合并后的清单中）。</p>
<p>低优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:windowSoftInputMode</span>=<span class="string">&quot;stateUnchanged&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.SEND&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>高优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:node</span>=<span class="string">&quot;strict&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>这会导致清单合并错误</strong>。在严格模式下，这两个清单元素不能有任何不同。因此，您必须应用其他合并规则标记解决这些差异。（通常，这两个元素会正常合并在一起，如上面的 <code>tools:node=&quot;merge&quot;</code> 示例中所示。）</p>
</li>
</ul>
<h4 id="属性标记"><a href="#属性标记" class="headerlink" title="属性标记"></a>属性标记</h4><p><strong>只需</strong>对清单标记中的特定属性应用合并规则，用以下属性。每个属性可接受一个或多个属性名称（包括属性命名空间），属性名称之间用英文逗号分隔。</p>
<ul>
<li><p><code>tools:remove=&quot;attr, ...&quot;</code></p>
<p>从合并后的清单中移除指定属性。虽然您似乎只需要删除这些属性即可，但如果优先级较低的清单文件包含这些属性，而您想确保它们不会被纳入合并后的清单，则必须使用此属性。</p>
<p>低优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:windowSoftInputMode</span>=<span class="string">&quot;stateUnchanged&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>高优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:remove</span>=<span class="string">&quot;android:windowSoftInputMode&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>合并后的清单结果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>tools:replace=&quot;attr, ...&quot;</code></p>
<p>将优先级较低的清单中的指定属性替换为此清单中的属性。换句话说，始终保留优先级较高的清单中的值。</p>
<p>低优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">&quot;@oldtheme&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:windowSoftInputMode</span>=<span class="string">&quot;stateUnchanged&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>高优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">&quot;@newtheme&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:replace</span>=<span class="string">&quot;android:theme,android:exported&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>合并后的清单结果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">&quot;@newtheme&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:windowSoftInputMode</span>=<span class="string">&quot;stateUnchanged&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>tools:strict=&quot;attr, ...&quot;</code></p>
<p>每当这些属性在优先级较低的清单中与在优先级较高的清单中不完全匹配时，都会导致构建失败。<strong>这是所有属性的默认行为</strong>，但具有特殊行为的属性除外，如<a href="https://developer.android.google.cn/studio/build/manifest-merge#merge_conflict_heuristics">合并冲突启发法</a>中所述。低优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">&quot;landscape&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>高优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:strict</span>=<span class="string">&quot;android:screenOrientation&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>这会导致清单合并错误</strong>。您必须应用其他合并规则标记解决冲突。（切记：这是默认行为，因此如果您移除 <code>tools:strict=&quot;screenOrientation&quot;</code>，上面的示例将具有相同的结果。）</p>
</li>
<li><p>您也可以对一个元素应用多个标记，如下所示。</p>
<p>低优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">&quot;@oldtheme&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:allowTaskReparenting</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:windowSoftInputMode</span>=<span class="string">&quot;stateUnchanged&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>高优先级清单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">&quot;@newtheme&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:replace</span>=<span class="string">&quot;android:theme,android:exported&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:remove</span>=<span class="string">&quot;android:windowSoftInputMode&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>合并后的清单结果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.ActivityOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">&quot;@newtheme&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:allowTaskReparenting</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="标记选择器"><a href="#标记选择器" class="headerlink" title="标记选择器"></a>标记选择器</h4><p>只想对导入的某个特定库应用合并规则标记，请添加带有库软件包名称的<code>tools:selector</code>属性。</p>
<p>如：对于下面的清单，只有在优先级较低的清单文件来自 <code>com.example.lib1</code> 库时，才会应用 <code>remove</code> 合并规则。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">permission</span> <span class="attr">android:name</span>=<span class="string">&quot;permissionOne&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:node</span>=<span class="string">&quot;remove&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:selector</span>=<span class="string">&quot;com.example.lib1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果优先级较低的清单文件来自其他任何来源，都会忽略<code>remove</code>合并规则。</p>
<p><strong>注意</strong>：如果将此属性与其中一个属性标记配合使用，则它会应用到该标记中指定的所有属性。</p>
<h3 id="替换导入的库的"><a href="#替换导入的库的" class="headerlink" title="替换导入的库的 "></a>替换导入的库的 <uses-sdk></uses-sdk></h3><p>默认情况下，导入 <code>minSdkVersion</code> 值高于主清单文件的库时会出错，而且无法导入该库。如需使合并工具忽略此冲突并导入库，同时保留应用的较低 <code>minSdkVersion</code> 值，请将 <code>overrideLibrary</code> 属性添加到 <code>&lt;uses-sdk&gt;</code> 标记。属性值可以是一个或多个库软件包名称（用英文逗号分隔），指明可以替换主清单的 <code>minSdkVersion</code> 的库。</p>
<p>例如，如果应用的主清单按如下方式应用 <code>overrideLibrary</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">package</span>=<span class="string">&quot;com.example.app&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">tools:overrideLibrary</span>=<span class="string">&quot;com.example.lib1, com.example.lib2&quot;</span>/&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>则以下清单可以合并，而不会出现与 <code>&lt;uses-sdk&gt;</code> 标记相关的错误，合并后的清单将保留应用清单中的 <code>minSdkVersion=&quot;2&quot;</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">package</span>=<span class="string">&quot;com.example.lib1&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">&quot;4&quot;</span> /&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="隐式系统权限"><a href="#隐式系统权限" class="headerlink" title="隐式系统权限"></a>隐式系统权限</h3><p>一些曾经可由应用自由访问的 Android API 在最新的 Android 版本中受到了<a href="https://developer.android.google.cn/guide/topics/security/permissions">系统权限</a>的限制。为了避免中断预期会访问这些 API 的应用，最新的 Android 版本允许应用在无权限的情况下继续访问这些 API，条件是它们将 <code>targetSdkVersion</code> 设为低于添加限制的版本的值。此行为会有效地向应用授予隐式权限，以允许它们访问这些 API。因此，这可能会对具有不同 <code>targetSdkVersion</code> 值的合并后的清单产生以下影响。</p>
<p>如果优先级较低的清单文件具有较低的 <code>targetSdkVersion</code> 值，因而为其提供了一项隐式权限，但优先级较高的清单不具备相同的隐式权限（因为它的 <code>targetSdkVersion</code> 等于或高于添加限制的版本），则合并工具会向合并后的清单明确添加相应的系统权限。</p>
<p>例如，如果您的应用将 <code>targetSdkVersion</code> 设为 4 或更高的值，但导入的库将 <code>targetSdkVersion</code> 设为 3 或更低的值，则合并工具会向合并后的清单添加 <a href="https://developer.android.google.cn/reference/android/Manifest.permission#WRITE_EXTERNAL_STORAGE"><code>WRITE_EXTERNAL_STORAGE</code></a> 权限。表 2 列出了可以向合并后的清单添加的所有可能的权限。</p>
<p><strong>注意</strong>：如果您已将应用的 <code>targetSdkVersion</code> 设为 23 或更高的值，那么当应用试图访问受任何危险权限保护的 API 时，您必须对这些权限执行运行时权限请求。如需获得更多指导，请参阅<a href="https://developer.android.google.cn/training/permissions">使用系统权限</a>。</p>
<p><strong>表 2.</strong> 合并工具可以向合并后的清单添加的权限的列表</p>
<table>
<thead>
<tr>
<th align="left">优先级较低的清单声明</th>
<th align="left">向合并后的清单添加的权限</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>targetSdkVersion</code> 为 3 或更低的值</td>
<td align="left"><code>WRITE_EXTERNAL_STORAGE</code>、<code>READ_PHONE_STATE</code></td>
</tr>
<tr>
<td align="left"><code>targetSdkVersion</code> 为 15 或更低的值，并且使用 <code>READ_CONTACTS</code></td>
<td align="left"><code>READ_CALL_LOG</code></td>
</tr>
<tr>
<td align="left"><code>targetSdkVersion</code> 为 15 或更低的值，并且使用 <code>WRITE_CONTACTS</code></td>
<td align="left"><code>WRITE_CALL_LOG</code></td>
</tr>
</tbody></table>
<h2 id="附录：合并政策"><a href="#附录：合并政策" class="headerlink" title="附录：合并政策"></a>附录：合并政策</h2><p>清单合并工具可以在逻辑上将一个清单文件中的每个 XML 元素与另一个文件中的对应元素相匹配。合并工具会使用“匹配键”匹配每个元素，匹配键可以是唯一的属性值（如 <code>android:name</code>），也可以是标记本身的自然唯一性（例如，只能有一个 <code>&lt;supports-screen&gt;</code> 元素）。如果两个清单具有相同的 XML 元素，则该工具会采用三种合并政策中的一种，将这两个元素合并在一起：</p>
<ul>
<li><p>合并</p>
<p>将所有没有冲突的属性组合到同一标记中，并按各自的合并政策合并子元素。如果任何属性相互冲突，则使用<a href="https://developer.android.google.cn/studio/build/manifest-merge#merge_rule_markers">合并规则标记</a>将它们合并在一起。</p>
</li>
<li><p>仅合并子元素</p>
<p>不组合或合并属性（仅保留优先级最高的清单文件提供的属性），并按各自的合并政策合并子元素。</p>
</li>
<li><p>保留</p>
<p>将元素“按原样”保留，并将其添加到合并后的文件中的共同父元素中。只有在可以接受同一元素有多个声明时，才会采用此政策。</p>
</li>
</ul>
<p>表 3 列出了每种元素类型、所采用的合并政策类型，以及用于确定两个清单之间元素匹配的键。</p>
<p><strong>表 3.</strong> 清单元素合并政策和匹配键</p>
<table>
<thead>
<tr>
<th align="left">元素</th>
<th align="left">合并政策</th>
<th align="left">匹配键</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>&lt;action&gt;</code></td>
<td align="left">合并</td>
<td align="left"><code>android:name</code> 属性</td>
</tr>
<tr>
<td align="left"><code>&lt;activity&gt;</code></td>
<td align="left">合并</td>
<td align="left"><code>android:name</code> 属性</td>
</tr>
<tr>
<td align="left"><code>&lt;application&gt;</code></td>
<td align="left">合并</td>
<td align="left">每个 <code>&lt;manifest&gt;</code> 只有一个</td>
</tr>
<tr>
<td align="left"><code>&lt;category&gt;</code></td>
<td align="left">合并</td>
<td align="left"><code>android:name</code> 属性</td>
</tr>
<tr>
<td align="left"><code>&lt;data&gt;</code></td>
<td align="left">合并</td>
<td align="left">每个 <code>&lt;intent-filter&gt;</code> 只有一个</td>
</tr>
<tr>
<td align="left"><code>&lt;grant-uri-permission&gt;</code></td>
<td align="left">合并</td>
<td align="left">每个 <code>&lt;provider&gt;</code> 只有一个</td>
</tr>
<tr>
<td align="left"><code>&lt;instrumentation&gt;</code></td>
<td align="left">合并</td>
<td align="left"><code>android:name</code> 属性</td>
</tr>
<tr>
<td align="left"><code>&lt;intent-filter&gt;</code></td>
<td align="left">保留</td>
<td align="left">不匹配；允许父元素内的多个声明</td>
</tr>
<tr>
<td align="left"><code>&lt;manifest&gt;</code></td>
<td align="left">仅合并子元素</td>
<td align="left">每个文件只有一个</td>
</tr>
<tr>
<td align="left"><code>&lt;meta-data&gt;</code></td>
<td align="left">合并</td>
<td align="left"><code>android:name</code> 属性</td>
</tr>
<tr>
<td align="left"><code>&lt;path-permission&gt;</code></td>
<td align="left">合并</td>
<td align="left">每个 <code>&lt;provider&gt;</code> 只有一个</td>
</tr>
<tr>
<td align="left"><code>&lt;permission-group&gt;</code></td>
<td align="left">合并</td>
<td align="left"><code>android:name</code> 属性</td>
</tr>
<tr>
<td align="left"><code>&lt;permission&gt;</code></td>
<td align="left">合并</td>
<td align="left"><code>android:name</code> 属性</td>
</tr>
<tr>
<td align="left"><code>&lt;permission-tree&gt;</code></td>
<td align="left">合并</td>
<td align="left"><code>android:name</code> 属性</td>
</tr>
<tr>
<td align="left"><code>&lt;provider&gt;</code></td>
<td align="left">合并</td>
<td align="left"><code>android:name</code> 属性</td>
</tr>
<tr>
<td align="left"><code>&lt;receiver&gt;</code></td>
<td align="left">合并</td>
<td align="left"><code>android:name</code> 属性</td>
</tr>
<tr>
<td align="left"><code>&lt;screen&gt;</code></td>
<td align="left">合并</td>
<td align="left"><code>android:screenSize</code> 属性</td>
</tr>
<tr>
<td align="left"><code>&lt;service&gt;</code></td>
<td align="left">合并</td>
<td align="left"><code>android:name</code> 属性</td>
</tr>
<tr>
<td align="left"><code>&lt;supports-gl-texture&gt;</code></td>
<td align="left">合并</td>
<td align="left"><code>android:name</code> 属性</td>
</tr>
<tr>
<td align="left"><code>&lt;supports-screen&gt;</code></td>
<td align="left">合并</td>
<td align="left">每个 <code>&lt;manifest&gt;</code> 只有一个</td>
</tr>
<tr>
<td align="left"><code>&lt;uses-configuration&gt;</code></td>
<td align="left">合并</td>
<td align="left">每个 <code>&lt;manifest&gt;</code> 只有一个</td>
</tr>
<tr>
<td align="left"><code>&lt;uses-feature&gt;</code></td>
<td align="left">合并</td>
<td align="left"><code>android:name</code> 属性（如果不存在，则使用 <code>android:glEsVersion</code> 属性）</td>
</tr>
<tr>
<td align="left"><code>&lt;uses-library&gt;</code></td>
<td align="left">合并</td>
<td align="left"><code>android:name</code> 属性</td>
</tr>
<tr>
<td align="left"><code>&lt;uses-permission&gt;</code></td>
<td align="left">合并</td>
<td align="left"><code>android:name</code> 属性</td>
</tr>
<tr>
<td align="left"><code>&lt;uses-sdk&gt;</code></td>
<td align="left">合并</td>
<td align="left">每个 <code>&lt;manifest&gt;</code> 只有一个</td>
</tr>
<tr>
<td align="left">自定义元素</td>
<td align="left">合并</td>
<td align="left">不匹配；合并工具并不知晓这些元素，因此它们始终包含在合并后的清单中</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>版本相关-Android10</title>
    <url>/posts/1093970730/</url>
    <content><![CDATA[<h1 id="Android10"><a href="#Android10" class="headerlink" title="Android10"></a>Android10</h1><h2 id="Android-10版本特性"><a href="#Android-10版本特性" class="headerlink" title="Android 10版本特性"></a>Android 10版本特性</h2><h3 id="Android-10适配要点，作用域存储"><a href="#Android-10适配要点，作用域存储" class="headerlink" title="Android 10适配要点，作用域存储"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650249029&idx=1&sn=6ab18477950e5f4e1a14dc47ecc4f763&chksm=8863662abf14ef3c1500d64c106ab2e5a6c95e716ff6e57ba379e2aabca7b6046060ccb78af2&scene=21#wechat_redirect">Android 10适配要点，作用域存储</a></h3><p>作用域存储，直接颠覆了我们长久以来的外置存储空间的使用方式，因此大量App都将面临着较多代码模块的升级。</p>
<h4 id="理解作用存储"><a href="#理解作用存储" class="headerlink" title="理解作用存储"></a>理解作用存储</h4><p>Android 10以前支持外置存储空间这个空间，即SD卡存储。几乎所有App都喜欢在SD卡的根目录下建立一个自己专属的目录，用来存放各类文件和数据。</p>
<p>这样做的好处是：</p>
<ol>
<li>存储在SD卡的文件不会计入到应用程序的占用空间当中；</li>
<li>存储在SD卡的文件，即使应用程序被卸载了，这些文件仍被保留下来有助于实现一些数据永久保留的功能。</li>
</ol>
<p>缺点：</p>
<ol>
<li>导致SD卡空间乱糟糟，卸载应用程序后所产生的垃圾文件扔存在。</li>
<li>SD卡上的文件属于公有文件，其他应用程序都有权随意访问，导致数据安全性没有保证。</li>
</ol>
<p>针对上面的问题，Android 10中加入了作用域存储功能。Android 10之后，每个应用程序只能有权在自己的外置存储空间关联目录下读取和创建文件，获取该关联目录的代码<code>context.getExternalFilesDir()</code>，关联目录对应路径大致如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/storage/</span>emulated<span class="regexp">/0/</span>Android<span class="regexp">/data/</span>&lt;包名&gt;/files</span><br></pre></td></tr></table></figure>

<p>这个目录中的文件会被计入到应用程序的占用空间中，会随应用程序卸载而被删除。</p>
<p>访问其他目录（如 读取&#x2F;存储 相册中的图片）。Android系统针对文件类型进行了分类，图片、音频、视频这三类可通过<code>MediaStore API</code>进行访问，其他类型的文件需要使用系统的文件选择器来进行访问。</p>
<blockquote>
<p>应用程序向媒体库贡献的图片、音频、视频，自动拥有读写权限，不需要额外申请<code>READ_EXTERNAL_STORAGE</code>和<code>WRITE_EXTERNAL_STORAGE</code>权限。</p>
<p>应用程序访问其他应用程序向媒体库共享的图片、音频、视频，则必须申请<code>READ_EXTERNAL_STORAGE</code>权限才行。<code>WRITE_EXTERNAL_STORAGE</code>在未来将被废弃。</p>
</blockquote>
<h4 id="我们一定要升级吗？"><a href="#我们一定要升级吗？" class="headerlink" title="我们一定要升级吗？"></a>我们一定要升级吗？</h4><p>暂时可以不用升级，因为之前传统外置存储空间的用法太广泛了。即项目指定<code>targetSdkVersion</code>低于 29，即使不做任何作用域存储方面的适配也可以成功运行在Android 10手机上。不过需要在 <code>AndroidManifest.xml</code> 中加入如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">application</span> <span class="attr">android:requestLegacyExternalStorage</span>=<span class="string">&quot;true&quot;</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这段配置在Android 11预览版上还不会失效。</p>
<h4 id="针对作用域存储进行适配"><a href="#针对作用域存储进行适配" class="headerlink" title="针对作用域存储进行适配"></a>针对作用域存储进行适配</h4><p>本篇文章中演示的所有示例，都可以到ScopedStorageDemo这个开源库中找到其对应的<a href="https://github.com/guolindev/ScopedStorageDemo">源码</a></p>
<h5 id="获取相册中的图片"><a href="#获取相册中的图片" class="headerlink" title="获取相册中的图片"></a>获取相册中的图片</h5><blockquote>
<p>PS 获取音频、适配的用法也基本相同</p>
</blockquote>
<p>不同于过去的直接获取到相册中图片的绝对路径，在作用域存储当中，需要借助<code>MediaStore API</code>获取到图片的<code>Uri</code>，示例代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> cursor = contentResolver.query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&quot;<span class="subst">$&#123;MediaStore.MediaColumns.DATE_ADDED&#125;</span> desc&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (cursor != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">        <span class="keyword">val</span> id = cursor.getLong(cursor.getColumnIndexOrThrow(MediaStore.MediaColumns._ID))</span><br><span class="line">        <span class="keyword">val</span> uri = ContentUris.withAppendedId(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, id)</span><br><span class="line">        println(<span class="string">&quot;image uri is <span class="variable">$uri</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    cursor.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>先通过 ContentResolver 获取到相册中所有图片的id，再借助 ContentUris 将id拼装成一个完整的 Uri 对象。</p>
<p>一张图的 Uri 格式大致如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">content:<span class="regexp">//m</span>edia<span class="regexp">/external/im</span>ages<span class="regexp">/media/</span><span class="number">321</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>图片显示</strong>有多种方法，如借助第三方库Glide</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Glide.with(context).load(uri).into(imageView)</span><br></pre></td></tr></table></figure>

<p>不借助第三方库的做法：将Uri对象解析成图片</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> fd = contentResolver.openFileDescriptor(uri, <span class="string">&quot;r&quot;</span>)<span class="comment">//打开文件句柄</span></span><br><span class="line"><span class="keyword">if</span>(fd != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">val</span> bitmap = BitmapFactory.decodeFileDescriptor(fd.fileDescriptor)<span class="comment">//将文件句柄解析成Bitmap对象</span></span><br><span class="line">    fd.close()</span><br><span class="line">    imageView.setImageBitmap(bitmap)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="将图片添加到相册"><a href="#将图片添加到相册" class="headerlink" title="将图片添加到相册"></a>将图片添加到相册</h5><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将一个Bitmap对象添加到手机相册中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">addBitmapToAlbum</span><span class="params">(bitmap: <span class="type">Bitmap</span>, displayName: <span class="type">String</span>, mimeType: <span class="type">String</span>, compressFormat: <span class="type">Bitmap</span>.<span class="type">CompressFormat</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> values = ContentValues()<span class="comment">//构建一个ContentValues对象，并向这个对象添加三个重要数据</span></span><br><span class="line">    values.put(MediaStore.MediaColumns.DISPLAY_NAME, displayName)<span class="comment">//DISPLAY_NAME图片显示的名称</span></span><br><span class="line">    values.put(MediaStore.MediaColumns.MIME_TYPE, mimeType)<span class="comment">//MIME_TYPE图片的mime类型</span></span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.Q) &#123;</span><br><span class="line">        values.put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_DCIM)<span class="comment">//图片的存储路径（拼装成绝对路径）。RELATIVE_PATH表示文件存储的相对路径，可选值有DIRECTORY_DCIM、DIRECTORY_PICTURES、DIRECTORY_MOVIES、DIRECTORY_MUSIC等，分别表示相册、图片、电影、音乐等目录</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        values.put(MediaStore.MediaColumns.DATA, <span class="string">&quot;<span class="subst">$&#123;Environment.getExternalStorageDirectory().path&#125;</span>/<span class="subst">$&#123;Environment.DIRECTORY_DCIM&#125;</span>/<span class="variable">$displayName</span>&quot;</span>)<span class="comment">//图片的存储路径</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> uri = contentResolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values)<span class="comment">//插入图片的Uri</span></span><br><span class="line">    <span class="keyword">if</span> (uri != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//向该Uri所对应的图片写入数据</span></span><br><span class="line">        <span class="keyword">val</span> outputStream = contentResolver.openOutputStream(uri)<span class="comment">//获取文件的输出流</span></span><br><span class="line">        <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">            bitmap.compress(compressFormat, <span class="number">100</span>, outputStream)<span class="comment">//将Bitmap对象写入到该输出流中</span></span><br><span class="line">            outputStream.close()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将网络上的图片存储到手机相册</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">writeInputStreamToAlbum</span><span class="params">(inputStream: <span class="type">InputStream</span>, displayName: <span class="type">String</span>, mimeType: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> values = ContentValues()</span><br><span class="line">    values.put(MediaStore.MediaColumns.DISPLAY_NAME, displayName)</span><br><span class="line">    values.put(MediaStore.MediaColumns.MIME_TYPE, mimeType)</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.Q) &#123;</span><br><span class="line">        values.put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_DCIM)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        values.put(MediaStore.MediaColumns.DATA, <span class="string">&quot;<span class="subst">$&#123;Environment.getExternalStorageDirectory().path&#125;</span>/<span class="subst">$&#123;Environment.DIRECTORY_DCIM&#125;</span>/<span class="variable">$displayName</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> bis = BufferedInputStream(inputStream)</span><br><span class="line">    <span class="keyword">val</span> uri = contentResolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values)</span><br><span class="line">    <span class="keyword">if</span> (uri != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> outputStream = contentResolver.openOutputStream(uri)</span><br><span class="line">        <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> bos = BufferedOutputStream(outputStream)</span><br><span class="line">            <span class="keyword">val</span> buffer = ByteArray(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">var</span> bytes = bis.read(buffer)</span><br><span class="line">            <span class="keyword">while</span> (bytes &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                bos.write(buffer, <span class="number">0</span> , bytes)</span><br><span class="line">                bos.flush()</span><br><span class="line">                bytes = bis.read(buffer)</span><br><span class="line">            &#125;</span><br><span class="line">            bos.close()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bis.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="下载文件到Download目录"><a href="#下载文件到Download目录" class="headerlink" title="下载文件到Download目录"></a>下载文件到Download目录</h5><p>Android 10上两种解决方式：</p>
<p>第一种较简单，更改文件的下载目录，将文件下载到应用程序关联目录下。这样不改任何代码即可让程序在Android 10上正常工作。缺点：文件会被计入到应用程序的占用空间中，程序被卸载文件也会被删除。</p>
<p>第二种，对Android 10系统进行代码视频，仍将文件下载Download目录下</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将文件下载到Download目录</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">downloadFile</span><span class="params">(fileUrl: <span class="type">String</span>, fileName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.Q) &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;You must use device running Android 10 or higher&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    thread &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> url = URL(fileUrl)</span><br><span class="line">            <span class="keyword">val</span> connection = url.openConnection() <span class="keyword">as</span> HttpURLConnection</span><br><span class="line">            connection.requestMethod = <span class="string">&quot;GET&quot;</span></span><br><span class="line">            connection.connectTimeout = <span class="number">8000</span></span><br><span class="line">            connection.readTimeout = <span class="number">8000</span></span><br><span class="line">            <span class="keyword">val</span> inputStream = connection.inputStream</span><br><span class="line">            <span class="keyword">val</span> bis = BufferedInputStream(inputStream)</span><br><span class="line">            <span class="keyword">val</span> values = ContentValues()</span><br><span class="line">            values.put(MediaStore.MediaColumns.DISPLAY_NAME, fileName)</span><br><span class="line">            values.put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_DOWNLOADS)</span><br><span class="line">            <span class="keyword">val</span> uri = contentResolver.insert(MediaStore.Downloads.EXTERNAL_CONTENT_URI, values)</span><br><span class="line">            <span class="keyword">if</span> (uri != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">val</span> outputStream = contentResolver.openOutputStream(uri)</span><br><span class="line">                <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">val</span> bos = BufferedOutputStream(outputStream)</span><br><span class="line">                    <span class="keyword">val</span> buffer = ByteArray(<span class="number">1024</span>)</span><br><span class="line">                    <span class="keyword">var</span> bytes = bis.read(buffer)</span><br><span class="line">                    <span class="keyword">while</span> (bytes &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        bos.write(buffer, <span class="number">0</span> , bytes)</span><br><span class="line">                        bos.flush()</span><br><span class="line">                        bytes = bis.read(buffer)</span><br><span class="line">                    &#125;</span><br><span class="line">                    bos.close()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            bis.close()</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e: Exception) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>与向相册中添加一张图片的过程差不多，Android 10在MediaStore中新增一个 Downloads 稽核，专门用于执行文件下载操作。</p>
<p>主要添加了一些Http请求，并将<code>MeadiaStore.Images.Media</code>改成<code>MediaStore.Downloads</code></p>
</blockquote>
<h5 id="使用文件选择器"><a href="#使用文件选择器" class="headerlink" title="使用文件选择器"></a>使用文件选择器</h5><p>读取SD卡上非图片、音频、视频类的文件，此时不能用MediaStore API，需用文件选择器。</p>
<p>调用系统内置的文件选择器：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 调用系统内置的文件选择器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> PICK_FILE = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过Intent启动系统的文件选择。</span></span><br><span class="line"><span class="comment">* 注意：</span></span><br><span class="line"><span class="comment">* 	Intent的action和category是固定不变的。</span></span><br><span class="line"><span class="comment">* 	type用于对文件类型进行过滤，如指定成 image/* 即可只显示图片类型的文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">pickFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> intent = Intent(Intent.ACTION_OPEN_DOCUMENT)</span><br><span class="line">    intent.addCategory(Intent.CATEGORY_OPENABLE)</span><br><span class="line">    intent.type = <span class="string">&quot;*/*&quot;</span> <span class="comment">//显示所有类型文件</span></span><br><span class="line">    startActivityForResult(intent, PICK_FILE)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityResult</span><span class="params">(requestCode: <span class="type">Int</span>, resultCode: <span class="type">Int</span>, <span class="keyword">data</span>: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, <span class="keyword">data</span>)</span><br><span class="line">    <span class="keyword">when</span> (requestCode) &#123;</span><br><span class="line">        PICK_FILE -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultCode == Activity.RESULT_OK &amp;&amp; <span class="keyword">data</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">val</span> uri = <span class="keyword">data</span>.<span class="keyword">data</span></span><br><span class="line">                <span class="keyword">if</span> (uri != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">val</span> inputStream = contentResolver.openInputStream(uri)<span class="comment">//打开文件输入流</span></span><br><span class="line">                    <span class="comment">// 执行文件读取操作</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="第三方SDK不支持怎么办"><a href="#第三方SDK不支持怎么办" class="headerlink" title="第三方SDK不支持怎么办"></a>第三方SDK不支持怎么办</h5><p>如七牛云SDK，它的文件上传功能要求你传入一个文件的绝对路径，不支持传入Uri对象。</p>
<ol>
<li>由于我们是没有权限修改第三方SDK的，因此最简单直接的办法就是等待第三方SDK的提供者对这部分功能进行更新，在那之前我们先不要将targetSdkVersion指定到29，或者先在AndroidManifest文件中配置一下requestLegacyExternalStorage属性。</li>
<li>另一个方法，自己编写一个文件复制功能，将Uri对象所对应的文件复制到应用程序的关联目录下，然后将关联目录下这个文件的绝对路径传递给第三方SDK，即可完美适配</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将文件Uri对象复制到应用程序关联的目录下</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">copyUriToExternalFilesDir</span><span class="params">(uri: <span class="type">Uri</span>, fileName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> inputStream = contentResolver.openInputStream(uri)</span><br><span class="line">    <span class="keyword">val</span> tempDir = getExternalFilesDir(<span class="string">&quot;temp&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (inputStream != <span class="literal">null</span> &amp;&amp; tempDir != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> file = File(<span class="string">&quot;<span class="variable">$tempDir</span>/<span class="variable">$fileName</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> fos = FileOutputStream(file)</span><br><span class="line">        <span class="keyword">val</span> bis = BufferedInputStream(inputStream)</span><br><span class="line">        <span class="keyword">val</span> bos = BufferedOutputStream(fos)</span><br><span class="line">        <span class="keyword">val</span> byteArray = ByteArray(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">var</span> bytes = bis.read(byteArray)</span><br><span class="line">        <span class="keyword">while</span> (bytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            bos.write(byteArray, <span class="number">0</span>, bytes)</span><br><span class="line">            bos.flush()</span><br><span class="line">            bytes = bis.read(byteArray)</span><br><span class="line">        &#125;</span><br><span class="line">        bos.close()</span><br><span class="line">        fos.close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/guolindev/ScopedStorageDemo">示例代码</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓版本</tag>
      </tags>
  </entry>
  <entry>
    <title>版本相关-Android11</title>
    <url>/posts/9f0098a5/</url>
    <content><![CDATA[<h2 id="Android-11版本特性"><a href="#Android-11版本特性" class="headerlink" title="Android 11版本特性"></a>Android 11版本特性</h2><h3 id="Android-11-新特性，Scoped-Storage又有了新花样"><a href="#Android-11-新特性，Scoped-Storage又有了新花样" class="headerlink" title="Android 11 新特性，Scoped Storage又有了新花样"></a><a href="https://mp.weixin.qq.com/s/bEHTMAn9LB8SAUyf8WyF6A">Android 11 新特性，Scoped Storage又有了新花样</a></h3><p><strong>Android 11上强制启用了 <code>Scoped Storage</code></strong></p>
<p>需要适配的地方：关注Android 11的权限变更，这部分内容在 <a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650250310&idx=1&sn=dec8886482432b1000bfa9e03d49e4e6&chksm=88636d29bf14e43f9b60e037ce19d32d3249d0c403984e6f3901b788d4a53bb7f3903ecb92fc&scene=21#wechat_redirect">PermissionX现在支持Java了！还有Android 11权限变更讲解</a> 这篇有比较详细的详解。</p>
<p>下文是关于 Scoped Storage 的探讨</p>
<p>Scoped Storage不是Android 11上新推的功能，在Android 10上就有，可以参考 <a href="http://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650249029&idx=1&sn=6ab18477950e5f4e1a14dc47ecc4f763&chksm=8863662abf14ef3c1500d64c106ab2e5a6c95e716ff6e57ba379e2aabca7b6046060ccb78af2&scene=21#wechat_redirect">Android 10适配要点，作用域存储</a> ，之前这篇并没有过时在Android 11上依然适用。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:requestLegacyExternalStorage</span>=<span class="string">&quot;true&quot;</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个配置在Android 11上依然有效，前提是 targetSdkVersion 必须小于等于 29</p>
<p>在 targetSdkVersion 等于 30 时强制启用了 Scoped Storage（上述配置不起效）</p>
</blockquote>
<p>强制启用 Scoped Storage 后应用程序按照 Android 10适配要点适配就可以了。</p>
<p>但有一类应用程序非常特殊，即文件浏览器，如Root Explorer、ES Explorer等。就会有影响，无法以文件的真实路径来对文件进行管理。针对这类应用的解决方案：</p>
<h4 id="管理设备上所有的文件"><a href="#管理设备上所有的文件" class="headerlink" title="管理设备上所有的文件"></a>管理设备上所有的文件</h4><p>大部分应用程序来说，使用 MediaStore API 就可以满足开发需求了。以下是针对文件浏览器应用的。</p>
<p>文件浏览器需要对设备的整个SD卡进行管理，这类危险程度比较高的权限，Google通常采用的做法是，使用Intent跳转到一个专门的授权页面，引导用户手动授权，比如悬浮窗，无障碍服务等。</p>
<p>在Android 11上想要管理整个设备的文件也是使用类似的技术。做法：</p>
<ol>
<li><p>在 <code>AndroidManifest.xml</code>中声明<code>MANAGE_EXTERNAL_STORAGE</code>权限</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.scopedstoragedemo&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.MANAGE_EXTERNAL_STORAGE&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:ignore</span>=<span class="string">&quot;ScopedStorage&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>多了tools:ignore&#x3D;”ScopedStorage”，不加这个的话 Android Studio会用一个警告提醒我们不应该申请这个权限。</p>
</blockquote>
</li>
<li><p>使用ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION这个action来跳转到指定的授权页面，可以通过Environment.isExternalStorageManager()这个函数来判断用户是否已授权</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.R ||</span><br><span class="line">        Environment.isExternalStorageManager()) &#123;<span class="comment">//低于Android 11或已经拥有管理整个SD卡的权限，即可直接使用传统的写法，以文件真实路径的形式对文件进行操作</span></span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;已获得访问所有文件权限&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//没有管理SD卡的权限。弹出一个对话框，告知用户申请权限的原因，然后使用Intent跳转到指定的授权页面，让用户手动授权</span></span><br><span class="line">    <span class="keyword">val</span> builder = AlertDialog.Builder(<span class="keyword">this</span>)</span><br><span class="line">        .setMessage(<span class="string">&quot;本程序需要您同意允许访问所有文件权限&quot;</span>)</span><br><span class="line">        .setPositiveButton(<span class="string">&quot;确定&quot;</span>) &#123; _, _ -&gt;</span><br><span class="line">            <span class="keyword">val</span> intent = Intent(Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION)</span><br><span class="line">            startActivity(intent)</span><br><span class="line">        &#125;</span><br><span class="line">    builder.show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：就算获得了管理SD卡的权限，对于Android这个目录下的很多资源仍然是访问受限的。比如<code>Android/data</code>这个目录在Android 11是无法访问的，它放的是其他应用程序的数据信息。</p>
</blockquote>
</li>
</ol>
<h4 id="Batch-operations"><a href="#Batch-operations" class="headerlink" title="Batch operations"></a>Batch operations</h4><p>Scoped Storage规定，每个应用程序都有权向MediaStore贡献数据，也可以权读取其他应用程序贡献的数据，但不能修改其他应用程序贡献的数据。但有些应用需要修改其他应用程序共享的数据（如美图秀秀、Photoshop等），针对这个问题，Android 10中提供了一种解决方案：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 作用：修改一张图片的灰度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    contentResolver.openFileDescriptor(imageContentUri, <span class="string">&quot;w&quot;</span>)?.use &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;现在可以修改图片的灰度了&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (securityException: SecurityException) &#123;<span class="comment">//没有权限操作的情况会走底下的异常</span></span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.Q) &#123;<span class="comment">//大于等于Android 10的异常类型是RecoverableSecurityException，是由于Scoped Storage限制导致操作没有权限的异常</span></span><br><span class="line">        <span class="keyword">val</span> recoverableSecurityException = securityException <span class="keyword">as</span>?</span><br><span class="line">            RecoverableSecurityException ?:</span><br><span class="line">            <span class="keyword">throw</span> RuntimeException(securityException.message, securityException)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取一个intentSender对象，借助它进行页面跳转，引导用户手动授予我们修改这张图片的权限</span></span><br><span class="line">        <span class="keyword">val</span> intentSender = recoverableSecurityException.userAction.actionIntent.intentSender</span><br><span class="line">        intentSender?.let &#123;</span><br><span class="line">            startIntentSenderForResult(intentSender, IMAGE_REQUEST_CODE,</span><br><span class="line">                    <span class="literal">null</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> RuntimeException(securityException.message, securityException)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述方法缺点是操作每张图片都要授权。Android 11中引入一个新功能<code>Batch operations</code>允许我们一次性对多个文件的操作权限进行申请。</p>
<p>关于Batch operations的用法也很好理解，Google一共提供了4种类型的权限申请API，如下所示：</p>
<ul>
<li>createWriteRequest() 用于请求对多个文件的写入权限。</li>
<li>createFavoriteRequest() 用于请求将多个文件加入到Favorite（收藏）的权限。</li>
<li>createTrashRequest() 用于请求将多个文件移至回收站的权限。</li>
<li>createDeleteRequest() 用于请求将多个文件删除的权限。</li>
</ul>
<p>以<code>createWriteRequest()</code>举例：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.R) &#123;</span><br><span class="line">    <span class="keyword">val</span> urisToModify = listOf(uri1, uri2, uri3, uri4)</span><br><span class="line">    <span class="keyword">val</span> editPendingIntent = MediaStore.createWriteRequest(contentResolver, urisToModify)<span class="comment">//调用createWriteRequest()对多个文件集合，创建一个PendingIntent</span></span><br><span class="line">    startIntentSenderForResult(editPendingIntent.intentSender, EDIT_REQUEST_CODE,</span><br><span class="line">            <span class="literal">null</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)<span class="comment">//调用startIntentSenderForResult进行权限申请</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于权限申请结果，在<code>onActivityResult()</code>中进行监听：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityResult</span><span class="params">(requestCode: <span class="type">Int</span>, resultCode: <span class="type">Int</span>, <span class="keyword">data</span>: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, <span class="keyword">data</span>)</span><br><span class="line">    <span class="keyword">when</span> (requestCode) &#123;</span><br><span class="line">        EDIT_REQUEST_CODE -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;用户已授权&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;用户没有授权&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述的Android 10（依赖异常捕获机制）和Android 11（依赖Batch operations）的API用法不一样。如果不想在一个项目中写两套代码进行适配的话，那么做法是在代码中使用 Batch operations只针对 Android 11进行适配，在<code>AndroidManifest.xml</code>中添加<code>requestLegacyExternalStorage</code>标记让Android 10不需要适配。</p>
<p><a href="https://github.com/guolindev/ScopedStorageDemo">示例代码</a></p>
<h2 id="Android11开发手册"><a href="#Android11开发手册" class="headerlink" title="Android11开发手册"></a><a href="http://services.google.cn/fh/files/misc/android_11_dev_booklet.pdf">Android11开发手册</a></h2>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓版本</tag>
      </tags>
  </entry>
  <entry>
    <title>版本相关-Android12</title>
    <url>/posts/609c91f/</url>
    <content><![CDATA[<h2 id="Android-12版本特性"><a href="#Android-12版本特性" class="headerlink" title="Android 12版本特性"></a>Android 12版本特性</h2><p><a href="https://www.androidweekly.io/android-12-is-live-in-aosp/">Android12正式发布</a></p>
<h3 id="Android的新UI–Material-You（新的设计语言）"><a href="#Android的新UI–Material-You（新的设计语言）" class="headerlink" title="Android的新UI–Material You（新的设计语言）"></a>Android的新UI–<a href="https://material.io/blog/announcing-material-you?utm_source=androidweekly.io&utm_medium=website">Material You</a>（新的设计语言）</h3><p>如果想将所有最新的 Material Design 3 新特性带入您的应用，请尝试 <a href="https://github.com/material-components/material-components-android/releases?utm_source=androidweekly.io&utm_medium=website">Material 设计组件</a> 的 Alpha 版本，并关注即将到来的 Jetpack Compose 支持。</p>
<h4 id="Android-12微件（Widgets）改进-API"><a href="#Android-12微件（Widgets）改进-API" class="headerlink" title="Android 12微件（Widgets）改进 API"></a><a href="https://developer.android.google.cn/about/versions/12/features/widgets?utm_source=androidweekly.io&utm_medium=website">Android 12微件（Widgets）改进 API</a></h4><h5 id="Android-12-引入了以下系统参数来设置微件圆角的半径："><a href="#Android-12-引入了以下系统参数来设置微件圆角的半径：" class="headerlink" title="Android 12 引入了以下系统参数来设置微件圆角的半径："></a>Android 12 引入了以下系统参数来设置微件圆角的半径：</h5><ul>
<li><a href="https://developer.android.google.cn/reference/android/R.dimen#system_app_widget_background_radius"><code>system_app_widget_background_radius</code></a>：微件背景的角半径，绝不会大于 28dp。</li>
<li><a href="https://developer.android.google.cn/reference/android/R.dimen#system_app_widget_inner_radius"><code>system_app_widget_inner_radius</code></a>：微件内任何视图的角半径。这正好比背景半径小 8dp，这样在使用 8dp 内边距时，就能很好地对齐。</li>
</ul>
<h5 id="添加新的复合按钮"><a href="#添加新的复合按钮" class="headerlink" title="添加新的复合按钮"></a>添加新的复合按钮</h5><ul>
<li><p><a href="https://developer.android.google.cn/reference/kotlin/android/widget/CheckBox"><code>CheckBox</code></a></p>
</li>
<li><p><a href="https://developer.android.google.cn/reference/android/widget/Switch"><code>Switch</code></a></p>
</li>
<li><p><a href="https://developer.android.google.cn/reference/android/widget/RadioButton"><code>RadioButton</code></a></p>
<p>微件仍然无状态。您的应用必须存储状态并注册状态更改事件。</p>
</li>
</ul>
<h5 id="可以指定额外的微件大小调整限制"><a href="#可以指定额外的微件大小调整限制" class="headerlink" title="可以指定额外的微件大小调整限制"></a>可以指定额外的微件大小调整限制</h5><ol>
<li><a href="https://developer.android.google.cn/about/versions/12/features/widgets?utm_source=androidweekly.io&utm_medium=website#specify-widget-size-constraints">指定额外的微件大小调整限制</a></li>
<li>提供<a href="https://developer.android.google.cn/about/versions/12/features/widgets?utm_source=androidweekly.io&utm_medium=website#provide-responsive-layouts">自适应布局</a>或<a href="https://developer.android.google.cn/about/versions/12/features/widgets?utm_source=androidweekly.io&utm_medium=website#provide-exact-layouts">精确布局</a></li>
</ol>
<p>除了现有的 <a href="https://developer.android.google.cn/reference/android/appwidget/AppWidgetProviderInfo#minWidth"><code>minWidth</code></a>、<a href="https://developer.android.google.cn/reference/android/appwidget/AppWidgetProviderInfo#minHeight"><code>minHeight</code></a>、<a href="https://developer.android.google.cn/reference/android/appwidget/AppWidgetProviderInfo#minResizeWidth"><code>minResizeWidth</code></a> 和 <a href="https://developer.android.google.cn/reference/android/appwidget/AppWidgetProviderInfo#minResizeHeight"><code>minResizeHeight</code></a> 属性之外，还可以使用下面这些新的 <code>appwidget-provider</code> 属性：</p>
<ul>
<li><a href="https://developer.android.google.cn/reference/android/appwidget/AppWidgetProviderInfo#targetCellWidth"><code>targetCellWidth</code></a> 和 <a href="https://developer.android.google.cn/reference/android/appwidget/AppWidgetProviderInfo#targetCellHeight"><code>targetCellHeight</code></a>：根据启动器网格单元定义微件的目标大小。定义后，会使用这些属性，而不是 <code>minWidth</code> 或 <code>minHeight</code>。</li>
<li><a href="https://developer.android.google.cn/reference/android/appwidget/AppWidgetProviderInfo#maxResizeWidth"><code>maxResizeWidth</code></a> 和 <a href="https://developer.android.google.cn/reference/android/appwidget/AppWidgetProviderInfo#maxResizeWidth"><code>maxResizeHeight</code></a>：定义启动器允许用户调整微件大小的大小上限。</li>
</ul>
<h5 id="提供自适应布局"><a href="#提供自适应布局" class="headerlink" title="提供自适应布局"></a>提供自适应布局</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUpdate</span><span class="params">(...)</span> &#123;</span><br><span class="line">  <span class="type">RemoteViews</span> <span class="variable">smallView</span> <span class="operator">=</span> ...;</span><br><span class="line">  <span class="type">RemoteViews</span> <span class="variable">tallView</span> <span class="operator">=</span> ...;</span><br><span class="line">  <span class="type">RemoteViews</span> <span class="variable">wideView</span> <span class="operator">=</span> ...;</span><br><span class="line"></span><br><span class="line">  Map&lt;SizeF, RemoteViews&gt; viewMapping = <span class="keyword">new</span> <span class="title class_">ArrayMap</span>&lt;&gt;();</span><br><span class="line">  viewMapping.put(<span class="keyword">new</span> <span class="title class_">SizeF</span>(<span class="number">100f</span>, <span class="number">100f</span>), smallView);</span><br><span class="line">  viewMapping.put(<span class="keyword">new</span> <span class="title class_">SizeF</span>(<span class="number">100f</span>, <span class="number">200f</span>), tallView);</span><br><span class="line">  viewMapping.put(<span class="keyword">new</span> <span class="title class_">SizeF</span>(<span class="number">200f</span>, <span class="number">100f</span>), wideView);</span><br><span class="line">  <span class="type">RemoteViews</span> <span class="variable">remoteViews</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteViews</span>(viewMapping);</span><br><span class="line"></span><br><span class="line">  appWidgetManager.updateAppWidget(id, remoteViews);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="提供精确布局"><a href="#提供精确布局" class="headerlink" title="提供精确布局"></a>提供精确布局</h5><p>如果一小组自适应布局不可行，您可以改为提供根据微件的显示大小量身定制的不同布局。通常，手机有两种大小（竖屏和横屏模式），可折叠设备有四种大小。</p>
<p>如需实现此解决方案，您的应用需要执行以下步骤：</p>
<ol>
<li>过载 [<code>AppWidgetProvider#onAppWidgetOptionsChanged(...)</code>](<a href="https://developer.android.google.cn/reference/android/appwidget/AppWidgetProvider#onAppWidgetOptionsChanged">https://developer.android.google.cn/reference/android/appwidget/AppWidgetProvider#onAppWidgetOptionsChanged</a>(android.content.Context, android.appwidget.AppWidgetManager, int, android.os.Bundle))，当一组大小发生更改时，就会调用此方法。</li>
<li>调用 <a href="https://developer.android.google.cn/reference/android/appwidget/AppWidgetManager#getAppWidgetOptions(int)"><code>getAppWidgetManager#getAppWidgetOptions(...)</code></a>，这样会返回包含大小的 <a href="https://developer.android.google.cn/reference/android/os/Bundle"><code>Bundle</code></a>。</li>
<li>访问 <code>Bundle</code> 中的 <a href="https://developer.android.google.cn/reference/android/appwidget/AppWidgetManager#OPTION_APPWIDGET_SIZES"><code>AppWidgetManager.OPTION_APPWIDGET_SIZES</code></a> 键。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create the RemoteViews for the given size.</span></span><br><span class="line"><span class="keyword">private</span> RemoteViews <span class="title function_">createRemoteViews</span><span class="params">(SizeF size)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAppWidgetOptionsChanged</span><span class="params">(Context context, AppWidgetManager</span></span><br><span class="line"><span class="params">  appWidgetManager, <span class="type">int</span> appWidgetId, Bundle newOptions)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onAppWidgetOptionsChanged(context, appWidgetManager, appWidgetId, newOptions);</span><br><span class="line">    <span class="comment">// Get the new sizes.</span></span><br><span class="line">    ArrayList&lt;SizeF&gt; sizes =</span><br><span class="line">      newOptions.getParcelableArrayList(AppWidgetManager.OPTION_APPWIDGET_SIZES);</span><br><span class="line">    <span class="comment">// Check that the list of sizes is provided by the launcher.</span></span><br><span class="line">    <span class="keyword">if</span> (sizes == <span class="literal">null</span> || sizes.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Map the sizes to the desired RemoteViews.</span></span><br><span class="line">    Map&lt;SizesF, RemoteViews&gt; viewMapping = <span class="keyword">new</span> <span class="title class_">ArrayMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SizeF size : sizes) &#123;</span><br><span class="line">      viewMapping.put(size, createRemoteViews(size));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">RemoteViews</span> <span class="variable">remoteViews</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteViews</span>(viewMapping);</span><br><span class="line">    appWidgetManager.updateAppWidget(id, remoteViews);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="改进应用的微件选择器体验"><a href="#改进应用的微件选择器体验" class="headerlink" title="改进应用的微件选择器体验"></a>改进应用的微件选择器体验</h5><h5 id="实现更流畅的过渡"><a href="#实现更流畅的过渡" class="headerlink" title="实现更流畅的过渡"></a>实现更流畅的过渡</h5><p>在Android12中，用户从微件启动您的应用时，会更流畅（有动画）。实现方式：使用 <code>@android:id/background</code> 或 <code>android.R.id.background</code> 标识背景元素</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// Top level layout of the widget.</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:id</span>=<span class="string">&quot;@android:id/background&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：避免使用<a href="https://developer.android.google.cn/about/versions/12/behavior-changes-12#notification-trampolines">广播 trampoline</a>。在Android 12中，如果广播接收器或 服务是从微件点击的 <a href="https://developer.android.google.cn/reference/android/app/PendingIntent"><code>PendingIntent</code></a> 发起的，应用仍可从其启动 activity。不过，新的应用动画将不会用于从广播接收器或服务启动的应用，这会导致用户体验不佳。</strong></p>
<h5 id="使用-RemoteViews-的运行时修改"><a href="#使用-RemoteViews-的运行时修改" class="headerlink" title="使用 RemoteViews 的运行时修改"></a>使用 RemoteViews 的运行时修改</h5><h4 id="通知界面更新"><a href="#通知界面更新" class="headerlink" title="通知界面更新"></a>通知界面更新</h4><p>我们还对通知设计进行了改版，使其更现代、更实用。Android 12 也会使用标准的元素来美化自定义通知，使其观感与其他通知保持一致。请访问 <a href="http://developer.android.google.cn/about/versions/12/behavior-changes-12#custom-notifications?utm_source=androidweekly.io&utm_medium=website">官方文档</a> 了解详细信息。</p>
<h4 id="过度滚动拉伸效果"><a href="#过度滚动拉伸效果" class="headerlink" title="过度滚动拉伸效果"></a>过度滚动拉伸效果</h4><p>了让应用内容的滚动更加顺畅，Android 12 为所有滚动容器添加了一个新的过度滚动 “拉伸” 效果。这个自带的滚动停止效果覆盖整个系统和所有应用。请访问 <a href="https://developer.android.google.cn/about/versions/12/overscroll?utm_source=androidweekly.io&utm_medium=website">官方文档</a> 了解详细信息。</p>
<h4 id="应用启动画面"><a href="#应用启动画面" class="headerlink" title="应用启动画面"></a>应用启动画面</h4><p>Android 12 还为所有的应用带来了新的启动画面。应用也可以通过多种方式来定制启动画面，以彰显其独有的品牌个性。请访问 <a href="https://developer.android.google.cn/about/versions/12/features/splash-screen?utm_source=androidweekly.io&utm_medium=website">官方文档</a> 了解详细信息。</p>
<h3 id="性能表现"><a href="#性能表现" class="headerlink" title="性能表现"></a>性能表现</h3><p><strong>前台服务优化</strong> - 为了给用户提供更好的体验，Android 12 禁止应用在后台启动前台服务。应用可以使用 JobScheduler 中新引入的 <a href="https://developer.android.google.cn/reference/android/app/job/JobParameters.html#isExpeditedJob()?utm_source=androidweekly.io&utm_medium=website">加急作业</a> (expedited job) 来代替之前的做法。请访问 <a href="https://developer.android.google.cn/about/versions/12/behavior-changes-12#foreground-service-launch-restrictions?utm_source=androidweekly.io&utm_medium=website">官方文档</a> 了解详细信息。</p>
<p><strong>更灵敏的通知</strong> - Android 12 对通知 trampoline (利用广播接收器或服务间接启动目标 Activity) 的限制有助于减少从通知中启动应用的延迟。例如，Google Photos 应用在不使用通知 trampoline 后，启动速度快了 34%。请访问 <a href="https://developer.android.google.cn/about/versions/12/behavior-changes-12#notification-trampolines?utm_source=androidweekly.io&utm_medium=website">官方文档</a> 了解详细信息。</p>
<h1 id="升级API相关问题"><a href="#升级API相关问题" class="headerlink" title="升级API相关问题"></a>升级API相关问题</h1>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓版本</tag>
      </tags>
  </entry>
  <entry>
    <title>版本相关-Android6</title>
    <url>/posts/2e72e5f2/</url>
    <content><![CDATA[<h1 id="升级API相关问题"><a href="#升级API相关问题" class="headerlink" title="升级API相关问题"></a>升级API相关问题</h1><h2 id="升级到安卓6以上的动态权限"><a href="#升级到安卓6以上的动态权限" class="headerlink" title="升级到安卓6以上的动态权限"></a>升级到安卓6以上的动态权限</h2><h3 id="permission-is-only-granted-to-system-apps"><a href="#permission-is-only-granted-to-system-apps" class="headerlink" title="permission is only granted to system apps"></a>permission is only granted to system apps</h3><p>解决：</p>
<p>法一：在报错的地方添加</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">tools:</span>ignore=<span class="string">&quot;ProtectedPermissions&quot;</span></span><br></pre></td></tr></table></figure>

<p>同时在Manifest标签里添加</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">xmlns:</span>tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br></pre></td></tr></table></figure>



<p>法二：降低错误级别</p>
<p><img src="/posts/2e72e5f2/%E9%99%8D%E4%BD%8E%E9%94%99%E8%AF%AF%E7%BA%A7%E5%88%AB.webp"></p>
<p>法三：把uses-permission改为permission即可</p>
<p>然后clean下项目</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓版本</tag>
      </tags>
  </entry>
  <entry>
    <title>版本相关-Android9</title>
    <url>/posts/becdf863/</url>
    <content><![CDATA[<h1 id="升级API相关问题"><a href="#升级API相关问题" class="headerlink" title="升级API相关问题"></a>升级API相关问题</h1><h2 id="升级到-Android9-0遇到的问题"><a href="#升级到-Android9-0遇到的问题" class="headerlink" title="升级到 Android9.0遇到的问题"></a>升级到 Android9.0遇到的问题</h2><h3 id="java-lang-VerifyError-Verifier-rejected-class-d-w-b-f-a-java-lang-String"><a href="#java-lang-VerifyError-Verifier-rejected-class-d-w-b-f-a-java-lang-String" class="headerlink" title="java.lang.VerifyError: Verifier rejected class d.w.b.f.a: java.lang.String"></a>java.lang.VerifyError: Verifier rejected class d.w.b.f.a: java.lang.String</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.VerifyError: Verifier rejected <span class="keyword">class</span> <span class="title class_">d</span>.w.b.f.a: java.lang.String d.w.b.f.a.a(java.lang.String) failed to verify: java.lang.String d.w.b.f.a.a(java.lang.String): [<span class="number">0x36</span>] <span class="string">&#x27;this&#x27;</span> argument <span class="string">&#x27;Precise Reference: org.apache.commons.codec.binary.Base64&#x27;</span> not instance of <span class="string">&#x27;Reference: org.apache.commons.codec.binary.BaseNCodec&#x27;</span> (declaration of <span class="string">&#x27;d.w.b.f.a&#x27;</span> appears in /data/app/xxx.xxx.yyldy-naDf47h1LBlsvDDqMvd1rw==/base.apk!classes3.dex)</span><br><span class="line">        at d.w.b.f.a.a(AESHelper.java:<span class="number">39</span>)</span><br><span class="line">        at d.w.b.b.b.a(RemoteClient.java:<span class="number">119</span>)</span><br><span class="line">        at b.a.b.a.b(RequestApi.java:<span class="number">2739</span>)</span><br><span class="line">        at b.a.i.a.k.b(IsExistIMAccount.java:<span class="number">58</span>)</span><br><span class="line">        at xxx.xxx.view.login.WelcomeActivity.onCreate(WelcomeActivity.java:<span class="number">95</span>)</span><br><span class="line">        at android.app.Activity.performCreate(Activity.java:<span class="number">7458</span>)</span><br><span class="line">        at android.app.Activity.performCreate(Activity.java:<span class="number">7448</span>)</span><br><span class="line">        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:<span class="number">1286</span>)</span><br><span class="line">        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:<span class="number">3409</span>)</span><br><span class="line">        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:<span class="number">3614</span>)</span><br><span class="line">        at android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:<span class="number">86</span>)</span><br><span class="line">        at android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:<span class="number">108</span>)</span><br><span class="line">        at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:<span class="number">68</span>)</span><br><span class="line">        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:<span class="number">2199</span>)</span><br><span class="line">        at android.os.Handler.dispatchMessage(Handler.java:<span class="number">112</span>)</span><br><span class="line">        at android.os.Looper.loop(Looper.java:<span class="number">216</span>)</span><br><span class="line">        at android.app.ActivityThread.main(ActivityThread.java:<span class="number">7625</span>)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:<span class="number">524</span>)</span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">987</span>)</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">AESEncrypt</span><span class="params">(String plainText)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">encryptedValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Key</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(keyWord.getBytes(), <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES/CBC/PKCS7Padding&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] byteContent = plainText.getBytes(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, key, <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>(_key1));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidAlgorithmParameterException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] encValue = cipher.doFinal(byteContent);</span><br><span class="line">        <span class="comment">//把上面这句注释掉，改成底下那句</span></span><br><span class="line">        <span class="comment">//encryptedValue = new String(new Base64().encode(encValue));</span></span><br><span class="line">        encryptedValue = <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64(encValue));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> encryptedValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="android-9-0-升级后遇到json-解析异常，需要改成Gson-方式"><a href="#android-9-0-升级后遇到json-解析异常，需要改成Gson-方式" class="headerlink" title="android 9.0 升级后遇到json 解析异常，需要改成Gson 方式"></a>android 9.0 升级后遇到json 解析异常，需要改成Gson 方式</h3><p>遇到的类ShoppingCartFragment类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建选中的id集合,用于获取购物车商品及提交结算时验证使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">generateSelectIdList</span><span class="params">(NewShoppingCartBean bean)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (bean != <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="type">ItemCartIds</span> <span class="variable">itemCartIds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ItemCartIds</span>();</span><br><span class="line">		List&lt;ItemCartIds.ItemCartId&gt; idList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (NewShoppingCartBean.ShoppingCartBean shoppingCartBean : bean.getShoppingCartList()) &#123;</span><br><span class="line">			<span class="keyword">for</span> (NewShoppingCartBean.ShoppingCartBean.CartActivityItemBean cartActivityItemBean : shoppingCartBean.getCartActivityItemList()) &#123;</span><br><span class="line">				<span class="keyword">for</span> (NewShoppingCartBean.ShoppingCartBean.CartActivityItemBean.CartItemBean cartItemBean : cartActivityItemBean.getCartItemList()) &#123;</span><br><span class="line">					ItemCartIds.<span class="type">ItemCartId</span> <span class="variable">itemCartId</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ItemCartIds</span>().<span class="keyword">new</span> <span class="title class_">ItemCartId</span>();</span><br><span class="line">					<span class="keyword">if</span> (cartItemBean.getIsSelected()) &#123;</span><br><span class="line">						itemCartId.setItemCartId(cartItemBean.getItemCartId());</span><br><span class="line">						idList.add(itemCartId);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				itemCartIds.setItemCartIds(idList);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">		<span class="type">String</span> <span class="variable">idsStr</span> <span class="operator">=</span>  gson.toJson(itemCartIds);<span class="comment">//需要进行替换itemCartIds，改为首字母大写，否则报错</span></span><br><span class="line"><span class="comment">//            String idsStr = JSON.toJSONString(itemCartIds);//需要进行替换itemCartIds，改为首字母大写，否则报错</span></span><br><span class="line">		Debug.e(idsStr);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> ListUtils.isEmpty(itemCartIds.getItemCartIds()) ? <span class="string">&quot;&quot;</span> : idsStr.contains(<span class="string">&quot;itemCartIds&quot;</span>) ? idsStr.replace(<span class="string">&quot;itemCartIds&quot;</span>, <span class="string">&quot;ItemCartIds&quot;</span>) : idsStr;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Cleartext-HTTP-traffic-to-xxx-not-permitted"><a href="#Cleartext-HTTP-traffic-to-xxx-not-permitted" class="headerlink" title="Cleartext HTTP traffic to xxx not permitted"></a>Cleartext HTTP traffic to xxx not permitted</h3><p>问题：升级到Android9 出现“Cleartext HTTP traffic to xxx not permitted”</p>
<p>针对下一代 Android 系统(Android P) 的应用程序，将要求默认使用加密连接。解决方法有：</p>
<ul>
<li><p>APP改用https请求</p>
</li>
<li><p>targetSdkVersion 降到27以下</p>
</li>
<li><p>最终暴力解决</p>
<ol>
<li>在app的res&#x2F;xml下新建 network_security_config.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2</span>. 在AndroidManifest.xml中</span><br><span class="line">```<span class="keyword">xml</span></span><br><span class="line"><span class="title">&lt;application</span></span><br><span class="line">        ...</span><br><span class="line">        android:<span class="attr">networkSecurityConfig=</span><span class="string">&quot;@xml/network_security_config&quot;</span>&gt;</span><br><span class="line"><span class="tag">&lt;/application&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓版本</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义接口</title>
    <url>/posts/635175876/</url>
    <content><![CDATA[<h1 id="自定义接口实现类似于枚举的功能"><a href="#自定义接口实现类似于枚举的功能" class="headerlink" title="自定义接口实现类似于枚举的功能"></a>自定义接口实现类似于枚举的功能</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.support.annotation.IntDef;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="meta">@IntDef(&#123;PageTypeAnn.HOME_PAGE, PageTypeAnn.FOUND_PAGE, PageTypeAnn.CUSTOM_PAGE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PageTypeAnn&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">HOME_PAGE</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">FOUND_PAGE</span> <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line">    <span class="type">int</span> <span class="variable">CUSTOM_PAGE</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@Retention限制存在的时间</p>
<p>@IntDef限制传入的数据。（@StringDef、@LongDef）</p>
</blockquote>
<h1 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a><a href="https://www.jianshu.com/p/47834f36c2d1">元注解</a></h1><p>可以理解为最根本的注解，其他的注解是可以由此来衍生的，作用就是注解其他注解。</p>
<p>在Java5中有几个元注解：</p>
<ol>
<li><p>@Target</p>
<p>说明Annotation所修饰的对象范围。用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</p>
<p>Annotation可被用于：</p>
<ul>
<li>packages</li>
<li>types（类、接口、枚举、Annotation类型）</li>
<li>类型成员（方法、构造方法、成员变量、枚举值）</li>
<li>方法参数</li>
<li>本地变量（循环变量、catch参数等）</li>
</ul>
<p>取值（ElementType）有：</p>
<ul>
<li>CONSTRUCTOR：用于描述构造器</li>
<li>FIELD：用于描述域</li>
<li>LOCAL_VARIABLE：用于描述局部变量</li>
<li>METHOD：用于描述方法</li>
<li>PACKAGE：用于描述包</li>
<li>PARAMETER：用于描述参数</li>
<li>TYPE：用于描述类、接口（包括注解类型）或者enum声明</li>
</ul>
</li>
<li><p>@Retention</p>
<p>定义该Annotation被保留的时间长短：有些Annotation仅出现在源代码中，被编译器丢弃；有些被编译在class文件中；编译在class中的Annotation可能会被虚拟机忽略，也有在class被装载时被读取（PS：不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个<code>meta-Annotation</code>可以对Annotation的“生命周期”限制。</p>
<p>作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）</p>
<p>取值（RetentionPoicy）有：</p>
<ul>
<li>SOURCE：在源代码中有效。注解的信息会被编译器抛弃，不会留在class文件中</li>
<li>CLASS：在class文件中有效。注解的信息被保留在class文件（字节码文件）中，但编译时不会被虚拟机读取在运行时。</li>
<li>RUNTIME：在运行时有效。注解的信息被保留在class文件（字节码文件）中，当程序编译时，会被虚拟机保留在运行时。</li>
</ul>
</li>
<li><p>@Documented</p>
<p>用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。</p>
</li>
<li><p>@Inherited</p>
<p>是个标记注解。阐述某个被标记的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。</p>
<p>注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。</p>
<p>当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java代码片段</category>
      </categories>
      <tags>
        <tag>Java代码片段</tag>
      </tags>
  </entry>
  <entry>
    <title>第三方-Retrofit</title>
    <url>/posts/515339211/</url>
    <content><![CDATA[<h1 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h1><p>Retrofit2：一个网络请求的适配器，将一个基本的Java接口通过动态代理的方式翻译成一个HTTP请求，并通过OkHttp去发送请求。此外它还具有强大的可扩展性，支持各种格式转换以及RxJava。</p>
<p><a href="https://www.jianshu.com/p/f2644cc784f3">参考链接</a></p>
<h2 id="简单例子："><a href="#简单例子：" class="headerlink" title="简单例子："></a>简单例子：</h2><ol>
<li>创建个请求的api接口，通过注解方式进行接口请求</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonalProtocol</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@FormUrlEncoded</span></span><br><span class="line">    <span class="meta">@POST(&quot;user/personal_list_info&quot;)</span></span><br><span class="line">    Call&lt;Response&lt;PersonalInfo&gt;&gt; <span class="title function_">getPersonalListInfo</span><span class="params">(<span class="meta">@Field(&quot;cur_page&quot;)</span> <span class="type">int</span> page)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>@FormUrlEncoded</code>注解表示Form表单，另外还有<code>@Multipart</code>等注解，如果接口不需要传递参数，那么<code>@FormUrlEncoded</code>以及<code>@Multipart</code>需要去掉，具体原因后面章节会讲到。<br><code>@POST</code>表示post请求，此外还可以使用<code>@GET</code>请求</p>
</blockquote>
<ol start="2">
<li>使用Retrofit来请求数据</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">requestRetrofit</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//其中build()内有创建了okhttpClient（底层用的okhttp3）</span></span><br><span class="line">    <span class="type">Retrofit</span> <span class="variable">retrofit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder().baseUrl(<span class="string">&quot;www.xxx.com&quot;</span>).build();</span><br><span class="line">    <span class="type">PersonalProtocol</span> <span class="variable">personalProtocol</span> <span class="operator">=</span> retrofit.create(PersonalProtocol.class);</span><br><span class="line">    <span class="comment">//Retrofit2中Call接口的默认实现是OkHttpCall，它默认使用OkHttp3作为底层http请求client</span></span><br><span class="line">    Call&lt;Response&lt;PersonalInfo&gt;&gt; call = personalProtocol.getPersonalListInfo(<span class="number">12</span>);</span><br><span class="line">    call.enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>&lt;Response&lt;PersonalInfo&gt;&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(Call&lt;Response&lt;PersonalInfo&gt;&gt; call, Response&lt;Response&lt;PersonalInfo&gt;&gt; response)</span> &#123;</span><br><span class="line">            <span class="comment">//数据请求成功</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Call&lt;Response&lt;PersonalInfo&gt;&gt; call, Throwable t)</span> &#123;</span><br><span class="line">            <span class="comment">//数据请求失败</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面例子的Retrofit对象还可以指定OkHttpClient等设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"><span class="type">Retrofit</span> <span class="variable">retrofit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder().baseUrl(<span class="string">&quot;www.xxx.com&quot;</span>)</span><br><span class="line">    .client(okHttpClient)</span><br><span class="line">    .addConverterFactory(GsonConverterFactory.create(buildGson()))</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure>

<h2 id="与RxJava配合使用"><a href="#与RxJava配合使用" class="headerlink" title="与RxJava配合使用"></a>与RxJava配合使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonalProtocol</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@FormUrlEncoded</span></span><br><span class="line">    <span class="meta">@POST(&quot;user/personal_list_info&quot;)</span></span><br><span class="line">    Observable&lt;PersonalInfo&gt; <span class="title function_">getPersonalListInfo</span><span class="params">(<span class="meta">@Field(&quot;cur_page&quot;)</span> <span class="type">int</span> page)</span>;</span><br><span class="line">    <span class="comment">//    Call&lt;Response&lt;PersonalInfo&gt;&gt; getPersonalListInfo(@Field(&quot;cur_page&quot;) int page);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">requestRetrofit</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">    <span class="type">Retrofit</span> <span class="variable">retrofit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder().baseUrl(<span class="string">&quot;www.xxx.com&quot;</span>)</span><br><span class="line">        .client(okHttpClient)</span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create(buildGson()))</span><br><span class="line">        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">        .build();</span><br><span class="line">    <span class="type">PersonalProtocol</span> <span class="variable">personalProtocol</span> <span class="operator">=</span> retrofit.create(PersonalProtocol.class);</span><br><span class="line">    rx.Observable&lt;PersonalInfo&gt; observable  = personalProtocol.getPersonalListInfo(<span class="number">12</span>);</span><br><span class="line">    observable.subscribeOn(Schedulers.io()) </span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())<span class="comment">//最后在主线程中执行</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Subscriber</span>&lt;PersonalInfo&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCompleted</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">                <span class="comment">//请求失败</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(PersonalInfo personalInfo)</span> &#123;</span><br><span class="line">                <span class="comment">//请求成功</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整例子"><a href="#完整例子" class="headerlink" title="完整例子"></a>完整例子</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app\build.gradle</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//network</span></span><br><span class="line">    api(<span class="string">&quot;com.squareup.retrofit2:retrofit:2.6.0&#125;&quot;</span>) &#123;</span><br><span class="line">        exclude <span class="attr">module:</span> <span class="string">&#x27;okhttp&#x27;</span></span><br><span class="line">        exclude <span class="attr">module:</span> <span class="string">&#x27;okio&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    implementation(<span class="string">&quot;com.squareup.retrofit2:converter-gson:2.6.0&quot;</span>]) &#123;</span><br><span class="line">        exclude <span class="attr">module:</span> <span class="string">&#x27;gson&#x27;</span></span><br><span class="line">        exclude <span class="attr">module:</span> <span class="string">&#x27;okhttp&#x27;</span></span><br><span class="line">        exclude <span class="attr">module:</span> <span class="string">&#x27;okio&#x27;</span></span><br><span class="line">        exclude <span class="attr">module:</span> <span class="string">&#x27;retrofit&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    implementation(<span class="string">&quot;com.squareup.retrofit2:adapter-rxjava2:2.6.0&quot;</span>]) &#123;</span><br><span class="line">        exclude <span class="attr">module:</span> <span class="string">&#x27;rxjava&#x27;</span></span><br><span class="line">        exclude <span class="attr">module:</span> <span class="string">&#x27;okhttp&#x27;</span></span><br><span class="line">        exclude <span class="attr">module:</span> <span class="string">&#x27;retrofit&#x27;</span></span><br><span class="line">        exclude <span class="attr">module:</span> <span class="string">&#x27;okio&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    implementation <span class="string">&quot;com.squareup.okhttp3:okhttp:3.12.3&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;com.google.code.gson:gson:2.8.5&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//rxjava</span></span><br><span class="line">    implementation <span class="string">&quot;io.reactivex.rxjava2:rxjava:2.2.2&quot;</span></span><br><span class="line">    implementation <span class="string">&quot;io.reactivex.rxjava2:rxandroid:2.1.0&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//loggerInterceptor</span></span><br><span class="line">    implementation <span class="string">&quot;com.squareup.okhttp3:logging-interceptor:3.11.0&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Klog</span></span><br><span class="line">    implementation <span class="string">&quot;com.github.zhaokaiqiang.klog:library:1.6.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//AndroidManifest.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class="line">    //...</span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建公共常量类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constants</span> &#123;</span><br><span class="line">    <span class="comment">// 测试暂时用 玩Android api</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BASE_URL</span> <span class="operator">=</span> <span class="string">&quot;https://www.wanandroid.com&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建首页的几个实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeArticleEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> errorCode;</span><br><span class="line">    <span class="keyword">private</span> String errorMsg;</span><br><span class="line">    <span class="keyword">private</span> ArticleData data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getErrorCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setErrorCode</span><span class="params">(<span class="type">int</span> errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.errorCode = errorCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getErrorMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setErrorMsg</span><span class="params">(String errorMsg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.errorMsg = errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ArticleData <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(ArticleData data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeArticleDetail</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long cache_id;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> String chapterName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> collect;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String link;</span><br><span class="line">    <span class="keyword">private</span> String niceDate;</span><br><span class="line">    <span class="keyword">private</span> String superChapterName;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getCache_id</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cache_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCache_id</span><span class="params">(Long cache_id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cache_id = cache_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAuthor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthor</span><span class="params">(String author)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getChapterName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> chapterName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChapterName</span><span class="params">(String chapterName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chapterName = chapterName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCollect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> collect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCollect</span><span class="params">(<span class="type">boolean</span> collect)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.collect = collect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLink</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> link;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLink</span><span class="params">(String link)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.link = link;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNiceDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> niceDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNiceDate</span><span class="params">(String niceDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.niceDate = niceDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSuperChapterName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> superChapterName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSuperChapterName</span><span class="params">(String superChapterName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.superChapterName = superChapterName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTitle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTitle</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleData</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> curPage;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> offset;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> over;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pageCount;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> total;</span><br><span class="line">    <span class="keyword">private</span> List&lt;HomeArticleDetail&gt; datas;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> curPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurPage</span><span class="params">(<span class="type">int</span> curPage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.curPage = curPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOffset</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> offset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOffset</span><span class="params">(<span class="type">int</span> offset)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.offset = offset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> over;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOver</span><span class="params">(<span class="type">boolean</span> over)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.over = over;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pageCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageCount</span><span class="params">(<span class="type">int</span> pageCount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pageCount = pageCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotal</span><span class="params">(<span class="type">int</span> total)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.total = total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;HomeArticleDetail&gt; <span class="title function_">getDatas</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> datas;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDatas</span><span class="params">(List&lt;HomeArticleDetail&gt; datas)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.datas = datas;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>网络</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@author</span>  : shenbh</span></span><br><span class="line"><span class="comment"> *     blog     : http://shenbh.top</span></span><br><span class="line"><span class="comment"> *     time     : 2020/5/26 17:08</span></span><br><span class="line"><span class="comment"> *     email    ：shenbh@qq.com</span></span><br><span class="line"><span class="comment"> *     desc     : 返回数据处理</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseObservaer</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Observer</span>&lt;Response&lt;T&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> BaseObservaer.class.getName();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSubscribe</span><span class="params">(Disposable d)</span> &#123;</span><br><span class="line">        KLog.v(TAG, <span class="string">&quot;onSubscribe:&quot;</span> + d.isDisposed());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(Response&lt;T&gt; tResponse)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tResponse.isSuccessful())&#123;</span><br><span class="line">            onSuccess(tResponse.body());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onFailure(tResponse.message());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">()</span> &#123;</span><br><span class="line">        KLog.v(TAG, <span class="string">&quot;...onComplete...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        KLog.v(TAG, <span class="string">&quot;onError:&quot;</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网络请求失败时回调的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(String message)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网络请求成功时回调的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(T data)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@author</span>  : shenbh</span></span><br><span class="line"><span class="comment"> *     blog     : http://shenbh.top</span></span><br><span class="line"><span class="comment"> *     time     : 2020/5/26 17:03</span></span><br><span class="line"><span class="comment"> *     email    ：shenbh@qq.com</span></span><br><span class="line"><span class="comment"> *     desc     : 线程切换等操作</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NetScheduler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ObservableTransformer&lt;T,T&gt; <span class="title function_">compose</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upstream-&gt;upstream.subscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .debounce(<span class="number">1</span>, TimeUnit.SECONDS);<span class="comment">//防止1s内重复请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@author</span>  : shenbh</span></span><br><span class="line"><span class="comment"> *     blog     : http://shenbh.top</span></span><br><span class="line"><span class="comment"> *     time     : 2020/5/26 16:36</span></span><br><span class="line"><span class="comment"> *     email    ：shenbh@qq.com</span></span><br><span class="line"><span class="comment"> *     desc     : 所有请求的api</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Api</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首页文章</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Observable&lt;HomeArticleEntity&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GET(&quot;/article/list/&#123;page&#125;/json&quot;)</span></span><br><span class="line">    Observable&lt;Response&lt;HomeArticleEntity&gt;&gt; <span class="title function_">homeArticles</span><span class="params">(<span class="meta">@Path(&quot;page&quot;)</span> <span class="type">int</span> page)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@author</span>  : shenbh</span></span><br><span class="line"><span class="comment"> *     blog     : http://shenbh.top</span></span><br><span class="line"><span class="comment"> *     time     : 2020/5/26 16:42</span></span><br><span class="line"><span class="comment"> *     email    ：shenbh@qq.com</span></span><br><span class="line"><span class="comment"> *     desc     : api管理类</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Retrofit client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Api INSTANCE;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Api <span class="title function_">getApiInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(ApiManager.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>)&#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">ApiManager</span>().getApi();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Api <span class="title function_">getApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> client.create(Api.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ApiManager</span><span class="params">()</span>&#123;</span><br><span class="line">        client = <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">                .baseUrl(Constants.BASE_URL)</span><br><span class="line">                .client(getHttpClient())</span><br><span class="line">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OkHttpClient <span class="title function_">getHttpClient</span><span class="params">()</span> &#123;</span><br><span class="line">        OkHttpClient.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder();</span><br><span class="line">        <span class="comment">//修改日志拦截器，使用KLog库打印网络日志</span></span><br><span class="line">        <span class="type">HttpLoggingInterceptor</span> <span class="variable">httpLoggingInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpLoggingInterceptor</span>(<span class="keyword">new</span> <span class="title class_">HttpLoggingInterceptor</span>.Logger() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String message)</span> &#123;</span><br><span class="line">                <span class="comment">// 如果是 json 格式内容则打印 json</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isJson</span> <span class="operator">=</span> (message.startsWith(<span class="string">&quot;&#123;&quot;</span>) &amp;&amp; message.endsWith(<span class="string">&quot;&#125;&quot;</span>)) ||</span><br><span class="line">                        (message.startsWith(<span class="string">&quot;[&quot;</span>) &amp;&amp; message.endsWith(<span class="string">&quot;]&quot;</span>));</span><br><span class="line">                <span class="keyword">if</span> (isJson) &#123;</span><br><span class="line">                    KLogUtil.printLine(<span class="string">&quot;network request&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">                    KLog.v(<span class="string">&quot;network request&quot;</span>,message);</span><br><span class="line">                    KLogUtil.printLine(<span class="string">&quot;network request&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    KLog.v(<span class="string">&quot;network request&quot;</span>,message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        httpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line">        builder.addNetworkInterceptor(httpLoggingInterceptor)</span><br><span class="line">                .connectTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">                .readTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">                .writeTimeout(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Activity中使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BASE_URL</span> <span class="operator">=</span> <span class="string">&quot;https://www.wanandroid.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        wanandroidHomeData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 玩安卓首页文章数据请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">wanandroidHomeData</span><span class="params">()</span>&#123;</span><br><span class="line">        ApiManager.getApiInstance().homeArticles(<span class="number">0</span>)</span><br><span class="line">        .compose(NetScheduler.compose())</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">BaseObservaer</span>&lt;HomeArticleEntity&gt;()&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(String message)</span> &#123;</span><br><span class="line">                        <span class="comment">//网络请求失败后的处理</span></span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(HomeArticleEntity data)</span> &#123;</span><br><span class="line">                        <span class="comment">//网络请求成功后的处理</span></span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Retrofit（hencoder）"><a href="#Retrofit（hencoder）" class="headerlink" title="Retrofit（hencoder）"></a>Retrofit（hencoder）</h1><h2 id="Retrofit使用方法简介"><a href="#Retrofit使用方法简介" class="headerlink" title="Retrofit使用方法简介"></a>Retrofit使用方法简介</h2><ol>
<li><p>创建一个interface作为Web Service的请求稽核，在里面用注解（Annotation）写入需要配置的请求方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GitHubService</span>&#123;</span><br><span class="line">    <span class="meta">@GET(&quot;users/&#123;user&#125;/repos&quot;)</span></span><br><span class="line">    Call&lt;List&lt;Repo&gt;&gt; <span class="title function_">listRepos</span><span class="params">(<span class="meta">@Path(&quot;user&quot;)</span> String user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在正式代码里用<code>Retrofit</code>创建出 interface 的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Retrofit</span> <span class="variable">retrofit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">    .baseUrl(<span class="string">&quot;https://api.github.com/&quot;</span>)</span><br><span class="line">    .build();</span><br><span class="line"><span class="type">GitHubService</span> <span class="variable">service</span> <span class="operator">=</span> retrofit.create(GitHubService.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用创建出的 Service 实例的对应方法，创建出相应的可以用来发起网络请求的<code>Call</code>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Call&lt;List&lt;Repo&gt;&gt; repos = service.listRepos(<span class="string">&quot;octocat&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>Call.execute()</code>或者<code>Call.enqueue()</code>来发起请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">repos.enqueue(callback);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Retrofit源码结构总结"><a href="#Retrofit源码结构总结" class="headerlink" title="Retrofit源码结构总结"></a>Retrofit源码结构总结</h2><ul>
<li><p>通过<code>Retrofit.create(Class)</code>方法创建出 Service interface 的实例，从而使得 Service 中配置的方法变得可用，这是 Retrofit 代码结构得核心；</p>
</li>
<li><p><code>Retrofit.create()</code>方法内部，使用的是<code>Proxy.newProxyInstance()</code>方法来创建 Service 实例。这个方法会为参数中的多个 interface （具体到 Retrofit 来说，是固定传入一个 interface ）创建一个对象，这个对象实现了所有 interface 的每个方法，并且每个方法的实现都是雷同的：调用对象实例内部的一个 <code>InvocationHandler</code>成员变量的 <code>invoke()</code> 方法，并把自己的方法信息传递进去。这样就在实质上实现了代理逻辑：interface 中的方法全部由一个另外设定的 <code>InvocationHandler</code>对象来进行代理操作。并且，这些方法的具体实现是在运行时生成 interface 实例时才确定的，而不是在编译时（虽然在编译时就已经可以通过代码逻辑推断出来）。这就是网上所说的 “动态代理机制” 的具体含义。</p>
</li>
<li><p>因此，<code>invoke()</code>方法中的逻辑，就是 Retrofit 创建 Service 实例的关键。这个方法内有三行关键代码，共同组成了具体逻辑：</p>
<ol>
<li><p><code>ServiceMethod</code>的创建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServiceMethod&lt;Object, Object&gt; serviceMethod = (ServiceMethod&lt;Object,Object&gt;) loadServiceMethod(method);</span><br></pre></td></tr></table></figure>

<p>这行代码负责读取 interface 中原方法的信息（包括返回值类型、方法注解、参数类型、参数注解），并将这些信息做初步分析。</p>
</li>
<li><p><code>OkHttpCall</code>的创建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OkHttpCall&lt;Object&gt; okHttpCall = <span class="keyword">new</span> <span class="title class_">OkHttpCall</span>&lt;&gt;(serviceMethod, args);</span><br></pre></td></tr></table></figure>

<p><code>OkHttpCall</code>是<code>retrofit2.Call</code>的子类。这行代码负责将 ServiceMethod 封装进一个<code>retrofit2.Call</code>对象；而这个对象可以在需要的时候（例如它的<code>enqueue()</code>方法被调用的时候，利用 ServiceMethod 中包含的信息来创建一个 <code>okhttp3.Call</code> 对象，并调用这个<code>okhttp3.Call</code>对象来进行网络请求的发起，然后对结构进行预处理（如类型转换）。</p>
</li>
<li><p><code>adapt()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> serviceMethod.adapt(okHttpCall);</span><br></pre></td></tr></table></figure>

<p>这个方法会使用 ServiceMethod 中的 callAdapter 对象来把 okHttpCall 对象进行转换，生成一个新的 <code>retrofit2.Call</code> 对象，在这个新的 <code>Call</code> 对象中，后台线程发起的请求，会在相应返回后，从主线程中调用回调方法，实现线程的自动切换。</p>
<p>另外，这个方法不止可以生成新的 <code>retrofit2.Call</code>对象，也可以生成别的类型对象，例如 RxJava 的<code>Obervable</code>，来让 Retrofit 可以和 RxJava 结合使用。</p>
</li>
</ol>
</li>
</ul>
<p>思考：</p>
<ol>
<li><p>Retrofit的请求和返回是如何关联的？即如何确保回调到正确的位置？</p>
<p>答：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServiceMethod&lt;Object, Object&gt; serviceMethod = (ServiceMethod&lt;Object,Object&gt;) loadServiceMethod(method);</span><br></pre></td></tr></table></figure>

<p>这句话里面绑定了method与对象</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>hencoder</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot</title>
    <url>/posts/2772510250/</url>
    <content><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://spring.io/projects/spring-boot">Spring Boot文档</a></p>
<p><a href="https://start.spring.io/">快速构建Spring boot项目的网站</a></p>
<p>《Spring Boot+Vue全栈开发实战》王松</p>
<h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><ul>
<li>Java 8或9</li>
<li>Spring Framework 5.0.8.RELEASE或更高版本</li>
<li>构建工具的版本要求为Maven 3.2+或Gradle 4</li>
</ul>
<h1 id="创建Maven工程"><a href="#创建Maven工程" class="headerlink" title="创建Maven工程"></a>创建Maven工程</h1><h2 id="通过命令创建Maven工程"><a href="#通过命令创建Maven工程" class="headerlink" title="通过命令创建Maven工程"></a>通过命令创建Maven工程</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate <span class="attribute">-DgroupId</span>=org.sang <span class="attribute">-DartifactId</span>=chapter01 <span class="attribute">-DarchetypeArtifactId</span>=maven-archetype-quickstart <span class="attribute">-DinteractiveMode</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>-DgroupId</code> 组织Id（项目包名）</p>
<p><code>-DartifactId</code> ArtifactId（项目名称或者模块名称）</p>
<p><code>-DarchetypeArtifactId</code> 项目骨架</p>
<p><code>-DinteractiveMode</code> 是否使用交互模式</p>
</blockquote>
<p>使用命令将项目创建好之后，直接用Eclipse或者IntelliJ IDEA打开即可</p>
<h2 id="Eclipse中创建Maven工程"><a href="#Eclipse中创建Maven工程" class="headerlink" title="Eclipse中创建Maven工程"></a>Eclipse中创建Maven工程</h2><ol>
<li>File–New–Maven Project</li>
<li>选中Use default Workspace location复选框</li>
<li>选择项目骨架，保持默认设置即可</li>
<li>输入项目信息，点击Finish完成创建</li>
</ol>
<h2 id="IntelliJ-IDEA创建Maven工程"><a href="#IntelliJ-IDEA创建Maven工程" class="headerlink" title="IntelliJ IDEA创建Maven工程"></a>IntelliJ IDEA创建Maven工程</h2><ol>
<li><p>创建项目时选择Maven，但可不必选择项目骨架，直接点Next按钮即可</p>
<p>File–New–New Project–Maven</p>
</li>
<li><p>输入组织名称、模块名称、项目版本号等信息</p>
</li>
<li><p>选择项目位置，点击Finish，完成创建</p>
</li>
</ol>
<h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>spring-boot-starter-parent是个特殊的Starter，提供了些Maven的默认配置，同时还提供了dependency-management，可使在引入其他依赖时不必输入版本号，方便依赖管理。</p>
</blockquote>
<p>Spring Boot提供的Starter非常多，这些Starter主要为第三方库提供自动配置，例如开发个Web项目，需要引入Web的Starter：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写启动类"><a href="#编写启动类" class="headerlink" title="编写启动类"></a>编写启动类</h3><p>1、java目录下创建项目的包，包里创建一个App类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//App.class：告诉Spring哪个是主要组件</span></span><br><span class="line">        <span class="comment">//args：运行时输入的其他参数</span></span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@EnableAutoConfiguration 表示开启自动化配置。</p>
<p>由于项目中添加了spring-boot-starterweb依赖，因此开启了自动化配置之后会自动进行Spring和Spring MVC的配置</p>
<p>@ComponentScan 配置这个才会进行包扫描，会把控制器注册到Spring MVC容器中</p>
</blockquote>
<p>也可以用 <code>@SpringBootApplication</code>来代替<code>@EnableAutoConfiguration</code>和<code>@ComponentScan</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、创建一个控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="启动Spring-Boot"><a href="#启动Spring-Boot" class="headerlink" title="启动Spring Boot"></a>启动Spring Boot</h3><h4 id="方式一：Maven命令启动"><a href="#方式一：Maven命令启动" class="headerlink" title="方式一：Maven命令启动"></a>方式一：Maven命令启动</h4><ol>
<li><p>在命令行窗口下，切换到项目目录下</p>
</li>
<li><p>mac：(<code>mvnw/mvn</code>)</p>
<p><code>./mvnw spring-boot:run</code>（maven）、<code>./gradlew bootRun</code>（gradle）</p>
<p>windows：(<code>mvnw/mvn</code>)</p>
<p><code>mvnw spring-boot:run</code>（maven）、<code>gradlew bootRun</code>（gradle）</p>
</li>
</ol>
<h4 id="方式二：直接运行main方法"><a href="#方式二：直接运行main方法" class="headerlink" title="方式二：直接运行main方法"></a>方式二：直接运行main方法</h4><h4 id="方式三：打包启动"><a href="#方式三：打包启动" class="headerlink" title="方式三：打包启动"></a>方式三：打包启动</h4><p>首先添加个plugin到pom.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springframework-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后运行mvn命令进行打包</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">mvn <span class="keyword">package</span></span><br></pre></td></tr></table></figure>

<p>打包完成会在项目的target下生成个jar文件，通过<code>java -jar</code>命令直接启动这个jar文件</p>
<p>如：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">java</span> -jar .\chapter01-<span class="number">1</span>.<span class="number">0</span>-SHAPSHOT.jar</span><br></pre></td></tr></table></figure>



<h2 id="Spring-Boot的简便创建方式"><a href="#Spring-Boot的简便创建方式" class="headerlink" title="Spring Boot的简便创建方式"></a>Spring Boot的简便创建方式</h2><h3 id="在线创建"><a href="#在线创建" class="headerlink" title="在线创建"></a>在线创建</h3><p><a href="https://start.spring.io/">快速构建Spring boot项目的网站</a></p>
<h3 id="使用IntelliJ-IDEA创建"><a href="#使用IntelliJ-IDEA创建" class="headerlink" title="使用IntelliJ IDEA创建"></a>使用IntelliJ IDEA创建</h3><ol>
<li><p>New Project–Spring Initializr</p>
</li>
<li><p>输入项目基本信息（组织Id、模块名称、项目构建类型、最终生成包的类型、Java版本、开发语言、项目版本号、项目名称、项目描述、项目的包）</p>
</li>
<li><p>选择依赖</p>
</li>
<li><p>选择项目创建路径</p>
</li>
</ol>
<h3 id="使用STS创建"><a href="#使用STS创建" class="headerlink" title="使用STS创建"></a>使用STS创建</h3><p>New–Spring Starter Project</p>
<p>其他同IntelliJ IDEA中基本一致</p>
<h1 id="Spring-Boot-基础配置"><a href="#Spring-Boot-基础配置" class="headerlink" title="Spring Boot 基础配置"></a>Spring Boot 基础配置</h1><h2 id="不使用-spring-boot-starter-parent"><a href="#不使用-spring-boot-starter-parent" class="headerlink" title="不使用 spring-boot-starter-parent"></a>不使用 <code>spring-boot-starter-parent</code></h2><p><code>spring-boot-starter-parent</code>主要提供了</p>
<ul>
<li>Java版本默认使用1.8</li>
<li>编码格式默认使用UTF-8</li>
<li>提供Dependency Management进行项目依赖的版本管理</li>
<li>默认的资源过滤与插件配置</li>
</ul>
<p>使用<code>spring-boot-starter-parent</code>虽然方便，但开发微服务项目或者多模块时一般使用公司自己的parent，这是还想进行项目依赖版本的统一管理，就需要使用<code>dependencyManagement</code>来实现，就不用继承<code>spring-boot-starter-parent</code>了，但Java版本、编码格式等需要手动配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>自己配置Java版本（添加个plugin）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>自己配置编码格式（在<code>pom.xml</code>中加入如下配置）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Spring-BootApplication"><a href="#Spring-BootApplication" class="headerlink" title="@Spring BootApplication"></a><code>@Spring BootApplication</code></h2><p><code>@Spring BootApplication</code>是加在项目的启动类上的。</p>
<p><code>@Spring BootApplication</code>实际上是一个组合注解，定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Spring</span> BootApplication</span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters=&#123;</span></span><br><span class="line"><span class="meta">    @Filter(type=FilterType.CUSTOM, classes=TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">    @Filter(type=FilterType.CUSTOM,classes=AutoConfigurationExcludeFilter.class)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Spring BootApplication&#123;</span><br><span class="line">    <span class="comment">//略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个注解由三个注解组成</p>
<p>第一个：<code>@Spring BootConfiguration</code>的定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Spring BootConfiguration&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原来就是一个<code>@Configuration</code>，所以<code>@Spring BootApplication</code>的功能就是表明这是一个配置类，开发者可以在这个类中配置<code>Bean</code>。这个类所扮演的角色类似于<code>Spring</code>中的<code>applicationContext.xml</code>文件的角色</p>
</blockquote>
<p>第二个：<code>@EnableAutoConfiguration</code>表示开启自动化配置。Spring Boot中的自动化配置是非侵入式的，在任意时刻都可以用自定义皮诶之替代自动化配置中的某一个配置。</p>
<p>第三个：<code>@ComponentScan</code>完成包扫描，是Spring中的功能。<code>@ComponentScan</code>默认扫描的是当前类所在包下的。因此建议把启动类放在<strong>根包</strong>中。</p>
<blockquote>
<p>项目启动类中的<code>@ComponentScan</code>会扫描<code>@Service</code>、<code>@Repository</code>、<code>@Component</code>、<code>Controller</code>、<code>@RestController</code>、<code>Configuration</code>注解的类</p>
</blockquote>
<p>虽然项目启动类包含<code>@Configuration</code>注解，但开发者可创建个新的类专门用来配置Bean，便于管理。这个类只需要加上<code>@Configuration</code>注解即可，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="定义banner"><a href="#定义banner" class="headerlink" title="定义banner"></a>定义banner</h2><p>Spring Boot项目启动时会打印一个banner，这个banner可定制，在resources目录下创建个banner.txt，这个文本内容会在启动时打印出来。</p>
<p>若想讲TXT文本设置成艺术字体，有以下几个在线网站可供参考：</p>
<ul>
<li><a href="http://www.network-science.de/ascii/">http://www.network-science.de/ascii/</a></li>
<li><a href="http://www.kammerl.de/ascii/AsciiSignature.php">http://www.kammerl.de/ascii/AsciiSignature.php</a></li>
<li><a href="http://patorjk.com/software/taag">http://patorjk.com/software/taag</a></li>
</ul>
<p>想关闭banner，可通过修改项目启动类的main方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">SpringApplicationBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>(Chapter012Application.class);</span><br><span class="line">    builder.bannerMode(Banner.Mode.OFF).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Web容器配置"><a href="#Web容器配置" class="headerlink" title="Web容器配置"></a>Web容器配置</h2><p>Spring Boot可内置Tomcat、Jetty、Undertow、Netty等容器。当添加了<code>spring-boot-starter-web</code>依赖后，默认使用Tomcat作为Web容器。</p>
<h3 id="Tomcat配置"><a href="#Tomcat配置" class="headerlink" title="Tomcat配置"></a>Tomcat配置</h3><p>如果需要对Tomcat做进一步配置，可在<code>application.properties</code>中配置：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Web容器的端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="number">8081</span></span><br><span class="line"><span class="comment">#当项目出错时跳转去的页面</span></span><br><span class="line"><span class="attr">server.error.path</span>=/error</span><br><span class="line"><span class="comment">#session失效的时间，30m表示30分钟，如果不写单位默认是秒。而Tomcat配置session过期时间单位是分钟，所以如果单位是秒的话，时间会转换为一个不超过所配置描述的最大分钟数，如配置119，默认单位秒，则实际session过期时间是1分钟</span></span><br><span class="line"><span class="attr">server.servlet.session.timeout</span>=<span class="number">30</span>m</span><br><span class="line"><span class="comment">#表示项目名称，不配置时默认为/。若配置了，要在访问路径中加上配置的路径</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=/chapter02</span><br><span class="line"><span class="comment">#表示Tomcat请求编码</span></span><br><span class="line"><span class="attr">server.tomcat.uri-encoding</span>=utf-<span class="number">8</span></span><br><span class="line"><span class="comment">#表示Tomcat最大线程数</span></span><br><span class="line"><span class="attr">server.tomcat.max-threads</span>=<span class="number">500</span></span><br><span class="line"><span class="comment">#存放Tomcat运行日志和临时文件的目录，若不配置默认使用系统的临时目录</span></span><br><span class="line"><span class="attr">server.tomcat.basedir</span>=/home/sang/tmp</span><br></pre></td></tr></table></figure>

<h3 id="HTTPS配置"><a href="#HTTPS配置" class="headerlink" title="HTTPS配置"></a>HTTPS配置</h3><p>jdk中提供了个Java数字证书管理工具keytool，在&#x2F;jdk&#x2F;bin目录下。可通过此工具生成一个数字证书：（在cmd窗口输入）</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">keytool</span> -genkey -alias tomcathttps -keyalg RSA -keysize <span class="number">2048</span> -keystore sang.p12 -validity <span class="number">364</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>-genkey 表示要创建一个新的密钥</p>
<p>-alias 表示keystore的别名</p>
<p>-keyalg 表示使用的加密算法是RSA，一种非对称加密算法</p>
<p>-keysize 表示密钥的长度</p>
<p>-keystore 表示生成的密钥存放位置</p>
<p>-validity 表示密钥的有效时间，单位是天</p>
</blockquote>
<p>会生成一个sang.p12的文件，此文件放到根目录下，再在<code>application.properties</code>中做如下配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.ssl.key-store</span>=sang.p12</span><br><span class="line"><span class="attr">server.ssl.key-alias</span>=tomcathttps</span><br><span class="line"><span class="attr">server.ssl.key-store-password</span>=<span class="number">123456</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>key-store 表示密钥文件名</p>
<p>key-alias 表示密钥别名</p>
<p>key-store-password 即在cmd命令执行过程中输入的密码</p>
</blockquote>
<p>配置成功后需要用 https 访问，Spring Boot 不支持同时在配置中启动HTTP和HTTPS。不过可以配置请求重定向（将HTTP重定向为HTTPS）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatConfig</span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    TomcatServletWebServerFactory <span class="title function_">tomcatServletWebServerFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">TomcatServletWebServerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">postProcessContext</span><span class="params">(Context context)</span>&#123;</span><br><span class="line">                <span class="type">SecurityConstraint</span> <span class="variable">constraint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecurityConstraint</span>();</span><br><span class="line">                constraint.setUserConstraint(<span class="string">&quot;CONFIDENTIAL&quot;</span>);</span><br><span class="line">                <span class="type">SecurityCollection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecurityCollection</span>();</span><br><span class="line">                collection.addPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">                constraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(constraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        factory.addAdditionalTomcatConnectors(createTomcatConnector());</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Connector <span class="title function_">createTomcatConnector</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Connector</span>(<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>);</span><br><span class="line">        connector.setScheme(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">        connector.setPort(<span class="number">8080</span>);</span><br><span class="line">        connector.setSecure(<span class="literal">false</span>);</span><br><span class="line">        connector.setRedirectPort(<span class="number">8081</span>);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将8080端口转发到8081上去</p>
</blockquote>
<h3 id="Jetty配置"><a href="#Jetty配置" class="headerlink" title="Jetty配置"></a>Jetty配置</h3><p>在 Spring Boot 中嵌入 Jetty，配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Undertow配置"><a href="#Undertow配置" class="headerlink" title="Undertow配置"></a>Undertow配置</h3><p>Undertow是红帽公司开源的Java服务器，具有非常好的性能，配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Peoperties配置"><a href="#Peoperties配置" class="headerlink" title="Peoperties配置"></a>Peoperties配置</h2><p>Spring Boot采用了大量的自动化配置，但实际项目中有些需要手动配置，就得在resources目录下的<code>application.properties</code>中修改（也可以使用YAML配置来替代<code>application.properties</code>配置）</p>
<p><code>application.properties</code>配置文件一共可出现在如下4个位置：</p>
<ul>
<li>项目根目录下的config文件夹中</li>
<li>项目根目录下</li>
<li>classpath下的config文件夹中</li>
<li>classpath下</li>
</ul>
<blockquote>
<p>加在的优先级依次降低</p>
</blockquote>
<p>如果用<code>application.yml</code>作为配置文件，配置文件的优先级与上面的一致。</p>
<p>默认名称是<code>application.properties</code>，若想改成自定义的名称，如 <code>app.properties</code>，在项目打包成jar包成功后，使用如下命令运行</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">java</span> -jar chapter02-<span class="number">2</span>-<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>-SHAPSHOT.jar --spring.config.name=app</span><br></pre></td></tr></table></figure>

<p>在运行时再制定配置文件的名称。使用 spring.config.location key 指定配置文件所在目录（注意需要以“&#x2F;”结束），代码如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">java -jar chapter02-<span class="number">2</span>-<span class="number">0.0</span>.<span class="number">1</span>-SHAPSHOT<span class="selector-class">.jar</span> <span class="attr">--spring</span><span class="selector-class">.config</span>.name=app <span class="attr">--spring</span><span class="selector-class">.config</span>.location=classpath:/</span><br></pre></td></tr></table></figure>

<h3 id="SpringBoot-Mybatis打印sql日志"><a href="#SpringBoot-Mybatis打印sql日志" class="headerlink" title="SpringBoot+Mybatis打印sql日志"></a>SpringBoot+Mybatis打印sql日志</h3><p>在<code>application.properties</code>中添加</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#cn</span><span class="selector-class">.monecity</span>.mapper是 *Mapper<span class="selector-class">.java</span> 所在的包名</span><br><span class="line">logging<span class="selector-class">.level</span><span class="selector-class">.cn</span><span class="selector-class">.monecity</span>.mapper=debug</span><br></pre></td></tr></table></figure>





<h2 id="类型安全配置属性"><a href="#类型安全配置属性" class="headerlink" title="类型安全配置属性"></a>类型安全配置属性</h2><p>无论 Properties 配置还是 YAML 配置，最终都会被加载到 Spring Environment 中。Spring 提供了@Value 注解以及 EnvironmentAware 接口来将 Spring Environment 中的数据注入到属性上，Spring Boot 对此进一步提出了类型安全配置属性（Type-safe Configuration Properties），这样即使在数据量非常庞大的情况下，也可以更加方便地将配置文件中的数据注入 Bean 中。考虑在<code>application.properties</code>中添加如下一段配置：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">book.name</span>=三国演义</span><br><span class="line"><span class="attr">book.author</span>=罗贯中</span><br><span class="line"><span class="attr">book.price</span>=<span class="number">30</span></span><br></pre></td></tr></table></figure>

<p>将这一段配置数据注入如下 Bean 中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String author;</span><br><span class="line">  <span class="keyword">private</span> Float price;</span><br><span class="line">  <span class="comment">//省略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@ConfigurationProperties中prefix属性描述了要加载的配置文件的前缀</p>
<p>如果配置文件是个YAML文件，那么可以将数据注入一个集合中。</p>
<p>Spring Boot 采用了一种宽松的规则来进行属性绑定，如果Bean中的属性名位authorName，那么配置文件中的属性可以是book</p>
<p>.author_name、book.author-name、book.authorName或者book.AUTHORNAME</p>
</blockquote>
<p>以上的配置可能会乱码，需要对中文进行转码：IntelliJ IDEA中 <code>File--Settings--Editor--File Encodings</code>选择全部的编码为UTF-8</p>
<p>最后创建BookController进行简单测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Book book;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/book&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">book</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> book.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在浏览器中输入 <code>localhost:8080/book</code>来看是不是页面展示<code>Book&#123;name=&#39;三国演义&#39;,author=&#39;罗贯中&#39;,price=30.0&#125;</code></p>
<h2 id="YAML配置"><a href="#YAML配置" class="headerlink" title="YAML配置"></a>YAML配置</h2><h3 id="YAML常规配置"><a href="#YAML常规配置" class="headerlink" title="YAML常规配置"></a>YAML常规配置</h3><p>YAML是JSON的超集，简介而强大，是一种专门用来书写配置文件的语言，可以替代<code>application.properties</code>。在创建一个Spring Boot项目时，引入的<code>spring-boot-starter-web</code>依赖间接地引入了<code>snakeyaml</code>依赖，<code>snakeyaml</code>会实现对YAML配置的解析。YAML的使用非常简单，利用缩进来表示层级关系，并且大小写敏感。在Spring Boot项目中使用YAML只需要在resources目录下创建一个<code>application.yml</code>文件即可，然后向<code>application.yml</code>中添加如下配置：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">server:</span></span><br><span class="line"><span class="symbol">  port:</span><span class="number">80</span></span><br><span class="line"><span class="symbol">  servlet:</span></span><br><span class="line">    context-path:/chapter02</span><br><span class="line"><span class="symbol">  tomcat:</span></span><br><span class="line">    uri-encoding:utf<span class="number">-8</span></span><br></pre></td></tr></table></figure>

<p>这段配置等效于<code>application.properties</code>中的</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="number">80</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=/chapter02</span><br><span class="line"><span class="attr">server.tomcat.uri-encoding</span>=utf-<span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>此时就可以将resources目录下的<code>application.properties</code>删除，完全使用YAML完成文件的配置。</p>
<h3 id="YAML复杂配置"><a href="#YAML复杂配置" class="headerlink" title="YAML复杂配置"></a>YAML复杂配置</h3><p>如：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">my:</span></span><br><span class="line"><span class="symbol">  name:</span>江南一点雨</span><br><span class="line"><span class="symbol">  address:</span>China</span><br></pre></td></tr></table></figure>

<p>像Properties配置文件一样，这一段配置也可以注入一个Bean中，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Class User&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//省略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>YAML还支持列表配置，例如：</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">my</span><span class="punctuation">:</span></span><br><span class="line">  name:江南一点雨</span><br><span class="line">  address:China</span><br><span class="line">  <span class="attribute">favorites</span><span class="punctuation">:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">足球</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">徒步</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Coding</span></span><br></pre></td></tr></table></figure>

<p>注入如下Bean中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; favorites;</span><br><span class="line">    <span class="comment">//省略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>还支持更复杂的配置，即集合中也可以是一个对象，例如：</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">my</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">users</span><span class="punctuation">:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">name: 江南一点雨</span></span><br><span class="line">      <span class="attribute">address</span><span class="punctuation">:</span> <span class="string">China</span></span><br><span class="line">      <span class="attribute">favorites</span><span class="punctuation">:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">足球</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">徒步</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Coding</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">name: Sang</span></span><br><span class="line">      <span class="attribute">address</span><span class="punctuation">:</span> <span class="string">GZ</span></span><br><span class="line">      <span class="attribute">favorites</span><span class="punctuation">:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">阅读</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">吉他</span></span><br></pre></td></tr></table></figure>

<p>这组配置在集合中放的是一个对象，一次可以注入如下集合中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">    <span class="comment">//省略 getter/setter</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; favorites;</span><br><span class="line">    <span class="comment">//省略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>YAML虽然方便，但也有缺陷，如无法使用<code>@PropertySource</code>注解加载YAML文件，如果项目中有这种需求，还是需要使用Properties格式的配置文件。</p>
<h2 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h2><p>应用于频繁切换开发环境、测试环境、生产环境的场景。</p>
<p>Spring对此提供了解决方案（<code>@Profile</code>注解）</p>
<p>Spring Boot得更加简洁，Spring Boot约定的不同环境下配置文件名称规则为 <code>application-&#123;profile&#125;.properties</code>，profile占位符表示当前环境的名称，具体配置步骤如下：</p>
<ol>
<li><p>创建配置文件</p>
<p>在resources目录下创建两个配置文件：</p>
<p><code>application-dev.properties</code>（开发环境的配置）</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">server</span>.<span class="keyword">port</span>=8080</span><br></pre></td></tr></table></figure>

<p><code>application-prod.properties</code>（生产环境的配置）</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">server</span>.<span class="keyword">port</span>=80</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置<code>application.properties</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=dev</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中dev 表示<code>application-dev.properties</code>启动</p>
<p>改成prod，表示<code>application-prod.properties</code>启动</p>
</blockquote>
</li>
<li><p>在代码中配置</p>
<p>对于第二步在<code>application.properties</code>中添加配置，也可以在代码中来完成。在启动类的main方法上添加如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SpringApplicationBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>(Chaper013Application.class);</span><br><span class="line">builder.application().setAdditionalProfiles(<span class="string">&quot;prod&quot;</span>);</span><br><span class="line">builder.run(args);</span><br></pre></td></tr></table></figure>
</li>
<li><p>项目启动时配置</p>
<p>对于第2和第3步提到的两种配置方式，也可以在将项目打成jar包后启动时，在命令行动态指定当前环境，示例命令如：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">java</span> -jar chapter01-<span class="number">3</span>-<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>-SHAPSHOT.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Spring-Boot-整合视图层技术"><a href="#Spring-Boot-整合视图层技术" class="headerlink" title="Spring Boot 整合视图层技术"></a>Spring Boot 整合视图层技术</h1><p>官方推荐的模板引擎是Thymeleaf，但对于FreeMarker也支持。不推荐使用JSP技术。</p>
<h1 id="Spring-Boot-整合Web开发"><a href="#Spring-Boot-整合Web开发" class="headerlink" title="Spring Boot 整合Web开发"></a>Spring Boot 整合Web开发</h1><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><h3 id="Filter"><a href="#Filter" class="headerlink" title="@Filter"></a>@Filter</h3><h3 id="MapperScan"><a href="#MapperScan" class="headerlink" title="@MapperScan"></a>@MapperScan</h3><h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><h3 id="XxlJob"><a href="#XxlJob" class="headerlink" title="@XxlJob"></a>@XxlJob</h3><h3 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h3><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><h3 id="EnableCaching"><a href="#EnableCaching" class="headerlink" title="@EnableCaching"></a>@EnableCaching</h3><h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><h3 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h3>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序代码片段</title>
    <url>/posts/3295652332/</url>
    <content><![CDATA[<h1 id="代码片段记录"><a href="#代码片段记录" class="headerlink" title="代码片段记录"></a>代码片段记录</h1><h2 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">onPullDownRefresh</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 监听该页面用户下拉刷新事件</span></span><br><span class="line">    <span class="comment">// 可以在触发时发起请求，请求成功后调用wx.stopPullDownRefresh()来结束下拉刷新</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下拉拉拉&#x27;</span>)</span><br><span class="line">    wx.<span class="title function_">showNavigationBarLoading</span>();<span class="comment">//在当前页面显示导航条加载动画</span></span><br><span class="line">    <span class="comment">//wx.startPullDownRefresh();</span></span><br><span class="line">    wx.<span class="title function_">hideNavigationBarLoading</span>();<span class="comment">//隐藏导航条加载动画。</span></span><br><span class="line">    wx.<span class="title function_">stopPullDownRefresh</span>();<span class="comment">//停止当前页面下拉刷新。</span></span><br><span class="line">    that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">homeDataList</span>: [],</span><br><span class="line">        <span class="attr">pageIndex</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">showEndTxt</span>: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    common.<span class="title function_">checkThreeRdSessionTimeOut</span>(that);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="上拉加载"><a href="#上拉加载" class="headerlink" title="上拉加载"></a>上拉加载</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//滑动至底部加载更多</span></span><br><span class="line"><span class="attr">onReachBottom</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    that.<span class="title function_">loadMoreModuleData</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>





<h2 id="接口请求"><a href="#接口请求" class="headerlink" title="接口请求"></a>接口请求</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">checkSession</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> requestTask = wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: that.<span class="property">globalData</span>.<span class="property">h5Request</span> + <span class="string">&#x27;miniApp/checkSessionTimeOut&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;<span class="comment">//请求的参数</span></span><br><span class="line">            <span class="title class_">ThreeRdSessionId</span>: wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;threeRdSessionId&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">            <span class="keyword">if</span>(res.<span class="property">data</span>==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                that.<span class="title function_">getUserInfo</span>();<span class="comment">//获取用户信息</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_">getCurrentPages</span>().<span class="property">length</span> != <span class="number">0</span>) &#123;<span class="comment">//重新加载首页</span></span><br><span class="line">                    <span class="title function_">getCurrentPages</span>()[<span class="title function_">getCurrentPages</span>().<span class="property">length</span> - <span class="number">1</span>].<span class="title function_">onShow</span>();</span><br><span class="line">                    <span class="keyword">var</span> e = <span class="title function_">getCurrentPages</span>()[<span class="title function_">getCurrentPages</span>().<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">                    <span class="keyword">if</span> (e.<span class="property">data</span>.<span class="property">reloadData</span>!=<span class="literal">undefined</span> &amp;&amp; e.<span class="property">data</span>.<span class="property">reloadData</span> != <span class="number">1</span>) &#123;</span><br><span class="line">                        e.<span class="property">data</span>.<span class="property">reloadData</span> = <span class="number">0</span>;</span><br><span class="line">                        <span class="title function_">getCurrentPages</span>()[<span class="title function_">getCurrentPages</span>().<span class="property">length</span> - <span class="number">1</span>].<span class="title function_">loadData</span>()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//监听 HTTP Response Header 事件。会比请求完成事件更早</span></span><br><span class="line">    <span class="comment">//lambda表达式用的是 () =&gt; &#123;&#125;</span></span><br><span class="line">    requestTask.<span class="title function_">onHeadersReceived</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onHeadersReceived&quot;</span>, res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="接口请求，抽取"><a href="#接口请求，抽取" class="headerlink" title="接口请求，抽取"></a>接口请求，抽取</h2><p><code>app.js</code>中公共数据设置全局的URL前缀</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">globalData</span>: &#123;</span><br><span class="line">    <span class="attr">userInfo</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">isIphonex</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">h5Request</span>: <span class="string">&#x27;https://ldyh5.dolphin-free.com/&#x27;</span>,<span class="comment">//上传接口</span></span><br><span class="line">    <span class="attr">supportRequest</span>: <span class="string">&#x27;http://api.nnzhp.cn/&#x27;</span> <span class="comment">//普通接口</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<p>自定义请求函数（公用）<code>/utils/request.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义请求函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span> &#123;<span class="type">String</span>&#125; url 请求路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span> &#123;<span class="type">Object</span>&#125; data 请求数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span> &#123;<span class="type">String</span>&#125; method 请求方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span> &#123;<span class="type">Number</span>&#125; flag 是否缓存token的标志 0:否，1:是</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">url, data, method, flag = <span class="number">0</span>, that = getApp()</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(url,<span class="number">1111</span>)</span><br><span class="line">  <span class="keyword">const</span> host = that.<span class="property">globalData</span>.<span class="property">supportRequest</span></span><br><span class="line">  <span class="keyword">let</span> token = wx.<span class="title function_">getStorageSync</span>(that.<span class="property">storageKeys</span>.<span class="property">TOKEN</span>) || <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;加载中&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//网络请求</span></span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: host + url,</span><br><span class="line">      <span class="attr">data</span>: data,</span><br><span class="line">      <span class="attr">method</span>: method,</span><br><span class="line">      <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">      <span class="attr">header</span>: &#123;</span><br><span class="line">        <span class="comment">// &#x27;content-type&#x27;: &#x27;application/json; charset=UTF-8&#x27;, // 按json格式请求</span></span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,<span class="comment">//按表单形式请求</span></span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: token</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123; <span class="comment">//服务器返回数据</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(url)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        <span class="comment">// console.log(res.header)</span></span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123; <span class="comment">// 更新缓存token</span></span><br><span class="line">          wx.<span class="title function_">setStorageSync</span>(that.<span class="property">storageKeys</span>.<span class="property">TOKEN</span>, res.<span class="property">header</span>.<span class="property">Authorization</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">statusCode</span> == <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">//响应码 0表示成功， &lt;0 表示失败,&gt;0表示警告</span></span><br><span class="line">          <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">errCode</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(res.<span class="property">data</span>.<span class="property">data</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(res.<span class="property">data</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">statusCode</span> === <span class="number">502</span>) &#123;</span><br><span class="line">          wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;服务器更新&#x27;</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">statusCode</span> === <span class="number">500</span>) &#123;</span><br><span class="line"></span><br><span class="line">          wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: res.<span class="property">data</span>.<span class="property">errMsg</span> || <span class="string">&quot;接口异常&quot;</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">            <span class="attr">duration</span>: <span class="number">1500</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">statusCode</span> === <span class="number">403</span>) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(res.<span class="property">data</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//返回错误提示信息</span></span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">              <span class="attr">title</span>: res.<span class="property">data</span>.<span class="property">errMsg</span> || <span class="string">&quot;主人，我出错啦o(╥﹏╥)o&quot;</span>,</span><br><span class="line">              <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">              <span class="attr">duration</span>: <span class="number">1500</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;, <span class="number">500</span>)</span><br><span class="line">          <span class="title function_">reject</span>(res.<span class="property">data</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        wx.<span class="title function_">hideLoading</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">        <span class="title function_">reject</span>(&#123;<span class="attr">errMsg</span>:<span class="string">&quot;接口调用失败&quot;</span>&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="调用：get、post、上传-选文件-、下载"><a href="#调用：get、post、上传-选文件-、下载" class="headerlink" title="调用：get、post、上传(选文件)、下载"></a>调用：get、post、上传(选文件)、下载</h3><p>各个页面对应的api js <code>common/api/home-api.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> httpRequest = <span class="built_in">require</span>(<span class="string">&#x27;../../utils/request&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//get请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getSomething</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">httpRequest</span>(<span class="string">&#x27;api/user/stu_info&#x27;</span>, options, <span class="string">&#x27;GET&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//post请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">postSomething</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">httpRequest</span>(<span class="string">&#x27;api/user/login&#x27;</span>, options, <span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>调用的地方 <code>pages/home/home.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 页面的初始数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">login</span>:&#123;</span><br><span class="line">            <span class="attr">username</span>:<span class="string">&quot;niuhanyang&quot;</span>,</span><br><span class="line">            <span class="attr">passwd</span>:<span class="string">&quot;aA123456&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">imgUrl</span>: <span class="string">&quot;https://res.wx.qq.com/wxdoc/dist/assets/img/0.4cb08bb4.jpg&quot;</span>,</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * get请求数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attr">getSomething</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        homeApi.<span class="title function_">getSomething</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">getApp</span>().<span class="title function_">toastNone</span>(res)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">getApp</span>().<span class="title function_">toastNone</span>(err)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * post请求数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attr">postSomething</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        homeApi.<span class="title function_">postSomething</span>(that.<span class="property">data</span>.<span class="property">login</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">getApp</span>().<span class="title function_">toastNone</span>(res)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">getApp</span>().<span class="title function_">toastNone</span>(err)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 上传</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attr">gotoShowIdCart</span>: <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">var</span> dataType = e.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">datatype</span>;</span><br><span class="line">        <span class="keyword">debugger</span></span><br><span class="line">        wx.<span class="title function_">chooseImage</span>(&#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">1</span>, <span class="comment">// 最多可以选择的图片张数，默认9</span></span><br><span class="line">            <span class="attr">sizeType</span>: [<span class="string">&#x27;original&#x27;</span>, <span class="string">&#x27;compressed&#x27;</span>], <span class="comment">// original 原图，compressed 压缩图，默认二者都有</span></span><br><span class="line">            <span class="attr">sourceType</span>: [<span class="string">&#x27;album&#x27;</span>, <span class="string">&#x27;camera&#x27;</span>], <span class="comment">// album 从相册选图，camera 使用相机，默认二者都有</span></span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                wx.<span class="title function_">showLoading</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;上传中&#x27;</span>, &#125;);</span><br><span class="line"></span><br><span class="line">                that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                    <span class="attr">isUploadPic</span>: <span class="number">1</span></span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">                <span class="keyword">var</span> tempFilePaths = res.<span class="property">tempFilePaths</span></span><br><span class="line">                wx.<span class="title function_">saveFile</span>(&#123;</span><br><span class="line">                    <span class="attr">tempFilePath</span>: tempFilePaths[<span class="number">0</span>],</span><br><span class="line">                    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                        <span class="keyword">var</span> savedFilePath = res.<span class="property">savedFilePath</span></span><br><span class="line">                        wx.<span class="title function_">uploadFile</span>(&#123;</span><br><span class="line">                            <span class="attr">url</span>: requesth5 + <span class="string">&#x27;miniApp/uploadLogImg&#x27;</span>, <span class="comment">//仅为示例，非真实的接口地址</span></span><br><span class="line">                            <span class="attr">filePath</span>: savedFilePath,</span><br><span class="line">                            <span class="attr">name</span>: <span class="string">&#x27;file&#x27;</span>,</span><br><span class="line">                            <span class="attr">formData</span>: &#123;</span><br><span class="line">                                <span class="title class_">TmallShopId</span>: that.<span class="property">data</span>.<span class="property">tmallShopId</span>,</span><br><span class="line">                                <span class="title class_">ThreeRdSessionId</span>: that.<span class="property">data</span>.<span class="property">threeRdSessionId</span>,</span><br><span class="line">                                <span class="attr">filePath</span>: savedFilePath, <span class="comment">// 要上传文件资源的路径</span></span><br><span class="line">                            &#125;, <span class="comment">// HTTP 请求中其他额外的参数</span></span><br><span class="line">                            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (res.<span class="property">statusCode</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                                    <span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res.<span class="property">data</span>);;</span><br><span class="line">                                    <span class="comment">// var data = res.data</span></span><br><span class="line">                                    <span class="keyword">if</span> (dataType == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                                        that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                                            <span class="attr">cardPositivePic</span>: obj.<span class="property">picUrl</span>,</span><br><span class="line">                                            <span class="attr">hideidcard1</span>: <span class="literal">false</span></span><br><span class="line">                                        &#125;)</span><br><span class="line">                                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dataType == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">                                        that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                                            <span class="attr">cardNativePic</span>: obj.<span class="property">picUrl</span>,</span><br><span class="line">                                            <span class="attr">hideidcard2</span>: <span class="literal">false</span></span><br><span class="line">                                        &#125;)</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">                                    that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                                        <span class="attr">isUploadPic</span>: <span class="number">0</span></span><br><span class="line">                                    &#125;)</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    that.<span class="title function_">showToast</span>(res.<span class="property">errMsg</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">complete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 下载</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="title function_">downUrl</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;保存文件&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">imgUrl</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">imgUrl</span>) &#123;</span><br><span class="line">            <span class="title function_">getApp</span>().<span class="title function_">toastNone</span>(<span class="string">&quot;没有相关文件：&quot;</span> + <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">imgUrl</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;正在保存文件&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">let</span> finalSharePosterImg = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">imgUrl</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;保存文件：&quot;</span> + finalSharePosterImg)</span><br><span class="line">        wx.<span class="title function_">downloadFile</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: finalSharePosterImg,</span><br><span class="line">            <span class="title function_">success</span>(<span class="params">fileinfo</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> filePath = fileinfo.<span class="property">tempFilePath</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;下载成功&quot;</span>, fileinfo)</span><br><span class="line">                wx.<span class="title function_">openDocument</span>(&#123;</span><br><span class="line">                    <span class="attr">filePath</span>: filePath,</span><br><span class="line">                    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打开文档成功&#x27;</span>)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params">coml</span>) &#123;</span><br><span class="line">                        wx.<span class="title function_">hideLoading</span>()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// wx.saveFile(&#123;</span></span><br><span class="line">                <span class="comment">//   tempFilePath: filePath,</span></span><br><span class="line">                <span class="comment">//   success: function(res) &#123;</span></span><br><span class="line">                <span class="comment">//     console.log(&quot;保存成功&quot;,res)</span></span><br><span class="line">                <span class="comment">//     wx.hideLoading()</span></span><br><span class="line">                <span class="comment">//     // wx.showToast(&#123;</span></span><br><span class="line">                <span class="comment">//     //   title: &#x27;已保存&#x27;,</span></span><br><span class="line">                <span class="comment">//     // &#125;)</span></span><br><span class="line">                <span class="comment">//     that.setData(&#123;</span></span><br><span class="line">                <span class="comment">//       showMenu: false</span></span><br><span class="line">                <span class="comment">//     &#125;)</span></span><br><span class="line">                <span class="comment">//     console.log(res);</span></span><br><span class="line">                <span class="comment">//   &#125;,</span></span><br><span class="line">                <span class="comment">//   fail: function(res) &#123;</span></span><br><span class="line">                <span class="comment">//     console.log(res)</span></span><br><span class="line">                <span class="comment">//     let errMsg = res.errMsg</span></span><br><span class="line">                <span class="comment">//     wx.getSetting(&#123;</span></span><br><span class="line">                <span class="comment">//       success(res) &#123;</span></span><br><span class="line">                <span class="comment">//         if (!res.authSetting[&#x27;scope.writePhotosAlbum&#x27;]) &#123;</span></span><br><span class="line">                <span class="comment">//           wx.showModal(&#123;</span></span><br><span class="line">                <span class="comment">//             title: &#x27;警告&#x27;,</span></span><br><span class="line">                <span class="comment">//             content: &#x27;您未授权保存到相册,将无法正常保存文件&#x27;,</span></span><br><span class="line">                <span class="comment">//             showCancel: false,</span></span><br><span class="line">                <span class="comment">//             success: function(res) &#123;</span></span><br><span class="line">                <span class="comment">//               wx.hideLoading()</span></span><br><span class="line">                <span class="comment">//               if (res.confirm) &#123;</span></span><br><span class="line">                <span class="comment">//                 wx.openSetting(&#123;</span></span><br><span class="line">                <span class="comment">//                   success: (res) =&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//                   &#125;</span></span><br><span class="line">                <span class="comment">//                 &#125;)</span></span><br><span class="line">                <span class="comment">//               &#125;</span></span><br><span class="line">                <span class="comment">//             &#125;</span></span><br><span class="line">                <span class="comment">//           &#125;)</span></span><br><span class="line">                <span class="comment">//         &#125; else &#123;</span></span><br><span class="line">                <span class="comment">//           wx.hideLoading()</span></span><br><span class="line">                <span class="comment">//           wx.showToast(&#123;</span></span><br><span class="line">                <span class="comment">//             title: &#x27;保存失败，请刷新重试。&#x27;,</span></span><br><span class="line">                <span class="comment">//             icon: &#x27;none&#x27;</span></span><br><span class="line">                <span class="comment">//           &#125;)</span></span><br><span class="line">                <span class="comment">//           that.setData(&#123;</span></span><br><span class="line">                <span class="comment">//             showMenu: false</span></span><br><span class="line">                <span class="comment">//           &#125;)</span></span><br><span class="line">                <span class="comment">//         &#125;</span></span><br><span class="line">                <span class="comment">//       &#125;</span></span><br><span class="line">                <span class="comment">//     &#125;)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//   &#125;</span></span><br><span class="line">                <span class="comment">// &#125;)</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">fail</span>(<span class="params">errinfo</span>) &#123;</span><br><span class="line">                wx.<span class="title function_">hideLoading</span>()</span><br><span class="line">                wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;获取文件失败，请刷新重试.&#x27;</span>,</span><br><span class="line">                    <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">                &#125;)</span><br><span class="line">                that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                    <span class="attr">showMenu</span>: <span class="literal">false</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>展示页面（参考）<code>/pages/home/home.wxml</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pages/home/home.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#ff0000;&quot;</span>&gt;</span>网络请求<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;font50&quot;</span> <span class="attr">catchtap</span>=<span class="string">&quot;getSomething&quot;</span>&gt;</span>普通get网络请求<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;font50&quot;</span> <span class="attr">catchtap</span>=<span class="string">&quot;postSomething&quot;</span>&gt;</span>普通post网络请求<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;IdCard_Pic&#x27;</span> &gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 上传前 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;item&#x27;</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;hideidcard1 == true&#125;&#125;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;gotoShowIdCart&#x27;</span> <span class="attr">data-dataType</span>=<span class="string">&#x27;1&#x27;</span> <span class="attr">name</span>=<span class="string">&quot;upImg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;mask ud_layout_c2&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">icon</span> <span class="attr">class</span>=<span class="string">&#x27;iconfont icon-xiangji&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;font10 c999&#x27;</span>&gt;</span>身份证正面照片<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- end上传前 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 上传后 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;item upload&#x27;</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;hideidcard1 == false&#125;&#125;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;gotoShowIdCart&#x27;</span> <span class="attr">data-dataType</span>=<span class="string">&#x27;1&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;mask lr_layout_c&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">icon</span> <span class="attr">class</span>=<span class="string">&#x27;iconfont icon-xiangji&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&#x27;&#123;&#123;cardPositivePic&#125;&#125;&#x27;</span> <span class="attr">mode</span>=<span class="string">&#x27;aspectFill&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- end上传后 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 上传前 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;item&#x27;</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;hideidcard2 == true&#125;&#125;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;gotoShowIdCart&#x27;</span> <span class="attr">data-dataType</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;mask ud_layout_c2&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">icon</span> <span class="attr">class</span>=<span class="string">&#x27;iconfont icon-xiangji&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;font10 c999&#x27;</span>&gt;</span>身份证反面照片<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- end上传前 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 上传后 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;item upload&#x27;</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;hideidcard2 == false&#125;&#125;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;gotoShowIdCart&#x27;</span> <span class="attr">data-dataType</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;mask lr_layout_c&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">icon</span> <span class="attr">class</span>=<span class="string">&#x27;iconfont icon-xiangji&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&#x27;&#123;&#123;cardNativePic&#125;&#125;&#x27;</span> <span class="attr">mode</span>=<span class="string">&#x27;aspectFill&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- end上传后 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;font50&quot;</span> <span class="attr">catchtap</span>=<span class="string">&quot;downUrl&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>







<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="wx-login-登录"><a href="#wx-login-登录" class="headerlink" title="wx.login 登录"></a><code>wx.login</code> 登录</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重新登录</span></span><br><span class="line">wx.<span class="title function_">login</span>(&#123;</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> code = res.<span class="property">code</span>;</span><br><span class="line">        <span class="keyword">if</span> (code) &#123;</span><br><span class="line">            wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>: that.<span class="property">globalData</span>.<span class="property">h5Request</span> + <span class="string">&#x27;miniApp/wxLoginNew&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="attr">code</span>: code,</span><br><span class="line">                    <span class="attr">threeRdSessionId</span>: wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;threeRdSessionId&#x27;</span>),</span><br><span class="line">                    <span class="attr">unionId</span>: wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;unionid&#x27;</span>),</span><br><span class="line">                    <span class="attr">easyChannelId</span>: wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;easyChannelId&#x27;</span>), <span class="comment">//商户独立绑定小程序改造  by wuwq</span></span><br><span class="line">                    <span class="attr">tmallShopId</span>: wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;tmallShopId&#x27;</span>),</span><br><span class="line">                    <span class="attr">miniAppType</span>: <span class="number">4</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                    wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">                    <span class="keyword">var</span> data = res.<span class="property">data</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(data.<span class="property">error</span>)) &#123;</span><br><span class="line">                        wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;threeRdSessionId&#x27;</span>, data.<span class="property">threeRdSessionId</span>);</span><br><span class="line">                        <span class="comment">//是否显示加入购物车按钮：1 是 0 否</span></span><br><span class="line">                        wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;isShowCart&#x27;</span>, data.<span class="property">isShowCart</span>);</span><br><span class="line">                        <span class="comment">//折扣标签设置：1 显示折扣标签 2显示降价金额 0 不显示</span></span><br><span class="line">                        wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;isShowDiscountTag&#x27;</span>, data.<span class="property">isShowDiscountTag</span>);</span><br><span class="line">                        <span class="comment">//裂变小程序appId</span></span><br><span class="line">                        wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;marketingMiniAppId&#x27;</span>, data.<span class="property">marketingMiniAppId</span>);</span><br><span class="line">                        <span class="comment">//综合版社交小程序appId</span></span><br><span class="line">                        wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;integrateMiniAppId&#x27;</span>, data.<span class="property">integrateMiniAppId</span>);</span><br><span class="line">                        wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;miniAppSource&#x27;</span>, <span class="string">&quot;13&quot;</span>);</span><br><span class="line">                        wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;miniAppType&#x27;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(data.<span class="property">unionid</span>) &amp;&amp; data.<span class="property">unionid</span> != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                            wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;unionid&#x27;</span>, data.<span class="property">unionid</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (<span class="title function_">getCurrentPages</span>().<span class="property">length</span> != <span class="number">0</span>) &#123;<span class="comment">//重新加载首页</span></span><br><span class="line">                            <span class="title function_">getCurrentPages</span>()[<span class="title function_">getCurrentPages</span>().<span class="property">length</span> - <span class="number">1</span>].<span class="title function_">onShow</span>()</span><br><span class="line">                            <span class="keyword">var</span> e = <span class="title function_">getCurrentPages</span>()[<span class="title function_">getCurrentPages</span>().<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">                            <span class="keyword">if</span> (e.<span class="property">data</span>.<span class="property">reloadData</span> != <span class="literal">undefined</span> &amp;&amp; e.<span class="property">data</span>.<span class="property">reloadData</span> != <span class="number">1</span>) &#123;<span class="comment">//首页</span></span><br><span class="line">                                e.<span class="property">data</span>.<span class="property">reloadData</span> = <span class="number">0</span>;</span><br><span class="line">                                <span class="title function_">getCurrentPages</span>()[<span class="title function_">getCurrentPages</span>().<span class="property">length</span> - <span class="number">1</span>].<span class="title function_">loadData</span>()</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取用户登录态失败！&#x27;</span> + res.<span class="property">errMsg</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="wx-checkSession检查登录态是否过期"><a href="#wx-checkSession检查登录态是否过期" class="headerlink" title="wx.checkSession检查登录态是否过期"></a><code>wx.checkSession</code>检查登录态是否过期</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// 每次进核对页面查一下缓存是否失效</span></span><br><span class="line">    that.<span class="title function_">checkSession</span>();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 每次进页面查一下缓存是否失效</span></span><br><span class="line"><span class="attr">checkSession</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: h5Request + <span class="string">&#x27;miniApp/checkSessionTimeOut&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="title class_">ThreeRdSessionId</span>: wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;threeRdSessionId&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">data</span> == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                app.<span class="title function_">getUserInfo</span>();<span class="comment">//获取用户信息</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>







<h2 id="公共js，暴露接口，便于引用；支付"><a href="#公共js，暴露接口，便于引用；支付" class="headerlink" title="公共js，暴露接口，便于引用；支付"></a>公共js，暴露接口，便于引用；支付</h2><p>公共js <code>common.js</code>中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//暴露接口，便于引用</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">weixinPayOrder</span>: weixinPayOrder,</span><br><span class="line">    <span class="attr">showToast</span>: showToast</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//微信支付方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">weixinPayOrder</span>(<span class="params">tradeId</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> threeRdSessionId = wx.<span class="title function_">getStorageSync</span>(<span class="string">&quot;threeRdSessionId&quot;</span>);</span><br><span class="line">  wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: h5Request + <span class="string">&#x27;/miniApp/wixin/miniAppPayOrder&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="title class_">ThreeRdSessionId</span>: threeRdSessionId,</span><br><span class="line">      <span class="attr">tradeId</span>: tradeId,</span><br><span class="line">      <span class="attr">miniAppType</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">easyChannelId</span>: wx.<span class="title function_">getStorageSync</span>(<span class="string">&quot;easyChannelId&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> ret = res.<span class="property">data</span>.<span class="property">ret</span>;</span><br><span class="line">      <span class="keyword">var</span> obj = res.<span class="property">data</span>;</span><br><span class="line">      <span class="keyword">if</span> (ret == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">        wx.<span class="title function_">requestPayment</span>(&#123;</span><br><span class="line">          <span class="comment">//相关支付参数</span></span><br><span class="line">          <span class="attr">timeStamp</span>: obj.<span class="property">timeStamp</span>,</span><br><span class="line">          <span class="attr">nonceStr</span>: obj.<span class="property">nonceStr</span>,</span><br><span class="line">          <span class="string">&#x27;package&#x27;</span>: <span class="string">&#x27;prepay_id=&#x27;</span> + obj.<span class="property">prepay_id</span>,</span><br><span class="line">          <span class="attr">signType</span>: obj.<span class="property">signType</span>,</span><br><span class="line">          <span class="attr">paySign</span>: obj.<span class="property">paySign</span>,</span><br><span class="line">          <span class="comment">//小程序微信支付成功的回调通知</span></span><br><span class="line">          <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">              <span class="attr">url</span>: <span class="string">&#x27;../../package-trade/paySuccess/paySuccess?tradeId=&#x27;</span> + tradeId,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            wx.<span class="title function_">redirectTo</span>(&#123;</span><br><span class="line">              <span class="attr">url</span>: <span class="string">&#x27;../../package-trade/payOrder/payOrder?tradeId=&#x27;</span> + tradeId,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="string">&#x27;m_0&#x27;</span>)&#123; <span class="comment">//支付金额为0</span></span><br><span class="line">        wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;../../package-trade/paySuccess/paySuccess?tradeId=&#x27;</span> + tradeId,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        wx.<span class="title function_">redirectTo</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;../../package-trade/payOrder/payOrder?tradeId=&#x27;</span> + tradeId,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//失败</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//浮层提示</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showToast</span>(<span class="params">that, text</span>) &#123;</span><br><span class="line">  that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">    <span class="attr">toastText</span>: text</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">toastText</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;调用<code>common.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> common= <span class="built_in">require</span>(<span class="string">&quot;../../../resources/js/common.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="comment">/** 页面初始数据 */</span></span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**微信支付 */</span></span><br><span class="line">    <span class="attr">wechatpay</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">var</span> storeId = that.<span class="property">data</span>.<span class="property">storeId</span>;</span><br><span class="line">        <span class="keyword">var</span> tradeId = that.<span class="property">data</span>.<span class="property">tradeId</span>;</span><br><span class="line">        <span class="keyword">var</span> groupDetailId = that.<span class="property">data</span>.<span class="property">groupDetailId</span>;</span><br><span class="line">        common.<span class="title function_">showToast</span>(that, <span class="string">&quot;跳转微信支付&quot;</span>);</span><br><span class="line">        common.<span class="title function_">weixinPayOrder</span>(tradeId, groupDetailId); <span class="comment">//微信支付</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h2 id="跳转到别的小程序"><a href="#跳转到别的小程序" class="headerlink" title="跳转到别的小程序"></a>跳转到别的小程序</h2><ol>
<li><p>先在<code>app.json</code>中声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;navigateToMiniProgramAppIdList&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;wxc3b9875f7ef24e85&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wx30a359ec2fe37327&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>
</li>
<li><p>在页面的<code>js</code>中，创建跳转方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打开其他指定的小程序</span></span><br><span class="line"><span class="attr">jumpToOtherMiniApp</span>:<span class="keyword">function</span>(<span class="params">miniAppType,url</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> appid = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(miniAppType == <span class="number">3</span>) &#123;<span class="comment">//裂变</span></span><br><span class="line">        appid = <span class="string">&quot;wxc3b9875f7ef24e85&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(miniAppType == <span class="number">1</span>) &#123;<span class="comment">//购物</span></span><br><span class="line">        appid = <span class="string">&quot;wx30a359ec2fe37327&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    wx.<span class="title function_">navigateToMiniProgram</span>(&#123;</span><br><span class="line">        <span class="attr">appId</span>: appid,</span><br><span class="line">        <span class="attr">path</span>: url,</span><br><span class="line">        <span class="attr">envVersion</span>: <span class="string">&#x27;release&#x27;</span>,<span class="comment">// 打开正式版</span></span><br><span class="line">        <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="comment">// 打开成功</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>js</code>中调用跳转方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跳转购物导航版小程序</span></span><br><span class="line">url = <span class="string">&quot;/pages/views/home/home&quot;</span></span><br><span class="line">that.<span class="title function_">jumpToOtherMiniApp</span>(<span class="number">1</span>,url);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="设置导航栏"><a href="#设置导航栏" class="headerlink" title="设置导航栏"></a>设置导航栏</h2><h3 id="单个导航栏背景色"><a href="#单个导航栏背景色" class="headerlink" title="单个导航栏背景色"></a>单个导航栏背景色</h3><p>那个页面的json文件中修改（如<code>/pages/home/home.json</code>）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#00ffff&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="整个小程序的导航栏背景色"><a href="#整个小程序的导航栏背景色" class="headerlink" title="整个小程序的导航栏背景色"></a>整个小程序的导航栏背景色</h3><p>修改<code>app.json</code>中<code>window</code>下的<code>navigationBarBackgroundColor</code>的值</p>
<h3 id="js中动态修改标题名称"><a href="#js中动态修改标题名称" class="headerlink" title="js中动态修改标题名称"></a>js中动态修改标题名称</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">changeRangeType</span>:<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> rangeType=e.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">rangeType</span>;</span><br><span class="line">    <span class="keyword">var</span> that=<span class="variable language_">this</span>;</span><br><span class="line">    that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">nextPageIndex</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="attr">isEnd</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">rangeType</span>:rangeType,</span><br><span class="line">      <span class="attr">list</span>:[]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">showAchivementRanking</span>();</span><br><span class="line">    that.<span class="title function_">showRangeType</span>();</span><br><span class="line">    wx.<span class="title function_">setNavigationBarTitle</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: that.<span class="title function_">getNavigatoinBarTitleStr</span>(rangeType),</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getNavigatoinBarTitleStr</span>:<span class="keyword">function</span>(<span class="params">rangeType</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (rangeType==<span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;本月业绩排行&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rangeType == <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;发展会员数&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;本月业绩排行&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>





<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><h2 id="拍照"><a href="#拍照" class="headerlink" title="拍照"></a>拍照</h2><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>redirectTo</p>
<p>navigateTo</p>
<p>swtichTab</p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序代码片段</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz</title>
    <url>/posts/1877088496/</url>
    <content><![CDATA[<h1 id="Spring-quartz-时间配置规则"><a href="#Spring-quartz-时间配置规则" class="headerlink" title="Spring quartz 时间配置规则"></a><a href="https://blog.csdn.net/javafay/article/details/8055042">Spring quartz 时间配置规则</a></h1><h2 id="格式-秒-分-小时-日-月-周-年"><a href="#格式-秒-分-小时-日-月-周-年" class="headerlink" title="格式: [秒] [分] [小时] [日] [月] [周] [年]"></a>格式: <code>[秒] [分] [小时] [日] [月] [周] [年]</code></h2><table>
<thead>
<tr>
<th>序号</th>
<th>说明</th>
<th>是否必填</th>
<th>允许填写的值</th>
<th>允许的通配符</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>秒</td>
<td>是</td>
<td><code>0-59</code></td>
<td><code>, - * /</code></td>
</tr>
<tr>
<td>2</td>
<td>分</td>
<td>是</td>
<td><code>0-59</code></td>
<td><code>, - * /</code></td>
</tr>
<tr>
<td>3</td>
<td>小时</td>
<td>是</td>
<td><code>0-23</code></td>
<td><code>, - * /</code></td>
</tr>
<tr>
<td>4</td>
<td>日</td>
<td>是</td>
<td><code>1-31</code></td>
<td><code>, - * ? / L W</code></td>
</tr>
<tr>
<td>5</td>
<td>月</td>
<td>是</td>
<td><code>1-12 or JAN-DEC</code></td>
<td><code>, - * /</code></td>
</tr>
<tr>
<td>6</td>
<td>周</td>
<td>是</td>
<td><code>1-7 or SUN-SAT</code></td>
<td><code>, - * ? / L #</code></td>
</tr>
<tr>
<td>7</td>
<td>年</td>
<td>否</td>
<td><code>empty</code> 或 <code>1970-2099</code></td>
<td><code>, - * /</code></td>
</tr>
</tbody></table>
<h2 id="通配符说明"><a href="#通配符说明" class="headerlink" title="通配符说明:"></a>通配符说明:</h2><ul>
<li><p><code>*</code> 表示所有值. 例如:在分的字段上设置 “*”,表示每一分钟都会触发。</p>
</li>
<li><p><code>?</code> 表示不指定值。使用的场景为不需要关心当前设置这个字段的值。例如:要在每月的10号触发一个操作，但不关心是周几，所以需要周位置的那个字段设置为”?” 具体设置为 0 0 0 10 * ?</p>
</li>
<li><p><code>-</code> 表示区间。例如 在小时上设置 “10-12”,表示 10,11,12点都会触发。</p>
</li>
<li><p><code>,</code> 表示指定多个值，例如在周字段上设置 “MON,WED,FRI” 表示周一，周三和周五触发</p>
</li>
<li><p><code>/</code> 用于递增触发。如在秒上面设置”5&#x2F;15” 表示从5秒开始，每增15秒触发(5,20,35,50)。在月字段上设置’1&#x2F;3’所示每月1号开始，每隔三天触发一次。</p>
</li>
<li><p><code>L</code> 表示最后的意思。在日字段设置上，表示当月的最后一天(依据当前月份，如果是二月还会依据是否是润年[leap]), 在周字段上表示星期六，相当于”7”或”SAT”。如果在”L”前加上数字，则表示该数据的最后一个。例如在周字段上设置”6L”这样的格式,则表示“本月最后一个星期五”</p>
</li>
<li><p><code>W</code> 表示离指定日期的最近那个工作日(周一至周五). 例如在日字段上设置”15W”，表示离每月15号最近的那个工作日触发。如果15号正好是周六，则找最近的周五(14号)触发, 如果15号是周未，则找最近的下周一(16号)触发.如果15号正好在工作日(周一至周五)，则就在该天触发。如果指定格式为 “1W”,它则表示每月1号往后最近的工作日触发。如果1号正是周六，则将在3号下周一触发。(注，”W”前只能设置具体的数字,不允许区间”-“).</p>
<blockquote>
<p>Tips：’L’和 ‘W’可以一组合使用。如果在日字段上设置”LW”,则表示在本月的最后一个工作日触发(一般指发工资 )</p>
</blockquote>
</li>
<li><p><code>#</code> 序号(表示每月的第几个周几)，例如在周字段上设置”6#3”表示在每月的第三个周六.注意如果指定”#5”,正好第五周没有周六，则不会触发该配置(用在母亲节和父亲节再合适不过了)</p>
<blockquote>
<p>Tips：周字段的设置，若使用英文字母是不区分大小写的 <code>MON</code> <code>与mon相同</code>.</p>
</blockquote>
</li>
</ul>
<h2 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h2><table>
<thead>
<tr>
<th>例子</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>0 0 12 * * ?</code></td>
<td>每天12点触发</td>
</tr>
<tr>
<td><code>0 15 10 ? * *</code></td>
<td>每天10点15分触发</td>
</tr>
<tr>
<td><code>0 15 10 * * ?</code></td>
<td>每天10点15分触发</td>
</tr>
<tr>
<td><code>0 15 10 * * ? *</code></td>
<td>每天10点15分触发</td>
</tr>
<tr>
<td><code>0 15 10 * * ? 2005</code></td>
<td>2005年每天10点15分触发</td>
</tr>
<tr>
<td><code>0 * 14 * * ?</code></td>
<td>每天下午的 2点到2点59分每分触发</td>
</tr>
<tr>
<td><code>0 0/5 14 * * ?</code></td>
<td>每天下午的 2点到2点59分(整点开始，每隔5分触发)</td>
</tr>
<tr>
<td><code>0 0/5 14,18 * * ?</code></td>
<td>每天下午的 2点到2点59分(整点开始，每隔5分触发) 每天下午的 18点到18点59分(整点开始，每隔5分触发)</td>
</tr>
<tr>
<td><code>0 0-5 14 * * ?</code></td>
<td>每天下午的 2点到2点05分每分触发</td>
</tr>
<tr>
<td><code>0 10,44 14 ? 3 WED</code></td>
<td>3月分每周三下午的 2点10分和2点44分触发</td>
</tr>
<tr>
<td><code>0 15 10 ? * MON-FRI</code></td>
<td>从周一到周五每天上午的10点15分触发</td>
</tr>
<tr>
<td><code>0 15 10 15 * ?</code></td>
<td>每月15号上午10点15分触发</td>
</tr>
<tr>
<td><code>0 15 10 L * ?</code></td>
<td>每月最后一天的10点15分触发</td>
</tr>
<tr>
<td><code>0 15 10 ? * 6L</code></td>
<td>每月最后一周的星期五的10点15分触发</td>
</tr>
<tr>
<td><code>0 15 10 ? * 6L 2002-2005</code></td>
<td>从2002年到2005年每月最后一周的星期五的10点15分触发</td>
</tr>
<tr>
<td><code>0 15 10 ? * 6#3</code></td>
<td>每月的第三周的星期五开始触发</td>
</tr>
<tr>
<td><code>0 0 12 1/5 * ?</code></td>
<td>每月的第一个中午开始每隔5天触发一次</td>
</tr>
<tr>
<td><code>0 11 11 11 11 ?</code></td>
<td>每年的11月11号 11点11分触发(光棍节)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet生命周期</title>
    <url>/posts/3908245919/</url>
    <content><![CDATA[<h1 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a><a href="https://blog.csdn.net/haobo920/article/details/5925656">Servlet生命周期</a></h1><h2 id="什么是-Servlet"><a href="#什么是-Servlet" class="headerlink" title="什么是 Servlet?"></a>什么是 Servlet?</h2><p>Servlet 是一个 Java 编写的程序，此程序是在服务器端运行的，是按照 Servlet 规范 编写的一个 Java 类。 </p>
<h2 id="Servlet-是做什么的？"><a href="#Servlet-是做什么的？" class="headerlink" title="Servlet 是做什么的？"></a>Servlet 是做什么的？</h2><p>Servlet 是处理客户端的请求并将其发送到客户端。</p>
<h2 id="Servlet-API"><a href="#Servlet-API" class="headerlink" title="Servlet API"></a>Servlet API</h2><ol>
<li><p>Servlet 框架的组成<br>Servlet 框架是由 2 个 Java 包组成：(1)javax.servlet 和(2)javax.servlet.http</p>
<p>(1) <code>javax.servlet</code> 包中定义了所有 Servlet 类都必须实现的接口和类。</p>
<p><code>javax.servlet</code> 包的接口为：</p>
<ol>
<li><p><code>ServletConfig</code> 接口 —- 在初始化过程中由 Servlet 容器使用<br><code>ServletContext</code> 接口 —- 定义 Servlet 用于获取容器信息的方法<br><code>ServletRequest</code> 接口 —- 向服务器请求信息<br><code>ServletResponse</code> 接口 —- 响应客户端请求<br><code>Servlet</code> 接口 —- 定义所有 Servlet 必须实现的方法</p>
</li>
<li><p><code>javax.servlet</code> 包中的类为：<br><code>ServletInputStream</code> 类 —- 用于从客户端读取二进制数据<br><code>ServletOutputStream</code> 类 —- 用于将二进制数据发送到客户端<br><code>GenericServlet</code> 类 —- 抽象类，定义一个通用的，独立于底层协议的 Servlet。</p>
</li>
</ol>
<p>(2) <code>javax.servlet.http</code> 包中定义了采用 HTTP 通信的 HttpServlet 类。</p>
<ol>
<li><p><code>javax.servlet.http</code> 包的接口为：</p>
<p><code>HttpServletRequest</code> 接口 —- 提供 http 请求<br><code>HttpServletResponse</code> 接口 —- 提供 http 响应<br><code>HttpSession</code> 接口 —- 用于标识客户端并存储有关客户信息<br><code>HttpSessionAttributeListener</code> 接口 —-实现这个侦听接口用户获取会话的属性列表的改变的通知</p>
</li>
<li><p><code>javax.servlet.http</code> 包中的类：<br><code>HttpServlet</code> 类 —- 扩展了 GenericServlet 的抽象类，用于扩展创建Http Servlet<br><code>Cookie</code> 类 —- 创建一个 Cookie，用于存储 Servlet 发送给客户端的信息</p>
</li>
</ol>
</li>
<li><p>Servlet 框架的核心<br>Servlet 框架的核心是：<code>javax.servlet.Servlet</code> 接口，所有的 <code>Servlet</code> 都必须实现这一接口。</p>
</li>
</ol>
<h2 id="Http-Servlet"><a href="#Http-Servlet" class="headerlink" title="Http Servlet"></a>Http Servlet</h2><p><code>HttpServlet</code> 是一个抽象类，用来创建用户自己的 <code>HTTP Servlet</code>。<code>HttpServlet</code> 类的子类必须至少重写一下方法中的一个：<code>doGet()</code>和 <code>doPost()</code>。<br><code>HttpServlet</code> 类提供 <code>doGet()</code>方法来处理 <code>GET</code> 请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req,HttpServletResponse res)</span></span><br></pre></td></tr></table></figure>

<p>提供 <code>doPost()</code>方法处理 POST 请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req,HttpServletResponse res)</span></span><br></pre></td></tr></table></figure>

<p>其中有 2 个参数：<code>HttpServletRequset</code> 和 <code>HttpServlerResponse</code><br>这 2 个类实现了 <code>ServlerRequset</code> 接口和 <code>ServletResponse</code> 接口<br><code>ServletRequest</code> 接口中封装了客户请求信息&lt;客户请求方式，参数名，参数值等&gt;<br><code>ServletResponse</code> 接口 为 Servlet 提供了返回相应结果的方法。</p>
<h2 id="Servlet-体系结构"><a href="#Servlet-体系结构" class="headerlink" title="Servlet 体系结构"></a>Servlet 体系结构</h2><p><code>Servlet</code>–&gt;<code>GenericServlet</code>–&gt;<code>HttpServlet</code>–&gt;用户自定义的 <code>Servlet</code></p>
<h2 id="Servlet-的生命周期"><a href="#Servlet-的生命周期" class="headerlink" title="Servlet 的生命周期"></a>Servlet 的生命周期</h2><p>Servlet 的生命周期由 Servlet 容器控制，该容器创建 Servlet 的实例。<br>Servlet 生命周期就是指创建 Servlet 实例后响应客户请求直至销毁的全过程。</p>
<ol>
<li><p>Serlvet 生命周期的三个方法：<code>init()</code>–&gt;<code>service()</code>–&gt;<code>destroy()</code></p>
</li>
<li><p>生命周期的各个阶段：</p>
<p>实例化：Servlet 容器创建 Servlet 类的实例对象<br>初始化：Servlet 容器调用 Servlet 的 <code>init()</code>方法<br>服务：如果请求 Servlet,则容器调用 <code>service()</code>方法<br>销毁：销毁实例之前调用 <code>destroy()</code>方法<br>不可用：销毁实例并标记为垃圾处理</p>
</li>
</ol>
<p><strong>Servlet 的生命周期</strong></p>
<p>Servlet 的生命周期由 Servlet 容器控制，该容器创建 Servlet 的实例。Servlet 的生命周期就是指 Servlet 实例在创建之后响应客户请求直到至销毁的全过程。Servlet 实例的创建取决于 Servlet 的首次调用。Servlet 接口定义了 Servlet 生命周期的 3 个方法。</p>
<ol>
<li><p><code>init()</code>：<br> 创建 Servlet 的实例后对其进行初始化。实现 ServletConfig 接口的对象作为参<br> 数进行传递。init 方法在浏览器请求 servlet 或 web server 启动时加载运行。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span><span class="keyword">throws</span> servletexception&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(servletconfig conf)</span><span class="keyword">throws</span> servletexception&#123;</span><br><span class="line">    <span class="built_in">super</span>.init(conf);<span class="comment">//init 方法带 servletconfig 参数时必须有此句代码</span></span><br><span class="line">    <span class="comment">//此处写一些初始化操作。如连接数据库等。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>service()</code>：<br> 响应客户端发出的请求。<code>Service()</code>方法接受 <code>ServletRequest</code> 接口和<br> <code>ServletRespons</code>e 接口的对象来处理请求和发送响应。经常的用法是：不用 <code>service(</code>)方法，用<code>dopost</code>,<code>doget</code>方法来处理请求。其他的方法还有<code>dotrace()</code>,<code>dooptions().dohead()</code>方法，因 <code>trace</code>，<code>options.head</code> 信息已经在 <code>dopost</code>,<code>doget</code> 方法中包括，不必使用，<code>doput()</code>,<code>dodelete()</code>方法在 <code>web app</code> 不经常使用<code>Service()</code>方法的语法为：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> ServletException,IOException</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中，request 是作为参数传递以存储客户端请求的 ServletRequest 接口的对象；<br>ServletResponse 接口的对象，它包含 Servlet 作出的响应。</p>
</blockquote>
</li>
<li><p><code>destroy()</code>：<br> 如果不需要处理的请求，则释放 Servlet 实例。<code>Destroy()</code>方法的语法为：</p>
</li>
</ol>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>.dedtroy(conf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：Servlet 关闭时才销毁。</p>
</blockquote>
<h2 id="Servlet-层次结构"><a href="#Servlet-层次结构" class="headerlink" title="Servlet 层次结构"></a>Servlet 层次结构</h2><p>在写 Servlet 程序时,一开始必须导入<code>(import) javax.servlet.*</code>、<code>javax.servlet.http.*</code>。</p>
<blockquote>
<p>其中：<br><code>javax.servlet.*</code>：存放与 Http 协议无关的一般性 servlet 类；<br><code>javax.servlet.http.*</code>：除了继承<code> javax.servlet.*</code>之外，并且还增加了与 HTTP 协议有关的功能。</p>
</blockquote>
<p>所有 <code>Servlet</code> 都必需实现 <code>javax.servlet.Servlet</code> 接口(<code>Interface</code>)，但是通常我们都会从<br><code>javax.sevler.GenericServlet</code> 或 <code>javax.servlet.http.HttpServlet</code> 择一来实现。<br><code>javax.servlet.*</code> 里的 <code>ServletRequest</code> 和 <code>ServletResponse</code> 接口提供存取一般的请求和响应；<br><code>javax.servlet.http.*</code> 里的 <code>HttpServletRequest</code> 和 <code>HttpServletResponse</code> 接口，则提供HTTP 请求及响应的存取服务。</p>
<p>声明 <code>servlet</code> 类 <code>MyServlet</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">httpservlet</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="javax-servlet-包主要的接口和类："><a href="#javax-servlet-包主要的接口和类：" class="headerlink" title="javax.servlet 包主要的接口和类："></a><code>javax.servlet</code> 包主要的接口和类：</h3><ol>
<li><code>ServletInputStream</code> 类：用于从客户端读取二进制据数。<br> <code>ServletInputStream</code> 类是从 <code>java.io.InputStream</code> 类扩展而来的抽象类。它只实现<br> 一个 <code>readLine()</code>方法。</li>
</ol>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Public <span class="type">int</span> <span class="title function_">readLine</span><span class="params">(<span class="type">byte</span> b[],<span class="type">int</span> offset,<span class="type">int</span> length)</span> <span class="keyword">throws</span> IOException</span><br></pre></td></tr></table></figure>

<blockquote>
<p>b 是用于存储读取的数据的字节数组；<br>offset 指定开始读取字符串的位置；<br>length 指定要读取的最大字节数<br>返回实际读到的字节数。到达流的结尾时返回-1.</p>
</blockquote>
<ol start="2">
<li><code>ServletOutputStream</code> 类：向客户端发送二进制数据。<br> <code>ServletOutputStream</code>类是从<code>java.io.OutputStream</code>类扩展而来的抽象类。主要方法：</li>
</ol>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException</span><br><span class="line"><span class="keyword">public</span> ovid <span class="title function_">println</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException</span><br></pre></td></tr></table></figure>

<blockquote>
<p>s 是要发送到客户端的字符串</p>
</blockquote>
<ol start="3">
<li><p><code>GenericServlet</code> 类：抽象类，定义一个通用的、独立于底层协议的 Servlet。</p>
</li>
<li><p><code>ServletRequest</code> 接口：定义一个对象，封装客户向 Servlet 的请求信息。<br>使用 <code>ServletRequest</code> 接口创建的对象，用于使客户端请求信息对 Servlet 可用。创建<br>的对象作为参数传递至 <code>Servlet</code> 的 <code>Service()</code>方法。</p>
</li>
<li><p><code>ServletResponse</code> 接口：定义一个对象辅助 Servlet 将请求的响应信息发送给客户端。</p>
</li>
<li><p><code>ServletContex</code>t 接口：Servlet 上下文。定义 Servlet 使用的方法以获取其容器的信息。</p>
</li>
<li><p><code>ServletConfig</code> 接口：定义了在 Servlet 初始化的过程中由 Servlet 容器传递给 Servlet<br>的配置信息对象。保存 Servlet 的配置信息。</p>
</li>
<li><p><code>Servlet</code> 接口：定义所有 Servlet 必须实现的方法。</p>
</li>
</ol>
<h3 id="javax-servlet-http-包主要的接口和类："><a href="#javax-servlet-http-包主要的接口和类：" class="headerlink" title="javax.servlet.http 包主要的接口和类："></a><code>javax.servlet.http</code> 包主要的接口和类：</h3><ol>
<li>HttpServletRequest 接口：扩展 ServletRequest 接口，为 Http Servlet 提供 Http 请求<br> 信息。</li>
</ol>
<p>  <code>getrealpath</code>,<code>getinputstream</code>,<code>getcontenttype</code>,<code>getcontentlengh...</code></p>
<p>  得到服务器的根目录</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">string path=request.getrealpath(<span class="string">&quot;.&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>  取得输入流</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">datainputstream din=<span class="keyword">new</span> <span class="title class_">datainputstream</span>(request.getinputstream());</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>HttpServletResponse</code> 接口：扩展 <code>ServletResponse</code> 接口，提供 Http 特定的发送响应的功能。常用的方法：<br> <code>sendredirect</code>,<code>getwriter</code>,<code>setcontenttype</code>,<code>getoutputstream</code>.<br> 设置文件类型</li>
</ol>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> string content_type=<span class="string">&quot;text/html;charset=gb2312&quot;</span>;</span><br><span class="line">response.setcontenttype(content_type);</span><br></pre></td></tr></table></figure>

<p>  输出 html 文件头部信息：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">printwriter out=response.getwriter();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p><code>HttpSession</code> 接口：用于创建客户端与服务器端之间的会话。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Public HttpSession <span class="title function_">getSession</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<p>返回与请求关联的当前会话。如果请求没有与其关联的话，则 <code>getSession()</code>会创建一个新<br>会话。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Public HttpSession <span class="title function_">getSession</span><span class="params">(<span class="type">boolean</span> value)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>返回与请求关联的当前 session 的对象。<br>boolean value 为 true 时等同于 Public HttpSession getSession()<br>boolean value 为 false 时,则返回 null。</p>
</blockquote>
</li>
<li><p><code>HttpSessionAttributeListener</code> 接口：实现这个侦听接口用于获取会话的属性列表的改变<br>的通知。</p>
</li>
<li><p>HttpServlet 类：扩展了 GenericServlet 的抽象类，用于扩展创建 Http Servlet。</p>
</li>
<li><p>Cookie 类：创建一个 Cookie，用于存储 Servlet 发送给客户端的信息。</p>
</li>
</ol>
<h2 id="会话跟踪"><a href="#会话跟踪" class="headerlink" title="会话跟踪"></a>会话跟踪</h2><p>会话跟踪允许服务器确定访问站点的用户、用户访问站点的次数和用停留站点的时间<br>段。会话跟踪技术包括隐藏表单域、URL 重写、Cookie、Session。</p>
<ol>
<li><p>隐藏表单域：是实现会话跟踪最简单的方式。将字段添加到 HTML 表单中，但并不在<br>客户端浏览器中显示。</p>
</li>
<li><p>URL重写</p>
<p>URL(Uniform Resource Locator,统一资源定位符)是Web上特定页面的地址。URL重写技术在URL结尾添加一些附加数据以标识该会话。</p>
</li>
<li><p>Cookie</p>
<p>Cookie是Web服务器发送给客户端的一小段信息，客户端请求时，可以读取信息发送到服务器端</p>
<p>Servlet API为使用Cookie而提供javax.servlet.http.Cookie。</p>
<p>Cookie类常用的方法如下：</p>
<p>(1) setMaxAge()：设置Cookie的最大保存时间（以秒表示）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaxAge</span><span class="params">(<span class="type">int</span> age)</span></span><br></pre></td></tr></table></figure>

<p>(2) getMaxAge()：返回Cookie的最大保存时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxAge</span><span class="params">()</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Session</p>
</li>
</ol>
<h2 id="Servlet通信方法"><a href="#Servlet通信方法" class="headerlink" title="Servlet通信方法"></a><code>Servlet</code>通信方法</h2><p><code>Servlet</code>运行一个称为<code>ServletContext</code>的环境，此环境描述了与<code>Servlet</code>关联的各种参数，一个<code>Servlet</code>只属于一个<code>ServletContext</code>。</p>
<ol>
<li><p>Servlet与jsp页面通信</p>
<p>下面是<code>UserServlet1</code>中的<code>doGet()</code>方法中的部分代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String uid=request.getParameter(<span class="string">&quot;txtuserid&quot;</span>);</span><br><span class="line">ServletContext context=<span class="built_in">this</span>.getServletContext();</span><br><span class="line">context.setAttribute(<span class="string">&quot;userid&quot;</span>, uid);</span><br><span class="line">RequestDispatcher dispatcher=request.getRequestDispatcher(<span class="string">&quot;../x.jsp&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>x.jsp</code>部分代码：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">ServletContext context=<span class="built_in">this</span>.getServletContext();</span><br><span class="line">String userid=context.getAttribute(<span class="string">&quot;userid&quot;</span>).toString();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>用户<code>ID:$&#123;userid&#125;</code></p>
</blockquote>
</li>
<li><p><code>Servlet</code>与<code>Servlet</code>通信</p>
<p>属于同一个应用程序的<code>Servlet</code>可以使用<code>javax.servlet.RequestDispatcher</code>接口的<code>forward</code>和<code>include</code>方法来共享数据。</p>
<p><code>forward()</code>方法将<code>HTTP</code>请求从一个<code>Servlet</code>发送到其它<code>Servlet</code>。该请求包含传递到目标<code>Servlet</code>的<code>URL</code>和请求参数。</p>
<p><code>include</code>方法可以接收<code>Servlet</code>以包括<code>Servlet</code>响应中的其他<code>Servlet</code>响应数据。接收客户端可以接收的对象，并将数据写入到<code>response</code>对象。</p>
<p>（1）<code>forward</code>（）：用于将请求从一个<code>Servlet</code>转发到同一个服务器上的另一个<code>Servlet</code>。语法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forward</span><span class="params">(ServletRequest request,ServletResponse response)</span> <span class="keyword">throws</span> ServletException,IOException</span><br></pre></td></tr></table></figure>

<p>基中，<code>request</code>是客户端向<code>Servlet</code>发出的请求，<code>response</code>是<code>Servlet</code>对客户端作出的响应。</p>
<p>（<code>2</code>）<code>include()</code>：用于包括另一个<code>Servlet</code>的内容。语法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">include</span><span class="params">(ServletRequest request,ServletResponse response)</span> <span class="keyword">throws</span> IOException</span><br></pre></td></tr></table></figure>

<p>其中，<code>request</code>是包含客户端请求的对象，<code>response</code>是包含<code>Servlet</code>响应的对象。</p>
<p>下面是<code>UserServlet1</code>中的<code>doGet()</code>方法中的部分代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String uid=request.getParameter(<span class="string">&quot;txtuserid&quot;</span>);</span><br><span class="line">ServletContext context=<span class="built_in">this</span>.getServletContext();</span><br><span class="line">context.setAttribute(<span class="string">&quot;userid&quot;</span>, uid);</span><br><span class="line">RequestDispatcher dispatcher=request.getRequestDispatcher(<span class="string">&quot;/servlet/UserServlet2&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Servlet上下文"><a href="#Servlet上下文" class="headerlink" title="Servlet上下文"></a><code>Servlet</code>上下文</h2><p> <code>Servlet</code>上下文提供对应用程序中所有<code>Servlet</code>所共有的各种资源和功能的访问。<code>Servlet</code>上下文<code>API</code>用于设置应用程序中所有<code>Servlet</code>共有的信息。</p>
<p> <code>Javax.servlet.ServletContext</code>接口中用于处理上下文属性的方法如下：</p>
<ol>
<li><p><code>getAttribute()</code>：返回<code>Servlet</code>上下文中对应属性名称的对象。若没有则返回<code>null</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getAttribute</span><span class="params">(String name)</span></span><br></pre></td></tr></table></figure>

<p>其中，<code>name</code>是<code>Servlet</code>的属性名称。</p>
</li>
<li><p><code>setAttribute()</code>：将对象绑定到<code>Servlet</code>上下文中提供的属性名称。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name,Object object)</span>;</span><br></pre></td></tr></table></figure>

<p>其中，<code>name</code>指定属性名称，<code>object</code>表示要绑定的对象。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>AndroidStudio相关</title>
    <url>/posts/1947707642/</url>
    <content><![CDATA[<h1 id="AS设置"><a href="#AS设置" class="headerlink" title="AS设置"></a>AS设置</h1><h2 id="恢复默认设置"><a href="#恢复默认设置" class="headerlink" title="恢复默认设置"></a>恢复默认设置</h2><ol>
<li>首先关闭AndroidStudio，注意一定要关闭哦，不然删除不了在使用的保存设置的文件；</li>
<li>删除C:\Users\本机用户名\ 目录下的**.android**目录；</li>
<li>删除C:\Users\用户名\AppData\Local\Google下的AndroidStudio4.1文件夹</li>
<li>删除C:\Users\用户名\AppData\Roaming\Google目录下的AndroidStudio4.1文件夹</li>
<li>重新打开AndroidStudio简单设置一下即可使用，比在哪找半天原因简单直接；</li>
</ol>
<h2 id="AS设置多行tab"><a href="#AS设置多行tab" class="headerlink" title="AS设置多行tab"></a>AS设置多行tab</h2><p>setting–》Editor–》General–》Editor Tabs</p>
<ol>
<li><p>勾掉“Show tabs in single row”</p>
</li>
<li><p>Tab limit：10</p>
</li>
</ol>
<h2 id="AS-设置代码、控制台背景色"><a href="#AS-设置代码、控制台背景色" class="headerlink" title="AS 设置代码、控制台背景色"></a>AS 设置代码、控制台背景色</h2><p>颜色：#FCF5D8  （252,245,216）</p>
<ul>
<li>Windows：</li>
</ul>
<blockquote>
<p>更改代码区域背景色：</p>
<p>File》Settings》Editor》Color Scheme》General》Text》Default text 更改Background</p>
</blockquote>
<blockquote>
<p>更改输出区域（控制台）背景色：</p>
<p>File》Settings》Editor》Color Scheme》Console Colors》Console 更改Background</p>
</blockquote>
<blockquote>
<p>更改Project View背景色：</p>
<p>File》Settings》Appearance&amp;Behavior》File Colors》Local colors 添加Project Files</p>
</blockquote>
<hr>
<ul>
<li>Mac：</li>
</ul>
<blockquote>
<p>Preferences&gt;Editor&gt;Color Scheme&gt;General&gt;Text&gt;Default text：更改background</p>
</blockquote>
<blockquote>
<p>更改输出区域（控制台）背景色：</p>
<p>Preferences&gt;搜索Console Colors：更改background</p>
</blockquote>
<blockquote>
<p>更改Project View颜色：<br>Apperance &amp; Behavior&gt;File Colors&gt;Local colors：添加Project Files，颜色选择<br><a href="http://jingyan.baidu.com/album/e2284b2b6486f2e2e6118d15.html?picindex=4">打开设置&gt;Editor&gt;Colors&amp;Fonts&gt;General&gt;</a></p>
</blockquote>
<h2 id="AS设置字体大小"><a href="#AS设置字体大小" class="headerlink" title="AS设置字体大小"></a>AS设置字体大小</h2><h3 id="AS整体的字体大小"><a href="#AS整体的字体大小" class="headerlink" title="AS整体的字体大小"></a>AS整体的字体大小</h3><blockquote>
<p>File》Settings》Appearance &amp; Behavior 》Appearance </p>
<p>勾选Override default fonts by(not recommended)：Consolas，Size14</p>
</blockquote>
<h3 id="AS代码区的字体大小"><a href="#AS代码区的字体大小" class="headerlink" title="AS代码区的字体大小"></a>AS代码区的字体大小</h3><blockquote>
<p>File》Settings》Editor》Font  更改Font为Consolas，Size为14</p>
</blockquote>
<h2 id="设置ctrl-w关闭当前标签页"><a href="#设置ctrl-w关闭当前标签页" class="headerlink" title="设置ctrl+w关闭当前标签页"></a>设置ctrl+w关闭当前标签页</h2><blockquote>
<p>File》Settings》Keymap：搜索close，找到ctrl+F4快捷键的，移除它并替换成ctrl+w</p>
</blockquote>
<h2 id="设置注解不换行"><a href="#设置注解不换行" class="headerlink" title="设置注解不换行"></a>设置注解不换行</h2><blockquote>
<p>File》Settings》Editor》Code Style》Java》切换到Wrappgin and Braces选项：Field annotations内勾选”Do not wrap after single annotation“</p>
</blockquote>
<h2 id="全局变量和局部变量竖向对齐"><a href="#全局变量和局部变量竖向对齐" class="headerlink" title="全局变量和局部变量竖向对齐"></a>全局变量和局部变量竖向对齐</h2><blockquote>
<p>File》Settings》Editor》Code Style》Java》切换到Wrappgin and Braces选项：Group delcarations内勾选“Align fields in columns”和“Align variables in columns”</p>
</blockquote>
<p><img src="/posts/1947707642/AS%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%AB%96%E7%9B%B4%E5%AF%B9%E9%BD%90.jpg" alt="AS全局变量和局部变量竖直对齐.png"></p>
<h2 id="设置代码标准线"><a href="#设置代码标准线" class="headerlink" title="设置代码标准线"></a>设置代码标准线</h2><blockquote>
<p>File》Settings》Editor》Code Style，找到General，更改Hard wrap at的值（默认120）</p>
</blockquote>
<h2 id="设置格式化换行"><a href="#设置格式化换行" class="headerlink" title="设置格式化换行"></a>设置格式化换行</h2><blockquote>
<p>File》Settings》Editor》Code Style》Java》切换到Wrappgin and Braces选项：勾选Line breaks和Ensure right margin is not exceeded</p>
</blockquote>
<blockquote>
<p>Line breaks 选中表示保持断行</p>
<p>Ensure right margin is not execeeded选中表示代码超过标准线就自动换行</p>
</blockquote>
<h2 id="更改JDK、SDK-的路径"><a href="#更改JDK、SDK-的路径" class="headerlink" title="更改JDK、SDK 的路径"></a>更改JDK、SDK 的路径</h2><blockquote>
<p>File–Other Settings–Default Project Structure…</p>
</blockquote>
<p>新版AS的JDK更改：<br>Settings&gt;Build,Execution,Deployment&gt;Build Tools&gt;Gradle中更改</p>
<h2 id="更改工作空间编码"><a href="#更改工作空间编码" class="headerlink" title="更改工作空间编码"></a>更改工作空间编码</h2><blockquote>
<p>File–Settings–Editor–File Encodings：右侧 Project Encoding 选择 UTF-8 即可</p>
</blockquote>
<h2 id="AS-缓存文件移出-C-盘（windows）"><a href="#AS-缓存文件移出-C-盘（windows）" class="headerlink" title="AS 缓存文件移出 C 盘（windows）"></a>AS 缓存文件移出 C 盘（windows）</h2><p><code>C:\Users\YourName\ ** </code>路径下：</p>
<p>这三个文件夹分别是：<br>- AndroidStudio 配置与插件缓存文件夹<br>- gradle 这个文件夹一般不会增长太多，其中存储的是本地的gradle全局配置文件<br>- m2 这个是本地仓库地址，也就是你使用的所有的远程库都会先缓存到这里然后再添加到你的项目中进行使用；如果你用的插件越多这个文件夹将会持续增大</p>
<ol>
<li>AS 安装路径bin 下<code>idea.properties</code></li>
</ol>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">#idea.config.path=$&#123;user.home&#125;<span class="regexp">/.AndroidStudio/</span>config</span><br><span class="line">idea.config.path=D:<span class="regexp">/Cache/</span>.AndroidStudio/config</span><br><span class="line"></span><br><span class="line">#idea.system.path=$&#123;user.home&#125;<span class="regexp">/.AndroidStudio/</span>system</span><br><span class="line">idea.system.path=D:<span class="regexp">/Cache/</span>.AndroidStudio/system</span><br></pre></td></tr></table></figure>





<h2 id="版本更新不小心点了-ignore（windows）"><a href="#版本更新不小心点了-ignore（windows）" class="headerlink" title="版本更新不小心点了 ignore（windows）"></a>版本更新不小心点了 ignore（windows）</h2><p>不小心点了 ignore 后 check 版本就找不到了</p>
<p>找到<code>C:用户\Administrator\.Android2.1\config\options\updates.xml</code></p>
<p>把红框中的内容（有ignore…）删除</p>
<p>重启 AS 即可</p>
<blockquote>
<p>如果有安装git环境，则会有 <code>C:\Users\Andministrator\.gitconfig</code> 记录全局的账户配置</p>
</blockquote>
<h2 id="AS设置默认浏览器"><a href="#AS设置默认浏览器" class="headerlink" title="AS设置默认浏览器"></a>AS设置默认浏览器</h2><p><code>File--Settings--Tools--Web Browsers</code></p>
<p><code>Default Browser</code>选择<code>First listed</code></p>
<h2 id="AS调整项目堆大小"><a href="#AS调整项目堆大小" class="headerlink" title="AS调整项目堆大小"></a>AS调整项目堆大小</h2><p>使用的是<code>64位</code>系统，且<code>不少于5GB</code>的RAM，可以手动调整项目的堆大小：</p>
<p><code>File--&gt;Settings--&gt;Appearance&amp;Behavior--&gt;System Settings--&gt;Memory Settings</code>：调整<code>IDE max heap size</code>、<code>Gradle daemon max heap size</code>、<code>Kotlin daemon max heap size</code>	</p>
<h2 id="显示实时内存"><a href="#显示实时内存" class="headerlink" title="显示实时内存"></a>显示实时内存</h2><p><code>File--Settings--Appearance &amp; Behavior--Appearance</code>：勾选<code>Window Options</code>下的<code>Show memory indicator</code></p>
<h2 id="使得gradle编译速度加快"><a href="#使得gradle编译速度加快" class="headerlink" title="使得gradle编译速度加快"></a>使得gradle编译速度加快</h2><p>在根目录下找到<code>gradle.properties</code>加入：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#让你编译时使用守护进程</span></span><br><span class="line"><span class="attr">org.gradle.daemon</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#org.gradle.jvmargs=-Xmx2048m JVM最大允许分配的堆内存，按需分配</span></span><br><span class="line"><span class="comment">#-XX:MaxPermSize=512m JVM最大允许分配的非堆内存，按需分配</span></span><br><span class="line"><span class="attr">org.gradle.jvmargs</span>=-Xmx2048m -XX:MaxPermSize=<span class="number">512</span>m -XX:+HeapDumpOnOutOfMemoryError -D</span><br><span class="line"><span class="attr">file.encoding</span>=UTF-<span class="number">8</span></span><br><span class="line"><span class="comment">#使用并行编译</span></span><br><span class="line"><span class="attr">org.gradle.parallel</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">org.gradle.configureondemand</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h2 id="AS上双击进行打包"><a href="#AS上双击进行打包" class="headerlink" title="AS上双击进行打包"></a>AS上双击进行打包</h2><p><img src="/posts/1947707642/AS%E6%89%93%E5%8C%85.png" alt="工具/AS打包"></p>
<p><a href="https://blog.csdn.net/TLuffy/article/details/113401090">右侧gradle不显示tasks的问题</a></p>
<blockquote>
<p>File -&gt; Settings -&gt; Experimental -&gt; 取消勾选 “Do not build Gradle task list during Gradle sync”</p>
</blockquote>
<h2 id="AS取消打开项目时是默认打开新窗口"><a href="#AS取消打开项目时是默认打开新窗口" class="headerlink" title="AS取消打开项目时是默认打开新窗口"></a>AS取消打开项目时是默认打开新窗口</h2><p><code>File》Settings》Appearance &amp; Behavior》System Settings</code>，右侧找到 “Project Opening”》勾选“Confirm window to open project in”</p>
<p><img src="/posts/1947707642/AS%E5%BC%B9%E7%AA%97%E7%A1%AE%E8%AE%A4%E6%98%AF%E5%90%A6%E5%9C%A8%E6%96%B0%E7%AA%97%E5%8F%A3%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE.png" alt="工具/AS弹窗确认是否在新窗口打开项目"></p>
<h2 id="AS-自动导包"><a href="#AS-自动导包" class="headerlink" title="AS 自动导包"></a>AS 自动导包</h2><p><img src="/posts/1947707642/AS%E8%87%AA%E5%8A%A8%E5%AF%BC%E5%8C%85.png" alt="工具/AS自动导包"></p>
<p>File》Settings》Editor》General》Auto Import，勾选上“Add unambiguous imports on the fly”</p>
<h2 id="AS-配置阿里云镜像地址"><a href="#AS-配置阿里云镜像地址" class="headerlink" title="AS 配置阿里云镜像地址"></a><a href="https://dp2px.com/2020/10/10/aliyun-mirror/">AS 配置阿里云镜像地址</a></h2><p>背景：安卓项目（因下载依赖资源包导致的）编译过慢</p>
<p>解决：</p>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><ol>
<li><p>在<code>用户目录/.gradle</code>（如：<code>C:/用户/Administrator/.gradle</code>）【Mac的<code>Users/名字/.gradle</code>】下新增文件<code>init.gradle</code></p>
</li>
<li><p><code>init.gradle</code>内容</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">allprojects&#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        <span class="keyword">def</span> ALIYUN_REPOSITORY_URL = <span class="string">&#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27;</span></span><br><span class="line">        <span class="keyword">def</span> ALIYUN_JCENTER_URL = <span class="string">&#x27;http://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span></span><br><span class="line">        all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">            <span class="keyword">if</span>(repo <span class="keyword">instanceof</span> MavenArtifactRepository)&#123;</span><br><span class="line">                <span class="keyword">def</span> url = repo.url.toString()</span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://repo1.maven.org/maven2&#x27;</span>) || url.startsWith(<span class="string">&#x27;http://repo1.maven.org/maven2&#x27;</span>)) &#123;</span><br><span class="line">                    project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot;</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://jcenter.bintray.com/&#x27;</span>) || url.startsWith(<span class="string">&#x27;http://jcenter.bintray.com/&#x27;</span>)) &#123;</span><br><span class="line">                    project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_URL.&quot;</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url ALIYUN_REPOSITORY_URL</span><br><span class="line">            url ALIYUN_JCENTER_URL</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    buildscript&#123;</span><br><span class="line">        repositories &#123;</span><br><span class="line">            <span class="keyword">def</span> ALIYUN_REPOSITORY_URL = <span class="string">&#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27;</span></span><br><span class="line">            <span class="keyword">def</span> ALIYUN_JCENTER_URL = <span class="string">&#x27;http://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span></span><br><span class="line">            all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">                <span class="keyword">if</span>(repo <span class="keyword">instanceof</span> MavenArtifactRepository)&#123;</span><br><span class="line">                    <span class="keyword">def</span> url = repo.url.toString()</span><br><span class="line">                    <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://repo1.maven.org/maven2&#x27;</span>) || url.startsWith(<span class="string">&#x27;http://repo1.maven.org/maven2&#x27;</span>)) &#123;</span><br><span class="line">                        project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot;</span></span><br><span class="line">                        remove repo</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (url.startsWith(<span class="string">&#x27;https://jcenter.bintray.com/&#x27;</span>) || url.startsWith(<span class="string">&#x27;http://jcenter.bintray.com/&#x27;</span>)) &#123;</span><br><span class="line">                        project.logger.lifecycle <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_URL.&quot;</span></span><br><span class="line">                        remove repo</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            maven &#123;</span><br><span class="line">                url ALIYUN_REPOSITORY_URL</span><br><span class="line">                url ALIYUN_JCENTER_URL</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="对指定项目配置"><a href="#对指定项目配置" class="headerlink" title="对指定项目配置"></a>对指定项目配置</h3><ol>
<li><p>修改项目根目录下的<code>build.gradle</code>内容，增加如下信息</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27;</span> &#125;</span><br><span class="line">maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span> &#125;</span><br><span class="line">maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/repositories/google&#x27;</span> &#125;</span><br><span class="line">maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/repositories/gradle-plugin&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<p>完整样例：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27;</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/repositories/google&#x27;</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/repositories/gradle-plugin&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:3.2.1&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27;</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/repositories/google&#x27;</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/repositories/gradle-plugin&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新的</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">maven &#123; setUrl(<span class="string">&quot;https://maven.aliyun.com/repository/central&quot;</span>) &#125;</span><br><span class="line">maven &#123; setUrl(<span class="string">&quot;https://maven.aliyun.com/repository/jcenter&quot;</span>) &#125;</span><br><span class="line">maven &#123; setUrl(<span class="string">&quot;https://maven.aliyun.com/repository/google&quot;</span>) &#125;</span><br><span class="line">maven &#123; setUrl(<span class="string">&quot;https://maven.aliyun.com/repository/gradle-plugin&quot;</span>) &#125;</span><br><span class="line">maven &#123; setUrl(<span class="string">&quot;https://maven.aliyun.com/repository/public&quot;</span>) &#125;</span><br><span class="line">maven &#123; setUrl(<span class="string">&quot;https://jitpack.io&quot;</span>) &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="AS2022-1-1显示每行代码谁修改的"><a href="#AS2022-1-1显示每行代码谁修改的" class="headerlink" title="AS2022.1.1显示每行代码谁修改的"></a>AS2022.1.1显示每行代码谁修改的</h2><p>File》Settings》Editor》Inlay Hints：Code vision更改</p>
<h2 id="新版AS的日志过滤"><a href="#新版AS的日志过滤" class="headerlink" title="新版AS的日志过滤"></a>新版AS的日志过滤</h2><h3 id="按包名过滤"><a href="#按包名过滤" class="headerlink" title="按包名过滤"></a>按包名过滤</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入package:（输入一个p就会有提示的） ，然后后面跟上你的包名</span></span><br><span class="line"><span class="keyword">package</span>:com.mtc.automachinetool</span><br></pre></td></tr></table></figure>

<h3 id="按日志等级过滤"><a href="#按日志等级过滤" class="headerlink" title="按日志等级过滤"></a>按日志等级过滤</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// 输入<span class="keyword">level</span>: ，后面加上等级，如<span class="keyword">info</span>，<span class="keyword">debug</span>，<span class="built_in">warning</span>等</span><br><span class="line">// 当等级为<span class="keyword">Info</span>时，过滤<span class="keyword">Info</span>及以上的日志</span><br><span class="line"><span class="keyword">level</span>:<span class="keyword">info</span> </span><br></pre></td></tr></table></figure>

<h3 id="按Tag过滤"><a href="#按Tag过滤" class="headerlink" title="按Tag过滤"></a>按Tag过滤</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">// 输入<span class="keyword">tag</span>: ,后面跟上你要过滤的<span class="keyword">TAG</span> <span class="title">字符</span></span><br><span class="line"><span class="title">tag</span>:cameratest</span><br></pre></td></tr></table></figure>

<h3 id="按关键字过滤"><a href="#按关键字过滤" class="headerlink" title="按关键字过滤"></a>按关键字过滤</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 输入message: ， 后面跟上你要过滤的关键字</span><br><span class="line">message:TestActivity</span><br></pre></td></tr></table></figure>

<h3 id="组合过滤-（包名-TAG-等级-关键字）"><a href="#组合过滤-（包名-TAG-等级-关键字）" class="headerlink" title="组合过滤 （包名+TAG+等级+关键字）"></a>组合过滤 （包名+TAG+等级+关键字）</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">// package <span class="keyword">tag</span> <span class="title">message</span> 可多次使用进行组合</span><br><span class="line">// 这里是对com.mtc.automachinetool包进行<span class="literal">Inf</span>o等级的日志过滤，过滤<span class="keyword">TAG</span> <span class="title">为AutoMachineLog</span> 和 </span><br><span class="line">// cameratest，在过滤这些日志里面的带有<span class="literal">false</span>和失败关键字的日志</span><br><span class="line">package:com.mtc.automachinetool level:<span class="literal">inf</span>o <span class="keyword">tag</span>:AutoMachineLog <span class="keyword">tag</span>:cameratest message:<span class="literal">false</span> message:失败</span><br></pre></td></tr></table></figure>

<h3 id="正则表达式过滤"><a href="#正则表达式过滤" class="headerlink" title="正则表达式过滤"></a>正则表达式过滤</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 只有这些字段支持正则表达式：tag、package、message、line</span><br><span class="line"><span class="regexp">//</span> 正则表达式匹配通过在字段名称中附加 ~ 来表示。例如 tag~:Android[\S]*。</span><br><span class="line">tag~:Android[\S]*</span><br></pre></td></tr></table></figure>

<h3 id="过滤不想看的日志-（针对快速打印且扰乱我们观察的日志）"><a href="#过滤不想看的日志-（针对快速打印且扰乱我们观察的日志）" class="headerlink" title="过滤不想看的日志 （针对快速打印且扰乱我们观察的日志）"></a>过滤不想看的日志 （针对快速打印且扰乱我们观察的日志）</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 如果你的日志中有很多无用的且快速打印的日志，影响我们观察日志输出，那我们可以过滤掉他们</span><br><span class="line"><span class="regexp">//</span> 否定的表示方式是在字段名称前面加上 - 例如</span><br><span class="line">-tag:Android</span><br></pre></td></tr></table></figure>

<h3 id="按时间过滤日志-（只看多长时间内的日志）"><a href="#按时间过滤日志-（只看多长时间内的日志）" class="headerlink" title="按时间过滤日志 （只看多长时间内的日志）"></a>按时间过滤日志 （只看多长时间内的日志）</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> age是过滤最近时间段内的日志，s 表示秒，m 表示分钟，h 表示小时，d 表示天。</span><br><span class="line"><span class="regexp">//</span> 下面的例子是过滤过去 <span class="number">5</span> 分钟内记录的消息。</span><br><span class="line">age:<span class="number">5</span>m</span><br></pre></td></tr></table></figure>
<p>当然了，你也可以<strong>过滤其中的几项</strong>。按自己需求过滤</p>
<h1 id="提高AS运行速度"><a href="#提高AS运行速度" class="headerlink" title="提高AS运行速度"></a><a href="https://www.mobibrw.com/2020/24284">提高AS运行速度</a></h1><p><strong>电脑内存一定要大于等于16G</strong></p>
<h2 id="提高AS的运行内存"><a href="#提高AS的运行内存" class="headerlink" title="提高AS的运行内存"></a>提高AS的运行内存</h2><p>AS》Help》Edit Custom VM Options</p>
<figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="comment"># custom Android Studio VM options, see https://developer.android.com/studio/intro/studio-config.html</span></span><br><span class="line"><span class="literal">-</span>Xms4096m <span class="comment"># 最低分配内存</span></span><br><span class="line"><span class="literal">-</span>Xmx6144m <span class="comment"># 最高分配内存</span></span><br><span class="line"><span class="literal">-</span>XX:ReservedCodeCacheSize=2048m <span class="comment"># 代码缓存保留空间（不超过2048m）</span></span><br><span class="line"><span class="literal">-</span>Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果这个值太大导致的无法启动AS</p>
<ol>
<li>那么去<code>C:\Users\Administrator\AppData\Roaming\Google\AndroidStudio2020.3\studio64.exe.vmoptions</code> 修改这里面的值</li>
<li>然后找到AS安装目录的bin目录，双击studio.bat看看运行内容（可以在这个bat后价格pause看）</li>
</ol>
</blockquote>
<h2 id="studio64-exe-vmoptions"><a href="#studio64-exe-vmoptions" class="headerlink" title="studio64.exe.vmoptions"></a>studio64.exe.vmoptions</h2><p>在AS安装目录的bin里面（注意区分32和64位）</p>
<p>建议只修改前四行</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -server模式启动时，速度较慢，但是一旦运行起来后，性能将会有很大的提升.原因是: </span></span><br><span class="line"><span class="comment"># 当虚拟机运行在-client模式的时候,使用的是一个代号为C1的轻量级编译器, </span></span><br><span class="line"><span class="comment"># 而-server模式启动的虚拟机采用相对重量级,代号为C2的编译器. </span></span><br><span class="line"><span class="comment"># C2比C1编译器编译的相对彻底,服务起来之后,性能更高.</span></span><br><span class="line"><span class="comment">#-server # 服务器模式</span></span><br><span class="line"></span><br><span class="line">-Xms4096m # 最低分配内存</span><br><span class="line">-Xmx6144m # 最高分配内存</span><br><span class="line">-XX:<span class="attribute">MaxPermSize</span>=6144m </span><br><span class="line">-XX:<span class="attribute">ReservedCodeCacheSize</span>=2048m # 代码缓存保留空间（不超过2048m）</span><br><span class="line"></span><br><span class="line"><span class="comment"># UseConcMarkSweepGC</span></span><br><span class="line"><span class="comment"># CMS，全称Concurrent Low Pause Collector</span></span><br><span class="line"><span class="comment"># 主要适合场景是对响应时间的重要性需求大于对吞吐量的要求，</span></span><br><span class="line"><span class="comment"># 能够承受垃圾回收线程和应用线程共享处理器资源，</span></span><br><span class="line"><span class="comment"># 并且应用中存在比较多的长生命周期的对象的应用</span></span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:<span class="attribute">SoftRefLRUPolicyMSPerMB</span>=50</span><br><span class="line">-XX:<span class="attribute">CICompilerCount</span>=2</span><br><span class="line">-Dsun.io.<span class="attribute">useCanonPrefixCache</span>=<span class="literal">false</span></span><br><span class="line">-Djdk.http.auth.tunneling.<span class="attribute">disabledSchemes</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">-Djdk.attach.<span class="attribute">allowAttachSelf</span>=<span class="literal">true</span></span><br><span class="line">-Dkotlinx.coroutines.<span class="attribute">debug</span>=off</span><br><span class="line">-Djdk.module.illegalAccess.<span class="attribute">silent</span>=<span class="literal">true</span></span><br><span class="line">-Djna.<span class="attribute">nosys</span>=<span class="literal">true</span></span><br><span class="line">-Djna.boot.library.path=</span><br><span class="line">-Didea.vendor.<span class="attribute">name</span>=Google</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-server # 服务器模式</p>
<p>加上这句会出现”If you already have a 64-bit JDK installed, define a JAVA_HOME variable in Computer&gt;System Properties&gt;System Settings&gt;Environment Variables. Failed to create JVM. JVM。。。”</p>
</blockquote>
<h2 id="修改idea-properties"><a href="#修改idea-properties" class="headerlink" title="修改idea.properties"></a>修改idea.properties</h2><blockquote>
<p>找到AS安装路径，打开bin目录，找到idea.properties</p>
</blockquote>
<p>打开idea.properties文件，找到idea.max.intellisense.filesize，默认是2500，改为25000（数值仅供参考，具体数值根据自己文件大小来定）</p>
<h2 id="gradle-properties"><a href="#gradle-properties" class="headerlink" title="gradle.properties"></a>gradle.properties</h2><ul>
<li>项目的 gradle.properties 文件（针对当前项目）</li>
<li>C:\Users\username.gradle\gradle.properties 这个文件是对所有项目都生效</li>
</ul>
<p>gradle.properties 内容如下：（如果C盘用户目录下没有这个文件，则新建）</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">#jvmargs默认配置</span><br><span class="line">#org.gradle.jvmargs=-Xmx4096M</span><br><span class="line">#构建时使用守护进程</span><br><span class="line">org.gradle.daemon=<span class="literal">true</span></span><br><span class="line">#JVM最大允许分配的堆内存，按需分配</span><br><span class="line">org.gradle.jvmargs=-Xmx6144m -<span class="attr">XX:</span>MaxPermSize=<span class="number">6144</span>m  -<span class="attr">XX:</span>+UseParallelGC</span><br><span class="line">#并行构建</span><br><span class="line">org.gradle.parallel=<span class="literal">true</span> </span><br><span class="line"></span><br><span class="line">#按需配置</span><br><span class="line">org.gradle.configureondemand=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">#启用新一代Dex编译器D8</span><br><span class="line">android.enableD8=<span class="literal">true</span></span><br><span class="line">#启用新一代资源编译器aapt2 (增量资源处理)</span><br><span class="line">android.enableAapt2=<span class="literal">true</span></span><br><span class="line">#启用gradle缓存</span><br><span class="line">org.gradle.caching=<span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h2 id="项目设置"><a href="#项目设置" class="headerlink" title="项目设置"></a>项目设置</h2><h3 id="打开dex增量编译"><a href="#打开dex增量编译" class="headerlink" title="打开dex增量编译"></a>打开dex增量编译</h3><p>在Module的build.gradle中添加如下代码</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dexOptions &#123;</span><br><span class="line">    <span class="comment">// incremental选项已经过期，现在已经用不到了，默认已经自动启用</span></span><br><span class="line">    <span class="comment">// incremental true</span></span><br><span class="line">    <span class="comment">//预编译库文件，如果库没有改动，就不需要更新了</span></span><br><span class="line">    preDexLibraries = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改gradle设置"><a href="#修改gradle设置" class="headerlink" title="修改gradle设置"></a>修改gradle设置</h3><p>在Project的gradle.properties中添加：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面注释掉的两项在实际编译的时候，不一定能正常，因此我们暂时不启用</span></span><br><span class="line"><span class="comment"># org.gradle.daemon=true </span></span><br><span class="line"><span class="comment"># org.gradle.configureondemand=true</span></span><br><span class="line"> </span><br><span class="line">org.gradle.<span class="attribute">parallel</span>=<span class="literal">true</span> </span><br><span class="line">org.gradle.<span class="attribute">jvmargs</span>=-Xmx4096m -XX:<span class="attribute">MaxPermSize</span>=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.<span class="attribute">encoding</span>=UTF-8</span><br></pre></td></tr></table></figure>

<h3 id="使用本地gradle"><a href="#使用本地gradle" class="headerlink" title="使用本地gradle"></a>使用本地gradle</h3><p>在<code>Android Studio</code>的<code>Gradle</code>每次编译的时候,每次都会联网检查依赖库，如果网速比较慢，会比较耗时。我们可以暂时禁用<code>Gradle</code>的联网检查，如下图：</p>
<p><img src="/posts/1947707642/AndroidStudioGradleOffline-400x240.png" alt="img"></p>
<h3 id="启用-Gradle-Caching"><a href="#启用-Gradle-Caching" class="headerlink" title="启用 Gradle Caching"></a>启用 Gradle Caching</h3><p>Gradle Caching 是 Gradle 3.5 的新特性，顾名思义能通过缓存来加速 build 过程。</p>
<p>在 Android Studio 3.0 中更据此做出了许多优化，因此我们可以这样来启用：</p>
<p><code>gradle.properties</code>中：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set this in gradle.properties</span></span><br><span class="line"><span class="attr">org.gradle.caching</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>





<h1 id="分析出包慢在那儿（分析构建性能）"><a href="#分析出包慢在那儿（分析构建性能）" class="headerlink" title="分析出包慢在那儿（分析构建性能）"></a>分析出包慢在那儿（分析构建性能）</h1><blockquote>
<p>使用<strong>gradle-profiler</strong>，官网文档：<a href="https://developer.android.google.cn/studio/build/profile-your-build">https://developer.android.google.cn/studio/build/profile-your-build</a></p>
</blockquote>
<p>对于较大的项目或者实现大量自定义构建逻辑的项目，您可能需要更深入地了解构建流程才能找到瓶颈。为此，您可以分析 Gradle 执行构建生命周期的每个阶段和每个构建任务所需的时间。例如，如果构建分析结果显示 Gradle 在配置项目上花费了过多时间，则表明您需要<a href="https://developer.android.com/studio/build/optimize-your-build?hl=zh-cn#optimize_configuration">将自定义构建逻辑移出配置阶段</a>。此外，如果 <code>mergeDevDebugResources</code> 任务占用了大量构建时间，则表明您需要<a href="https://developer.android.com/studio/build/optimize-your-build?hl=zh-cn#use_webp">将图片转换为 WebP 格式</a>或<a href="https://developer.android.com/studio/build/optimize-your-build?hl=zh-cn#disable_crunching">停用 PNG 处理</a>。</p>
<p>如果您使用的是 Android Studio 4.0 或更高版本，则最好<a href="https://developer.android.com/studio/build/build-analyzer?hl=zh-cn">使用 Build Analyzer</a> 来调查构建性能问题。</p>
<p>此外，您还可以通过以下两种方式在 Android Studio 之外对构建性能进行分析：</p>
<ol>
<li>独立的 <a href="https://developer.android.com/studio/build/profile-your-build?hl=zh-cn#gradle-profiler"><code>gradle-profiler</code> 工具</a>，这是一款用于深入分析构建的强大工具。</li>
<li>Gradle <a href="https://developer.android.com/studio/build/profile-your-build?hl=zh-cn#gradle-profile-option"><code>--profile</code> 选项</a>，这是一款可从 Gradle 命令行启动的便捷工具。</li>
</ol>
<h2 id="使用独立的-gradle-profiler-工具"><a href="#使用独立的-gradle-profiler-工具" class="headerlink" title="使用独立的 gradle-profiler 工具"></a>使用独立的 <code>gradle-profiler</code> 工具</h2><p>为找到能够提供最快构建速度的项目设置，您需要使用 <a href="https://github.com/gradle/gradle-profiler">Gradle 性能剖析器</a>，这是一款用于收集 Gradle 构建的性能分析和基准化分析信息的工具。借助 Gradle 性能剖析器，您可以创建构建场景并多次运行这些场景，以防止结果出现过大差异，并确保结果的可重现性。</p>
<p><a href="https://github.com/gradle/gradle-profiler#benchmarking-a-build">基准化分析模式</a>应用于收集干净构建和增量构建的相关信息，而<a href="https://github.com/gradle/gradle-profiler#profiling-a-build">性能分析模式</a>则可用于收集更细化的运行相关信息，包括 CPU 快照。</p>
<p>基准化分析的部分项目设置配置包括：</p>
<ul>
<li>插件版本</li>
<li>Gradle 版本</li>
<li>JVM 设置（堆大小、永久代大小、垃圾回收等）</li>
<li>Gradle 工作器数量 (<code>org.gradle.workers.max</code>)</li>
<li>按插件选项进一步优化性能</li>
</ul>
<h3 id="使用入门"><a href="#使用入门" class="headerlink" title="使用入门"></a>使用入门</h3><ul>
<li>按<a href="https://github.com/gradle/gradle-profiler#installing">相关说明</a>安装 gradle-profiler</li>
<li>运行：<code>gradle-profiler --benchmark --project-dir &lt;root-project&gt; :app:assembleDebug</code></li>
</ul>
<p>这将对已完全更新的构建进行基准化分析，因为 <code>--benchmark</code> 会多次运行该任务，且在两次运行之间不会更改项目。然后，它会在 <code>profile-out/</code> 目录下生成显示构建时间的 HTML 报告。</p>
<p>此外，还有其他场景可能更适合进行基准化分析：</p>
<ul>
<li>在某个类（您在其中完成大部分工作）中的方法正文中进行代码更改。</li>
<li>在贯穿整个项目的模块中进行 API 更改。虽然这比更改您自己的代码的频率要低，但它的影响更大，因此针对此项的检测会很有帮助。</li>
<li>修改布局，以模拟界面工作迭代。</li>
<li>修改字符串，以模拟转换工作处理。</li>
<li>干净构建，以模拟对构建本身的更改（例如，更新 Android Gradle 插件、更新 Gradle 或修改 <code>buildSrc</code> 下您自己的构建代码）。</li>
</ul>
<p>要对这些用例进行基准化分析，您可以创建一个能够推动 <code>gradle-profiler</code> 执行的场景，用于对源代码文件应用相应的更改。您可以检测下面的一些常见场景。</p>
<p><strong>注意</strong>：Gradle 性能剖析器可能会运行较长的时间，具体取决于多种因素。这些因素包括您的代码库的大小，以及您正在运行的构建的类型，例如，干净构建的用时通常比其他类型的构建更长。</p>
<h3 id="针对不同的内存-x2F-CPU-设置执行性能分析"><a href="#针对不同的内存-x2F-CPU-设置执行性能分析" class="headerlink" title="针对不同的内存&#x2F;CPU 设置执行性能分析"></a>针对不同的内存&#x2F;CPU 设置执行性能分析</h3><p>要针对不同的内存和 CPU 设置执行基准化分析，您可以创建使用不同 <code>org.gradle.jvmargs</code> 值的多种场景。例如，您可以创建以下场景：</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"># &lt;root-project&gt;/scenarios.txt</span><br><span class="line">clean_build_2gb_4workers &#123;</span><br><span class="line">    tasks = [<span class="string">&quot;:app:assembleDebug&quot;</span>]</span><br><span class="line">    gradle-args = [<span class="string">&quot;--max-workers=4&quot;</span>]</span><br><span class="line">    jvm-args = [<span class="string">&quot;-Xmx2048m&quot;</span>]</span><br><span class="line">    cleanup-tasks = [<span class="string">&quot;clean&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">clean_build_parallelGC &#123;</span><br><span class="line">    tasks = [<span class="string">&quot;:app:assembleDebug&quot;</span>]</span><br><span class="line">    jvm-args = [<span class="string">&quot;-XX:+UseParallelGC&quot;</span>]</span><br><span class="line">    cleanup-tasks = [<span class="string">&quot;clean&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clean_build_G1GC_4gb &#123;</span><br><span class="line">    tasks = [<span class="string">&quot;:app:assembleDebug&quot;</span>]</span><br><span class="line">    jvm-args = [<span class="string">&quot;-Xmx4096m&quot;</span>, <span class="string">&quot;-XX:+UseG1GC&quot;</span>]</span><br><span class="line">    cleanup-tasks = [<span class="string">&quot;clean&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行 <code>gradle-profiler --benchmark --project-dir &lt;root-project&gt; --scenario-file scenarios.txt</code> 即可运行这三种场景，并且，您还可以比较在上述每种设置下 <code>:app:assembleDebug</code> 的用时。</p>
<h3 id="针对不同的-Gradle-插件版本进行性能分析"><a href="#针对不同的-Gradle-插件版本进行性能分析" class="headerlink" title="针对不同的 Gradle 插件版本进行性能分析"></a>针对不同的 Gradle 插件版本进行性能分析</h3><p>要了解更改 Gradle 插件版本会对构建时间产生什么影响，可以创建一个场景来对此进行基准化分析。为了能够从场景注入插件版本，您需要完成一些准备工作。更改您的根 build.gradle：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># &lt;root-<span class="keyword">project</span>&gt;/build.gradle</span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">def</span> agpVersion = providers.systemProperty(<span class="string">&quot;agpVersion&quot;</span>).forUseAtConfigurationTime().orNull ?: <span class="string">&#x27;4.1.0&#x27;</span></span><br><span class="line"></span><br><span class="line">    ext.kotlin = providers.systemProperty(<span class="string">&#x27;kotlinVersion&#x27;</span>).forUseAtConfigurationTime().orNull ?: <span class="string">&#x27;1.4.0&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">&quot;com.android.tools.build:gradle:$agpVersion&quot;</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">&quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，您即可在场景文件中指定 Android Gradle 插件和 Kotlin Gradle 插件的版本，还可以让场景向源代码文件添加新的方法：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &lt;root-project&gt;/scenarios.txt</span></span><br><span class="line">non_abi_change_agp4.<span class="number">1.0_</span>kotlin1.<span class="number">4.10</span> &#123;</span><br><span class="line">    tasks = [<span class="string">&quot;:app:assembleDebug&quot;</span>]</span><br><span class="line">    apply-abi-change-to [<span class="string">&quot;app/src/main/java/com/example/your_app/your_code_file.java,</span></span><br><span class="line"><span class="string">                              &quot;</span>app/src/main/java/com/example/your_app/your_code_file.kt<span class="string">&quot;]</span></span><br><span class="line"><span class="string">    System-properties &#123;</span></span><br><span class="line"><span class="string">      &quot;</span>agpVersion<span class="string">&quot; = &quot;</span><span class="number">4.1</span>.<span class="number">0</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">      &quot;</span>kotlinVersion<span class="string">&quot; = &quot;</span><span class="number">1.4</span>.<span class="number">10</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">non_abi_change_agp4.2.0_kotlin1.4.20 &#123;</span></span><br><span class="line"><span class="string">    tasks = [&quot;</span><span class="symbol">:app</span><span class="symbol">:assembleDebug<span class="string">&quot;]</span></span></span><br><span class="line"><span class="string"><span class="symbol">    apply-abi-change-to [&quot;</span>app/src/main/java/com/example/your_app/your_code_file</span>.java,</span><br><span class="line">                              <span class="string">&quot;app/src/main/java/com/example/your_app/your_code_file.kt&quot;</span>]</span><br><span class="line">    <span class="title class_">System</span>-properties &#123;</span><br><span class="line">      <span class="string">&quot;agpVersion&quot;</span> = <span class="string">&quot;4.2.0-alpha16&quot;</span></span><br><span class="line">      <span class="string">&quot;kotlinVersion&quot;</span> = <span class="string">&quot;1.4.20&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对增量构建进行性能分析"><a href="#对增量构建进行性能分析" class="headerlink" title="对增量构建进行性能分析"></a>对增量构建进行性能分析</h3><p>大多数构建都是增量构建，因此该场景是您要进行性能分析的最重要的场景之一。Gradle 性能剖析器可为<a href="https://github.com/gradle/gradle-profiler#profiling-incremental-builds">对增量构建进行性能分析</a>提供广泛支持。可以通过更改方法正文、添加新方法、更改布局或字符串资源等方式，自动将更改应用于源代码文件。例如，您可以创建类似如下的增量场景：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &lt;root-project&gt;/scenarios.txt</span></span><br><span class="line">non_abi_change &#123;</span><br><span class="line">    tasks = [<span class="string">&quot;:app:assembleDebug&quot;</span>]</span><br><span class="line">    apply-non-abi-change-to = [<span class="string">&quot;app/src/main/java/com/example/your_app/your_code_file.java,</span></span><br><span class="line"><span class="string">                              &quot;</span>app/src/main/java/com/example/your_app/your_code_file.kt<span class="string">&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">abi_change &#123;</span></span><br><span class="line"><span class="string">    tasks = [&quot;</span><span class="symbol">:app</span><span class="symbol">:assembleDebug<span class="string">&quot;]</span></span></span><br><span class="line"><span class="string"><span class="symbol">    apply-abi-change-to = [&quot;</span>app/src/main/java/com/example/your_app/your_code_file</span>.java,</span><br><span class="line">                              <span class="string">&quot;app/src/main/java/com/example/your_app/your_code_file.kt&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">layout_change &#123;</span><br><span class="line">    tasks = [<span class="string">&quot;:app:assembleDebug&quot;</span>]</span><br><span class="line">    apply-android-layout-change-to = <span class="string">&quot;app/src/main/res/your_layout_file.xml&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">string_resource_change &#123;</span><br><span class="line">    tasks = [<span class="string">&quot;:app:assembleDebug&quot;</span>]</span><br><span class="line">    apply-android-resource-value-change-to = <span class="string">&quot;app/src/main/res/values/strings.xml&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行 <code>gradle-profiler --benchmark --project-dir &lt;root-project&gt; --scenario-file scenarios.txt</code> 会生成包含基准化分析数据的 HTML 报告。</p>
<p>您可以结合其他设置来分析增量场景（如堆大小、工作器数量或 Gradle 版本）：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &lt;root-project&gt;/scenarios.txt</span></span><br><span class="line">non_abi_change_4g &#123;</span><br><span class="line">    tasks = [<span class="string">&quot;:app:assembleDebug&quot;</span>]</span><br><span class="line">    apply-non-abi-change-to [<span class="string">&quot;app/src/main/java/com/example/your_app/your_code_file.java,</span></span><br><span class="line"><span class="string">                              &quot;</span>app/src/main/java/com/example/your_app/your_code_file.kt<span class="string">&quot;]</span></span><br><span class="line"><span class="string">    jvm-args = [&quot;</span>-<span class="title class_">Xmx4096m</span><span class="string">&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">non_abi_change_4g_8workers &#123;</span></span><br><span class="line"><span class="string">    tasks = [&quot;</span><span class="symbol">:app</span><span class="symbol">:assembleDebug<span class="string">&quot;]</span></span></span><br><span class="line"><span class="string"><span class="symbol">    apply-non-abi-change-to [&quot;</span>app/src/main/java/com/example/your_app/your_code_file</span>.java,</span><br><span class="line">                              <span class="string">&quot;app/src/main/java/com/example/your_app/your_code_file.kt&quot;</span>]</span><br><span class="line">    jvm-args = [<span class="string">&quot;-Xmx4096m&quot;</span>]</span><br><span class="line">    gradle-args = [<span class="string">&quot;--max-workers=8&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">non_abi_change_3g_gradle67 &#123;</span><br><span class="line">    tasks = [<span class="string">&quot;:app:assembleDebug&quot;</span>]</span><br><span class="line">    apply-non-abi-change-to [<span class="string">&quot;app/src/main/java/com/example/your_app/your_code_file.java,</span></span><br><span class="line"><span class="string">                              &quot;</span>app/src/main/java/com/example/your_app/your_code_file.kt<span class="string">&quot;]</span></span><br><span class="line"><span class="string">    jvm-args = [&quot;</span>-<span class="title class_">Xmx3072m</span><span class="string">&quot;]</span></span><br><span class="line"><span class="string">    version = [&quot;</span><span class="number">6.7</span><span class="string">&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="对干净构建进行性能分析"><a href="#对干净构建进行性能分析" class="headerlink" title="对干净构建进行性能分析"></a>对干净构建进行性能分析</h3><p>要对干净构建进行基准化分析，您可以创建一个推动 gradle-profiler 执行的场景：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &lt;root-project&gt;/scenarios.txt</span></span><br><span class="line"><span class="section">clean_build</span> &#123;</span><br><span class="line">    <span class="attribute">tasks</span> = [<span class="string">&quot;:app:assembleDebug&quot;</span>]</span><br><span class="line">    cleanup-tasks = [<span class="string">&quot;clean&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如需运行此场景，请使用以下命令：</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">gradle</span><span class="literal">-</span><span class="comment">profiler</span> <span class="literal">--</span><span class="comment">benchmark</span> <span class="literal">--</span><span class="comment">project</span><span class="literal">-</span><span class="comment">dir</span> &lt;<span class="comment">root</span><span class="literal">-</span><span class="comment">project</span>&gt; <span class="literal">--</span><span class="comment">scenario</span><span class="literal">-</span><span class="comment">file scenarios</span><span class="string">.</span><span class="comment">txt</span></span><br></pre></td></tr></table></figure>



<h2 id="使用-Gradle-profile-选项"><a href="#使用-Gradle-profile-选项" class="headerlink" title="使用 Gradle --profile 选项"></a>使用 Gradle <code>--profile</code> 选项</h2><p>如需从 Gradle 命令行生成和查看构建性能分析报告，请按以下步骤操作：</p>
<ol>
<li><p>在项目根目录下开启一个命令行终端。</p>
</li>
<li><p>输入以下命令，以执行干净构建。在剖析 build 性能时，您应该在剖析的每个 build 之间执行干净构建，这是因为如果某个任务的输入内容（例如源代码）未发生更改，Gradle 就会跳过它。因此输入内容未发生更改的第二个 build 始终会以更快的速度运行，因为任务不会重复运行。在 build 之间运行</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">clean</span></span><br></pre></td></tr></table></figure>

<p>任务可以确保您能够剖析完整的构建流程。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// <span class="keyword">On</span> Mac <span class="keyword">or</span> Linux, run the Gradle <span class="keyword">wrapper</span> <span class="keyword">using</span> &quot;./gradlew&quot;.</span><br><span class="line">gradlew clean</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用以下标记为您的某个产品变种（例如“dev”变种）执行调试 build：</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">gradlew</span> <span class="literal">--</span><span class="comment">profile</span> <span class="literal">--</span><span class="comment">offline</span> <span class="literal">--</span><span class="comment">rerun</span><span class="literal">-</span><span class="comment">tasks assembleFlavorDebug</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>--profile</code>：启用性能剖析。</li>
<li><code>--offline</code>：禁止 Gradle 提取在线依赖项。这样可以确保因 Gradle 尝试更新依赖项而导致的任何延迟都不会干扰您的性能剖析数据。您应该已将项目构建一次，以确保 Gradle 已经下载和缓存您的依赖项。</li>
<li><code>--rerun-tasks</code>：强制 Gradle 重新运行所有任务并忽略任何任务优化。</li>
</ul>
</li>
<li><p><img src="https://developer.android.google.cn/studio/images/build/build-report_2X.png" alt="img"></p>
<p><strong>图 1.</strong> 指示性能剖析报告所在位置的 Project 视图。</p>
<p>构建完成后，使用 <strong>Project</strong> 窗口转到 <code>project-root/build/reports/profile/</code> 目录（如图 1 所示）。</p>
</li>
<li><p>右键点击 <code>profile-timestamp.html</code> 文件，然后依次选择 <strong>Open in Browser &gt; Default</strong>。报告应与图 2 中显示的类似。您可以查看报告中的每个标签页以了解您的构建，例如，<strong>Task Execution</strong> 标签页显示了 Gradle 执行各个构建任务所花费的时间。</p>
<p><img src="https://developer.android.google.cn/studio/images/build/build-report-before_2X.png" alt="img"></p>
<p><strong>图 2.</strong> 在浏览器中查看报告。</p>
</li>
<li><p><strong>可选</strong>：在对您的项目或构建配置进行任何更改之前，请重复执行第 3 步中的命令，但请省略 <code>--rerun-tasks</code> 标记。由于 Gradle 会尝试通过不重复执行输入未发生变化的任务来节省时间（这些任务在报告的 <strong>Task Execution</strong> 标签页中标记为 <code>UP-TO-DATE</code>，如图 3 中所示），您可以确定哪些任务在不必要的时间执行了工作。例如，如果 <code>:app:processDevUniversalDebugManifest</code> 未标记为 <code>UP-TO-DATE</code>，可能表明您的构建配置会随每次构建动态更新清单文件。不过，有些任务（例如 <code>:app:checkDevDebugManifest</code>）需要在每次构建期间都运行。</p>
<p><img src="https://developer.android.google.cn/studio/images/build/build-report-tasks_2X.png" alt="img"></p>
<p><strong>图 3.</strong> 查看任务执行结果。</p>
</li>
</ol>
<p>现在，您已经有了一份构建性能剖析报告，可以通过查看报告中每个标签页下的信息发现优化机会。有些 build 设置需要进行实验，因为其优势在不同项目和工作站之间可能有所不同。例如，包含大型代码库的项目可能会受益于通过<a href="https://developer.android.com/studio/build/shrink-code?hl=zh-cn">代码缩减</a>移除不使用的代码并缩减应用大小。但是，项目越小，完全停用代码缩减功能带来的益处就越多。此外，增加 Gradle 堆的大小（使用 <a href="https://docs.gradle.org/current/userguide/build_environment.html"><code>org.gradle.jvmargs</code></a>）可能会对内存较小的机器的性能产生负面影响。</p>
<p>对构建配置进行更改后，请重复上述步骤并生成新的构建性能剖析报告，以观察更改的结果。例如，图 4 显示了同一示例应用在采纳本页介绍的一些基本优化后的报告。</p>
<p><img src="https://developer.android.google.cn/studio/images/build/build-report-after_2X.png" alt="img"></p>
<p><strong>图 4.</strong> 查看优化构建速度后的新报告。</p>
<h1 id="AS使用技巧"><a href="#AS使用技巧" class="headerlink" title="AS使用技巧"></a>AS使用技巧</h1><h2 id="AS断点技巧"><a href="#AS断点技巧" class="headerlink" title="AS断点技巧"></a>AS断点技巧</h2><h3 id="logcat"><a href="#logcat" class="headerlink" title="logcat"></a>logcat</h3><ul>
<li>旁边的<code>Logcat Header</code>可以设置只显示某些内容</li>
<li>上方的搜索框内可以过滤内容，如果过滤条件经常用可以把它设置到右上角的<code>Edit Filter COnfiguration</code>内</li>
<li>选中一些 log 内容，右键选择<code>Fold lines Like This</code>可以折叠</li>
</ul>
<h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><ul>
<li><p>条件断点<br>右键点击红点，<code>Condition</code>框中可以输入 Kotlin 表达式</p>
</li>
<li><p>断点某个线程<br>右键红点，<code>Suspend</code>选择<code>Thread</code>在<code>Condition</code>框中输入线程</p>
</li>
<li><p>直接输出，不需要在代码中添加输出语句<br>右键点击红点，勾选掉<code>Suspend</code>，在展开的框中：<code>Evaluate and log</code>可输入要打印出来的条件；<code>&quot;Breakpoint hit&quot; message</code>可以只输出断点的日志；</p>
</li>
<li><p>多个断点分组<br>右键点击红点，选择<code>more</code>，选择几个断点后右键创建新的组。可以快速选择某个组来断点（适用于不同 bug 归类）</p>
</li>
<li><p>丢帧功能（Android10 以上才有）<br>适用于断点跑过头了的情况，点击<code>Drop Frame</code>，再点击<code>Resume Program</code>来重新进入上面的断点</p>
</li>
<li><p>断点拖动位置<br>断点可以拖动到别的行</p>
</li>
<li><p>watch 变量设置标记<br>选中几个<code>watch</code>内容，右键<code>Mark Object...</code>可以添加标记。在 watch 窗口中点”+”输入我们的标记（会自动补全）。可以跟随单一实例来看它在做什么。<br>与上面的条件断点结合使用特别好用：条件输入“item &#x3D;&#x3D; 刚刚的标记”<br>适用于有多个项的情况，我们只想看自己的项，就可以把这些项标记起来</p>
</li>
<li><p><code>Evaluate Expression...</code><br>输入框的右侧点击可展开，在<code>Code fragment</code>内可以输入任何表达式。<br>适用于实时监控变量的变化</p>
</li>
<li><p>bug栈的日志关联到具体代码<br>拷贝bug 栈的日志，选择<code>Analyze Stack Trace...</code>，贴入复制的，点击 ok 就可以关联到具体代码了。</p>
</li>
<li><p>临时断点：按住alt+断点（只会停一次便自动消失）</p>
</li>
<li><p>断点的时候点击随机位置，都可以跳到那个方法</p>
</li>
<li><p><code>Attach Debugger to Android Process</code><br>可以快速关联断点</p>
</li>
<li><p><code>Apply Changes And Restart Activity</code><br>适用于更改了 onCreate 中的代码或布局文件。还需要配合上面的丢帧功能</p>
</li>
<li><p><code>Apply Code Changes</code><br>适用于只更改了逻辑片段</p>
</li>
<li><p>无断点暂停：在很长的循环时不知道运行到哪了，在调试窗口左侧点“Pause Program”可以暂停到当前执行的地方</p>
</li>
</ul>
<p>idea断点技巧 <a href="http://qinghua.github.io/intellij-idea-debug/">http://qinghua.github.io/intellij-idea-debug/</a></p>
<h2 id="快速找到设备上显示页面是哪个activity"><a href="#快速找到设备上显示页面是哪个activity" class="headerlink" title="快速找到设备上显示页面是哪个activity"></a>快速找到设备上显示页面是哪个activity</h2><p><strong>法1</strong>：借助AS的<code>Layout Inspector</code>功能</p>
<p>(此法在AS3.6.1之前可用，发现在AS4.0.1没用了)</p>
<p><code>Tools--Layout Inspector</code>，在打开的窗口总选中当前运行项目的进程，再看其罗列出的<code>**Activity</code></p>
<p><strong>法2</strong>：使用<code>ActView</code>插件（推荐）</p>
<p>安装插件：<code>File--Settings--Plugins</code>：搜索<code>ActView</code>进行安装</p>
<p>使用：插上真机；打开app；AS上<code>Help</code>右侧多了个<code>ActView</code>，选择<code>Which Activity</code></p>
<p><strong>法3</strong>：使用ADB命令</p>
<p>查看当前<code>Activity</code></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> <span class="string">&quot;dumpsys window w | grep name=&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>查看当前栈顶的<code>Activity</code></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> <span class="string">&quot;dumpsys activity | grep mFocusedActivity&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>查看当前栈顶的<code>Activity</code>的<code>Fragment</code></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> <span class="string">&quot;dumpsys activity your.package.name&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>在Ubuntu或mac上可以配置环境变量来简化命令</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>配置环境变量</span><br><span class="line">alias dui=<span class="string">&#x27;adb shell &quot;dumpsys window w | grep name=&quot;&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>使用简短的命令</span><br><span class="line">dui</span><br></pre></td></tr></table></figure>



<h2 id="AS4-0以上加guideline无法弄成百分比的问题"><a href="#AS4-0以上加guideline无法弄成百分比的问题" class="headerlink" title="AS4.0以上加guideline无法弄成百分比的问题"></a>AS4.0以上加guideline无法弄成百分比的问题</h2><p>手动添加 <code>app:layout_constraintGuide_percent=&quot;0.11&quot;</code>属性，并且去掉 <code>app:layout_constraintGuide_begin=&quot;20dp&quot;</code>属性。如此就能按百分比拖动了（垂直和水平辅助线都适用）</p>
<p>完整：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.Guideline</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/guideline3&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintGuide_percent</span>=<span class="string">&quot;0.11&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>











<h1 id="IDEA注释"><a href="#IDEA注释" class="headerlink" title="IDEA注释"></a>IDEA注释</h1><h2 id="x2F-x2F-TODO"><a href="#x2F-x2F-TODO" class="headerlink" title="&#x2F;&#x2F; TODO"></a>&#x2F;&#x2F; TODO</h2><p>表示尚未完成的待办事项。</p>
<h2 id="x2F-x2F-XXX"><a href="#x2F-x2F-XXX" class="headerlink" title="&#x2F;&#x2F; XXX"></a>&#x2F;&#x2F; XXX</h2><p>表示被注释的代码虽然实现了功能，但是实现方案有待商榷，希望将来能改进。</p>
<h2 id="x2F-x2F-FIXME"><a href="#x2F-x2F-FIXME" class="headerlink" title="&#x2F;&#x2F; FIXME"></a>&#x2F;&#x2F; FIXME</h2><p>表示被注释的代码需要被修正。</p>
<h2 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h2><p>window–&gt;preferences–&gt;java–&gt;compiler–&gt;Task tags</p>
<h1 id="AS插件"><a href="#AS插件" class="headerlink" title="AS插件"></a>AS插件</h1><h2 id="AS插件推荐"><a href="#AS插件推荐" class="headerlink" title="AS插件推荐"></a>AS插件推荐</h2><p><a href="https://mp.weixin.qq.com/s/vSr-0LyK2huQjCQzlaYcSQ">链接1</a></p>
<table>
<thead>
<tr>
<th align="left">插件名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://plugins.jetbrains.com/plugin/7654-gsonformat">GsonFormat</a></td>
<td>json字符串自动生成对应Java对象<img src="/posts/1947707642/idea%E6%8F%92%E4%BB%B6--gsonformat.gif" alt="idea插件--gsonformat.gif"><br><img src="/posts/1947707642/AndroidStudio%E7%9A%84GsonFromat%E8%AE%BE%E7%BD%AE.png" alt="工具/AndroidStudio的GsonFromat设置"></td>
</tr>
<tr>
<td align="left">Alibaba Java Coding Guidelines</td>
<td>代码规范</td>
</tr>
<tr>
<td align="left"><a href="http://plugins.jetbrains.com/plugin/7369?pr=androidstudio">Android ButterKnife Zelezny</a></td>
<td>配合ButterKnife自动生成注解</td>
</tr>
<tr>
<td align="left">FindViewByMe</td>
<td>生成findViewById</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/u3shadow/RemoveButterKnife">RemoveButterKnife</a></td>
<td>从注解改回findviewbyid</td>
</tr>
<tr>
<td align="left"><del>ActView</del></td>
<td>快速定位到当前Activity&#x2F;Fragment（AS4以上用不了了）</td>
</tr>
<tr>
<td align="left">Codota–》TabNine</td>
<td>代码智能提示</td>
</tr>
<tr>
<td align="left">CodeGlance</td>
<td>在右侧预览代码</td>
</tr>
<tr>
<td align="left"><a href="https://plugins.jetbrains.com/plugin/8579-translation">Translation</a></td>
<td>翻译插件<img src="/posts/1947707642/idea%E6%8F%92%E4%BB%B6--Translation.gif" alt="idea插件--Translation.gif"></td>
</tr>
<tr>
<td align="left">SQLDelight</td>
<td>SQLDelight是一个著名的Kotlin多平台<code>数据库</code>库。它通过SQL生成Kotlin API，并负责根据架构本身创建数据库。<img src="https://pic3.zhimg.com/v2-c9e3148a8268cb63a869f09843be27fe_r.jpg"></td>
</tr>
<tr>
<td align="left">JSON To Kotlin Class</td>
<td>将JSON字符串转换为Kotlin数据类。还支持：<br>一系列JSON注解库-<code>Gson</code>，<code>Jackson</code>，<code>Fastjson</code>，<code>Moshi</code>，<code>LoganSquare</code>等。<br>使用默认值初始化属性，并使它们可以为空。<br>将属性名称重命名为驼峰样式，并将类生成为内部或单个类。<br>如果JSON字符串有效，则从本地文件&#x2F; Http URL加载JSON。</td>
</tr>
<tr>
<td align="left"><a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets">Rainbow Brackets</a></td>
<td>成对括号加不同颜色![idea插件–Rainbow Brackets.jpg](.&#x2F;AndroidStudio相关&#x2F;idea插件–Rainbow Brackets.jpg)</td>
</tr>
<tr>
<td align="left">Material Theme UI</td>
<td>眼睛舒适的主题</td>
</tr>
<tr>
<td align="left">Name That Color</td>
<td>对颜色命名。<img src="https://pic2.zhimg.com/v2-1c45488a4316455a1b0ff0c0bb9e0a41_b.webp" alt="img"></td>
</tr>
<tr>
<td align="left">Gradle Killer</td>
<td>后悔开始Gradle构建或只是希望立即将其关闭。您可以运行<code>ps命令</code>或在任务管理器中四处寻找<code>Java.exe</code>，但这会很麻烦。现在只要点一下按钮即可<img src="https://pic2.zhimg.com/80/v2-84f69c4adfd1fc3fc304fde97b7356b5_720w.png" alt="img"></td>
</tr>
<tr>
<td align="left">Kotlin Fill Class</td>
<td>快速创建具有默认属性的Kotlin类。此IntelliJ插件就是用于此目的。它为<code>空的构造函数</code>和<code>函数</code>提供了意图操作，使您可以快速初始化参数。<img src="https://pic4.zhimg.com/v2-49fc98bbfddd595d0ea1b13b4065446f_b.webp" alt="img"></td>
</tr>
<tr>
<td align="left">NR Null Oject<a href="https://www.jianshu.com/p/45ed86e72cc2">介绍</a></td>
<td>空对象判断<br>项目中还需要引入<code>dependencies &#123;       compile &#39;com.google.guava:guava:27.0-jre&#39;       // or, for Android:       api &#39;com.google.guava:guava:27.0-android&#39;     &#125;</code></td>
</tr>
<tr>
<td align="left">File Expander</td>
<td>可直接打开jar包看代码。（平时能看jar代码 是因为它们在classpath内了）</td>
</tr>
<tr>
<td align="left">Atom Material ICons</td>
<td>一款ICON插件【并不好看，但装上它有使得idea在mac上拖动滚动条或鼠标中键滚屏不卡顿的buff~】</td>
</tr>
<tr>
<td align="left"></td>
<td></td>
</tr>
<tr>
<td align="left"></td>
<td></td>
</tr>
<tr>
<td align="left">GitToolBox</td>
<td>可以提示还有多少文件没提交，远程还有多少文件未更新下来，会提示每一行代码上次提交的时间</td>
</tr>
<tr>
<td align="left"></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines">p3c</a></td>
<td>阿里巴巴出品的java代码规范插件</td>
</tr>
<tr>
<td align="left">ARouter Helper</td>
<td>使用ARouter写的代码，会在左侧有跳转按钮</td>
</tr>
<tr>
<td align="left">TemplateBuilder</td>
<td>生成模板</td>
</tr>
<tr>
<td align="left">SimpleUMLCE</td>
<td>查看类图 <a href="https://plugins.jetbrains.com/plugin/4946-simpleumlce">下载</a> <a href="https://www.cnblogs.com/mengfff/p/6822326.html">说明</a></td>
</tr>
<tr>
<td align="left"><a href="http://plugins.jetbrains.com/plugin/3847?pr=androidstudio">findBugs-IDEA</a></td>
<td>查找bug的插件，Android Studio也提供了代码审查的功能（Analyze-Inspect Code…）<img src="/posts/1947707642/idea%E6%8F%92%E4%BB%B6--findbugs.gif" alt="idea插件--findbugs.gif"></td>
</tr>
<tr>
<td align="left">Grep Console</td>
<td>自定义设置日志不同颜色</td>
</tr>
<tr>
<td align="left">RestfulToolkit</td>
<td>定位某URL对应Controller代码，快速测试Controller接口</td>
</tr>
<tr>
<td align="left">MyBatis Log Plugin</td>
<td>拿出Mybatis的某个具体SQL查询语句</td>
</tr>
<tr>
<td align="left">Free Mybatis plugin</td>
<td>方便地在Mybatis地mapper Java接口方法和mapper XML文件之间切换</td>
</tr>
<tr>
<td align="left">Statistic</td>
<td>项目全局代码统计</td>
</tr>
<tr>
<td align="left"><a href="https://plugins.jetbrains.com/plugin/6317-lombok-plugin">Lombok</a></td>
<td>这个插件的好处在于可以让我们的代码更简洁，减少一些重复的工作，最常用的就是@Data注解，比如在实体类上使用@Data注解，实体类的各个属性就不需要书写get和set方法。<img src="/posts/1947707642/idea%E6%8F%92%E4%BB%B6--lombok.gif" alt="idea插件--lombok.gif"></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/square/leakcanary">LeakCanary</a>（不是插件，需要在gradle中引入）</td>
<td><a href="http://www.liaohuqiu.net/cn/posts/leak-canary-read-me/">在开发阶段方便的检测出内存泄露</a></td>
</tr>
<tr>
<td align="left">TemplateBuilder</td>
<td>选中模板文件，按下【ALT + T】（或在Tools下选择Generate Template），配置模板信息</td>
</tr>
<tr>
<td align="left">1.<a href="http://plugins.jetbrains.com/plugin/7332?pr=androidstudio">Android Parcelable code generator</a><br>2.<a href="https://github.com/mcharmas/android-parcelable-intellij-plugin">android-parcelable-intellij-plugin</a></td>
<td>JavaBean序列化，快速实现Parcelable接口。</td>
</tr>
<tr>
<td align="left"><a href="http://plugins.jetbrains.com/plugin/7742?pr=androidstudio">Lifecycle Sorter</a></td>
<td>可以根据Activity或者fragment的生命周期对其生命周期方法位置进行先后排序，快捷键Ctrl + alt + K</td>
</tr>
<tr>
<td align="left"><a href="http://plugins.jetbrains.com/plugin/7856?pr=androidstudio">ADB WIFI</a></td>
<td>使用wifi无线调试你的app，无需root权限</td>
</tr>
<tr>
<td align="left"><a href="http://plugins.jetbrains.com/plugin/7658?pr=androidstudio">Android Drawable Importer</a></td>
<td>批量导入Drawable ，多源导入Drawable</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/zhonghanwen/AndroidProguardPlugin">AndroidProguardPlugin</a></td>
<td>一键生成项目混淆代码插件(可能有些第三方项目的混淆还未添加完全)</td>
</tr>
<tr>
<td align="left">Markdown Navigator</td>
<td>markdown插件</td>
</tr>
<tr>
<td align="left"><a href="https://plugins.jetbrains.com/plugin/7405">Android Studio Prettify</a></td>
<td>将代码中的字符串写在string.xml文件中</td>
</tr>
<tr>
<td align="left"><a href="https://plugins.jetbrains.com/plugin/7495?pr=">.ignore</a></td>
<td>生成各种ignore文件，一键创建git ignore文件的模板，免得自己去写<img src="/posts/1947707642/idea%E6%8F%92%E4%BB%B6--ignore.gif" alt="idea插件--ignore.gif"></td>
</tr>
<tr>
<td align="left"><a href="https://plugins.jetbrains.com/plugin/7425?pr=">WakaTime</a></td>
<td>记录你在IDE上的工作时间</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/westlinkin/AndroidLocalizationer">AndroidLocalizationer</a></td>
<td>string 资源自动翻译为其他语言的</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/YiiGuxing/TranslationPlugin">TranslationPlugin</a></td>
<td>又一翻译插件,可中英互译。</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/lypeer/Matchmaker">Matchmaker</a></td>
<td>这是一款专为<a href="http://lib.csdn.net/base/wechat">微信</a>小程序开发的插件，目前可在 IntelliJ IDEA 中使用。它可以帮你完成重复机械无趣麻烦的绑定方法的过程，自动的将需要新建的方法注入到 <a href="http://lib.csdn.net/base/javascript">js</a> 文件中去。</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/winterDroid/android-drawable-importer-intellij-plugin">Android Drawable Importer</a></td>
<td>批量导入图片<br>用法：右键 <code>res--New--Batch Drawable Import</code></td>
</tr>
<tr>
<td align="left"><a href="https://plugins.jetbrains.com/plugin/9360-generateallsetter">GenerateAllSetter</a></td>
<td>一键调用一个对象的所有set方法并且赋予默认值 在对象字段多的时候非常方便<img src="http://ww1.sinaimg.cn/large/981009fdly1gj2ov8q6z2g20hs0cyb29.gif" alt="idea插件--generateAllSetter.gif"></td>
</tr>
<tr>
<td align="left">Material Theme UI</td>
<td>超多的主题插件，各种颜色、模式</td>
</tr>
<tr>
<td align="left">idea zookeezper</td>
<td>可以图形化的查看zk 节点信息</td>
</tr>
<tr>
<td align="left">Generate Module From  Template</td>
<td>制作模板</td>
</tr>
<tr>
<td align="left">Key Promoter X</td>
<td>当你在IDE内，把鼠标放按钮上时，Key Promoter X会提示你应该使用的<code>快捷键</code>。</td>
</tr>
<tr>
<td align="left">Clear Cache Plugin</td>
<td>通过使用<code>Clear Cache</code>插件，我们可以检索具有给定前缀的所有软件包，并删除不再需要的软件包。<img src="https://pic3.zhimg.com/v2-95b008eee2d4a1fe5ecaef46e86d3ada_b.webp" alt="img"></td>
</tr>
<tr>
<td align="left">SQLScout</td>
<td>对Android Studio和IntelliJ IDEA极好的SQLite支持，可让您实时管理数据库。这使得在调试应用程序时轻松实时执行SQL查询以更新表。还支持Room 持久性库-从现有数据库模式自动生成<code>Room 实体</code>，<code>DAO</code>，<code>Migration</code>和<code>Database类</code>。数据库图表，带有语法突出显示工具的SQL编辑器，可导出schema 为Excel等不同格式。<img src="https://pic1.zhimg.com/80/v2-b7fce0ccd4d5fadd93f8f6fccfc0efe0_720w.jpg" alt="img"></td>
</tr>
<tr>
<td align="left">Material Design Icon Generator</td>
<td>这个插件可以帮助你在Android应用程序中添加Material设计图标。导入assets，指定<code>颜色</code>，<code>大小</code>和<code>密度</code>非常简单。<img src="https://pic3.zhimg.com/v2-c9bdd4279f9c33632b3a7295bc1f743e_b.webp" alt="img"></td>
</tr>
<tr>
<td align="left">Nyan Progress Bar</td>
<td>有趣的彩色进度条。可让您在Gradle构建和重建过程中始终陪伴着您。</td>
</tr>
</tbody></table>
<ul>
<li><p><a href="https://github.com/JesusFreke/smalidea">smali代码调试插件</a></p>
<p>还没用上。。</p>
</li>
<li><p>GitToolBox 可以看每一行代码都是谁改的</p>
</li>
<li></li>
</ul>
<h2 id="AS-SVN插件配置（windows）"><a href="#AS-SVN插件配置（windows）" class="headerlink" title="AS SVN插件配置（windows）"></a>AS SVN插件配置（windows）</h2><p>Settings 里找到 Version Control–Subversion</p>
<p><img src="/posts/1947707642/AS%E9%85%8D%E7%BD%AEsvn.jpg" alt="AS配置svn.png"></p>
<p>svn.exe 是安装 TortoiseSVN 时有个选项安装<code>command line client tools</code></p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="控制台中文输出乱码"><a href="#控制台中文输出乱码" class="headerlink" title="控制台中文输出乱码"></a>控制台中文输出乱码</h2><h3 id="idea中设置"><a href="#idea中设置" class="headerlink" title="idea中设置"></a>idea中设置</h3><ol>
<li>idea安装目录，进入bin目录</li>
</ol>
<p><code>idea.exe.vmoptions</code>和<code>idea64.exe.vmoptions</code>最后面添加</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">-Dfile.encoding</span>=UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>更改<code>Settings-Editor-File Encoding</code>编码：更改成UTF-8编码</li>
</ol>
<p><img src="/posts/1947707642/idea%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B9%B1%E7%A0%81%E6%9B%B4%E6%94%B9FileEncoding.jpg" alt="idea控制台乱码更改FileEncoding.png"></p>
<h2 id="OutOfMemoryError"><a href="#OutOfMemoryError" class="headerlink" title="OutOfMemoryError"></a><a href="https://blog.csdn.net/LZH984294471/article/details/51029289">OutOfMemoryError</a></h2><p><code>Settings--Build,Execution,Deployment--Compiler</code>右侧找到Build process heap size：改成2048</p>
<p><code>Settings--Build,Execution,Deployment--Compiler--ActionScript&amp;Flex Compiler</code>右侧找到<code>Compiler heap size</code>：改成2048</p>
<h2 id="PermGen-space内存溢出"><a href="#PermGen-space内存溢出" class="headerlink" title="PermGen space内存溢出"></a><a href="https://blog.csdn.net/pansanday/article/details/78292428">PermGen space内存溢出</a></h2><p><code>Settings--Build,Execution,Deployment--Build Tools--Maven--Runner</code>修改右侧VM Options内容：<code>-XX:MaxPermSize=4096M</code></p>
<h2 id="Build窗口的中文字符乱码"><a href="#Build窗口的中文字符乱码" class="headerlink" title="Build窗口的中文字符乱码"></a>Build窗口的中文字符乱码</h2><p>问题描述：AS升级到3.6.2后Build窗口出现中文乱码</p>
<p>解决：打开<code>studio64.exe.vmoptions</code>（在AS安装目录的bin下），在最后添加一行<code>-Dfile.encoding=UTF-8</code></p>
<h2 id="代码报红色错误，但是可以运行的问题"><a href="#代码报红色错误，但是可以运行的问题" class="headerlink" title="代码报红色错误，但是可以运行的问题"></a>代码报红色错误，但是可以运行的问题</h2><p>尝试以下步骤：</p>
<ol>
<li>使用自带的清除缓存功能</li>
</ol>
<p>AS–》File–》Invalidate Caches&#x2F;Restart…</p>
<ol start="2">
<li>删除工程目录下<code>.gradle</code>和<code>.idea</code></li>
</ol>
<p>关闭 AS，进入工程根目录，删除<code>.gradle</code>、<code>.idea</code>，重新打开 AS</p>
<ol start="3">
<li>如果 1、2 不起效，那么删除<code>.AndoridStudio</code>下除了<code>config</code>外的所有目录</li>
</ol>
<p>路径<code>C:\Users\Administrator\.AndroidStudio3.1\system</code>，删除<code>system</code></p>
<ol start="4">
<li>删除 user 目录下<code>.gradle</code></li>
</ol>
<p>路径<code>C:\Users\Administrator\.gradle</code>，删除<code>.gradle</code></p>
<ol start="5">
<li>如果上面的步骤还是不行。删除项目重新checkout一份（项目名称改成不一样的）</li>
</ol>
<h2 id="javaCompileOptions-annotationProcessorOptions"><a href="#javaCompileOptions-annotationProcessorOptions" class="headerlink" title="javaCompileOptions.annotationProcessorOptions"></a>javaCompileOptions.annotationProcessorOptions</h2><p>问题：AS Plugin3.0.0 Gradle-<code>javaCompileOptions.annotationProcessorOptions</code></p>
<p>在 app 的 <code>build.gradle</code> 中：在 android–》defaultConfig 内添加以下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">javaCompileOptions.annotationProcessorOptions.includeCompileClasspath</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h2 id="AS3-5以上格式化xml时布局错乱问题"><a href="#AS3-5以上格式化xml时布局错乱问题" class="headerlink" title="AS3.5以上格式化xml时布局错乱问题"></a>AS3.5以上格式化xml时布局错乱问题</h2><p>设置 &gt; code style &gt; XML 右上角 Set from然后选择Predefined Style…&gt;Android即可</p>
<p><img src="/posts/1947707642/AS%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%90%8Exml%E5%B8%83%E5%B1%80%E9%94%99%E4%B9%B1%E8%A7%A3%E5%86%B3.jpg" alt="AS格式化后xml布局错乱解决.png"></p>
<h2 id="AS运行报找不到apk，导致无法正常安装到真机（实际找的是前一天的apk）"><a href="#AS运行报找不到apk，导致无法正常安装到真机（实际找的是前一天的apk）" class="headerlink" title="AS运行报找不到apk，导致无法正常安装到真机（实际找的是前一天的apk）"></a>AS运行报找不到apk，导致无法正常安装到真机（实际找的是前一天的apk）</h2><p>在AS右侧，点击Gradle，选择整个项目，点击“Refresh All Gradle Projects”或者“Refresh Gradle Dependencies”</p>
<h2 id="如果断点了但跳不到对应的源码，那就是被混淆了"><a href="#如果断点了但跳不到对应的源码，那就是被混淆了" class="headerlink" title="如果断点了但跳不到对应的源码，那就是被混淆了"></a>如果断点了但跳不到对应的源码，那就是被混淆了</h2><p>minifyEnabled:false关闭混淆</p>
<h2 id="bash-gradlew-command-not-found（Mac）"><a href="#bash-gradlew-command-not-found（Mac）" class="headerlink" title="bash: gradlew: command not found（Mac）"></a>bash: gradlew: command not found（Mac）</h2><p>打开环境变量文件</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">open -e ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>配置 gradle</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">GRADLE_HOME</span>=/usr/local/Cellar/gradle/6.1.1</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$GRADLE_HOME/bin</span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">export PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="regexp">/Applications/</span>Android Studio.app<span class="regexp">/Contents/g</span>radle<span class="regexp">/gradle-2.14.1/</span>bin</span><br></pre></td></tr></table></figure>





<h2 id="ctrl-shift-f-不能用"><a href="#ctrl-shift-f-不能用" class="headerlink" title="ctrl + shift + f 不能用"></a>ctrl + shift + f 不能用</h2><p>其他快捷键没有问题，这种情况很大可能是输入法占用了ctrl + shift + f</p>
<h2 id="Warning：JKS-密钥库使用专用格式。建议使用-“keytool-importkeystore-…"><a href="#Warning：JKS-密钥库使用专用格式。建议使用-“keytool-importkeystore-…" class="headerlink" title="Warning：JKS 密钥库使用专用格式。建议使用 “keytool -importkeystore …"></a>Warning：JKS 密钥库使用专用格式。建议使用 “keytool -importkeystore …</h2><p>用新版AS（4.0+）新建签名文件时会有警告<br><img src="/posts/1947707642/%E7%94%A8%E6%96%B0%E7%89%88AS%E5%88%9B%E5%BB%BA%E7%AD%BE%E5%90%8D%E6%96%87%E4%BB%B6%E6%97%B6%E6%8A%A5%E8%AD%A6%E5%91%8A.jpg" alt="用新版AS创建签名文件时报警告.png"></p>
<p>解决：使用提示内的命令</p>
<h2 id="打开模拟器报错：Error-while-waiting……-process-for-AVD-Pixel-XL-API-29-was-killed"><a href="#打开模拟器报错：Error-while-waiting……-process-for-AVD-Pixel-XL-API-29-was-killed" class="headerlink" title="打开模拟器报错：Error while waiting…… process for AVD Pixel_XL_API_29 was killed"></a>打开模拟器报错：Error while waiting…… process for AVD Pixel_XL_API_29 was killed</h2><p>重装HAXM</p>
<p>方法一：Settings–&gt;System Settings–&gt;Android SDK–&gt;切换到SDK Tools页签：找到<code>Intel x86 Emulator Accelerator(HAXM installer)</code>卸载，重启AS再重装它</p>
<p>方法二：打开控制面板的程序，找到HAXM卸载（记得要关闭掉已经打开的模拟器）</p>
<h2 id="Your-project-path-contains-non-ASCII-characters"><a href="#Your-project-path-contains-non-ASCII-characters" class="headerlink" title="Your project path contains non-ASCII characters"></a>Your project path contains non-ASCII characters</h2><ol>
<li><p>先确保项目的路径名称没有中文</p>
</li>
<li><p><a href="https://blog.csdn.net/jia635/article/details/77769382">在<code>gradle.properties</code>中添加<code>com.android.build.gradle.overridePathCheck=true</code></a></p>
</li>
</ol>
<h2 id="SSL-peer-shut-down-incorrectly"><a href="#SSL-peer-shut-down-incorrectly" class="headerlink" title="SSL peer shut down incorrectly"></a>SSL peer shut down incorrectly</h2><p>解决方案：<br>网上的一个解决方法是把配置文件<code>gradle-wrapper.properties</code>中的<code>distributionUrl</code>参数从<code>https://services.gradle.org/distributions/</code>换成<code>http://</code>。<br>但这个解决方法已经不行了，因为<code>gradle</code>把服务部署在<code>cloudflare</code>上，如果使用http访问会报错：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Error </span>1020 Ray ID: 55f3e39ffd4aa2ca • 2020<span class="string">-02</span><span class="string">-03</span> 10:58:20 UTC</span><br><span class="line">Access denied</span><br><span class="line">What happened?</span><br><span class="line">This website is using a security service to protect itself from online attacks.</span><br></pre></td></tr></table></figure>
<p>解决方法1：到官网手动下载压缩包：<a href="https://services.gradle.org/distributions/">Gradle Distributions</a>，解压到目录%USERPROFILE%&#x2F;.gradle&#x2F;wrapper&#x2F;dists<br>解压后重启 Android Studio即可。</p>
<p>解决方法2：把URL直接改成本地已经下载的 gradle</p>
<h2 id="plugin-error-Plugin-“xxx”is-incompatible-supported-only-in-IntelliJ-IDEA"><a href="#plugin-error-Plugin-“xxx”is-incompatible-supported-only-in-IntelliJ-IDEA" class="headerlink" title="plugin error: Plugin “xxx”is incompatible (supported only in IntelliJ IDEA)."></a>plugin error: Plugin “xxx”is incompatible (supported only in IntelliJ IDEA).</h2><p>打开<code>C:\Users\Administrator\AppData\Roaming\Google\AndroidStudio4.1\plugins</code>找到对应名字”xxx”的plugin，删除掉即可</p>
<h2 id="Gradle-sync-failed-Connection-refused"><a href="#Gradle-sync-failed-Connection-refused" class="headerlink" title="Gradle sync failed: Connection refused"></a>Gradle sync failed: Connection refused</h2><p>解决：用户&#x2F;.gradle&#x2F;gradle.properties,删除该文件【<code>C:\Users\Administrator\.gradle\gradle.properties</code>】</p>
<h2 id="写模板的时候，项目报Kotlin-not-configured"><a href="#写模板的时候，项目报Kotlin-not-configured" class="headerlink" title="写模板的时候，项目报Kotlin not configured"></a>写模板的时候，项目报<code>Kotlin not configured</code></h2><p>![kotlin not configured](.&#x2F;AndroidStudio相关&#x2F;kotlin not configured.png)</p>
<p>解决：卸载掉错误的plugin；关闭AS，删除<code>.gradle</code>、<code>.idea</code>、<code>build</code>，重新打开AS</p>
<h2 id="Could-not-resolve-commons-io-commons-io-2-6"><a href="#Could-not-resolve-commons-io-commons-io-2-6" class="headerlink" title="Could not resolve commons-io:commons-io:2.6"></a>Could not resolve commons-io:commons-io:2.6</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Could <span class="keyword">not</span> resolve commons-io:commons-io:2.6.</span><br><span class="line">         &gt; Could <span class="keyword">not</span> <span class="built_in">get</span><span class="built_in"> resource </span><span class="string">&#x27;https://dl.google.com/dl/android/maven2/commons-io/commons-io/2.6/commons-io-2.6.pom&#x27;</span>.</span><br><span class="line">            &gt; Could <span class="keyword">not</span> <span class="built_in">GET</span> <span class="string">&#x27;https://dl.google.com/dl/android/maven2/commons-io/commons-io/2.6/commons-io-2.6.pom&#x27;</span>.</span><br><span class="line">               &gt; Can<span class="string">&#x27;t connect to SOCKS proxy:Connection refused: connect</span></span><br></pre></td></tr></table></figure>

<p>在<code>C:/用户/Administrator/.gradle</code>添加了<code>init.gradle</code>，配置了阿里云镜像导致的</p>
<p>解决：暂时去掉了全局配置的<code>init.gradle</code>。若有需要可在特定项目中添加<a href="#%E5%AF%B9%E6%8C%87%E5%AE%9A%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE">对指定项目配置</a></p>
<h2 id="Plugin-id-‘org-jetbrains-kotlin-jvm’-version-‘1-4-0’-was-not-found-in-any-of-the-following-sources"><a href="#Plugin-id-‘org-jetbrains-kotlin-jvm’-version-‘1-4-0’-was-not-found-in-any-of-the-following-sources" class="headerlink" title="Plugin [id: ‘org.jetbrains.kotlin.jvm’, version: ‘1.4.0’] was not found in any of the following sources"></a>Plugin [id: ‘org.jetbrains.kotlin.jvm’, version: ‘1.4.0’] was not found in any of the following sources</h2><h2 id="升级AS4-2的坑"><a href="#升级AS4-2的坑" class="headerlink" title="升级AS4.2的坑"></a><a href="https://juejin.cn/post/6959013426823692318">升级AS4.2的坑</a></h2><h2 id="Execution-failed-for-task-‘-app-compileDebugJavaWithJavac’"><a href="#Execution-failed-for-task-‘-app-compileDebugJavaWithJavac’" class="headerlink" title="Execution failed for task ‘:app:compileDebugJavaWithJavac’"></a>Execution failed for task ‘:app:compileDebugJavaWithJavac’</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">Execution failed <span class="keyword">for</span> <span class="keyword">task</span> <span class="string">&#x27;:app:compileDebugJavaWithJavac&#x27;</span>. </span><br><span class="line">&gt; javax<span class="regexp">/xml/</span>bind/JAXBException</span><br></pre></td></tr></table></figure>





<h2 id="Android-Studio-右侧的Gradle不显示Task的问题"><a href="#Android-Studio-右侧的Gradle不显示Task的问题" class="headerlink" title="Android Studio 右侧的Gradle不显示Task的问题"></a>Android Studio 右侧的Gradle不显示Task的问题</h2><ol>
<li>File》Experimental，不勾选“Do not build Gradle task list during Gradle sync”</li>
<li>然后点击“Sync Project”即可</li>
</ol>
<h2 id="打开Profiler，app闪退"><a href="#打开Profiler，app闪退" class="headerlink" title="打开Profiler，app闪退"></a><a href="https://blog.csdn.net/zgz9949/article/details/111641415">打开Profiler，app闪退</a></h2><p>解决：</p>
<p>方法一：打开<code>AS</code>》<code>Device File Explorer</code>，找到 <code>/data/data/pacakge_name/codecache</code> 文件夹，删除它</p>
<p>方法二：打开<code>AS</code>》<code>Device File Explorer</code>，找到 <code>/data/local/tmp/perfd</code> 文件夹，删除它，即可。如果怕删除有问题，可以先把它备份下，再删除。</p>
<h2 id="Profiler的Capture-heap-dump用不了"><a href="#Profiler的Capture-heap-dump用不了" class="headerlink" title="Profiler的Capture heap dump用不了"></a>Profiler的Capture heap dump用不了</h2><p>按上面的方法一二删除了相应文件夹后，不闪退了，但是Capture heap dump依然是灰色不可用状态。</p>
<p>解决：开发者模式中（调试位置不要选应用）【不确定是不是它】</p>
<h2 id="Capture-heap-dump自动断开"><a href="#Capture-heap-dump自动断开" class="headerlink" title="Capture heap dump自动断开"></a>Capture heap dump自动断开</h2><h2 id="运行flutter-doctor-–android-licenses时报错"><a href="#运行flutter-doctor-–android-licenses时报错" class="headerlink" title="运行flutter doctor –android-licenses时报错"></a>运行flutter doctor –android-licenses时报错</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">java.lang.UnsupportedClassVersionError: com<span class="regexp">/android/</span>sdklib<span class="regexp">/tool/</span>sdkmanager/SdkManagerCli has been compiled by a more recent version of the Java <span class="keyword">Runtime</span> (<span class="keyword">class</span> <span class="keyword">file</span> version <span class="number">61.0</span>), <span class="keyword">this</span> version of the Java <span class="keyword">Runtime</span> only recog</span><br><span class="line">nizes <span class="keyword">class</span> <span class="keyword">file</span> versions up to <span class="number">55.0</span></span><br></pre></td></tr></table></figure>
<p>解决：  </p>
<blockquote>
<p>未解决，但Settings》Android SDK》SDK Tools：“Android SDK Command-line Tools”改成“8.0”，可以解决flutter doctor的一个错误</p>
</blockquote>
<h2 id="Unable-to-find-bundled-Java-version"><a href="#Unable-to-find-bundled-Java-version" class="headerlink" title="Unable to find bundled Java version."></a>Unable to find bundled Java version.</h2><p>flutter doctor后出现：  </p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Android Studio (<span class="keyword">version</span> <span class="number">2023.2</span>)</span><br><span class="line">Unable <span class="keyword">to</span> <span class="keyword">find</span> bundled Java <span class="keyword">version</span>.</span><br></pre></td></tr></table></figure>
<p>解决： <a href="https://blog.csdn.net/woshidanoob/article/details/128779709">https://blog.csdn.net/woshidanoob/article/details/128779709</a><br>AS安装目录下的jbr下的所有文件复制一份到jre中</p>
<h2 id="HTTP-Host-availability-check-is-taking-a-long-time…-HTTP-Host-Availability"><a href="#HTTP-Host-availability-check-is-taking-a-long-time…-HTTP-Host-Availability" class="headerlink" title="HTTP Host availability check is taking a long time…[!] HTTP Host Availability"></a>HTTP Host availability check is taking a long time…[!] HTTP Host Availability</h2><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">HTTP Host availability<span class="built_in"> check </span>is taking a<span class="built_in"> long </span>time...[!] HTTP Host Availability</span><br><span class="line">    X HTTP host <span class="string">&quot;https://maven.google.com/&quot;</span> is<span class="built_in"> not </span>reachable. Reason: An error occurred while checking the HTTP host: 信号灯超时时间已到</span><br></pre></td></tr></table></figure>
<p>解决： <a href="https://blog.csdn.net/qq_41602125/article/details/127407360">https://blog.csdn.net/qq_41602125/article/details/127407360</a>  </p>
<ol>
<li>找到Flutter SDK下“packages》flutter_tools》lib》src》http_host_validator.dart”：修改<br> 将<a href="https://maven.google.com/">https://maven.google.com/</a> 修改为<a href="https://dl.google.com/dl/android/maven2/">https://dl.google.com/dl/android/maven2/</a></li>
<li>关闭所有打开了flutterSDK的程序，找到flutter\bin目录下的flutter_tools.snapshot文件，永久删除。</li>
<li>配置国内的pub插件镜像地址，参数如下  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">PUB_HOSTED_URL</span><br><span class="line">https:<span class="regexp">//</span>pub.flutter-io.cn</span><br><span class="line"></span><br><span class="line">FLUTTER_STORAGE_BASE_URL</span><br><span class="line">https:<span class="regexp">//</span>storage.flutter-io.cn</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的我只做了第3步，1的检查了已经改过了，还是不行。所以删除了flutter sdk 重装flutter sdk 可以了。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>AndroidStudio-代码快捷键&amp;模板</title>
    <url>/posts/8f94baaa/</url>
    <content><![CDATA[<h1 id="AS-快捷键"><a href="#AS-快捷键" class="headerlink" title="AS 快捷键"></a><a href="https://github.com/suzeyu1992/repo/tree/master/project/AS">AS 快捷键</a></h1><p>速查表列出了<code>keymap</code>快捷键的名称. 可以直接通过<code>AS setting</code>界面搜索<code>keymap</code>. 通过对应的快捷键名称来添加或者修改快捷键.</p>
<table>
<thead>
<tr>
<th>功能描述</th>
<th>keymap对应名字</th>
<th>Mac</th>
<th>Win&#x2F;Linux</th>
</tr>
</thead>
<tbody><tr>
<td><strong>提示错误解决方案</strong></td>
<td><strong>Show Intention Actions</strong></td>
<td><strong><code>option + enter</code></strong></td>
<td><strong><code>alt + enter</code></strong></td>
</tr>
<tr>
<td>AS配置界面</td>
<td>Preferences</td>
<td><code>command + ,</code></td>
<td><code>control+alt+S</code></td>
</tr>
<tr>
<td>工程项目配置界面</td>
<td>Project Structure</td>
<td><code>command + ;</code></td>
<td><code>Control＋Alt+Shift+S</code></td>
</tr>
<tr>
<td><strong>快速构成代码</strong></td>
<td><strong>Code Generate</strong></td>
<td><strong><code>command + N</code></strong></td>
<td><strong><code>alt + insert</code></strong></td>
</tr>
<tr>
<td>代码提示</td>
<td>Completion&#x2F;Basic</td>
<td><code>control + space</code>(mac会冲突, 手动修改)</td>
<td><code>ctrl + 空格</code>(win同样大部分和输入法冲突, 手动修改)</td>
</tr>
<tr>
<td>选择视图</td>
<td>select in any view</td>
<td><code>option + F1</code></td>
<td><code>alt + F1</code></td>
</tr>
<tr>
<td>添加书签标识</td>
<td>Toggle Bookmark</td>
<td><code>option + F3</code></td>
<td><code>ctrl + F11</code></td>
</tr>
<tr>
<td><strong>显示书签</strong></td>
<td><strong>Show Bookmarks</strong></td>
<td><strong><code>command + F3</code></strong></td>
<td><strong><code>shift + F11</code></strong></td>
</tr>
<tr>
<td><strong>添加书签</strong></td>
<td><strong>Toggle Bookmark</strong></td>
<td><strong><code>F3</code></strong></td>
<td><strong><code>F11</code></strong></td>
</tr>
<tr>
<td><strong>向下移动一行</strong></td>
<td><strong>Move Line Down</strong></td>
<td><strong><code>option + shift + Down</code></strong></td>
<td><strong><code>alt + shift + Down</code></strong></td>
</tr>
<tr>
<td><strong>向上移动一行</strong></td>
<td><strong>Move Line Up</strong></td>
<td><strong><code>option + shift + Up</code></strong></td>
<td><strong><code>alt + shift + Up</code></strong></td>
</tr>
<tr>
<td>注释代码</td>
<td>Comment with Line Comment</td>
<td><code>command + /</code></td>
<td><code>ctrl + /</code></td>
</tr>
<tr>
<td>用代码模板包裹代码</td>
<td>surround with Live Template</td>
<td><code>command + option + J</code></td>
<td><code>ctrl + alt + J</code></td>
</tr>
<tr>
<td><strong>格式化代码</strong></td>
<td><strong>Reformat Code</strong></td>
<td><strong><code>command + option + L</code></strong></td>
<td><strong><code>ctrl + alt + L</code></strong></td>
</tr>
<tr>
<td>Copy Reference</td>
<td>Copy Reference</td>
<td><code>command + option + shift + C</code></td>
<td><code>ctrl + alt + shift + C</code></td>
</tr>
<tr>
<td><strong>if&#x2F;try等包裹代码</strong></td>
<td><strong>Surround With..</strong></td>
<td><strong><code>command + option + T</code></strong></td>
<td><strong><code>ctrl + alt + T</code></strong></td>
</tr>
<tr>
<td>查看声明</td>
<td>Declaration</td>
<td><code>command + B</code></td>
<td><code>ctrl + B</code></td>
</tr>
<tr>
<td><strong>快捷向下复制行</strong></td>
<td><strong>Duplicate Line or Block</strong></td>
<td><strong><code>command + D</code></strong></td>
<td><strong><code>ctrl + D</code></strong></td>
</tr>
<tr>
<td><strong>删除行</strong></td>
<td><strong>Delete Line</strong></td>
<td><strong><code>command + delete</code></strong></td>
<td><strong><code>ctrl + Y</code></strong></td>
</tr>
<tr>
<td>快捷最近打开</td>
<td>Recent Files</td>
<td><code>command + E</code></td>
<td><code>ctrl + E</code></td>
</tr>
<tr>
<td><strong>查找</strong></td>
<td><strong>Edit&#x2F;Find&#x2F;Find</strong></td>
<td><strong><code>command + F</code></strong></td>
<td><strong><code>ctrl + F</code></strong></td>
</tr>
<tr>
<td><strong>全路径查找</strong></td>
<td><strong>Find in Path</strong></td>
<td><strong><code>command + shift + F</code></strong></td>
<td><strong><code>ctrl + shift + F</code></strong></td>
</tr>
<tr>
<td><strong>文件方法结构（类似eclipse中的Ctrl+O)</strong></td>
<td><strong>File Structure</strong></td>
<td><strong><code>command + F12</code></strong></td>
<td><strong><code>ctrl + F12</code></strong></td>
</tr>
<tr>
<td>代码高亮向下查找</td>
<td>Move To Next Occurrence</td>
<td><code>command + G</code></td>
<td><code>F3</code></td>
</tr>
<tr>
<td>代码高亮向上查找</td>
<td>Move To Previous Occurrence</td>
<td><code>command + shift + G</code></td>
<td><code>shift + F3</code></td>
</tr>
<tr>
<td>按照模板生成代码</td>
<td>Insert Live Template</td>
<td><code>command + J</code></td>
<td><code>ctrl + J</code></td>
</tr>
<tr>
<td><strong>定位到行</strong></td>
<td><strong>Navigate&#x2F;Line</strong></td>
<td><strong><code>command + L</code></strong></td>
<td><strong><code>ctrl + G</code></strong></td>
</tr>
<tr>
<td>快速到行首&#x2F;尾</td>
<td>Move Caret to Line Start&#x2F;End</td>
<td><code>command + Left/Right</code></td>
<td><code>ctrl + Left/Right</code></td>
</tr>
<tr>
<td>代码折叠&#x2F;展开</td>
<td>Collapse&#x2F;Expand</td>
<td><code>command + 减号/加号</code></td>
<td><code>ctrl + 减号/加号</code></td>
</tr>
<tr>
<td>查找类</td>
<td>Navigate&#x2F;Class</td>
<td><code>command + O</code></td>
<td><code>ctrl + N</code></td>
</tr>
<tr>
<td>多行注释</td>
<td>**Code&#x2F;Comment **</td>
<td><code>command + option + /</code></td>
<td><code>ctrl + alt + /</code></td>
</tr>
<tr>
<td>格式化代码</td>
<td>Reformat Code</td>
<td><code>command + option + L</code></td>
<td><code>ctrl + alt + L</code></td>
</tr>
<tr>
<td>提示参数类型</td>
<td>Parameter Info</td>
<td><code>command + P</code></td>
<td><code>ctrl + P</code></td>
</tr>
<tr>
<td><strong>查找替换</strong></td>
<td><strong>Replace</strong></td>
<td><strong><code>command + R</code></strong></td>
<td><strong><code>ctrl + R</code></strong></td>
</tr>
<tr>
<td>查找命令</td>
<td>Find Action</td>
<td><code>command + shift + A</code></td>
<td><code>ctrl + shift + A</code></td>
</tr>
<tr>
<td>拷贝文件路径</td>
<td>Copy Paths</td>
<td><code>command + shift + C</code></td>
<td><code>ctrl + shift + C</code></td>
</tr>
<tr>
<td><strong>移动代码块</strong></td>
<td><strong>Move Statement Up&#x2F;Down</strong></td>
<td><strong><code>command + shift + down/up</code></strong></td>
<td><strong><code>ctrl + shift + down/up</code></strong></td>
</tr>
<tr>
<td><strong>代码补全</strong></td>
<td><strong>Complete Current Statement</strong></td>
<td><strong><code>command + shift + enter</code></strong></td>
<td><strong><code>ctrl + shift + enter</code></strong></td>
</tr>
<tr>
<td>代码高亮</td>
<td>Highlight Usages in File</td>
<td><code>command + shift + F7</code></td>
<td><code>alt + J</code></td>
</tr>
<tr>
<td>窗口内所有代码折叠&#x2F;展开</td>
<td>Collapse&#x2F;Expand All</td>
<td><code>command + shift + 减号/加号</code></td>
<td><code>ctrl + shift + 减号/加号</code></td>
</tr>
<tr>
<td>查找文件</td>
<td>Navigate&#x2F;File</td>
<td><code>command + shift + O</code></td>
<td><code>ctrl + shift + N</code></td>
</tr>
<tr>
<td>全路径中替换</td>
<td>Replace in Path</td>
<td><code>command + shift + R</code></td>
<td><code>ctrl + shift + R</code></td>
</tr>
<tr>
<td>大小写转换</td>
<td>Toggle Case</td>
<td><code>command + shift + U</code></td>
<td><code>ctrl + shift + U</code></td>
</tr>
<tr>
<td>显示粘贴版历史</td>
<td>Paste from History</td>
<td><code>command + shift + V</code></td>
<td><code>ctrl + shift + V</code></td>
</tr>
<tr>
<td>快速查找定义</td>
<td></td>
<td><code>command + space</code></td>
<td><code>ctrl + shift + I</code></td>
</tr>
<tr>
<td>粘贴</td>
<td>Paste</td>
<td><code>command + V</code></td>
<td><code>ctrl + V</code></td>
</tr>
<tr>
<td>复制</td>
<td>Copy</td>
<td><code>command + C</code></td>
<td><code>ctrl + C</code></td>
</tr>
<tr>
<td><strong>去除无效包引用</strong></td>
<td><strong>Optimize Imports</strong></td>
<td><strong><code>control + option + O</code></strong></td>
<td><strong><code>ctrl + alt + O</code></strong></td>
</tr>
<tr>
<td>显示类关系继承体系</td>
<td>Type Hierarchy</td>
<td><code>control + H</code></td>
<td><code>ctrl + H</code></td>
</tr>
<tr>
<td>快速覆写方法</td>
<td>override Methods</td>
<td><code>control + O</code></td>
<td><code>ctrl + O</code></td>
</tr>
<tr>
<td>查找调用的位置</td>
<td>Call hierarchy</td>
<td><code>control + option + H</code></td>
<td><code>ctrl + alt + H</code></td>
</tr>
<tr>
<td>扩大缩小选中范围</td>
<td>Extend Selection&#x2F;Shrink Selection</td>
<td><code>option + UP/Down</code></td>
<td><code>ctrl + W + shift + W</code></td>
</tr>
<tr>
<td>跳转到父类</td>
<td>Super method</td>
<td><code>command + U</code></td>
<td><code>ctrl + U</code></td>
</tr>
<tr>
<td>关闭当前tab标签</td>
<td>Editor Tabs &#x2F; Close</td>
<td><code>command + W</code></td>
<td><code>ctrl + shift + a</code></td>
</tr>
<tr>
<td>关闭除编辑窗口的其余窗口</td>
<td>Hide All Tool Windows</td>
<td><code>command + shift + F12</code></td>
<td><code>ctrl + shift + F12</code></td>
</tr>
<tr>
<td>预览方法定义</td>
<td>Quick Definition</td>
<td><code>command + Y</code></td>
<td><code>ctrl + shift + I</code></td>
</tr>
<tr>
<td>返回光标最后编辑位置</td>
<td>Last Edit Location</td>
<td><code>command + shift + delete</code></td>
<td><code>control + shift + Backspace</code></td>
</tr>
<tr>
<td>调到代码块首部&#x2F;尾部</td>
<td>Move Caret To Code Block</td>
<td><code>Option + Command + [ 或者 ]</code></td>
<td><code>Control+[ 或者 ]</code></td>
</tr>
<tr>
<td>重命名</td>
<td>Rename</td>
<td><code>shift + F6</code></td>
<td><code>shift + F6</code></td>
</tr>
<tr>
<td>抽取方法</td>
<td>Extract Method</td>
<td><code>command + option + M</code></td>
<td><code>control+alt+M</code></td>
</tr>
<tr>
<td>抽取变量</td>
<td>Extract Variable</td>
<td><code>command + option + V</code></td>
<td><code>control+alt+V</code></td>
</tr>
<tr>
<td>抽取字段</td>
<td>Extract Field</td>
<td><code>command + option + F</code></td>
<td><code>control+alt+F</code></td>
</tr>
<tr>
<td>抽取常量</td>
<td>Extract Constant</td>
<td><code>command + option + C</code></td>
<td><code>control+alt+C</code></td>
</tr>
<tr>
<td>抽取参数</td>
<td>Extract Parameter</td>
<td><code>command + option + P</code></td>
<td><code>control+alt+P</code></td>
</tr>
<tr>
<td>重构入口</td>
<td>Refactor This</td>
<td><code>control + T</code></td>
<td><code>ctrl + alt + shift + T</code></td>
</tr>
<tr>
<td><strong>打开文件</strong></td>
<td></td>
<td><strong>双击Shift</strong></td>
<td><strong>双击Shift</strong></td>
</tr>
<tr>
<td><strong>撤销</strong></td>
<td></td>
<td><strong>Command+Z</strong></td>
<td><strong>Ctrl+Z</strong></td>
</tr>
<tr>
<td><strong>前进</strong></td>
<td></td>
<td><strong>Command+Shift+Z</strong></td>
<td><strong>Ctrl+Shift+Z</strong></td>
</tr>
</tbody></table>
<p>Idea的<code>Structure</code>（View–Tool Windows–Structure）类似于eclipse中的<code>outline</code></p>
<h1 id="代码中快捷键-Live-Templates"><a href="#代码中快捷键-Live-Templates" class="headerlink" title="代码中快捷键(Live Templates)"></a>代码中快捷键(Live Templates)</h1><figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line"><span class="name">C</span>:\Users\monecity\.AndroidStudio3<span class="number">.6</span>\config\templates</span><br></pre></td></tr></table></figure>

<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line"><span class="name">C</span>:\Users\monecity\.AndroidStudio3<span class="number">.6</span>\config\fileTemplates</span><br></pre></td></tr></table></figure>

<p>注意，上面的路径在AS4.1之后变了，具体可以这么找<code>AS&gt;File&gt;Manage IDE Settings&gt;Restore Default Settings...</code>在弹出框中可以看到新的路径（已经没有了<code>config</code>和<code>system</code>这俩目录）</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line"><span class="name">C</span>:\Users\Administrator\AppData\Roaming\Google\AndroidStudio4<span class="number">.1</span>\templates</span><br><span class="line"><span class="name">C</span>:\Users\Administrator\AppData\Roaming\Google\AndroidStudio4<span class="number">.1</span>\fileTemplates</span><br></pre></td></tr></table></figure>





<h2 id="shenbh"><a href="#shenbh" class="headerlink" title="shenbh"></a>shenbh</h2><h3 id="方法注释"><a href="#方法注释" class="headerlink" title="* 方法注释"></a>* <a href="https://www.jianshu.com/p/2b17c3879879">方法注释</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* &lt;pre&gt;</span><br><span class="line">*     <span class="meta">@desc</span>   : $cursor$</span><br><span class="line">*     <span class="meta">@Param</span>  : $PARAM$</span><br><span class="line">*     <span class="meta">@Return</span> : $RETURN$</span><br><span class="line">*     <span class="meta">@Author</span> : shenbh</span><br><span class="line">*     <span class="meta">@Date</span>   : $DATE$ $TIME$</span><br><span class="line">* &lt;/pre&gt;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<p><img src="/posts/8f94baaa/idea%E5%A2%9E%E5%8A%A0%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF.jpg" alt="idea增加方法注释模板.png"></p>
<p>使用的时候 “<code>/**</code>+Tab”</p>
<h3 id="add-“增加”注释"><a href="#add-“增加”注释" class="headerlink" title="add “增加”注释"></a>add “增加”注释</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//region add by shenbh on $DATE$ $END$</span></span><br><span class="line"><span class="comment">//endregion add</span></span><br></pre></td></tr></table></figure>

<h3 id="anno-annotation添加方法注释"><a href="#anno-annotation添加方法注释" class="headerlink" title="anno annotation添加方法注释"></a>anno annotation添加方法注释</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     desc    : $END$</span></span><br><span class="line"><span class="comment"> *     author  : shenbh</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="db-添加switch的默认项"><a href="#db-添加switch的默认项" class="headerlink" title="db 添加switch的默认项"></a>db 添加switch的默认项</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<h3 id="doublesingleton-双重锁定创建单例模式，开销较大"><a href="#doublesingleton-双重锁定创建单例模式，开销较大" class="headerlink" title="doublesingleton 双重锁定创建单例模式，开销较大"></a>doublesingleton 双重锁定创建单例模式，开销较大</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> $CLASS_NAME$ <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> ($CLASS_NAME$.class)&#123;</span><br><span class="line">            <span class="keyword">if</span> (singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">                singleton = <span class="keyword">new</span> <span class="title class_">$CLASS_NAME$</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">$CLASS_NAME$</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> $CLASS_NAME$()&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="doubleSingleWithContext-双重锁定创建单例模式，带Context"><a href="#doubleSingleWithContext-双重锁定创建单例模式，带Context" class="headerlink" title="doubleSingleWithContext 双重锁定创建单例模式，带Context"></a>doubleSingleWithContext 双重锁定创建单例模式，带Context</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> $CLASS_NAME$ <span class="title function_">getInstance</span><span class="params">(Context context)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> ($CLASS_NAME$.class)&#123;</span><br><span class="line">            <span class="keyword">if</span> (singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">                singleton = <span class="keyword">new</span> <span class="title class_">$CLASS_NAME$</span>(context);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">$CLASS_NAME$</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> WeakReference&lt;Context&gt; wf;</span><br><span class="line"><span class="keyword">private</span> $CLASS_NAME$(Context context)&#123;</span><br><span class="line">    wf = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;Context&gt;(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="hand-创建自己的Handler"><a href="#hand-创建自己的Handler" class="headerlink" title="hand 创建自己的Handler"></a>hand 创建自己的Handler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;$CLASS_NAME$&gt; actWeakReference;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyHandler</span><span class="params">($CLASS_NAME$ activity)</span> &#123;</span><br><span class="line">        actWeakReference = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;$CLASS_NAME$&gt;(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="type">$CLASS_NAME$</span> <span class="variable">act</span> <span class="operator">=</span> actWeakReference.get();</span><br><span class="line">        <span class="keyword">if</span> (act != <span class="literal">null</span>) &#123;</span><br><span class="line">            $END$</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mdf-“修改”注释"><a href="#mdf-“修改”注释" class="headerlink" title="mdf “修改”注释"></a>mdf “修改”注释</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//region modify by shenbh on $DATE$ $END$</span></span><br><span class="line"><span class="comment">//endregion modify</span></span><br></pre></td></tr></table></figure>

<h3 id="newFragment-创建fragment"><a href="#newFragment-创建fragment" class="headerlink" title="newFragment 创建fragment"></a>newFragment 创建fragment</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> $CLASS_NAME$()&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> $CLASS_NAME$ <span class="title function_">newInstance</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">    <span class="type">$CLASS_NAME$</span> <span class="variable">fragment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$CLASS_NAME$</span>();</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Bundle</span> <span class="variable">args</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">        args.putInt(<span class="string">&quot;key&quot;</span>, (<span class="type">int</span>) map.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">        args.putParcelable(<span class="string">&quot;key&quot;</span>, (Uri) map.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">        args.putBoolean(<span class="string">&quot;key&quot;</span>, (<span class="type">boolean</span>) map.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">        args.putString(<span class="string">&quot;key&quot;</span>,(String) map.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">        fragment.setArguments(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fragment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="note-类注释"><a href="#note-类注释" class="headerlink" title="note 类注释"></a>note 类注释</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $END$</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shenbh</span></span><br><span class="line"><span class="comment"> * time $DATE$ $TIME$</span></span><br><span class="line"><span class="comment"> * 维护者 </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="staticClassSingleton-静态内部类单例，无法传参"><a href="#staticClassSingleton-静态内部类单例，无法传参" class="headerlink" title="staticClassSingleton 静态内部类单例，无法传参"></a>staticClassSingleton 静态内部类单例，无法传参</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;$CLASS_NAME$&quot;</span>.class.getName();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> $CLASS_NAME$()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> $CLASS_NAME$ <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $CLASS_NAME$Holder.singleton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式-&gt;静态内部类&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * 多线程情况下，使用合理一些,推荐</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">$CLASS_NAME$Holder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">$CLASS_NAME$</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$CLASS_NAME$</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ma-“Module-annotations模块注释”"><a href="#ma-“Module-annotations模块注释”" class="headerlink" title="ma “Module annotations模块注释”"></a>ma “Module annotations模块注释”</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//region ******$END$*******</span></span><br><span class="line"><span class="comment">//endregion ******$END$******</span></span><br></pre></td></tr></table></figure>

<h3 id="psv-“public-static-void”"><a href="#psv-“public-static-void”" class="headerlink" title="psv  “public static void”"></a>psv  “public static void”</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> $END$</span><br></pre></td></tr></table></figure>

<h3 id="sw-“switch”"><a href="#sw-“switch”" class="headerlink" title="sw “switch”"></a>sw “switch”</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(view.getId())&#123;</span><br><span class="line">    <span class="keyword">case</span> $END$:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> $END$:</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="todo-添加-x2F-x2F-TODO"><a href="#todo-添加-x2F-x2F-TODO" class="headerlink" title="todo 添加 &#x2F;&#x2F; TODO"></a>todo 添加 &#x2F;&#x2F; TODO</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> shenbh $date$ $todo$</span></span><br></pre></td></tr></table></figure>

<h3 id="try-“creat-try-catch”"><a href="#try-“creat-try-catch”" class="headerlink" title="try “creat try-catch”"></a>try “creat try-catch”</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $END$</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="u1city"><a href="#u1city" class="headerlink" title="u1city"></a>u1city</h2><h3 id="layout-“create-layout-res-id-const”"><a href="#layout-“create-layout-res-id-const”" class="headerlink" title="layout “create layout res id const”"></a>layout “create layout res id const”</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@LayoutRes</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PAGE_LAYOUT_RES_ID</span> <span class="operator">=</span> R.layout.activity_xxx;</span><br><span class="line"><span class="meta">@LayoutRes</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ITEM_LAYOUT_RES_ID</span> <span class="operator">=</span> R.layout.item_xxx;</span><br><span class="line"><span class="meta">@LayoutRes</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EMPTY_VIEW_RES_ID</span> <span class="operator">=</span> R.layout.empty_xxx;</span><br></pre></td></tr></table></figure>

<h3 id="lth-“get-thumbnail-and-set”"><a href="#lth-“get-thumbnail-and-set”" class="headerlink" title="lth “get thumbnail and set”"></a>lth “get thumbnail and set”</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MonCityImageLoader.getInstance().loadImage(PictureSpaceCenter.getHandledUrl(App.getContext(), picUrl,_SIZE),</span><br><span class="line">        (ImageView) helper.getView(R.id.XXX));</span><br></pre></td></tr></table></figure>

<h3 id="mrx-“MVP中-m层-RxRequest”"><a href="#mrx-“MVP中-m层-RxRequest”" class="headerlink" title="mrx “MVP中 m层 RxRequest”"></a>mrx “MVP中 m层 RxRequest”</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Observable&lt;String&gt; $name$(<span class="keyword">final</span> <span class="type">int</span> indexPage, <span class="keyword">final</span> <span class="type">int</span> pageSize) &#123;</span><br><span class="line">    <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> <span class="title class_">Observable</span>.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(<span class="keyword">final</span> Subscriber&lt;? <span class="built_in">super</span> String&gt; subscriber)</span> &#123;</span><br><span class="line">            <span class="type">StandardCallback</span> <span class="variable">callback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardCallback</span>(mContext, <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResult</span><span class="params">(BaseAnalysis analysis)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    subscriber.onNext(analysis.getResult());</span><br><span class="line">                    subscriber.onCompleted();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            RequestApi.getInstance()</span><br><span class="line">                    .$name$(indexPage, pageSize, callback);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ob"><a href="#ob" class="headerlink" title="ob"></a>ob</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (pIsLoadByRefresh) &#123;</span><br><span class="line">    resetPage();</span><br><span class="line">&#125;</span><br><span class="line">Observable.create(<span class="keyword">new</span> <span class="title class_">Observable</span>.OnSubscribe&lt;BEAN&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(<span class="keyword">final</span> Subscriber&lt;? <span class="built_in">super</span> BEAN&gt; subscriber)</span> &#123;</span><br><span class="line">                RequestApi.getInstance().$name$(<span class="keyword">new</span> <span class="title class_">StandardCallback</span>(mContext) &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResult</span><span class="params">(BaseAnalysis analysis)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (analysis.success()) &#123;</span><br><span class="line">                                <span class="type">BEAN</span> <span class="variable">bean</span> <span class="operator">=</span> JsonAnalysis.getInstance().fromJson(analysis.getResult(), BEAN.class);</span><br><span class="line">                                subscriber.onNext(bean);</span><br><span class="line">                            &#125;</span><br><span class="line">                            subscriber.onCompleted();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                            onError(StandardCallback.TYPE_RESULT_ERROR);</span><br><span class="line">                            subscriber.onError(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(BaseAnalysis baseAnalysis)</span> &#123;</span><br><span class="line">                        <span class="built_in">super</span>.onError(baseAnalysis);</span><br><span class="line">                        subscriber.onError(<span class="keyword">new</span> <span class="title class_">Throwable</span>(baseAnalysis.msg()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).compose(RxSchedulers.&lt;BEAN&gt;request((RxAppCompatActivity) mContext, getView(), showLoading))</span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">RxSubscriber</span>&lt;BEAN&gt;(getView()) &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_onNext</span><span class="params">(BEAN bean)</span> &#123;</span><br><span class="line">                        getView().__getDataSuccess(pIsLoadByRefresh, bean);</span><br><span class="line">                        addPage();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_onError</span><span class="params">(Throwable error)</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="prx-“MVP中-p层Rx请求”"><a href="#prx-“MVP中-p层Rx请求”" class="headerlink" title="prx “MVP中 p层Rx请求”"></a>prx “MVP中 p层Rx请求”</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> $name$(<span class="keyword">final</span> <span class="type">boolean</span> pIsLoadByRefresh)&#123;</span><br><span class="line">    <span class="keyword">if</span> (mModel == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pIsLoadByRefresh) &#123;</span><br><span class="line">        resetPage();</span><br><span class="line">    &#125;</span><br><span class="line">    mModel.$name$(getIndexPage(), getPageSize())</span><br><span class="line">            .map(<span class="keyword">new</span> <span class="title class_">Func1</span>&lt;String, BEAN&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> BEAN <span class="title function_">call</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                    <span class="type">BEAN</span> <span class="variable">bean</span> <span class="operator">=</span> JsonAnalysis.getInstance().fromJson(s, BEAN.class);</span><br><span class="line">                    <span class="keyword">return</span> bean;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .compose(RxSchedulers.&lt;BEAN&gt;request((RxAppCompatActivity) mContext))</span><br><span class="line">            .subscribe(<span class="keyword">new</span> <span class="title class_">RxSubscriber</span>&lt;BEAN&gt;(getView()) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_onNext</span><span class="params">(BEAN bean)</span> &#123;</span><br><span class="line">                    getView().__getDataSuccess(pIsLoadByRefresh, bean);</span><br><span class="line">                    addPage();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_onError</span><span class="params">(Throwable error)</span> &#123;</span><br><span class="line">                    getView().showToast(error.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="rxrequest-“p层使用。do-request-by-rx”"><a href="#rxrequest-“p层使用。do-request-by-rx”" class="headerlink" title="rxrequest “p层使用。do request by rx”"></a>rxrequest “p层使用。do request by rx”</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (pIsLoadByRefresh) &#123;</span><br><span class="line">    resetPage();</span><br><span class="line">&#125;</span><br><span class="line">RxRequest.rxRequest(mContext, <span class="keyword">new</span> <span class="title class_">Observable</span>.OnSubscribe&lt;BaseAnalysis&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(<span class="keyword">final</span> Subscriber&lt;? <span class="built_in">super</span> BaseAnalysis&gt; subscriber)</span> &#123;</span><br><span class="line">        RequestApi.getInstance().$name$(getIndexPage(), getPageSize(), <span class="keyword">new</span> <span class="title class_">StandardCallback</span>(mContext, <span class="literal">true</span>, <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResult</span><span class="params">(BaseAnalysis analysis)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                subscriber.onNext(analysis);</span><br><span class="line">                subscriber.onCompleted();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(BaseAnalysis baseAnalysis)</span> &#123;</span><br><span class="line">                <span class="built_in">super</span>.onError(baseAnalysis);</span><br><span class="line">                subscriber.onError(<span class="keyword">new</span> <span class="title class_">Throwable</span>(baseAnalysis.msg()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).compose(RxSchedulers.&lt;BaseAnalysis&gt;request((RxAppCompatActivity) mContext, getView()))</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">RxSubscriber</span>&lt;BaseAnalysis&gt;(getView()) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_onNext</span><span class="params">(BaseAnalysis analysis)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (analysis.success()) &#123;</span><br><span class="line">                        <span class="type">$BEAN$</span> <span class="variable">bean</span> <span class="operator">=</span> JsonAnalysis.getInstance().fromJson(analysis.getResult(), $BEAN$.class);</span><br><span class="line">                        getView().__getDataSuccess(pIsLoadByRefresh, bean);</span><br><span class="line">                        addPage();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    onError(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">_onError</span><span class="params">(Throwable error)</span> &#123;</span><br><span class="line">                getView().__getDataFail();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="rgc-“get-Color-from-resource”"><a href="#rgc-“get-Color-from-resource”" class="headerlink" title="rgc “get Color from resource”"></a>rgc “get Color from resource”</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ContextCompat.getColor(mContext, R.color.$END$)</span><br></pre></td></tr></table></figure>

<h3 id="rgd-“get-a-Drawable-from-resources”"><a href="#rgd-“get-a-Drawable-from-resources”" class="headerlink" title="rgd “get a Drawable from resources”"></a>rgd “get a Drawable from resources”</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ContextCompat.getDrawable(mContext, R.drawable.$END$)</span><br></pre></td></tr></table></figure>

<h3 id="rgs-“get-String-from-resource”"><a href="#rgs-“get-String-from-resource”" class="headerlink" title="rgs “get String from resource”"></a>rgs “get String from resource”</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ContextCompat.getString(mContext, R.string.$END$)</span><br></pre></td></tr></table></figure>

<h3 id="rv-“init-RecyclerView”"><a href="#rv-“init-RecyclerView”" class="headerlink" title="rv “init RecyclerView”"></a>rv “init RecyclerView”</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LinearLayoutManager</span> <span class="variable">linearLayoutManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>);</span><br><span class="line">mRecyclerView.setLayoutManager(linearLayoutManager);</span><br><span class="line">__itemAdapter = <span class="keyword">new</span> <span class="title class_">__ItemAdapter</span>(R.layout.item_store_hot_news)</span><br><span class="line">__itemAdapter.setEmptyView(DEFAULT_EMPTY_VIEW, mRecyclerView);</span><br><span class="line">__itemAdapter.isUseEmpty(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 点击跳转</span></span><br><span class="line">__itemAdapter.setOnItemClickListener(<span class="keyword">new</span> <span class="title class_">BaseQuickAdapter</span>.OnItemClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onItemClick</span><span class="params">(BaseQuickAdapter adapter, View view, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO  Item click biz</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 加载更多</span></span><br><span class="line">__itemAdapter.setOnLoadMoreListener(<span class="keyword">new</span> <span class="title class_">BaseQuickAdapter</span>.RequestLoadMoreListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLoadMoreRequested</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// TODO load more data</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, mRecyclerView);</span><br><span class="line">mRecyclerView.setAdapter(__itemAdapter);</span><br></pre></td></tr></table></figure>

<h3 id="srl-“init-SmartRefreshLayout”"><a href="#srl-“init-SmartRefreshLayout”" class="headerlink" title="srl “init SmartRefreshLayout”"></a>srl “init SmartRefreshLayout”</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mSmartRefreshLayout.setEnableHeaderTranslationContent(<span class="literal">false</span>);</span><br><span class="line">mSmartRefreshLayout.setDisableContentWhenRefresh(<span class="literal">true</span>);</span><br><span class="line">mSmartRefreshLayout.setOnRefreshListener(<span class="keyword">new</span> <span class="title class_">OnRefreshListener</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRefresh</span><span class="params">(RefreshLayout refreshlayout)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO load data    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="ArmsMVP"><a href="#ArmsMVP" class="headerlink" title="ArmsMVP"></a>ArmsMVP</h2><h3 id="armsContract-MVPArms的Contract"><a href="#armsContract-MVPArms的Contract" class="headerlink" title="armsContract  MVPArms的Contract"></a>armsContract  MVPArms的Contract</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jess.arms.mvp.IModel;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.mvp.IView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.Observable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">$name$Contract</span> &#123;</span><br><span class="line">    <span class="comment">//对于经常使用的关于UI的方法可以定义到IView中,如显示隐藏进度条,和显示文字消息</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">View</span> <span class="keyword">extends</span> <span class="title class_">IView</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">startLoadMore</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">endLoadMore</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">        Activity <span class="title function_">getActivity</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Model层定义接口,外部只需关心Model返回的数据,无需关心内部细节,如是否使用缓存</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Model</span> <span class="keyword">extends</span> <span class="title class_">IModel</span> &#123;</span><br><span class="line">        Observable&lt;List&lt;$name$&gt;&gt; get$name$s(<span class="type">int</span> lastIdQueried, <span class="type">boolean</span> update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="armsmrx-MVPArms的M层Rx请求"><a href="#armsmrx-MVPArms的M层Rx请求" class="headerlink" title="armsmrx  MVPArms的M层Rx请求"></a>armsmrx  MVPArms的M层Rx请求</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Observable&lt;List&lt;$name$&gt;&gt; get$name$s(<span class="type">int</span> lastIdQueried, <span class="type">boolean</span> update) &#123;</span><br><span class="line">    <span class="comment">//使用rxcache缓存,上拉刷新则不读取缓存,加载更多读取缓存</span></span><br><span class="line">    <span class="keyword">return</span> Observable.just(mRepositoryManager</span><br><span class="line">            .obtainRetrofitService($name$Service.class)</span><br><span class="line">            .get$name$s(lastIdQueried, Constants.PER_PAGE_SIZE))</span><br><span class="line">            .flatMap((Function&lt;Observable&lt;List&lt;$name$&gt;&gt;, ObservableSource&lt;List&lt;$name$&gt;&gt;&gt;) listObservable -&gt; mRepositoryManager.obtainCacheService(CommonCache.class)</span><br><span class="line">                    .get$name$s(listObservable</span><br><span class="line">                            , <span class="keyword">new</span> <span class="title class_">DynamicKey</span>(lastIdQueried)</span><br><span class="line">                            , <span class="keyword">new</span> <span class="title class_">EvictDynamicKey</span>(update))</span><br><span class="line">                    .map(listReply -&gt; listReply.getData()));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span> &#123;</span><br><span class="line">    Timber.d(<span class="string">&quot;Release Resource&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="armsprx-MVPArms的P层Rx请求"><a href="#armsprx-MVPArms的P层Rx请求" class="headerlink" title="armsprx   MVPArms的P层Rx请求"></a>armsprx   MVPArms的P层Rx请求</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line">List&lt;$name$Bean&gt;           m$name$s;</span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line">$name$Adapter mAdapter;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>     <span class="variable">lastId</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isFirst</span>    <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>     preEndIndex;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_CREATE)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">    request$name$sFromModel(<span class="literal">true</span>);<span class="comment">//打开 App 时自动加载列表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> request$name$sFromModel(<span class="keyword">final</span> <span class="type">boolean</span> pullToRefresh) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pullToRefresh) &#123;</span><br><span class="line">        lastId = <span class="number">1</span>;<span class="comment">//下拉刷新默认只请求第一页</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关于RxCache缓存库的使用请参考 http://www.jianshu.com/p/b58ef6b0624b</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isEvictCache</span> <span class="operator">=</span> pullToRefresh;<span class="comment">//是否驱逐缓存,为ture即不使用缓存,每次下拉刷新即需要最新数据,则不使用缓存</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pullToRefresh &amp;&amp; isFirst) &#123;<span class="comment">//默认在第一次下拉刷新时使用缓存</span></span><br><span class="line">        isFirst = <span class="literal">false</span>;</span><br><span class="line">        isEvictCache = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mModel.get$name$s(lastId, isEvictCache)</span><br><span class="line">            .subscribeOn(Schedulers.io())</span><br><span class="line">            .retryWhen(<span class="keyword">new</span> <span class="title class_">RetryWithDelay</span>(<span class="number">3</span>, <span class="number">2</span>))<span class="comment">//遇到错误时重试,第一个参数为重试几次,第二个参数为重试的间隔</span></span><br><span class="line">            .doOnSubscribe(disposable -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (pullToRefresh) &#123;</span><br><span class="line">                    mRootView.showLoading();<span class="comment">//显示下拉刷新的进度条</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mRootView.startLoadMore();<span class="comment">//显示上拉加载更多的进度条</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).subscribeOn(AndroidSchedulers.mainThread())</span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">            .doFinally(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (pullToRefresh) &#123;</span><br><span class="line">                    mRootView.hideLoading();<span class="comment">//隐藏下拉刷新的进度条</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mRootView.endLoadMore();<span class="comment">//隐藏上拉加载更多的进度条</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .compose(RxLifecycleUtils.bindToLifecycle(mRootView))<span class="comment">//使用 Rxlifecycle,使 Disposable 和 Activity 一起销毁</span></span><br><span class="line">            .subscribe(<span class="keyword">new</span> <span class="title class_">ErrorHandleSubscriber</span>&lt;List&lt;$name$Bean&gt;&gt;(mErrorHandler) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(List&lt;$name$Bean&gt; items)</span> &#123;</span><br><span class="line">                    lastId = items.get(items.size() - <span class="number">1</span>).getId();<span class="comment">//记录最后一个id,用于下一次请求</span></span><br><span class="line">                    <span class="keyword">if</span> (pullToRefresh) &#123;</span><br><span class="line">                        m$name$s.clear();<span class="comment">//如果是下拉刷新则清空列表</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    preEndIndex = m$name$s.size();<span class="comment">//更新之前列表总长度,用于确定加载更多的起始位置</span></span><br><span class="line">                    m$name$s.addAll(items);</span><br><span class="line">                    <span class="keyword">if</span> (pullToRefresh) &#123;</span><br><span class="line">                        mAdapter.notifyDataSetChanged();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mAdapter.notifyItemRangeInserted(preEndIndex, items.size());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onDestroy();</span><br><span class="line">    <span class="built_in">this</span>.mAdapter = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.m$name$s = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.mErrorHandler = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.mAppManager = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.mImageLoader = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.mApplication = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="tmpdata-临时数据"><a href="#tmpdata-临时数据" class="headerlink" title="tmpdata 临时数据"></a>tmpdata 临时数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 2020/6/1</span></span><br><span class="line"><span class="keyword">if</span> (pullToRefresh)&#123;</span><br><span class="line">    mDatas.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    WeakReference&lt;$name$Bean&gt; wf = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">$name$Bean</span>());</span><br><span class="line">    wf.get().setTitle(<span class="string">&quot;蒙牛伊利酸奶蒙牛伊利酸奶蒙牛伊利酸奶&quot;</span> + i);</span><br><span class="line">    mDatas.add(wf.get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pullToRefresh)&#123;</span><br><span class="line">    mAdapter.notifyDataSetChanged();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//      mAdapter.notifyItemRangeInserted(preEndIndex, mDatas.size());</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="xm597"><a href="#xm597" class="headerlink" title="xm597"></a>xm597</h2><h3 id="gerenActivity-创建个人Activity"><a href="#gerenActivity-创建个人Activity" class="headerlink" title="gerenActivity 创建个人Activity"></a>gerenActivity 创建个人Activity</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xm597.app.R;</span><br><span class="line"><span class="keyword">import</span> com.xm597.app.databinding.Activity$entityName$Binding;</span><br><span class="line"><span class="keyword">import</span> com.xm597.app.project.ui.base.activity.GeRenBaseActivity;</span><br><span class="line"><span class="keyword">import</span> com.xm597.app.project.ui.city.presenter.ISimpleRvSearchContract;</span><br><span class="line"><span class="keyword">import</span> com.xm597.app.project.ui.city.presenter.SimpleRvSearchPresenter;</span><br><span class="line"><span class="keyword">import</span> com.xm597.common.widget.ktoolbar.KCustomToolbar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$entityName$Activity</span> <span class="keyword">extends</span> <span class="title class_">GeRenBaseActivity</span>&lt;Activity$entityName$Binding, $entityName$Presenter&gt;</span><br><span class="line">		<span class="keyword">implements</span> <span class="title class_">I$entityName$Contract</span>.I$entityName$UI&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_TITLE</span> <span class="operator">=</span> <span class="string">&quot;keyTitle&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String mTitle;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Context context, String $entityName$Title)</span> &#123;</span><br><span class="line">		<span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(context, $entityName$Activity.class);</span><br><span class="line">		intent.putExtra(KEY_TITLE, $entityName$Title);</span><br><span class="line">		context.startActivity(intent);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">setLayoutResID</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// todo</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreated</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">		parseIntentData();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onStart();</span><br><span class="line">        mPresenter.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> $entityName$Presenter <span class="title function_">setPresenter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">$entityName$Presenter</span>(<span class="built_in">this</span>, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">setToolbar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// todo 需要toolbar则返回true；如果不需要 toolbar，则直接删除setToolbar()</span></span><br><span class="line">        mToolbar.setBackgroundColor(getResources().getColor(R.color.colorWhite));</span><br><span class="line">        mToolbar.setLeftIcon(R.drawable.icon_arrow_left_1);</span><br><span class="line">        mToolbar.setTitle(getPageTitle());</span><br><span class="line"></span><br><span class="line">        mToolbar.setKToolbarClickListener(<span class="keyword">new</span> <span class="title class_">KCustomToolbar</span>.KToolbarClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onToolBarLeftButtonClick</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onToolBarRightButtonClick</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">                <span class="comment">//<span class="doctag">TODO:</span> toolbar右侧按钮点击事件</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseIntentData</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> getIntent();</span><br><span class="line">        <span class="keyword">if</span>(intent != <span class="literal">null</span>)&#123;</span><br><span class="line">			mTitle = intent.getStringExtra(KEY_TITLE);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getPageTitle</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> mTitle;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="gerenBean-创建个人Bean"><a href="#gerenBean-创建个人Bean" class="headerlink" title="gerenBean 创建个人Bean"></a>gerenBean 创建个人Bean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$entityName$Bean</span> <span class="keyword">extends</span> <span class="title class_">GeRenBaseBean</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="gerenContract-创建个人Contract"><a href="#gerenContract-创建个人Contract" class="headerlink" title="gerenContract 创建个人Contract"></a>gerenContract 创建个人Contract</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xm597.app.project.ui.base.presenter.IBaseUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">I$entityName$Contract</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">I$entityName$UI</span> <span class="keyword">extends</span> <span class="title class_">IBaseUI</span> &#123;</span><br><span class="line">        </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="gerenFragment-创建个人Fragment"><a href="#gerenFragment-创建个人Fragment" class="headerlink" title="gerenFragment 创建个人Fragment"></a>gerenFragment 创建个人Fragment</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$entityName$Fragment</span> <span class="keyword">extends</span> <span class="title class_">BaseFragment</span>&lt;Fragment$entityName$Binding, $entityName$Presenter&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">I$entityName$Contract</span>.I$entityName$FragmentUI&#123;</span><br><span class="line">    <span class="keyword">public</span> $entityName$Fragment()&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $entityName$Fragment <span class="title function_">newInstance</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">        <span class="type">$entityName$Fragment</span> <span class="variable">fragment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$entityName$Fragment</span>();</span><br><span class="line">        <span class="keyword">if</span>(map != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">Bundle</span> <span class="variable">args</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">            args.putInt(<span class="string">&quot;key&quot;</span>, (<span class="type">int</span>) map.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">            args.putParcelable(<span class="string">&quot;key&quot;</span>, (Uri) map.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">            args.putBoolean(<span class="string">&quot;key&quot;</span>, (<span class="type">boolean</span>) map.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">            args.putString(<span class="string">&quot;key&quot;</span>,(String) map.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">            fragment.setArguments(args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">setLayoutResID</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">//todo</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> $entityName$Presenter <span class="title function_">setPresenter</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">$entityName$Presenter</span>(<span class="built_in">this</span>, <span class="built_in">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">setPageTitle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span> 返回当前Fragment页面的标题</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onViewCreate</span><span class="params">(<span class="meta">@NonNull</span> View view, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span> 一些实例化操作</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isRegisterEventBus</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">//<span class="doctag">TODO:</span> 如果需要注册注销EventBus，需要改成return true</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中的构造方法必须是public，在某些API中（好像是安卓10）用的是反射，私有的反射不出来，会有找不到构造方法的异常。</p>
</blockquote>
<h3 id="gerenParams-创建个人Params"><a href="#gerenParams-创建个人Params" class="headerlink" title="gerenParams 创建个人Params"></a>gerenParams 创建个人Params</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$entityName$Params</span> <span class="keyword">extends</span> <span class="title class_">GeRenBaseParams</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建类变量</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> $entityName$Params()&#123;</span><br><span class="line">        <span class="comment">// 类变量实例化</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="gerenPresenter-创建个人Presenter"><a href="#gerenPresenter-创建个人Presenter" class="headerlink" title="gerenPresenter 创建个人Presenter"></a>gerenPresenter 创建个人Presenter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> androidx.lifecycle.LifecycleOwner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xm597.app.project.ui.base.presenter.BasePresenter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$entityName$Presenter</span> <span class="keyword">extends</span> <span class="title class_">BasePresenter</span>&lt;I$entityName$Contract.I$entityName$UI&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> $entityName$Presenter(LifecycleOwner lifeCycleOwner, I$entityName$Contract.I$entityName$UI view) &#123;</span><br><span class="line">		<span class="built_in">super</span>(lifeCycleOwner, view);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="gerenRequest-创建个人Request"><a href="#gerenRequest-创建个人Request" class="headerlink" title="gerenRequest 创建个人Request"></a>gerenRequest 创建个人Request</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xm597.app.project.api.base.request.GeRenBaseRequest;</span><br><span class="line"><span class="keyword">import</span> com.xm597.common.api.url.BaseApiUrlsConstants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$entityName$Request</span> <span class="keyword">extends</span> <span class="title class_">GeRenBaseRequest</span>&lt;$entityName$Bean, $entityName$Params&gt; &#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> 此处添加类变量，表示要传递的参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> 添加入参，并赋值给类变量</span></span><br><span class="line">    <span class="keyword">public</span> $entityName$Request()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> $entityName$Params <span class="title function_">setRequestParams</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span> 把类变量传递给 $entityName$Params 的构造方法</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">$entityName$Params</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">apiPath</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> BaseApiUrlsConstants.$entityName$;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="gerenXML-创建个人XML"><a href="#gerenXML-创建个人XML" class="headerlink" title="gerenXML 创建个人XML"></a>gerenXML 创建个人XML</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="ob-xm597-persenter内某方法的请求"><a href="#ob-xm597-persenter内某方法的请求" class="headerlink" title="ob xm597 persenter内某方法的请求"></a>ob xm597 persenter内某方法的请求</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//TODO：改成调用BasePresenter内的方法（传对应的参数）</span></span><br><span class="line">request$entityName$(id).observe(mLifecycleOwner, <span class="keyword">new</span> <span class="title class_">GeRenApiResponseObserver</span>&lt;$entityName$Bean, HttpResponse&lt;$entityName$Bean&gt;&gt;(mView) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onSuccess</span><span class="params">(<span class="type">int</span> code, $entityName$Bean bean)</span> &#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span> 改成功回调逻辑</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">retMsg</span> <span class="operator">=</span> bean.getMsg();</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(retMsg))&#123;</span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span> 这个文案提示要改</span></span><br><span class="line">            retMsg = <span class="string">&quot;短信验证码已发送&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mView.onMobileChecked(<span class="literal">true</span>, retMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onFailed</span><span class="params">(<span class="type">int</span> code, String error)</span> &#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span> 改失败回调逻辑</span></span><br><span class="line">        mView.onMobileChecked(<span class="literal">false</span>, error);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>













<h1 id="创建类时的类型-File-and-Code-Templates"><a href="#创建类时的类型-File-and-Code-Templates" class="headerlink" title="创建类时的类型(File and Code Templates)"></a>创建类时的类型(File and Code Templates)</h1><h2 id="java类型"><a href="#java类型" class="headerlink" title="java类型"></a>java类型</h2><h3 id="DoubleCheckSingleton"><a href="#DoubleCheckSingleton" class="headerlink" title="DoubleCheckSingleton"></a>DoubleCheckSingleton</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;NAME&#125;&#123;</span><br><span class="line">    <span class="comment">//单例模式-&gt;双重检查模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;$&#123;NAME&#125;&quot;</span>;</span><br><span class="line">    <span class="comment">//volatile表示去掉虚拟机优化代码,但是会消耗少许性能,可忽略</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> $&#123;NAME&#125; sInstance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $&#123;NAME&#125; getInstance() &#123;</span><br><span class="line">        <span class="keyword">if</span> (sInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//同步代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span> ($&#123;NAME&#125;.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    sInstance = <span class="keyword">new</span> <span class="title class_">$</span>&#123;NAME&#125;();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $&#123;NAME&#125;() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="u1city-1"><a href="#u1city-1" class="headerlink" title="u1city"></a>u1city</h3><h4 id="LdyActivity"><a href="#LdyActivity" class="headerlink" title="LdyActivity"></a>LdyActivity</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.annotation.LayoutRes;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentPagerAdapter;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.ViewPager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baidu.mobstat.StatService;</span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.customView.PagerSlidingTabStrip;</span><br><span class="line"><span class="keyword">import</span> com.umeng.analytics.MobclickAgent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xxx.xxx.R;</span><br><span class="line"><span class="keyword">import</span> xxx.xxx.api.RequestApi;</span><br><span class="line"><span class="keyword">import</span> xxx.xxx.base.LdyBaseActivity;</span><br><span class="line"><span class="keyword">import</span> xxx.xxx.center.StringConstantUtils;</span><br><span class="line"><span class="keyword">import</span> xxx.xxx.core.Constants;</span><br><span class="line"><span class="keyword">import</span> butterknife.Bind;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个页面带多个tab，内容是嵌套多个fragment，可切换</span></span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;pageName&#125;Activity <span class="keyword">extends</span> <span class="title class_">LdyBaseActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LayoutRes</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PAGE_LAYOUT_RES_ID</span> <span class="operator">=</span> R.layout.activity_$&#123;layoutName&#125;;</span><br><span class="line">    <span class="meta">@Bind(R.id.toolbar)</span></span><br><span class="line">    Toolbar mToolbar;</span><br><span class="line">    <span class="meta">@Bind(R.id.$&#123;layoutName&#125;_tabstrip)</span></span><br><span class="line">    PagerSlidingTabStrip mPagerSlidingTabStrip;</span><br><span class="line">    <span class="meta">@Bind(R.id.$&#123;layoutName&#125;_viewpager)</span></span><br><span class="line">    ViewPager mViewPager;</span><br><span class="line">    <span class="meta">@Bind(R.id.$&#123;layoutName&#125;_return_goods_tv)</span></span><br><span class="line">    TextView mReturnGoodsTv;</span><br><span class="line">    <span class="meta">@Bind(R.id.$&#123;layoutname&#125;_refund_tv)</span></span><br><span class="line">    TextView refundTv;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo 更改fragment的tab标签名称</span></span><br><span class="line">    <span class="keyword">private</span> String[] titles = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;退货&quot;</span>, <span class="string">&quot;退款&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">//todo 添加自己常量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] dataTypes = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;StringConstantUtils., StringConstantUtils.&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">openImmersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImmersion</span><span class="params">()</span> &#123;</span><br><span class="line">        getImmersion().setImmersionDarkFont(mToolbar, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">setLayoutResId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PAGE_LAYOUT_RES_ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        setImmersion();</span><br><span class="line">        setU1cityBaseToolBar(mToolbar, <span class="string">&quot;售后&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        $&#123;pageName&#125;<span class="type">PagerAdapter</span> <span class="variable">pageAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$</span>&#123;pageName&#125;PagerAdapter(getSupportFragmentManager());</span><br><span class="line">        mViewPager.setAdapter(pageAdapter);</span><br><span class="line">        mPagerSlidingTabStrip.setViewPager(mViewPager);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">shouldOpenRefundList</span> <span class="operator">=</span> getIntent().getBooleanExtra(StringConstantUtils.ACTION_OPEN_REFUND_LIST, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (shouldOpenRefundList) &#123;</span><br><span class="line">            mViewPager.setCurrentItem(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 适配器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;pageName&#125;PagerAdapter <span class="keyword">extends</span> <span class="title class_">FragmentPagerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> $&#123;pageName&#125;PagerAdapter(FragmentManager fm) &#123;</span><br><span class="line">            <span class="built_in">super</span>(fm);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> CharSequence <span class="title function_">getPageTitle</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> titles[position];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Fragment <span class="title function_">getItem</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> $&#123;pageName&#125;.newInstance(dataTypes[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">return</span> <span class="variable">titles</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="number">0</span> : titles.length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPause</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onPause();</span><br><span class="line">        MobclickAgent.onPause(<span class="built_in">this</span>);</span><br><span class="line">        StatService.onPageEnd(<span class="built_in">this</span>, <span class="string">&quot;售后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        RequestApi.getInstance().cancleAll(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onResume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onResume();</span><br><span class="line">        MobclickAgent.onResume(<span class="built_in">this</span>);</span><br><span class="line">        StatService.onPageStart(<span class="built_in">this</span>, <span class="string">&quot;售后&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Constants.cust == <span class="literal">null</span>) &#123;</span><br><span class="line">            Constants.getCustomer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="LdyFragments"><a href="#LdyFragments" class="headerlink" title="LdyFragments"></a>LdyFragments</h4><p> 包含多个子Fragment</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.LayoutRes;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.design.widget.TabLayout;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentStatePagerAdapter;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentTransaction;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.trello.rxlifecycle.components.support.RxFragment;</span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.common.baseData.ListUtils;</span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.customView.NoScrollViewPager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xxx.xxx.R;</span><br><span class="line"><span class="keyword">import</span> xxx.xxx.base.LdyBaseFragment;</span><br><span class="line"><span class="keyword">import</span> xxx.xxx.model.javabean.custompage.TabListBean;</span><br><span class="line"><span class="keyword">import</span> butterknife.Bind;</span><br><span class="line"><span class="keyword">import</span> butterknife.ButterKnife;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shenbh</span></span><br><span class="line"><span class="comment"> * time $&#123;DATE&#125; $&#123;TIME&#125; $&#123;DAY_NAME_FULL&#125;</span></span><br><span class="line"><span class="comment"> * email shenbh@qq.com</span></span><br><span class="line"><span class="comment"> * description （包含多个子fragment）</span></span><br><span class="line"><span class="comment"> * 维护者 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;pageName&#125;Fragment <span class="keyword">extends</span> <span class="title class_">LdyBaseFragment</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LayoutRes</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PAGE_LAYOUT_RES_ID</span> <span class="operator">=</span> R.layout.fragment_$&#123;layoutName&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bind(R.id.$&#123;layoutName&#125;_tl)</span></span><br><span class="line">    TabLayout mainTl;</span><br><span class="line">    <span class="meta">@Bind(R.id.$&#123;layoutName&#125;_vp)</span></span><br><span class="line">    NoScrollViewPager mainVp;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这是多个子fragment切换的适配器</span></span><br><span class="line">    <span class="keyword">private</span> $&#123;pageName&#125;PagerAdapter pagerAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 改成自己的tab名称</span></span><br><span class="line">    <span class="keyword">private</span> String[] tabNames = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;帖子&quot;</span>, <span class="string">&quot;社群分类&quot;</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $&#123;pageName&#125;Fragment <span class="title function_">newInstance</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        $&#123;pageName&#125;<span class="type">Fragment</span> <span class="variable">fragment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$</span>&#123;pageName&#125;Fragment();</span><br><span class="line">        <span class="comment">//TODO：可以传一些值进来</span></span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Bundle</span> <span class="variable">args</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">            args.putInt(<span class="string">&quot;key&quot;</span>, (<span class="type">int</span>) map.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">            args.putParcelable(<span class="string">&quot;key&quot;</span>, (Uri) map.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">            args.putBoolean(<span class="string">&quot;key&quot;</span>, (<span class="type">boolean</span>) map.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">            args.putString(<span class="string">&quot;key&quot;</span>, (String) map.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">            fragment.setArguments(args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// TODO 取出一些参数</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            xxx = getArguments().getString(Key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        ButterKnife.bind(<span class="built_in">this</span>, <span class="built_in">super</span>.onCreateView(inflater, container, savedInstanceState));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onCreateView(inflater, container, savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onViewCreated</span><span class="params">()</span> &#123;</span><br><span class="line">        initParams();</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化一些基本的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initParams</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initView</span><span class="params">()</span> &#123;</span><br><span class="line">        initTab();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">setLayoutResId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PAGE_LAYOUT_RES_ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">lazyLoadData</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化多个子tab</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initTab</span><span class="params">()</span> &#123;</span><br><span class="line">        pagerAdapter = <span class="keyword">new</span> <span class="title class_">$</span>&#123;pageName&#125;PagerAdapter(getChildFragmentManager());</span><br><span class="line">        mainVp.setAdapter(pagerAdapter);</span><br><span class="line">        mainVp.setCanScroll(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;TabListBean&gt; tabs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, size = tabNames.length; i &lt; size; i++) &#123;</span><br><span class="line">            WeakReference&lt;TabListBean&gt; wf = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">TabListBean</span>());</span><br><span class="line">            wf.get().setTabName(tabNames[i]);</span><br><span class="line">            tabs.add(wf.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pagerAdapter != <span class="literal">null</span>) &#123;</span><br><span class="line">            pagerAdapter.setData(tabs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mainTl.setupWithViewPager(mainVp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroyView</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroyView();</span><br><span class="line">        ButterKnife.unbind(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">$</span>&#123;pageName&#125;PagerAdapter <span class="keyword">extends</span> <span class="title class_">FragmentStatePagerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> List&lt;TabListBean&gt; mTabListBeans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">private</span> List&lt;RxFragment&gt; mRxFragments = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">private</span> FragmentManager mFragmentManager;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(<span class="meta">@NonNull</span> List&lt;TabListBean&gt; data)</span> &#123;</span><br><span class="line">            mTabListBeans = data;</span><br><span class="line">            <span class="type">FragmentTransaction</span> <span class="variable">ft</span> <span class="operator">=</span> mFragmentManager.beginTransaction();<span class="comment">//获得FragmentTransaction 事务</span></span><br><span class="line">            <span class="keyword">for</span> (RxFragment fragment : mRxFragments) &#123;</span><br><span class="line">                ft.remove(fragment);</span><br><span class="line">            &#125;</span><br><span class="line">            ft.commitAllowingStateLoss();</span><br><span class="line">            ft = <span class="literal">null</span>;</span><br><span class="line">            mFragmentManager.executePendingTransactions();<span class="comment">//提交事务</span></span><br><span class="line">            mRxFragments.clear();</span><br><span class="line">            <span class="comment">//TODO：改成自己的子fragment</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; mTabListBeans.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">//            mRxFragments.add(pageType == 0 ?</span></span><br><span class="line"><span class="comment">//                    CommunitySpaceSearchResultPostFragment.newInstance(null) :</span></span><br><span class="line"><span class="comment">//                    PageFragment.newInstance(mTabListBeans.get(i).getTemplateId()));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">            mRxFragments.add($&#123;pageName&#125;ChildFragment.newInstance(<span class="literal">null</span>));</span><br><span class="line">            mRxFragments.add($&#123;pageName&#125;ChildFragment.newInstance(<span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">            notifyDataSetChanged();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> List&lt;TabListBean&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mTabListBeans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> $&#123;pageName&#125;PagerAdapter(FragmentManager fm) &#123;</span><br><span class="line">            <span class="built_in">super</span>(fm);</span><br><span class="line">            mFragmentManager = fm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Fragment <span class="title function_">getItem</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mRxFragments.get(position);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ListUtils.isEmpty(mTabListBeans) ? <span class="number">0</span> : mTabListBeans.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> CharSequence <span class="title function_">getPageTitle</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mTabListBeans.get(position).getTabName();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemPosition</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> POSITION_NONE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyItem</span><span class="params">(ViewGroup container, <span class="type">int</span> position, Object object)</span> &#123;</span><br><span class="line">            <span class="comment">// super.destroyItem(container, position, object);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">releaseFragment</span><span class="params">(ViewGroup container, <span class="type">int</span> position, Object object)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.destroyItem(container, position, object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="MvpBean"><a href="#MvpBean" class="headerlink" title="MvpBean"></a>MvpBean</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> ($&#123;IMPORT_BLOCK&#125; != <span class="string">&quot;&quot;</span>)$&#123;IMPORT_BLOCK&#125;</span><br><span class="line">#end</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"><span class="meta">@Keep</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;beanName&#125; <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="comment">// TODO 只是一个模板。如果有Json字符串，直接GsonFormat自动生成</span></span><br><span class="line">    <span class="keyword">private</span> String total;</span><br><span class="line">    <span class="keyword">private</span> List&lt;$&#123;childBeanName&#125;&gt;data;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;childBeanName&#125;&#123;</span><br><span class="line">        <span class="comment">// TODO </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotal</span><span class="params">(String total)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.total = total;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(List&lt;$&#123;childBeanName&#125;&gt;pData)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = pData;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;$&#123;childBeanName&#125;&gt; getData() &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="MvpContract"><a href="#MvpContract" class="headerlink" title="MvpContract"></a>MvpContract</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.framework.v1.support.MvpView;</span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">$</span>&#123;pageName&#125;Contract &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">View</span> <span class="keyword">extends</span> <span class="title class_">MvpView</span>&#123;</span><br><span class="line">        <span class="comment">// TODO View层的方法，先生成模板函数，在Activity生存之后再根据业务修改合适的函数名</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">__getDataSuccess</span><span class="params">(<span class="type">boolean</span> pIsLoadByRefresh, $&#123;beanName&#125; p$&#123;beanName&#125;)</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">__getDataFail</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="MvpDgActivity"><a href="#MvpDgActivity" class="headerlink" title="MvpDgActivity"></a>MvpDgActivity</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.annotation.LayoutRes;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.LinearLayoutManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chad.library.adapter.base.BaseQuickAdapter;</span><br><span class="line"><span class="keyword">import</span> com.scwang.smartrefresh.layout.SmartRefreshLayout;</span><br><span class="line"><span class="keyword">import</span> com.scwang.smartrefresh.layout.api.RefreshLayout;</span><br><span class="line"><span class="keyword">import</span> com.scwang.smartrefresh.layout.listener.OnRefreshListener;</span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.common.baseData.BaseParser;</span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.common.baseData.ListUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> yyy.yyy.R;</span><br><span class="line"><span class="keyword">import</span> yyy.yyy.base.DgBaseMvpActivity;</span><br><span class="line"><span class="keyword">import</span> yyy.yyy.view.recycler.CustomCommonLoadMoreView;</span><br><span class="line"><span class="keyword">import</span> butterknife.Bind;</span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;pageName&#125;Activity <span class="keyword">extends</span> <span class="title class_">DgBaseMvpActivity</span>&lt;$&#123;pageName&#125;Contract.View,$&#123;pageName&#125;Presenter&gt;</span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">$</span>&#123;pageName&#125;Contract.View &#123;</span><br><span class="line">    <span class="meta">@LayoutRes</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PAGE_LAYOUT_RES_ID</span> <span class="operator">=</span> R.layout.activity_$&#123;layoutName&#125;;</span><br><span class="line">    <span class="meta">@LayoutRes</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ITEM_LAYOUT_RES_ID</span> <span class="operator">=</span> R.layout.item_$&#123;layoutName&#125;;</span><br><span class="line">    <span class="meta">@LayoutRes</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EMPTY_VIEW_RES_ID</span> <span class="operator">=</span> R.layout.empty_$&#123;layoutName&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bind(R.id.toolbar)</span></span><br><span class="line">    Toolbar mToolbar;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bind(R.id.$&#123;layoutName&#125;_srl)</span></span><br><span class="line">    SmartRefreshLayout mSmartRefreshLayout;</span><br><span class="line">    <span class="meta">@Bind(R.id.$&#123;layoutName&#125;_rv)</span></span><br><span class="line">    RecyclerView mRecyclerView;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// TODO 替换自己的ItemAdapter</span></span><br><span class="line">    <span class="keyword">private</span> $&#123;pageName&#125;ItemAdapter mItemAdapter;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreateMvp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 是否可以去除Activity的背景</span></span><br><span class="line">        <span class="comment">// getWindow().setBackgroundDrawable(null);</span></span><br><span class="line">        setImmersion();</span><br><span class="line">        initView();</span><br><span class="line">        mSmartRefreshLayout.autoRefresh();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        ButterKnife.unbind(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">setLayoutResId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PAGE_LAYOUT_RES_ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> $&#123;pageName&#125;Presenter <span class="title function_">createPresenter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">$</span>&#123;pageName&#125;Presenter(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImmersion</span><span class="params">()</span> &#123;</span><br><span class="line">        getImmersion().setImmersionDarkFont(mToolbar, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initView</span><span class="params">()</span> &#123;</span><br><span class="line">        initToolbar();</span><br><span class="line">        initSrl();</span><br><span class="line">        initRv();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initToolbar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 设置Toolbar</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initSrl</span><span class="params">()</span> &#123;</span><br><span class="line">        mSmartRefreshLayout.setEnableHeaderTranslationContent(<span class="literal">false</span>);</span><br><span class="line">        mSmartRefreshLayout.setDisableContentWhenRefresh(<span class="literal">true</span>);</span><br><span class="line">        mSmartRefreshLayout.setOnRefreshListener(<span class="keyword">new</span> <span class="title class_">OnRefreshListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRefresh</span><span class="params">(RefreshLayout refreshlayout)</span> &#123;</span><br><span class="line">                loadData(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initRv</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 根据实际进行调整</span></span><br><span class="line">        <span class="type">LinearLayoutManager</span> <span class="variable">linearLayoutManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        mRecyclerView.setLayoutManager(linearLayoutManager);</span><br><span class="line"></span><br><span class="line">        mItemAdapter = <span class="keyword">new</span> <span class="title class_">$</span>&#123;pageName&#125;ItemAdapter(ITEM_LAYOUT_RES_ID);</span><br><span class="line">        mItemAdapter.setEmptyView(getEmptyView());</span><br><span class="line">        mItemAdapter.isUseEmpty(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// TODO 是否需要设置自定义的LoadMoreView</span></span><br><span class="line">        mItemAdapter.setLoadMoreView(<span class="keyword">new</span> <span class="title class_">CustomCommonLoadMoreView</span>());</span><br><span class="line">        <span class="comment">// TODO 是否有分割线需要设置</span></span><br><span class="line">        <span class="comment">// 点击跳转</span></span><br><span class="line">        mItemAdapter.setOnItemClickListener(<span class="keyword">new</span> <span class="title class_">BaseQuickAdapter</span>.OnItemClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onItemClick</span><span class="params">(BaseQuickAdapter adapter, View view, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">                <span class="comment">// TODO Item的点击事件</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 加载更多</span></span><br><span class="line">        mItemAdapter.setOnLoadMoreListener(<span class="keyword">new</span> <span class="title class_">BaseQuickAdapter</span>.RequestLoadMoreListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLoadMoreRequested</span><span class="params">()</span> &#123;</span><br><span class="line">                loadData(<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, mRecyclerView);</span><br><span class="line"></span><br><span class="line">        mRecyclerView.setAdapter(mItemAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadData</span><span class="params">(<span class="type">boolean</span> pIsLoadByRefresh)</span> &#123;</span><br><span class="line">        <span class="comment">// 网络异常直接提示网络异常</span></span><br><span class="line">        <span class="keyword">if</span> (!NetUtil.isNetworkConnected(getActivity())) &#123;</span><br><span class="line">            ToastUtil.showNotNetToast(getActivity());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (pIsLoadByRefresh) &#123;</span><br><span class="line">            getPresenter().resetPage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// TODO 根据业务修改函数名以及内部的P层调用</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> View <span class="title function_">getEmptyView</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">emptyView</span> <span class="operator">=</span> LayoutInflater.from(<span class="built_in">this</span>).inflate(EMPTY_VIEW_RES_ID, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// TODO 空态页是否有额外的操作</span></span><br><span class="line">        <span class="keyword">return</span> emptyView;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">__getDataSuccess</span><span class="params">(<span class="type">boolean</span> pIsLoadByRefresh,$&#123;beanName&#125; pT)</span> &#123;</span><br><span class="line">        mSmartRefreshLayout.finishRefresh();</span><br><span class="line">        mSmartRefreshLayout.setEnableRefresh(<span class="literal">true</span>);</span><br><span class="line">        mItemAdapter.isUseEmpty(<span class="literal">true</span>);</span><br><span class="line">        List&lt;$&#123;beanName&#125;.$&#123;childBeanName&#125;&gt;dataList = pT.getData();</span><br><span class="line">        <span class="keyword">if</span> (pIsLoadByRefresh) &#123;</span><br><span class="line">            mItemAdapter.setNewData(dataList);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mItemAdapter.addData(dataList);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ListUtils.isEmpty(dataList)) &#123;</span><br><span class="line">            checkLoadMore(<span class="literal">false</span>, mItemAdapter, BaseParser.parseInt(pT.getTotal()), getPresenter().getPageSize());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mItemAdapter.loadMoreEnd();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">__getDataFail</span><span class="params">()</span> &#123;</span><br><span class="line">        mSmartRefreshLayout.finishRefresh();</span><br><span class="line">        mSmartRefreshLayout.setEnableRefresh(<span class="literal">true</span>);</span><br><span class="line">        mItemAdapter.isUseEmpty(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="MvpItemAdapter"><a href="#MvpItemAdapter" class="headerlink" title="MvpItemAdapter"></a>MvpItemAdapter</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"><span class="keyword">import</span> com.chad.library.adapter.base.BaseQuickAdapter;</span><br><span class="line"><span class="keyword">import</span> com.chad.library.adapter.base.BaseViewHolder;</span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;pageName&#125;ItemAdapter <span class="keyword">extends</span> <span class="title class_">BaseQuickAdapter</span>&lt;$&#123;beanName&#125;.$&#123;childBeanName&#125;, BaseViewHolder&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> $&#123;pageName&#125;ItemAdapter(<span class="type">int</span> layoutResId) &#123;</span><br><span class="line">        <span class="built_in">super</span>(layoutResId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">convert</span><span class="params">(BaseViewHolder helper, $&#123;beanName&#125;.$&#123;childBeanName&#125; item)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Item的展示</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="MvpLdyActivity"><a href="#MvpLdyActivity" class="headerlink" title="MvpLdyActivity"></a>MvpLdyActivity</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.annotation.LayoutRes;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.LinearLayoutManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chad.library.adapter.base.BaseQuickAdapter;</span><br><span class="line"><span class="keyword">import</span> com.scwang.smartrefresh.layout.SmartRefreshLayout;</span><br><span class="line"><span class="keyword">import</span> com.scwang.smartrefresh.layout.api.RefreshLayout;</span><br><span class="line"><span class="keyword">import</span> com.scwang.smartrefresh.layout.listener.OnRefreshListener;</span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.common.baseData.BaseParser;</span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.common.baseData.ListUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xxx.xxx.R;</span><br><span class="line"><span class="keyword">import</span> butterknife.Bind;</span><br><span class="line"><span class="keyword">import</span> butterknife.ButterKnife;</span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;pageName&#125;Activity <span class="keyword">extends</span> <span class="title class_">LdyBaseMvpActivity</span>&lt;$&#123;pageName&#125;Contract.View,$&#123;pageName&#125;Presenter&gt;</span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">$</span>&#123;pageName&#125;Contract.View &#123;</span><br><span class="line">    <span class="meta">@LayoutRes</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PAGE_LAYOUT_RES_ID</span> <span class="operator">=</span> R.layout.activity_$&#123;layoutName&#125;;</span><br><span class="line">    <span class="meta">@LayoutRes</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ITEM_LAYOUT_RES_ID</span> <span class="operator">=</span> R.layout.item_$&#123;layoutName&#125;;</span><br><span class="line">    <span class="meta">@LayoutRes</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EMPTY_VIEW_RES_ID</span> <span class="operator">=</span> R.layout.empty_$&#123;layoutName&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bind(R.id.toolbar)</span></span><br><span class="line">    Toolbar mToolbar;</span><br><span class="line">    <span class="meta">@Bind(R.id.toolbar_iv_left)</span></span><br><span class="line">    ImageView mToolbarIvLeft;</span><br><span class="line">    <span class="meta">@Bind(R.id.toolbar_title)</span></span><br><span class="line">    TextView mToolbarTitle;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bind(R.id.$&#123;layoutName&#125;_srl)</span></span><br><span class="line">    SmartRefreshLayout mSmartRefreshLayout;</span><br><span class="line">    <span class="meta">@Bind(R.id.$&#123;layoutName&#125;_rv)</span></span><br><span class="line">    RecyclerView mRecyclerView;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// TODO 替换自己的ItemAdapter</span></span><br><span class="line">    <span class="keyword">private</span> $&#123;pageName&#125;ItemAdapter mItemAdapter;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreateMvp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 是否可以去除Activity的背景</span></span><br><span class="line">        <span class="comment">// getWindow().setBackgroundDrawable(null);</span></span><br><span class="line">        setImmersion();</span><br><span class="line">        initView();</span><br><span class="line">        mSmartRefreshLayout.autoRefresh();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        ButterKnife.unbind(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">setLayoutResId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PAGE_LAYOUT_RES_ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> $&#123;pageName&#125;Presenter <span class="title function_">createPresenter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">$</span>&#123;pageName&#125;Presenter(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImmersion</span><span class="params">()</span> &#123;</span><br><span class="line">        getImmersion().setImmersionDarkFont(mToolbar, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initView</span><span class="params">()</span> &#123;</span><br><span class="line">        initToolbar();</span><br><span class="line">        initSrl();</span><br><span class="line">        initRv();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initToolbar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 设置Toolbar</span></span><br><span class="line">        mToolbarTitle.setText(<span class="string">&quot;改成自己的标题&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        mToolbar.setNavigationOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                finishAnimation();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initSrl</span><span class="params">()</span> &#123;</span><br><span class="line">        mSmartRefreshLayout.setEnableHeaderTranslationContent(<span class="literal">false</span>);</span><br><span class="line">        mSmartRefreshLayout.setDisableContentWhenRefresh(<span class="literal">true</span>);</span><br><span class="line">        mSmartRefreshLayout.setOnRefreshListener(<span class="keyword">new</span> <span class="title class_">OnRefreshListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRefresh</span><span class="params">(RefreshLayout refreshlayout)</span> &#123;</span><br><span class="line">                loadData(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initRv</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 根据实际进行调整</span></span><br><span class="line">        <span class="type">LinearLayoutManager</span> <span class="variable">linearLayoutManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        mRecyclerView.setLayoutManager(linearLayoutManager);</span><br><span class="line"></span><br><span class="line">        mItemAdapter = <span class="keyword">new</span> <span class="title class_">$</span>&#123;pageName&#125;ItemAdapter(ITEM_LAYOUT_RES_ID);</span><br><span class="line">        mItemAdapter.setEmptyView(getEmptyView());</span><br><span class="line">        mItemAdapter.isUseEmpty(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// TODO 是否需要设置自定义的LoadMoreView</span></span><br><span class="line">        mItemAdapter.setLoadMoreView(<span class="keyword">new</span> <span class="title class_">CustomCommonLoadMoreView</span>());</span><br><span class="line">        <span class="comment">// TODO 是否有分割线需要设置</span></span><br><span class="line">        <span class="comment">// 点击跳转</span></span><br><span class="line">        mItemAdapter.setOnItemClickListener(<span class="keyword">new</span> <span class="title class_">BaseQuickAdapter</span>.OnItemClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onItemClick</span><span class="params">(BaseQuickAdapter adapter, View view, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">                <span class="comment">// TODO Item的点击事件</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 加载更多</span></span><br><span class="line">        mItemAdapter.setOnLoadMoreListener(<span class="keyword">new</span> <span class="title class_">BaseQuickAdapter</span>.RequestLoadMoreListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLoadMoreRequested</span><span class="params">()</span> &#123;</span><br><span class="line">                loadData(<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, mRecyclerView);</span><br><span class="line"></span><br><span class="line">        mRecyclerView.setAdapter(mItemAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadData</span><span class="params">(<span class="type">boolean</span> pIsLoadByRefresh)</span> &#123;</span><br><span class="line">        <span class="comment">// 网络异常直接提示网络异常</span></span><br><span class="line">        <span class="keyword">if</span> (!NetUtil.isNetworkConnected(<span class="built_in">this</span>)) &#123;</span><br><span class="line">            ToastUtil.showNotNetToast(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (pIsLoadByRefresh) &#123;</span><br><span class="line">            getPresenter().resetPage();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// TODO 根据业务修改函数名以及内部的P层调用</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> View <span class="title function_">getEmptyView</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">emptyView</span> <span class="operator">=</span> LayoutInflater.from(<span class="built_in">this</span>).inflate(EMPTY_VIEW_RES_ID, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// TODO 空态页是否有额外的操作</span></span><br><span class="line">        <span class="keyword">return</span> emptyView;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">__getDataSuccess</span><span class="params">(<span class="type">boolean</span> pIsLoadByRefresh,$&#123;beanName&#125; pT)</span> &#123;</span><br><span class="line">        mSmartRefreshLayout.finishRefresh();</span><br><span class="line">        mSmartRefreshLayout.setEnableRefresh(<span class="literal">true</span>);</span><br><span class="line">        mItemAdapter.isUseEmpty(<span class="literal">true</span>);</span><br><span class="line">        List&lt;$&#123;beanName&#125;.$&#123;childBeanName&#125;&gt;dataList = pT.getData();</span><br><span class="line">        <span class="keyword">if</span> (pIsLoadByRefresh) &#123;</span><br><span class="line">            mItemAdapter.setNewData(dataList);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mItemAdapter.addData(dataList);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ListUtils.isEmpty(dataList)) &#123;</span><br><span class="line">            checkLoadMore(<span class="literal">false</span>, mItemAdapter, BaseParser.parseInt(pT.getTotal()), getPresenter().getPageSize());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mItemAdapter.loadMoreEnd();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">__getDataFail</span><span class="params">()</span> &#123;</span><br><span class="line">        mSmartRefreshLayout.finishRefresh();</span><br><span class="line">        mSmartRefreshLayout.setEnableRefresh(<span class="literal">true</span>);</span><br><span class="line">        mItemAdapter.isUseEmpty(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="MvpLdyFragment"><a href="#MvpLdyFragment" class="headerlink" title="MvpLdyFragment"></a>MvpLdyFragment</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.LayoutRes;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.LinearLayoutManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chad.library.adapter.base.BaseQuickAdapter;</span><br><span class="line"><span class="keyword">import</span> com.scwang.smartrefresh.layout.SmartRefreshLayout;</span><br><span class="line"><span class="keyword">import</span> com.scwang.smartrefresh.layout.api.RefreshLayout;</span><br><span class="line"><span class="keyword">import</span> com.scwang.smartrefresh.layout.listener.OnRefreshListener;</span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.common.baseData.BaseParser;</span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.common.baseData.ListUtils;</span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.common.network.NetUtil;</span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.common.toast.ToastUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xxx.xxx.R;</span><br><span class="line"><span class="keyword">import</span> xxx.xxx.base.LdyBaseMvpFragment;</span><br><span class="line"><span class="keyword">import</span> butterknife.Bind;</span><br><span class="line"><span class="keyword">import</span> butterknife.ButterKnife;</span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;pageName&#125;Fragment <span class="keyword">extends</span> <span class="title class_">LdyBaseMvpFragment</span>&lt;$&#123;pageName&#125;Contract.View,$&#123;pageName&#125;Presenter&gt;</span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">$</span>&#123;pageName&#125;Contract.View&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LayoutRes</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PAGE_LAYOUT_RES_ID</span> <span class="operator">=</span> R.layout.fragment_$&#123;layoutName&#125;;</span><br><span class="line">    <span class="meta">@LayoutRes</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ITEM_LAYOUT_RES_ID</span> <span class="operator">=</span> R.layout.item_$&#123;layoutName&#125;;</span><br><span class="line">    <span class="meta">@LayoutRes</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EMPTY_VIEW_RES_ID</span> <span class="operator">=</span> R.layout.empty_$&#123;layoutName&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bind(R.id.$&#123;layoutName&#125;_srl)</span></span><br><span class="line">    SmartRefreshLayout mSmartRefreshLayout;</span><br><span class="line">    <span class="meta">@Bind(R.id.$&#123;layoutName&#125;_rv)</span></span><br><span class="line">    RecyclerView mRecyclerView;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// TODO 替换自己的ItemAdapter</span></span><br><span class="line">    <span class="keyword">private</span> $&#123;pageName&#125;ItemAdapter mItemAdapter;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $&#123;pageName&#125;Fragment <span class="title function_">newInstance</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        $&#123;pageName&#125;<span class="type">Fragment</span> <span class="variable">fragment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$</span>&#123;pageName&#125;Fragment();</span><br><span class="line">        <span class="comment">//TODO：可以传一些值进来</span></span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Bundle</span> <span class="variable">args</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">            args.putInt(<span class="string">&quot;key&quot;</span>, (<span class="type">int</span>) map.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">            args.putParcelable(<span class="string">&quot;key&quot;</span>, (Uri) map.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">            args.putBoolean(<span class="string">&quot;key&quot;</span>, (<span class="type">boolean</span>) map.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">            args.putString(<span class="string">&quot;key&quot;</span>, (String) map.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">            fragment.setArguments(args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// TODO 取出一些参数</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            xxx = getArguments().getString(Key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">__getDataSuccess</span><span class="params">(<span class="type">boolean</span> pIsLoadByRefresh, $&#123;beanName&#125; pT)</span> &#123;</span><br><span class="line">        mSmartRefreshLayout.finishRefresh();</span><br><span class="line">        mSmartRefreshLayout.setEnableRefresh(<span class="literal">true</span>);</span><br><span class="line">        mItemAdapter.isUseEmpty(<span class="literal">true</span>);</span><br><span class="line">        List&lt;$&#123;beanName&#125;.$&#123;childBeanName&#125;&gt; dataList = pT.getData();</span><br><span class="line">        <span class="keyword">if</span> (pIsLoadByRefresh) &#123;</span><br><span class="line">            mItemAdapter.setNewData(dataList);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mItemAdapter.addData(dataList);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ListUtils.isEmpty(dataList)) &#123;</span><br><span class="line">            checkLoadMore(<span class="literal">false</span>, mItemAdapter, BaseParser.parseInt(pT.getTotal()), getPresenter().getPageSize());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mItemAdapter.loadMoreEnd();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">__getDataFail</span><span class="params">()</span> &#123;</span><br><span class="line">        mSmartRefreshLayout.finishRefresh();</span><br><span class="line">        mSmartRefreshLayout.setEnableRefresh(<span class="literal">true</span>);</span><br><span class="line">        mItemAdapter.isUseEmpty(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onViewCreatedMvp</span><span class="params">()</span> &#123;</span><br><span class="line">        initParams();</span><br><span class="line">        initView();</span><br><span class="line">        mSmartRefreshLayout.autoRefresh();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> inflate a fragment view</span></span><br><span class="line">        <span class="type">View</span> <span class="variable">rootView</span> <span class="operator">=</span> <span class="built_in">super</span>.onCreateView(inflater, container, savedInstanceState);</span><br><span class="line">        ButterKnife.bind(<span class="built_in">this</span>, rootView);</span><br><span class="line">        <span class="keyword">return</span> rootView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroyView</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroyView();</span><br><span class="line">        ButterKnife.unbind(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initView</span><span class="params">()</span> &#123;</span><br><span class="line">        initSrl();</span><br><span class="line">        initRv();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化刷新控件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initSrl</span><span class="params">()</span> &#123;</span><br><span class="line">        mSmartRefreshLayout.setEnableHeaderTranslationContent(<span class="literal">false</span>);</span><br><span class="line">        mSmartRefreshLayout.setDisableContentWhenRefresh(<span class="literal">true</span>);</span><br><span class="line">        mSmartRefreshLayout.setOnRefreshListener(<span class="keyword">new</span> <span class="title class_">OnRefreshListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRefresh</span><span class="params">(RefreshLayout refreshlayout)</span> &#123;</span><br><span class="line">                getChildModularData(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化RecyclerView</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initRv</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 根据实际进行调整</span></span><br><span class="line">        <span class="type">LinearLayoutManager</span> <span class="variable">linearLayoutManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(getContext());</span><br><span class="line"></span><br><span class="line">        mRecyclerView.setLayoutManager(linearLayoutManager);</span><br><span class="line"></span><br><span class="line">        mItemAdapter = <span class="keyword">new</span> <span class="title class_">$</span>&#123;pageName&#125;ItemAdapter(ITEM_LAYOUT_RES_ID);</span><br><span class="line">        mItemAdapter.setEmptyView(getEmptyView());</span><br><span class="line">        mItemAdapter.isUseEmpty(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// TODO 是否需要设置自定义的LoadMoreView</span></span><br><span class="line">        mItemAdapter.setLoadMoreView(<span class="keyword">new</span> <span class="title class_">CustomCommonLoadMoreView</span>());</span><br><span class="line">        <span class="comment">// TODO 是否有分割线需要设置</span></span><br><span class="line">        <span class="comment">// 点击跳转</span></span><br><span class="line">        mItemAdapter.setOnItemClickListener(<span class="keyword">new</span> <span class="title class_">BaseQuickAdapter</span>.OnItemClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onItemClick</span><span class="params">(BaseQuickAdapter adapter, View view, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">                <span class="comment">// TODO Item的点击事件</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 加载更多</span></span><br><span class="line">        mItemAdapter.setOnLoadMoreListener(<span class="keyword">new</span> <span class="title class_">BaseQuickAdapter</span>.RequestLoadMoreListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLoadMoreRequested</span><span class="params">()</span> &#123;</span><br><span class="line">                getChildModularData(<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, mRecyclerView);</span><br><span class="line"></span><br><span class="line">        mRecyclerView.setAdapter(mItemAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> View <span class="title function_">getEmptyView</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">View</span> <span class="variable">emptyView</span> <span class="operator">=</span> LayoutInflater.from(getContext()).inflate(EMPTY_VIEW_RES_ID, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// TODO 空态页是否有额外的操作</span></span><br><span class="line">        <span class="keyword">return</span> emptyView;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化一些基本的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initParams</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">setLayoutResId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PAGE_LAYOUT_RES_ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">lazyLoadData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这里不用smartRefreshLayout的进度圈是因为显示的时机有点滞后</span></span><br><span class="line">        showRequestLoading();</span><br><span class="line">        getChildModularData(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取该模板id下各个模块的数据&lt;br&gt;&lt;/br&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;1.先从缓存获取显示&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;2.如果网络异常，则显示提示；否则延迟500L毫秒刷新数据&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getChildModularData</span><span class="params">(<span class="type">boolean</span> pIsLoadByRefresh)</span> &#123;</span><br><span class="line">        <span class="comment">// 网络异常直接提示网络异常</span></span><br><span class="line">        <span class="keyword">if</span> (!NetUtil.isNetworkConnected(getActivity())) &#123;</span><br><span class="line">            ToastUtil.showNotNetToast(getActivity());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (pIsLoadByRefresh) &#123;</span><br><span class="line">            getPresenter().resetPage();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//网络请求数据</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> $&#123;pageName&#125;Presenter <span class="title function_">createPresenter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">$</span>&#123;pageName&#125;Presenter(getContext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="MvpModel"><a href="#MvpModel" class="headerlink" title="MvpModel"></a>MvpModel</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> ($&#123;IMPORT_BLOCK&#125; != <span class="string">&quot;&quot;</span>)$&#123;IMPORT_BLOCK&#125;</span><br><span class="line">#end</span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;pageName&#125;Model <span class="keyword">implements</span> <span class="title class_">MvpModel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> $&#123;pageName&#125;Model(Context context)&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="MvpPresenter"><a href="#MvpPresenter" class="headerlink" title="MvpPresenter"></a>MvpPresenter</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.framework.v1.support.impl.MvpBasePresenter;</span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;pageName&#125;Presenter <span class="keyword">extends</span> <span class="title class_">MvpBasePresenter</span>&lt;$&#123;pageName&#125;Contract.View&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> $&#123;pageName&#125;Model mModel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $&#123;pageName&#125;Presenter(Context context) &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        mModel = <span class="keyword">new</span> <span class="title class_">$</span>&#123;pageName&#125;Model(context);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        mModel = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="StaticClassSingleton"><a href="#StaticClassSingleton" class="headerlink" title="StaticClassSingleton"></a>StaticClassSingleton</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;NAME&#125; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;$&#123;NAME&#125;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> $&#123;NAME&#125;()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $&#123;NAME&#125; getInstance()&#123;</span><br><span class="line">        <span class="keyword">return</span> $&#123;NAME&#125;Holder.singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例模式-&gt;静态内部类&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 多线程情况下，使用合理一些,推荐</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;NAME&#125;Holder &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> $&#123;NAME&#125; singleton = <span class="keyword">new</span> <span class="title class_">$</span>&#123;NAME&#125;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Arms"><a href="#Arms" class="headerlink" title="Arms"></a>Arms</h3><h4 id="ArmsActivity"><a href="#ArmsActivity" class="headerlink" title="ArmsActivity"></a>ArmsActivity</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.base.BaseActivity;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.utils.ArmsUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.jess.arms.utils.Preconditions.checkNotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过Template生成对应页面的MVP和Dagger代码,请注意输入框中输入的名字必须相同</span></span><br><span class="line"><span class="comment">  * 由于每个项目包结构都不一定相同,所以每生成一个文件需要自己导入import包名,可以在设置中设置自动导入包名</span></span><br><span class="line"><span class="comment">  * 请在对应包下按以下顺序生成对应代码,Contract-&gt;Model-&gt;Presenter-&gt;Activity-&gt;Module-&gt;Component</span></span><br><span class="line"><span class="comment">  * 因为生成Activity时,Module和Component还没生成,但是Activity中有它们的引用,所以会报错,但是不用理会</span></span><br><span class="line"><span class="comment">  * 继续将Module和Component生成完后,编译一下项目再回到Activity,按提示修改一个方法名即可</span></span><br><span class="line"><span class="comment">  * 如果想生成Fragment的相关文件,则将上面构建顺序中的Activity换为Fragment,并将Component中inject方法的参数改为此Fragment</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;NAME&#125;Activity <span class="keyword">extends</span> <span class="title class_">BaseActivity</span>&lt;$&#123;NAME&#125;Presenter&gt; <span class="keyword">implements</span> <span class="title class_">$</span>&#123;NAME&#125;Contract.View &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setupActivityComponent</span><span class="params">(AppComponent appComponent)</span> &#123;</span><br><span class="line">        Dagger$&#123;NAME&#125;Component</span><br><span class="line">                .builder()</span><br><span class="line">                .appComponent(appComponent)</span><br><span class="line">                .$&#123;NAME&#125;Module(<span class="keyword">new</span> <span class="title class_">$</span>&#123;NAME&#125;Module(<span class="built_in">this</span>)) <span class="comment">//请将$&#123;NAME&#125;Module()第一个首字母改为小写</span></span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">initView</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initData</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showLoading</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hideLoading</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showMessage</span><span class="params">(<span class="meta">@NonNull</span> String message)</span> &#123;</span><br><span class="line">        checkNotNull(message);</span><br><span class="line">        ArmsUtils.snackbarText(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">launchActivity</span><span class="params">(<span class="meta">@NonNull</span> Intent intent)</span> &#123;</span><br><span class="line">        checkNotNull(intent);</span><br><span class="line">        ArmsUtils.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">killMyself</span><span class="params">()</span> &#123;</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="ArmsAdapter"><a href="#ArmsAdapter" class="headerlink" title="ArmsAdapter"></a>ArmsAdapter</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chad.library.adapter.base.BaseQuickAdapter;</span><br><span class="line"><span class="keyword">import</span> com.chad.library.adapter.base.BaseViewHolder;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.di.component.AppComponent;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.utils.ArmsUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;NAME&#125;Adapter <span class="keyword">extends</span> <span class="title class_">BaseQuickAdapter</span>&lt;$&#123;NAME&#125;Bean, BaseViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AppComponent mAppComponent;</span><br><span class="line">    <span class="keyword">private</span> Context      mContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $&#123;NAME&#125;Adapter(<span class="meta">@Nullable</span> List&lt;$&#123;NAME&#125;Bean&gt; data, Context context) &#123;</span><br><span class="line">        <span class="built_in">super</span>(R.layout.item_$&#123;NAME&#125;_recycleview, data);</span><br><span class="line">        <span class="built_in">this</span>.mContext = context;</span><br><span class="line">        <span class="comment">//可以从任何可以拿到Context的地方，拿到AppComponent，从而得到用Dagger管理的单例对象</span></span><br><span class="line">        <span class="built_in">this</span>.mAppComponent = ArmsUtils.obtainAppComponentFromContext(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">convert</span><span class="params">(BaseViewHolder helper, $&#123;NAME&#125;Bean item)</span> &#123;</span><br><span class="line">        <span class="comment">//todo: 页面逻辑</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="ArmsAutoView"><a href="#ArmsAutoView" class="headerlink" title="ArmsAutoView"></a>ArmsAutoView</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhy.autolayout.AutoLayoutInfo;</span><br><span class="line"><span class="keyword">import</span> com.zhy.autolayout.utils.AutoLayoutHelper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此Template用于生成AutoLayout需要的的Auto系列View,如需要使ScrollView适配,使用此Template输入ScrollView,即可生成</span></span><br><span class="line"><span class="comment"> * AutoScrollView,使用此View即可自适应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Auto$</span>&#123;NAME&#125; <span class="keyword">extends</span> <span class="title class_">$</span>&#123;NAME&#125; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AutoLayoutHelper</span> <span class="variable">mHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoLayoutHelper</span>(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Auto$&#123;NAME&#125;(Context context) &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Auto$&#123;NAME&#125;(Context context, <span class="meta">@Nullable</span> AttributeSet attrs) &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Auto$&#123;NAME&#125;(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="type">int</span> defStyleAttr) &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isInEditMode())&#123;</span><br><span class="line">            mHelper.adjustChildren();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onLayout</span><span class="params">(<span class="type">boolean</span> changed, <span class="type">int</span> l, <span class="type">int</span> t, <span class="type">int</span> r, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onLayout(changed, l, t, r, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LayoutParams <span class="title function_">generateLayoutParams</span><span class="params">(AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LayoutParams</span>(getContext(), attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LayoutParams</span> <span class="keyword">extends</span> <span class="title class_">$</span>&#123;NAME&#125;.LayoutParams</span><br><span class="line">            <span class="keyword">implements</span> <span class="title class_">AutoLayoutHelper</span>.AutoLayoutParams &#123;</span><br><span class="line">        <span class="keyword">private</span> AutoLayoutInfo mAutoLayoutInfo;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">LayoutParams</span><span class="params">(Context c, AttributeSet attrs)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(c, attrs);</span><br><span class="line">            mAutoLayoutInfo = AutoLayoutHelper.getAutoLayoutInfo(c, attrs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> AutoLayoutInfo <span class="title function_">getAutoLayoutInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mAutoLayoutInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">LayoutParams</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(width, height);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">LayoutParams</span><span class="params">(ViewGroup.LayoutParams source)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">LayoutParams</span><span class="params">(MarginLayoutParams source)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(source);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="ArmsComponent"><a href="#ArmsComponent" class="headerlink" title="ArmsComponent"></a>ArmsComponent</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jess.arms.di.scope.ActivityScope;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dagger.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过Template生成对应页面的MVP和Dagger代码,请注意输入框中输入的名字必须相同</span></span><br><span class="line"><span class="comment">  * 由于每个项目包结构都不一定相同,所以每生成一个文件需要自己导入import包名,可以在设置中设置自动导入包名</span></span><br><span class="line"><span class="comment">  * 请在对应包下按以下顺序生成对应代码,Contract-&gt;Model-&gt;Presenter-&gt;Activity-&gt;Module-&gt;Component</span></span><br><span class="line"><span class="comment">  * 因为生成Activity时,Module和Component还没生成,但是Activity中有它们的引用,所以会报错,但是不用理会</span></span><br><span class="line"><span class="comment">  * 继续将Module和Component生成完后,编译一下项目再回到Activity,按提示修改一个方法名即可</span></span><br><span class="line"><span class="comment">  * 如果想生成Fragment的相关文件,则将上面构建顺序中的Activity换为Fragment,并将Component中inject方法的参数改为此Fragment</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@Component(modules = $&#123;NAME&#125;Module.class,dependencies = AppComponent.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">$</span>&#123;NAME&#125;Component &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">inject</span><span class="params">($&#123;NAME&#125;Activity activity)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="ArmsContract"><a href="#ArmsContract" class="headerlink" title="ArmsContract"></a>ArmsContract</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jess.arms.mvp.IView;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.mvp.IModel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过Template生成对应页面的MVP和Dagger代码,请注意输入框中输入的名字必须相同</span></span><br><span class="line"><span class="comment">  * 由于每个项目包结构都不一定相同,所以每生成一个文件需要自己导入import包名,可以在设置中设置自动导入包名</span></span><br><span class="line"><span class="comment">  * 请在对应包下按以下顺序生成对应代码,Contract-&gt;Model-&gt;Presenter-&gt;Activity-&gt;Module-&gt;Component</span></span><br><span class="line"><span class="comment">  * 因为生成Activity时,Module和Component还没生成,但是Activity中有它们的引用,所以会报错,但是不用理会</span></span><br><span class="line"><span class="comment">  * 继续将Module和Component生成完后,编译一下项目再回到Activity,按提示修改一个方法名即可</span></span><br><span class="line"><span class="comment">  * 如果想生成Fragment的相关文件,则将上面构建顺序中的Activity换为Fragment,并将Component中inject方法的参数改为此Fragment</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">$</span>&#123;NAME&#125;Contract &#123;</span><br><span class="line">    <span class="comment">//对于经常使用的关于UI的方法可以定义到IView中,如显示隐藏进度条,和显示文字消息</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">View</span> <span class="keyword">extends</span> <span class="title class_">IView</span> &#123;</span><br><span class="line">        Activity <span class="title function_">getActivity</span><span class="params">()</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Model层定义接口,外部只需关心Model返回的数据,无需关心内部细节,即是否使用缓存</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Model</span> <span class="keyword">extends</span> <span class="title class_">IModel</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="ArmsFragment"><a href="#ArmsFragment" class="headerlink" title="ArmsFragment"></a>ArmsFragment</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.base.BaseFragment</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jess.arms.utils.ArmsUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> butterknife.Bind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.jess.arms.utils.Preconditions.checkNotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过Template生成对应页面的MVP和Dagger代码,请注意输入框中输入的名字必须相同</span></span><br><span class="line"><span class="comment">  * 由于每个项目包结构都不一定相同,所以每生成一个文件需要自己导入import包名,可以在设置中设置自动导入包名</span></span><br><span class="line"><span class="comment">  * 请在对应包下按以下顺序生成对应代码,Contract-&gt;Model-&gt;Presenter-&gt;Activity-&gt;Module-&gt;Component</span></span><br><span class="line"><span class="comment">  * 因为生成Activity时,Module和Component还没生成,但是Activity中有它们的引用,所以会报错,但是不用理会</span></span><br><span class="line"><span class="comment">  * 继续将Module和Component生成完后,编译一下项目再回到Activity,按提示修改一个方法名即可</span></span><br><span class="line"><span class="comment">  * 如果想生成Fragment的相关文件,则将上面构建顺序中的Activity换为Fragment,并将Component中inject方法的参数改为此Fragment</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;NAME&#125;Fragment <span class="keyword">extends</span> <span class="title class_">BaseFragment</span>&lt;$&#123;NAME&#125;Presenter&gt; <span class="keyword">implements</span> <span class="title class_">$</span>&#123;NAME&#125;Contract.View&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $&#123;NAME&#125;Fragment <span class="title function_">newInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        $&#123;NAME&#125;<span class="type">Fragment</span> <span class="variable">fragment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">$</span>&#123;NAME&#125;Fragment();</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setupFragmentComponent</span><span class="params">(AppComponent appComponent)</span> &#123;</span><br><span class="line">        Dagger$&#123;NAME&#125;Component</span><br><span class="line">                .builder()</span><br><span class="line">                .appComponent(appComponent)</span><br><span class="line">                .$&#123;NAME&#125;Module(<span class="keyword">new</span> <span class="title class_">$</span>&#123;NAME&#125;Module(<span class="built_in">this</span>))<span class="comment">//请将$&#123;NAME&#125;Module()第一个首字母改为小写</span></span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">initView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(layout_id, container, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initData</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此方法是让外部调用使fragment做一些操作的,比如说外部的activity想让fragment对象执行一些方法,</span></span><br><span class="line"><span class="comment">     * 建议在有多个需要让外界调用的方法时,统一传Message,通过what字段,来区分不同的方法,在setData</span></span><br><span class="line"><span class="comment">     * 方法中就可以switch做不同的操作,这样就可以用统一的入口方法做不同的事</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 使用此方法时请注意调用时fragment的生命周期,如果调用此setData方法时onCreate还没执行</span></span><br><span class="line"><span class="comment">     * setData里却调用了presenter的方法时,是会报空的,因为dagger注入是在onCreated方法中执行的,然后才创建的presenter</span></span><br><span class="line"><span class="comment">     * 如果要做一些初始化操作,可以不必让外部调setData,在initData中初始化就可以了</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showLoading</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hideLoading</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showMessage</span><span class="params">(<span class="meta">@NonNull</span> String message)</span> &#123;</span><br><span class="line">        checkNotNull(message);</span><br><span class="line">        ArmsUtils.snackbarText(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">launchActivity</span><span class="params">(<span class="meta">@NonNull</span> Intent intent)</span> &#123;</span><br><span class="line">        checkNotNull(intent);</span><br><span class="line">        ArmsUtils.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">killMyself</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="ArmsModel"><a href="#ArmsModel" class="headerlink" title="ArmsModel"></a>ArmsModel</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.integration.IRepositoryManager;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.mvp.BaseModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.jess.arms.utils.Preconditions.checkNotNull;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.di.scope.ActivityScope;</span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过Template生成对应页面的MVP和Dagger代码,请注意输入框中输入的名字必须相同</span></span><br><span class="line"><span class="comment">  * 由于每个项目包结构都不一定相同,所以每生成一个文件需要自己导入import包名,可以在设置中设置自动导入包名</span></span><br><span class="line"><span class="comment">  * 请在对应包下按以下顺序生成对应代码,Contract-&gt;Model-&gt;Presenter-&gt;Activity-&gt;Module-&gt;Component</span></span><br><span class="line"><span class="comment">  * 因为生成Activity时,Module和Component还没生成,但是Activity中有它们的引用,所以会报错,但是不用理会</span></span><br><span class="line"><span class="comment">  * 继续将Module和Component生成完后,编译一下项目再回到Activity,按提示修改一个方法名即可</span></span><br><span class="line"><span class="comment">  * 如果想生成Fragment的相关文件,则将上面构建顺序中的Activity换为Fragment,并将Component中inject方法的参数改为此Fragment</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;NAME&#125;Model <span class="keyword">extends</span> <span class="title class_">BaseModel</span> <span class="keyword">implements</span> <span class="title class_">$</span>&#123;NAME&#125;Contract.Model&#123;</span><br><span class="line">    <span class="keyword">private</span> Gson mGson;</span><br><span class="line">    <span class="keyword">private</span> Application mApplication;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> $&#123;NAME&#125;Model(IRepositoryManager repositoryManager, Gson gson, Application application) &#123;</span><br><span class="line">        <span class="built_in">super</span>(repositoryManager);</span><br><span class="line">        <span class="built_in">this</span>.mGson = gson;</span><br><span class="line">        <span class="built_in">this</span>.mApplication = application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        <span class="built_in">this</span>.mGson = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.mApplication = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="ArmsModule"><a href="#ArmsModule" class="headerlink" title="ArmsModule"></a>ArmsModule</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.di.scope.ActivityScope;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dagger.Module;</span><br><span class="line"><span class="keyword">import</span> dagger.Provides;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过Template生成对应页面的MVP和Dagger代码,请注意输入框中输入的名字必须相同</span></span><br><span class="line"><span class="comment">  * 由于每个项目包结构都不一定相同,所以每生成一个文件需要自己导入import包名,可以在设置中设置自动导入包名</span></span><br><span class="line"><span class="comment">  * 请在对应包下按以下顺序生成对应代码,Contract-&gt;Model-&gt;Presenter-&gt;Activity-&gt;Module-&gt;Component</span></span><br><span class="line"><span class="comment">  * 因为生成Activity时,Module和Component还没生成,但是Activity中有它们的引用,所以会报错,但是不用理会</span></span><br><span class="line"><span class="comment">  * 继续将Module和Component生成完后,编译一下项目再回到Activity,按提示修改一个方法名即可</span></span><br><span class="line"><span class="comment">  * 如果想生成Fragment的相关文件,则将上面构建顺序中的Activity换为Fragment,并将Component中inject方法的参数改为此Fragment</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;NAME&#125;Module &#123;</span><br><span class="line">    <span class="keyword">private</span> $&#123;NAME&#125;Contract.View view;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建$&#123;NAME&#125;Module时,将View的实现类传进来,这样就可以提供View的实现类给presenter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $&#123;NAME&#125;Module($&#123;NAME&#125;Contract.View view) &#123;</span><br><span class="line">        <span class="built_in">this</span>.view = view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ActivityScope</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    $&#123;NAME&#125;Contract.View provide$&#123;NAME&#125;View()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ActivityScope</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    $&#123;NAME&#125;Contract.Model provide$&#123;NAME&#125;Model($&#123;NAME&#125;Model model)&#123;</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="ArmsPresenter"><a href="#ArmsPresenter" class="headerlink" title="ArmsPresenter"></a>ArmsPresenter</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.integration.AppManager;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.di.scope.ActivityScope;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.mvp.BasePresenter;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.http.imageloader.ImageLoader;</span><br><span class="line"><span class="keyword">import</span> me.jessyan.rxerrorhandler.core.RxErrorHandler;</span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过Template生成对应页面的MVP和Dagger代码,请注意输入框中输入的名字必须相同</span></span><br><span class="line"><span class="comment">  * 由于每个项目包结构都不一定相同,所以每生成一个文件需要自己导入import包名,可以在设置中设置自动导入包名</span></span><br><span class="line"><span class="comment">  * 请在对应包下按以下顺序生成对应代码,Contract-&gt;Model-&gt;Presenter-&gt;Activity-&gt;Module-&gt;Component</span></span><br><span class="line"><span class="comment">  * 因为生成Activity时,Module和Component还没生成,但是Activity中有它们的引用,所以会报错,但是不用理会</span></span><br><span class="line"><span class="comment">  * 继续将Module和Component生成完后,编译一下项目再回到Activity,按提示修改一个方法名即可</span></span><br><span class="line"><span class="comment">  * 如果想生成Fragment的相关文件,则将上面构建顺序中的Activity换为Fragment,并将Component中inject方法的参数改为此Fragment</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;NAME&#125;Presenter <span class="keyword">extends</span> <span class="title class_">BasePresenter</span>&lt;$&#123;NAME&#125;Contract.Model, $&#123;NAME&#125;Contract.View&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> RxErrorHandler mErrorHandler;</span><br><span class="line">    <span class="keyword">private</span> Application mApplication;</span><br><span class="line">    <span class="keyword">private</span> ImageLoader mImageLoader;</span><br><span class="line">    <span class="keyword">private</span> AppManager mAppManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> $&#123;NAME&#125;Presenter ($&#123;NAME&#125;Contract.Model model, $&#123;NAME&#125;Contract.View rootView</span><br><span class="line">            , RxErrorHandler handler, Application application</span><br><span class="line">            , ImageLoader imageLoader, AppManager appManager) &#123;</span><br><span class="line">        <span class="built_in">super</span>(model, rootView);</span><br><span class="line">        <span class="built_in">this</span>.mErrorHandler = handler;</span><br><span class="line">        <span class="built_in">this</span>.mApplication = application;</span><br><span class="line">        <span class="built_in">this</span>.mImageLoader = imageLoader;</span><br><span class="line">        <span class="built_in">this</span>.mAppManager = appManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        <span class="built_in">this</span>.mErrorHandler = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.mAppManager = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.mImageLoader = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.mApplication = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="升级版ArmsComponent"><a href="#升级版ArmsComponent" class="headerlink" title="升级版ArmsComponent"></a>升级版ArmsComponent</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jess.arms.di.component.AppComponent;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.di.scope.ActivityScope;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dagger.BindsInstance;</span><br><span class="line"><span class="keyword">import</span> dagger.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过Template生成对应页面的MVP和Dagger代码,请注意输入框中输入的名字必须相同</span></span><br><span class="line"><span class="comment">  * 由于每个项目包结构都不一定相同,所以每生成一个文件需要自己导入import包名,可以在设置中设置自动导入包名</span></span><br><span class="line"><span class="comment">  * 请在对应包下按以下顺序生成对应代码,Contract-&gt;Model-&gt;Presenter-&gt;Activity-&gt;Module-&gt;Component</span></span><br><span class="line"><span class="comment">  * 因为生成Activity时,Module和Component还没生成,但是Activity中有它们的引用,所以会报错,但是不用理会</span></span><br><span class="line"><span class="comment">  * 继续将Module和Component生成完后,编译一下项目再回到Activity,按提示修改一个方法名即可</span></span><br><span class="line"><span class="comment">  * 如果想生成Fragment的相关文件,则将上面构建顺序中的Activity换为Fragment,并将Component中inject方法的参数改为此Fragment</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@Component(modules = $&#123;NAME&#125;Module.class,dependencies = AppComponent.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">$</span>&#123;NAME&#125;Component &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">inject</span><span class="params">($&#123;NAME&#125;Activity activity)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Component</span>.Builder</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">        <span class="meta">@BindsInstance</span></span><br><span class="line">        $&#123;NAME&#125;Component.Builder <span class="title function_">view</span><span class="params">($&#123;NAME&#125;Contract.View view)</span>;</span><br><span class="line">        $&#123;NAME&#125;Component.Builder <span class="title function_">appComponent</span><span class="params">(AppComponent appComponent)</span>;</span><br><span class="line">        $&#123;NAME&#125;Component <span class="title function_">build</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="升级版ArmsModule"><a href="#升级版ArmsModule" class="headerlink" title="升级版ArmsModule"></a>升级版ArmsModule</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.LinearLayoutManager;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> dagger.Binds;</span><br><span class="line"><span class="keyword">import</span> dagger.Module;</span><br><span class="line"><span class="keyword">import</span> dagger.Provides;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jess.arms.di.scope.ActivityScope;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过Template生成对应页面的MVP和Dagger代码,请注意输入框中输入的名字必须相同</span></span><br><span class="line"><span class="comment">  * 由于每个项目包结构都不一定相同,所以每生成一个文件需要自己导入import包名,可以在设置中设置自动导入包名</span></span><br><span class="line"><span class="comment">  * 请在对应包下按以下顺序生成对应代码,Contract-&gt;Model-&gt;Presenter-&gt;Activity-&gt;Module-&gt;Component</span></span><br><span class="line"><span class="comment">  * 因为生成Activity时,Module和Component还没生成,但是Activity中有它们的引用,所以会报错,但是不用理会</span></span><br><span class="line"><span class="comment">  * 继续将Module和Component生成完后,编译一下项目再回到Activity,按提示修改一个方法名即可</span></span><br><span class="line"><span class="comment">  * 如果想生成Fragment的相关文件,则将上面构建顺序中的Activity换为Fragment,并将Component中inject方法的参数改为此Fragment</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;NAME&#125;Module &#123;</span><br><span class="line">    <span class="comment">//记得provides的方法要用static</span></span><br><span class="line">    <span class="comment">/*@ActivityScope</span></span><br><span class="line"><span class="comment">    @Provides</span></span><br><span class="line"><span class="comment">    static RxPermissions provideRxPermissions($&#123;NAME&#125;Contract.View view) &#123;</span></span><br><span class="line"><span class="comment">        return new RxPermissions((FragmentActivity) view.getActivity());</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ActivityScope</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="keyword">static</span> RecyclerView.LayoutManager <span class="title function_">provideLayoutManager</span><span class="params">($&#123;NAME&#125;Contract.View view)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(view.getActivity());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ActivityScope</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="keyword">static</span> List&lt;$&#123;NAME&#125;Bean&gt; provideList()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ActivityScope</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="keyword">static</span> $&#123;NAME&#125;Adapter <span class="title function_">provideAdapter</span><span class="params">(List&lt;$&#123;NAME&#125;Bean&gt; list, $&#123;NAME&#125;Contract.View view)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">$</span>&#123;NAME&#125;Adapter(list, view.getActivity());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Binds</span></span><br><span class="line">    <span class="keyword">abstract</span> $&#123;NAME&#125;Contract.Model provide$&#123;NAME&#125;Model($&#123;NAME&#125;Model model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="升级版ArmsActivity"><a href="#升级版ArmsActivity" class="headerlink" title="升级版ArmsActivity"></a>升级版ArmsActivity</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">if</span> ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != <span class="string">&quot;&quot;</span>)<span class="keyword">package</span> $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jess.arms.base.BaseActivity;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.base.DefaultAdapter;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.di.component.AppComponent;</span><br><span class="line"><span class="keyword">import</span> com.jess.arms.utils.ArmsUtils;</span><br><span class="line"><span class="keyword">import</span> com.paginate.Paginate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> androidx.swiperefreshlayout.widget.SwipeRefreshLayout;</span><br><span class="line"><span class="keyword">import</span> butterknife.BindView;</span><br><span class="line"><span class="keyword">import</span> timber.log.Timber;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.jess.arms.utils.Preconditions.checkNotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过Template生成对应页面的MVP和Dagger代码,请注意输入框中输入的名字必须相同</span></span><br><span class="line"><span class="comment">  * 由于每个项目包结构都不一定相同,所以每生成一个文件需要自己导入import包名,可以在设置中设置自动导入包名</span></span><br><span class="line"><span class="comment">  * 请在对应包下按以下顺序生成对应代码,Contract-&gt;Model-&gt;Presenter-&gt;Activity-&gt;Module-&gt;Component</span></span><br><span class="line"><span class="comment">  * 因为生成Activity时,Module和Component还没生成,但是Activity中有它们的引用,所以会报错,但是不用理会</span></span><br><span class="line"><span class="comment">  * 继续将Module和Component生成完后,编译一下项目再回到Activity,按提示修改一个方法名即可</span></span><br><span class="line"><span class="comment">  * 如果想生成Fragment的相关文件,则将上面构建顺序中的Activity换为Fragment,并将Component中inject方法的参数改为此Fragment</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">#parse(<span class="string">&quot;File Header.java&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;NAME&#125;Activity <span class="keyword">extends</span> <span class="title class_">BaseActivity</span>&lt;$&#123;NAME&#125;Presenter&gt; <span class="keyword">implements</span> <span class="title class_">$</span>&#123;NAME&#125;Contract.View,</span><br><span class="line">    SwipeRefreshLayout.OnRefreshListener &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BindView(R.id.recyclerView)</span></span><br><span class="line">    RecyclerView               mRecyclerView;</span><br><span class="line">    <span class="meta">@BindView(R.id.swipeRefreshLayout)</span></span><br><span class="line">    SwipeRefreshLayout         mSwipeRefreshLayout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    RecyclerView.LayoutManager mLayoutManager;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    SimplePaddingDecoration simplePaddingDecoration;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    $&#123;NAME&#125;Adapter mAdapter;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Paginate mPaginate;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span>  isLoadingMore;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setupActivityComponent</span><span class="params">(AppComponent appComponent)</span> &#123;</span><br><span class="line">        Dagger$&#123;NAME&#125;Component</span><br><span class="line">                .builder()</span><br><span class="line">                .appComponent(appComponent)</span><br><span class="line">                .view(<span class="built_in">this</span>)</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">initView</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="comment">//todo:如果你不需要框架帮你设置 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initData</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        setToolbar();</span><br><span class="line">        initRecyclerView();</span><br><span class="line">        mRecyclerView.addItemDecoration(simplePaddingDecoration);</span><br><span class="line">        mRecyclerView.setAdapter(mAdapter);</span><br><span class="line">        initPaginate();</span><br><span class="line">        setClickListener();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setClickListener</span><span class="params">()</span> &#123;</span><br><span class="line">        mAdapter.setOnItemClickListener(((adapter, view, position) -&gt; &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 2020/6/3 传参</span></span><br><span class="line">            <span class="comment">//launchActivity(intent);</span></span><br><span class="line">        &#125;));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setToolbar</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initPaginate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mPaginate == <span class="literal">null</span>) &#123;</span><br><span class="line">            Paginate.<span class="type">Callbacks</span> <span class="variable">callbacks</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Paginate</span>.Callbacks() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLoadMore</span><span class="params">()</span> &#123;</span><br><span class="line">                    mPresenter.request$&#123;NAME&#125;sFromModel(<span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLoading</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> isLoadingMore;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasLoadedAllItems</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            mPaginate = Paginate.with(mRecyclerView, callbacks)</span><br><span class="line">                    .setLoadingTriggerThreshold(<span class="number">0</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            mPaginate.setHasMoreDataToLoad(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initRecyclerView</span><span class="params">()</span>&#123;</span><br><span class="line">        mSwipeRefreshLayout.setOnRefreshListener(<span class="built_in">this</span>);</span><br><span class="line">        ArmsUtils.configRecyclerView(mRecyclerView, mLayoutManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showLoading</span><span class="params">()</span> &#123;</span><br><span class="line">        Timber.tag(TAG).w(<span class="string">&quot;showLoading&quot;</span>);</span><br><span class="line">        mSwipeRefreshLayout.setRefreshing(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hideLoading</span><span class="params">()</span> &#123;</span><br><span class="line">        Timber.tag(TAG).w(<span class="string">&quot;hideLoading&quot;</span>);</span><br><span class="line">        mSwipeRefreshLayout.setRefreshing(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showMessage</span><span class="params">(<span class="meta">@NonNull</span> String message)</span> &#123;</span><br><span class="line">        checkNotNull(message);</span><br><span class="line">        ArmsUtils.snackbarText(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">launchActivity</span><span class="params">(<span class="meta">@NonNull</span> Intent intent)</span> &#123;</span><br><span class="line">        checkNotNull(intent);</span><br><span class="line">        ArmsUtils.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">killMyself</span><span class="params">()</span> &#123;</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Activity <span class="title function_">getActivity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startLoadMore</span><span class="params">()</span> &#123;</span><br><span class="line">        isLoadingMore = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">endLoadMore</span><span class="params">()</span> &#123;</span><br><span class="line">        isLoadingMore = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRefresh</span><span class="params">()</span> &#123;</span><br><span class="line">        mPresenter.request$&#123;NAME&#125;sFromModel(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super.onDestroy()之后会unbind,所有view被置为null,所以必须在之前调用</span></span><br><span class="line">        DefaultAdapter.releaseAllHolder(mRecyclerView);</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        <span class="built_in">this</span>.mPaginate = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="xml类型"><a href="#xml类型" class="headerlink" title="xml类型"></a>xml类型</h3><h4 id="mvp-的-activity-layoutname"><a href="#mvp-的-activity-layoutname" class="headerlink" title="mvp 的 activity_${layoutname}"></a>mvp 的 <code>activity_$&#123;layoutname&#125;</code></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.scwang.smartrefresh.layout.SmartRefreshLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/$&#123;layoutname&#125;_srl&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/$&#123;layoutname&#125;_rv&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;@dimen/dp_10&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/dp_10&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.scwang.smartrefresh.layout.SmartRefreshLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="LdyFragment的布局文件-fragment-layoutname"><a href="#LdyFragment的布局文件-fragment-layoutname" class="headerlink" title="LdyFragment的布局文件 fragment_${layoutname}"></a>LdyFragment的布局文件 <code>fragment_$&#123;layoutname&#125;</code></h4><p>fragment带多个子fragment</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--fragment带多个子fragment的布局--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:tabTextAppearance</span>=<span class="string">&quot;@android:style/TextAppearance.Widget.TabWidget&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/$&#123;layoutname&#125;_tl&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:tabBackground</span>=<span class="string">&quot;@android:color/white&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:tabIndicatorColor</span>=<span class="string">&quot;@color/main_color&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:tabSelectedTextColor</span>=<span class="string">&quot;@color/main_color&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:tabTextColor</span>=<span class="string">&quot;@color/dark_text_color&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&quot;@style/ViewBoldSolidLine&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.u1city.androidframe.customView.NoScrollViewPager</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/$&#123;layoutname&#125;_vp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h1 id="AS自己写模板"><a href="#AS自己写模板" class="headerlink" title="AS自己写模板"></a>AS自己写模板</h1><p>（在AS 4.0以下可用）</p>
<p>AS安装插件 <code>TemplateBuilder</code></p>
<h2 id="module级模板"><a href="#module级模板" class="headerlink" title="module级模板"></a>module级模板</h2><ul>
<li><p>Windows 路径：<code>D:\Android\AS3.6.2\plugins\android\lib\templates\gradle-projects\NewArmsModule</code></p>
</li>
<li><p>Mac 路径：</p>
<p><code>/Applications/Android\ Studio.app/Contents/plugins/android/lib/templates/gradle-projects/NewAndroidProject</code></p>
</li>
</ul>
<h2 id="Activity级模板"><a href="#Activity级模板" class="headerlink" title="Activity级模板"></a><a href="https://blog.csdn.net/u010987039/article/details/80002962">Activity级模板</a></h2><ul>
<li><p>Windows路径：<code>D:\Android\AS3.6.2\plugins\android\lib\templates\activities\MVPArmsTemplat</code></p>
</li>
<li><p>Windows 路径：</p>
<p><code>D:\Android\AndroidStudio\plugins\android\lib\templates\activities\U1LdyMvpActivity</code></p>
</li>
<li><p>Mac 路径：</p>
<p><code>/Applications/Android\ Studio.app/Contents/plugins/android/lib/templates/activities/U1LdyMvpActivity</code></p>
</li>
</ul>
<h3 id="定义模板"><a href="#定义模板" class="headerlink" title="定义模板"></a>定义模板</h3><p>首先创建一个MVP的Activity，将动态的属性声明为变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;packageName&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> com.blackbox.medicalpension.common.mvp.base.BaseCommonActivity;</span><br><span class="line"><span class="keyword">import</span> com.blackbox.medicalpension.common.mvp.mvp.BasePresenter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jetbrains.annotations.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>&#123;activityClass&#125; <span class="keyword">extends</span> <span class="title class_">BaseCommonActivity</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.$&#123;layoutName&#125;);</span><br><span class="line">        initTitleWithBack(<span class="string">&quot;$&#123;titleName&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;BasePresenter&lt;?&gt;&gt; createPresenter() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建对应的Layout布局文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@color/white&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/include_layout&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">layout</span>=<span class="string">&quot;@layout/lin_title&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="生成模板"><a href="#生成模板" class="headerlink" title="生成模板"></a>生成模板</h3><p>选中两个模板文件，点击【ALT + T】，弹出【Configure Template Data】窗口。定义activityClass、layoutName、titleName三个变量，并【Finish】，生成模板。</p>
<p><img src="/posts/8f94baaa/AS%E7%94%9F%E6%88%90%E6%A8%A1%E6%9D%BF.jpg" alt="AS生成模板.png"></p>
<p>模板文件存放在…\Android Studio\plugins\android\lib\templates下</p>
<p><strong>属性说明：</strong></p>
<ul>
<li>Template Category 对应模板的分类，对应选择导入模板时的模板分类，这里默认值是电脑的用户名。</li>
<li>Template Name 对应模板名称，对应选择导入模板时的模板名称，默认值是当前的Project名称。</li>
<li>Template Description 对应模板描述信息，对应导入模板时弹出的导入界面的文字描述，默认为空。</li>
<li>Template Folder 对应生成模板所存放的位置，如果是Mac操作系统则默认为&#x2F;Applications&#x2F;Android Studio.app&#x2F;Contents&#x2F;plugins&#x2F;android&#x2F;lib&#x2F;templates， Windows系统的话由于差异比较大，就默认为空了，可以自行配置[Android Studio安装目录]&#x2F;plugins&#x2F;android&#x2F;lib&#x2F;templates（这里只需要配置一次即可，插件将自动保存该位置）。</li>
<li>Input data 配置模板变量<br>在【Configure Template Data】下点击【add】配置刚才模板中定义的变量，配置完毕后点击【Finish】。</li>
</ul>
<p><img src="/posts/8f94baaa/AS%E7%94%9F%E6%88%90%E6%A8%A1%E6%9D%BF-%E9%85%8D%E7%BD%AE%E5%8F%98%E9%87%8F.jpg" alt="AS生成模板-配置变量.png"></p>
<p>重启Studio后就可使用该自定义模板。</p>
<p><strong>关于Input data的使用，先解释下每个属性对应的含义</strong></p>
<ul>
<li>id 变量名，必须和模板中使用的变量名对应，必填</li>
<li>name 变量简介，必填</li>
<li>type 变量类型，string和boolean两种，通过下拉框选择，必填</li>
<li>default 变量对应的默认值，选填</li>
<li>help 添加该变量时的提示信息，选填</li>
</ul>
<p>模板文件后缀名都是以【.ftl】结尾。</p>
<p>globals.xml.ftl 全局变量文件 存放的是一些全局变量<br>recipe.xml.ftl 配置要引用的模板路径以及生成文件的路径<br>template.xml 模板的配置信息,以及要输入的参数.定义了模板的流程框架 基本结构<br>template_blank_activity.png 显示的缩略图（只是展示用）<br>LinActivity.java.ftl Activity模板文件</p>
<h4 id="修改template-xml文件"><a href="#修改template-xml文件" class="headerlink" title="修改template.xml文件"></a>修改template.xml文件</h4><p>为方便用户输入Activity名称或Layout名称，<strong>自动提示Layout或Activity名称</strong>，需要在文件中添加两个属性：<br>constraints&#x3D;”class|unique|nonempty”<br>suggest&#x3D;”${layoutToActivity(layoutName)}”<br>suggest&#x3D;”${activityToLayout(activityClass)}”</p>
<h4 id="修改AndroidManifest-xml文件"><a href="#修改AndroidManifest-xml文件" class="headerlink" title="修改AndroidManifest.xml文件"></a>修改AndroidManifest.xml文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;$&#123;packageName&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">    &lt;#if isNewModule&gt;</span><br><span class="line">	    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;$&#123;ativityPackageName&#125;.$&#123;activityClass&#125;&quot;</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">	        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">	&lt;#else&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;$&#123;packageName&#125;.$&#123;activityClass&#125;&quot;</span> /&gt;</span></span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="增加Kotlin模板"><a href="#增加Kotlin模板" class="headerlink" title="增加Kotlin模板"></a>增加Kotlin模板</h4><h1 id="AS4-1上写模板【新方式】"><a href="#AS4-1上写模板【新方式】" class="headerlink" title="AS4.1上写模板【新方式】"></a>AS4.1上写模板【新方式】</h1><p>（AS4.+以上可用。在AS 2020.3.1【这个得改】上用不了）</p>
<p><a href="https://www.bigademo.com/2021/01/20/AndroidStudio%204.1%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1/index.html">参考链接1-写给bigademo框架的MVVM</a></p>
<p><a href="http://tommwq.tech/blog/2021/02/28/312">参考链接2-</a></p>
<p><a href="https://github.com/telyo/android-studio-template">别人写给MVPArms的模板</a></p>
<p><a href="https://gitee.com/shen_bh/xm597-template">本文源码</a></p>
<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><ol>
<li><p>打开<a href="https://github.com/JetBrains/intellij-platform-plugin-template%EF%BC%8C%E7%82%B9%E5%87%BB%E7%BB%BF%E8%89%B2%E6%8C%89%E9%92%AE%E2%80%9CUse">https://github.com/JetBrains/intellij-platform-plugin-template，点击绿色按钮“Use</a> this template”就会fork一份代码到你自己的仓库。然后通过git工具clone到电脑上，用AS4.1+打开</p>
</li>
<li><p>修改包名、修改<code>MyProjectManagerListener.kt</code>、修改<code>build.gradle.kts</code>、修改<code>gradle.properties</code></p>
</li>
<li><p>在<code>src/main/kotlin/</code>下新增个文件夹<code>other</code>，用来放自己写的具体模板</p>
</li>
<li><p>还要在<code>src/main/resources/META-INF/plugin.xml</code>中添加以下内容，才能让自己写的具体模板内容生效</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">extensions</span> <span class="attr">defaultExtensionNs</span>=<span class="string">&quot;com.android.tools.idea.wizard.template&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;wizardTemplateProvider implementation=&quot;other.temparms.ArmsPluginTemplateProviderImpl&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;wizardTemplateProvider implementation=&quot;other.xm597.Xm597PluginTemplateProviderImpl&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">wizardTemplateProvider</span> <span class="attr">implementation</span>=<span class="string">&quot;other.mvvm.SamplePluginTemplateProviderImpl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在Terminal上输入 <code>gradlew buildPlugin</code>来生成模板jar文件（在项目的<code>build/libs</code>下）</p>
</li>
<li><p>AS导入模板（<code>File》Settings》Plugins》Install Plugin from Disk...</code>）</p>
</li>
</ol>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ol>
<li><p><code>gradle-wrapper.properties</code>中gradle版本与<code>build.gradle.kts</code>中配置的版本是对应的</p>
</li>
<li><p><code>gradle.properties</code>中<code>platformVersion</code>的值为<code>2020.2.4</code>在<code>AS4.1.2</code>和<code>AS4.1.3</code>上无法正常编译模板，需要在<code>AS4.2-Beta5</code>上才行。所以在<code>AS4.1.2</code>上这个值改成了<code>2020.1.4</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pluginVerifierIdeVersions</span> =  <span class="number">2020</span>.<span class="number">1</span>.<span class="number">4</span> , <span class="number">2020</span>.<span class="number">2</span>.<span class="number">4</span>, <span class="number">2020</span>.<span class="number">3</span>.<span class="number">2</span>, <span class="number">2021</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">platformType</span> = IC</span><br><span class="line"><span class="attribute">platformVersion</span> = <span class="number">2020</span>.<span class="number">1</span>.<span class="number">4</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="代码结构截图"><a href="#代码结构截图" class="headerlink" title="代码结构截图"></a>代码结构截图</h2><p><img src="/posts/8f94baaa/AS4%E4%BB%A5%E4%B8%8A%E5%86%99%E6%A8%A1%E6%9D%BF.png" alt="AS4.1以上写模板"></p>
<h2 id="完整代码（动过的）："><a href="#完整代码（动过的）：" class="headerlink" title="完整代码（动过的）："></a>完整代码（动过的）：</h2><h3 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h3><p><code>src/main/kotlin/com/xml597/app/template/listeners/MyProjectManagerListener.kt</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xm597.app.template.listeners</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.project.Project</span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.project.ProjectManagerListener</span><br><span class="line"><span class="keyword">import</span> com.xm597.app.template.services.MyProjectService</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProjectManagerListener</span> : <span class="type">ProjectManagerListener &#123;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">projectOpened</span><span class="params">(project: <span class="type">Project</span>)</span></span> &#123;</span><br><span class="line">        projectInstance = project</span><br><span class="line">        project.getService(MyProjectService::<span class="keyword">class</span>.java)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">projectClosing</span><span class="params">(project: <span class="type">Project</span>)</span></span> &#123;</span><br><span class="line">        projectInstance = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">super</span>.projectClosing(project)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> projectInstance: Project? = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>build.gradle.kts</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.gitlab.arturbosch.detekt.Detekt</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.changelog.closure</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.changelog.markdownToHTML</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.kotlin.gradle.tasks.KotlinCompile</span><br><span class="line"></span><br><span class="line">plugins &#123;</span><br><span class="line">    <span class="comment">// Java support</span></span><br><span class="line">    id(<span class="string">&quot;java&quot;</span>)</span><br><span class="line">    <span class="comment">// Kotlin support</span></span><br><span class="line">    id(<span class="string">&quot;org.jetbrains.kotlin.jvm&quot;</span>) version <span class="string">&quot;1.4.30&quot;</span></span><br><span class="line">    <span class="comment">// gradle-intellij-plugin - read more: https://github.com/JetBrains/gradle-intellij-plugin</span></span><br><span class="line">    id(<span class="string">&quot;org.jetbrains.intellij&quot;</span>) version <span class="string">&quot;0.6.5&quot;</span></span><br><span class="line">    <span class="comment">// gradle-changelog-plugin - read more: https://github.com/JetBrains/gradle-changelog-plugin</span></span><br><span class="line">    id(<span class="string">&quot;org.jetbrains.changelog&quot;</span>) version <span class="string">&quot;1.1.2&quot;</span></span><br><span class="line">    <span class="comment">// detekt linter - read more: https://detekt.github.io/detekt/gradle.html</span></span><br><span class="line">    id(<span class="string">&quot;io.gitlab.arturbosch.detekt&quot;</span>) version <span class="string">&quot;1.15.0&quot;</span></span><br><span class="line">    <span class="comment">// ktlint linter - read more: https://github.com/JLLeitschuh/ktlint-gradle</span></span><br><span class="line">    id(<span class="string">&quot;org.jlleitschuh.gradle.ktlint&quot;</span>) version <span class="string">&quot;10.0.0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Import variables from gradle.properties file</span></span><br><span class="line"><span class="keyword">val</span> pluginGroup: String <span class="keyword">by</span> project</span><br><span class="line"><span class="comment">// `pluginName_` variable ends with `_` because of the collision with Kotlin magic getter in the `intellij` closure.</span></span><br><span class="line"><span class="comment">// Read more about the issue: https://github.com/JetBrains/intellij-platform-plugin-template/issues/29</span></span><br><span class="line"><span class="keyword">val</span> pluginName_: String <span class="keyword">by</span> project</span><br><span class="line"><span class="keyword">val</span> pluginVersion: String <span class="keyword">by</span> project</span><br><span class="line"><span class="keyword">val</span> pluginSinceBuild: String <span class="keyword">by</span> project</span><br><span class="line"><span class="keyword">val</span> pluginUntilBuild: String <span class="keyword">by</span> project</span><br><span class="line"><span class="keyword">val</span> pluginVerifierIdeVersions: String <span class="keyword">by</span> project</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> platformType: String <span class="keyword">by</span> project</span><br><span class="line"><span class="keyword">val</span> platformVersion: String <span class="keyword">by</span> project</span><br><span class="line"><span class="keyword">val</span> platformPlugins: String <span class="keyword">by</span> project</span><br><span class="line"><span class="keyword">val</span> platformDownloadSources: String <span class="keyword">by</span> project</span><br><span class="line"></span><br><span class="line">group = pluginGroup</span><br><span class="line">version = pluginVersion</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure project&#x27;s dependencies</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    jcenter()</span><br><span class="line">    google()</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    detektPlugins(<span class="string">&quot;io.gitlab.arturbosch.detekt:detekt-formatting:1.15.0&quot;</span>)</span><br><span class="line">    compileOnly(files(<span class="string">&quot;lib/wizard-template.jar&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure gradle-intellij-plugin plugin.</span></span><br><span class="line"><span class="comment">// Read more: https://github.com/JetBrains/gradle-intellij-plugin</span></span><br><span class="line">intellij &#123;</span><br><span class="line">    pluginName = pluginName_</span><br><span class="line">    version = platformVersion</span><br><span class="line">    type = platformType</span><br><span class="line">    downloadSources = platformDownloadSources.toBoolean()</span><br><span class="line">    updateSinceUntilBuild = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Plugin Dependencies. Uses `platformPlugins` property from the gradle.properties file.</span></span><br><span class="line">    setPlugins(*platformPlugins.split(<span class="string">&#x27;,&#x27;</span>).map(String::trim).filter(String::isNotEmpty).toTypedArray())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure gradle-changelog-plugin plugin.</span></span><br><span class="line"><span class="comment">// Read more: https://github.com/JetBrains/gradle-changelog-plugin</span></span><br><span class="line">changelog &#123;</span><br><span class="line">    version = pluginVersion</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure detekt plugin.</span></span><br><span class="line"><span class="comment">// Read more: https://detekt.github.io/detekt/kotlindsl.html</span></span><br><span class="line">detekt &#123;</span><br><span class="line">    config = files(<span class="string">&quot;./detekt-config.yml&quot;</span>)</span><br><span class="line">    buildUponDefaultConfig = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    reports &#123;</span><br><span class="line">        html.enabled = <span class="literal">false</span></span><br><span class="line">        xml.enabled = <span class="literal">false</span></span><br><span class="line">        txt.enabled = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks &#123;</span><br><span class="line">    <span class="comment">// Set the compatibility versions to 1.8</span></span><br><span class="line">    withType&lt;JavaCompile&gt; &#123;</span><br><span class="line">        sourceCompatibility = <span class="string">&quot;1.8&quot;</span></span><br><span class="line">        targetCompatibility = <span class="string">&quot;1.8&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    withType&lt;KotlinCompile&gt; &#123;</span><br><span class="line">        kotlinOptions.jvmTarget = <span class="string">&quot;1.8&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    withType&lt;Detekt&gt; &#123;</span><br><span class="line">        jvmTarget = <span class="string">&quot;1.8&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    patchPluginXml &#123;</span><br><span class="line">        version(pluginVersion)</span><br><span class="line">        sinceBuild(pluginSinceBuild)</span><br><span class="line">        untilBuild(pluginUntilBuild)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Extract the &lt;!-- Plugin description --&gt; section from README.md and provide for the plugin&#x27;s manifest</span></span><br><span class="line">        pluginDescription(</span><br><span class="line">            closure &#123;</span><br><span class="line">                File(<span class="string">&quot;./README.md&quot;</span>).readText().lines().run &#123;</span><br><span class="line">                    <span class="keyword">val</span> start = <span class="string">&quot;&lt;!-- Plugin description --&gt;&quot;</span></span><br><span class="line">                    <span class="keyword">val</span> end = <span class="string">&quot;&lt;!-- Plugin description end --&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!containsAll(listOf(start, end))) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> GradleException(<span class="string">&quot;Plugin description section not found in README.md:\n<span class="variable">$start</span> ... <span class="variable">$end</span>&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                    subList(indexOf(start) + <span class="number">1</span>, indexOf(end))</span><br><span class="line">                &#125;.joinToString(<span class="string">&quot;\n&quot;</span>).run &#123; markdownToHTML(<span class="keyword">this</span>) &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the latest available change notes from the changelog file</span></span><br><span class="line">        changeNotes(</span><br><span class="line">            closure &#123;</span><br><span class="line">                changelog.getLatest().toHTML()</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    runPluginVerifier &#123;</span><br><span class="line">        ideVersions(pluginVerifierIdeVersions)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publishPlugin &#123;</span><br><span class="line">        dependsOn(<span class="string">&quot;patchChangelog&quot;</span>)</span><br><span class="line">        token(System.getenv(<span class="string">&quot;PUBLISH_TOKEN&quot;</span>))</span><br><span class="line">        <span class="comment">// pluginVersion is based on the SemVer (https://semver.org) and supports pre-release labels, like 2.1.7-alpha.3</span></span><br><span class="line">        <span class="comment">// Specify pre-release label to publish the plugin in a custom Release Channel automatically. Read more:</span></span><br><span class="line">        <span class="comment">// https://plugins.jetbrains.com/docs/intellij/deployment.html#specifying-a-release-channel</span></span><br><span class="line">        channels(pluginVersion.split(<span class="string">&#x27;-&#x27;</span>).getOrElse(<span class="number">1</span>) &#123; <span class="string">&quot;default&quot;</span> &#125;.split(<span class="string">&#x27;.&#x27;</span>).first())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>gradle.properties</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"># IntelliJ Platform Artifacts Repositories</span><br><span class="line"># -&gt; <span class="attr">https:</span><span class="comment">//plugins.jetbrains.com/docs/intellij/intellij-artifacts.html</span></span><br><span class="line"></span><br><span class="line">pluginGroup = com.xm597.qpp.template</span><br><span class="line">pluginName_ = xm597 Plugin Template</span><br><span class="line">pluginVersion = <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"># See <span class="attr">https:</span><span class="comment">//plugins.jetbrains.com/docs/intellij/build-number-ranges.html#intellij-platform-based-products-of-recent-ide-versions</span></span><br><span class="line"># <span class="keyword">for</span> insight into build numbers and IntelliJ Platform versions.</span><br><span class="line">pluginSinceBuild = <span class="number">201</span></span><br><span class="line">pluginUntilBuild = <span class="number">203.</span>*</span><br><span class="line"></span><br><span class="line"># Plugin Verifier integration -&gt; <span class="attr">https:</span><span class="comment">//github.com/JetBrains/gradle-intellij-plugin#plugin-verifier-dsl</span></span><br><span class="line"># See <span class="attr">https:</span><span class="comment">//jb.gg/intellij-platform-builds-list for available build versions</span></span><br><span class="line">pluginVerifierIdeVersions =  <span class="number">2020.1</span><span class="number">.4</span> , <span class="number">2020.2</span><span class="number">.4</span>, <span class="number">2020.3</span><span class="number">.2</span>, <span class="number">2021.1</span></span><br><span class="line"></span><br><span class="line">platformType = IC</span><br><span class="line">platformVersion = <span class="number">2020.1</span><span class="number">.4</span></span><br><span class="line">platformDownloadSources = <span class="literal">true</span></span><br><span class="line"># Plugin Dependencies -&gt; <span class="attr">https:</span><span class="comment">//plugins.jetbrains.com/docs/intellij/plugin-dependencies.html</span></span><br><span class="line"># <span class="attr">Example:</span> platformPlugins = com.intellij.java, com.jetbrains.<span class="attr">php:</span><span class="number">203.4449</span><span class="number">.22</span></span><br><span class="line">platformPlugins = java, com.intellij.java, org.jetbrains.android, android, org.jetbrains.kotlin</span><br><span class="line"></span><br><span class="line"># Opt-out flag <span class="keyword">for</span> bundling Kotlin standard library.</span><br><span class="line"># See <span class="attr">https:</span><span class="comment">//kotlinlang.org/docs/reference/using-gradle.html#dependency-on-the-standard-library for details.</span></span><br><span class="line">kotlin.stdlib.<span class="keyword">default</span>.dependency = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><code>settings.gradle.kts</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">rootProject.name</span> = <span class="string">&quot;xm597 Plugin Template&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>src/main/resources/META-INF/plugin.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">idea-plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>com.xm597.app<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>xm597 Plugin Template<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vendo</span>&gt;</span>shenbh<span class="tag">&lt;/<span class="name">vendo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Product and plugin compatibility requirements --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">depends</span>&gt;</span>org.jetbrains.android<span class="tag">&lt;/<span class="name">depends</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">depends</span>&gt;</span>org.jetbrains.kotlin<span class="tag">&lt;/<span class="name">depends</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">depends</span>&gt;</span>com.intellij.modules.java<span class="tag">&lt;/<span class="name">depends</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">depends</span>&gt;</span>com.intellij.modules.platform<span class="tag">&lt;/<span class="name">depends</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Integrates Volume Snapshot Service W10<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">change-notes</span>&gt;</span>Initial release of the plugin.<span class="tag">&lt;/<span class="name">change-notes</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">extensions</span> <span class="attr">defaultExtensionNs</span>=<span class="string">&quot;com.intellij&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">applicationService</span> <span class="attr">serviceImplementation</span>=<span class="string">&quot;com.xm597.app.template.services.MyApplicationService&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">projectService</span> <span class="attr">serviceImplementation</span>=<span class="string">&quot;com.xm597.app.template.services.MyProjectService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">applicationListeners</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener</span> <span class="attr">class</span>=<span class="string">&quot;com.xm597.app.template.listeners.MyProjectManagerListener&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">topic</span>=<span class="string">&quot;com.intellij.openapi.project.ProjectManagerListener&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">applicationListeners</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">extensions</span> <span class="attr">defaultExtensionNs</span>=<span class="string">&quot;com.android.tools.idea.wizard.template&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;wizardTemplateProvider implementation=&quot;other.temparms.ArmsPluginTemplateProviderImpl&quot; /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;wizardTemplateProvider implementation=&quot;other.xm597.Xm597PluginTemplateProviderImpl&quot; /&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wizardTemplateProvider</span> <span class="attr">implementation</span>=<span class="string">&quot;other.mvvm.SamplePluginTemplateProviderImpl&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">idea-plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="具体模板详情"><a href="#具体模板详情" class="headerlink" title="具体模板详情"></a>具体模板详情</h3><p>以<code>src/main/kotlin/other/mvvm</code>为例</p>
<p><code>src/main/kotlin/other/mvvm/SamplePluginTemplateProviderImpl.kt</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> other.mvvm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.android.tools.idea.wizard.template.Template</span><br><span class="line"><span class="keyword">import</span> com.android.tools.idea.wizard.template.WizardTemplateProvider</span><br><span class="line"><span class="keyword">import</span> other.mvvm.activity.mvvmActivityTemplate</span><br><span class="line"><span class="comment">//import other.mvvm.fragment.mvvmFragmentTemplate</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SamplePluginTemplateProviderImpl</span> : <span class="type">WizardTemplateProvider</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getTemplates</span><span class="params">()</span></span>: List&lt;Template&gt; = listOf(</span><br><span class="line">            <span class="comment">// activity的模板</span></span><br><span class="line">            mvvmActivityTemplate,</span><br><span class="line">            <span class="comment">// fragment的模板</span></span><br><span class="line"><span class="comment">//            mvvmFragmentTemplate</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>src/main/kotlin/other/mvvm/activity/mvvmActivityTemplate.kt</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> other.mvvm.activity</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.android.tools.idea.wizard.template.*</span><br><span class="line"><span class="keyword">import</span> com.android.tools.idea.wizard.template.impl.activities.common.MIN_API</span><br><span class="line"><span class="keyword">import</span> com.android.tools.idea.wizard.template.impl.defaultPackageNameParameter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> mvvmActivityTemplate</span><br><span class="line">    <span class="keyword">get</span>() = template &#123;</span><br><span class="line">        revision = <span class="number">1</span></span><br><span class="line">        name = <span class="string">&quot;MVVM Activity&quot;</span></span><br><span class="line">        description = <span class="string">&quot;适用于BigaDemoMVVM框架的Activity&quot;</span></span><br><span class="line">        minApi = MIN_API</span><br><span class="line">        minBuildApi = MIN_API</span><br><span class="line"></span><br><span class="line">        category = Category.Other</span><br><span class="line">        formFactor = FormFactor.Mobile</span><br><span class="line">        screens = listOf(WizardUiContext.ActivityGallery, WizardUiContext.MenuEntry, WizardUiContext.NewProject, WizardUiContext.NewModule)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">lateinit</span> <span class="keyword">var</span> layoutName: StringParameter</span><br><span class="line">        <span class="keyword">val</span> activityClass = stringParameter &#123;</span><br><span class="line">            name = <span class="string">&quot;Activity Name&quot;</span></span><br><span class="line">            default = <span class="string">&quot;Main&quot;</span></span><br><span class="line">            help = <span class="string">&quot;只输入名字，不要包含Activity&quot;</span></span><br><span class="line">            constraints = listOf(Constraint.NONEMPTY)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        layoutName = stringParameter &#123;</span><br><span class="line">            name = <span class="string">&quot;Layout Name&quot;</span></span><br><span class="line">            default = <span class="string">&quot;activity_main&quot;</span></span><br><span class="line">            help = <span class="string">&quot;请输入布局名字&quot;</span></span><br><span class="line">            constraints = listOf(Constraint.LAYOUT, Constraint.UNIQUE, Constraint.NONEMPTY)</span><br><span class="line">            suggest = &#123;<span class="string">&quot;<span class="subst">$&#123;activityToLayout(activityClass.value.toLowerCase())&#125;</span>&quot;</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> packageName = defaultPackageNameParameter</span><br><span class="line"></span><br><span class="line">        widgets(</span><br><span class="line">                TextFieldWidget(activityClass),</span><br><span class="line">                TextFieldWidget(layoutName),</span><br><span class="line">                PackageNameWidget(packageName)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//thumb&#123;File(&quot;logo.png&quot;)&#125;</span></span><br><span class="line">        recipe = &#123; <span class="keyword">data</span>: TemplateData -&gt;</span><br><span class="line">            mvvmActivityRecipe(</span><br><span class="line">                 <span class="keyword">data</span> <span class="keyword">as</span> ModuleTemplateData,</span><br><span class="line">                    activityClass.value,</span><br><span class="line">                    layoutName.value,</span><br><span class="line">                    packageName.value</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> defaultPackageNameParameter</span><br><span class="line">    <span class="keyword">get</span>() = stringParameter &#123;</span><br><span class="line">        name = <span class="string">&quot;Package Name&quot;</span></span><br><span class="line">        visible = &#123;!isNewModule&#125;</span><br><span class="line">        default = <span class="string">&quot;com.mycompany.myapp&quot;</span></span><br><span class="line">        constraints = listOf(Constraint.PACKAGE)</span><br><span class="line">        suggest = &#123;packageName&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>src/main/kotlin/other/mvvm/activity/mvvmActivityRecipe.kt</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> other.mvvm.activity</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.android.tools.idea.wizard.template.ModuleTemplateData</span><br><span class="line"><span class="keyword">import</span> com.android.tools.idea.wizard.template.RecipeExecutor</span><br><span class="line"><span class="keyword">import</span> other.mvvm.activity.res.layout.mvvmActivityXml</span><br><span class="line"><span class="keyword">import</span> other.mvvm.activity.src.app_package.mvvmActivityKt</span><br><span class="line"><span class="keyword">import</span> other.mvvm.activity.src.app_package.mvvmRepository</span><br><span class="line"><span class="keyword">import</span> other.mvvm.activity.src.app_package.mvvmViewModel</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> RecipeExecutor.<span class="title">mvvmActivityRecipe</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        moduleData: <span class="type">ModuleTemplateData</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        activityClass: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        layoutName: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        packageName: <span class="type">String</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> (projectData, srcOut, resOut) = moduleData</span><br><span class="line">    <span class="keyword">val</span> ktOrJavaExt = projectData.language.extension</span><br><span class="line">    <span class="comment">// generateManifest(</span></span><br><span class="line">    <span class="comment">//   moduleData = moduleData,</span></span><br><span class="line">    <span class="comment">//   activityClass = &quot;$&#123;activityClass&#125;Activity&quot;,</span></span><br><span class="line">    <span class="comment">//   activityTitle = activityClass,</span></span><br><span class="line">    <span class="comment">//   packageName = packageName,</span></span><br><span class="line">    <span class="comment">//   isLauncher = false,</span></span><br><span class="line">    <span class="comment">//   hasNoActionBar = false,</span></span><br><span class="line">    <span class="comment">//   generateActivityTitle = true,</span></span><br><span class="line">    <span class="comment">//   requireTheme = false,</span></span><br><span class="line">    <span class="comment">//   useMaterial2 = false</span></span><br><span class="line">    <span class="comment">// )</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mvvmActivity = mvvmActivityKt(projectData.applicationPackage, activityClass, layoutName, packageName)</span><br><span class="line">    <span class="comment">//保存Activity</span></span><br><span class="line">    save(mvvmActivity, srcOut.resolve(<span class="string">&quot;<span class="subst">$&#123;activityClass&#125;</span>Activity.<span class="subst">$&#123;ktOrJavaExt&#125;</span>&quot;</span>))</span><br><span class="line">    <span class="comment">// 保存xml</span></span><br><span class="line">    save(mvvmActivityXml(packageName, activityClass), resOut.resolve(<span class="string">&quot;layout/<span class="subst">$&#123;layoutName&#125;</span>.xml&quot;</span>))</span><br><span class="line">    <span class="comment">// 保存viewmodel</span></span><br><span class="line">    save(mvvmViewModel(packageName, activityClass), srcOut.resolve(<span class="string">&quot;<span class="subst">$&#123;activityClass&#125;</span>ViewModel.<span class="subst">$&#123;ktOrJavaExt&#125;</span>&quot;</span>))</span><br><span class="line">    <span class="comment">// 保存repository</span></span><br><span class="line">    save(mvvmRepository(packageName, activityClass), srcOut.resolve(<span class="string">&quot;<span class="subst">$&#123;activityClass&#125;</span>Repository.<span class="subst">$&#123;ktOrJavaExt&#125;</span>&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>src/main/kotlin/other/mvvm/activity/res/layout/mvvmActivityXml.kt</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> other.mvvm.activity.res.layout</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">mvvmActivityXml</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        packageName: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        activityClass: <span class="type">String</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="string">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> &lt;data&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> &lt;/data&gt;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string"> &lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line"><span class="string"> xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line"><span class="string"> xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line"><span class="string"> android:layout_width=&quot;match_parent&quot;</span></span><br><span class="line"><span class="string"> android:layout_height=&quot;match_parent&quot;</span></span><br><span class="line"><span class="string"> tools:context=&quot;<span class="subst">$&#123;packageName&#125;</span>.<span class="subst">$&#123;activityClass&#125;</span>Activity&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span></span><br><span class="line"><span class="string">&lt;/layout&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>src/main/kotlin/other/mvvm/activity/src/app_package/mvvmActivity.kt</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> other.mvvm.activity.src.app_package</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">mvvmActivityKt</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        applicationPackage:<span class="type">String</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">        activityClass:<span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        layoutName:<span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        packageName:<span class="type">String</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">package <span class="subst">$&#123;packageName&#125;</span></span></span><br><span class="line"><span class="string">import android.os.Bundle</span></span><br><span class="line"><span class="string">import com.bigademo.baselib.base.BaseActivity</span></span><br><span class="line"><span class="string">import <span class="subst">$&#123;applicationPackage&#125;</span>.R</span></span><br><span class="line"><span class="string">import <span class="subst">$&#123;applicationPackage&#125;</span>.BR;</span></span><br><span class="line"><span class="string">import <span class="subst">$&#123;applicationPackage&#125;</span>.databinding.Activity<span class="subst">$&#123;activityClass&#125;</span>Binding</span></span><br><span class="line"><span class="string">class <span class="subst">$&#123;activityClass&#125;</span>Activity : BaseActivity&lt;<span class="subst">$&#123;activityClass&#125;</span>ViewModel, Activity<span class="subst">$&#123;activityClass&#125;</span>Binding&gt;() &#123;</span></span><br><span class="line"><span class="string"> override fun getContentView(): Int &#123;</span></span><br><span class="line"><span class="string">  return R.layout.<span class="subst">$&#123;layoutName&#125;</span></span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> override fun init(savedInstanceState: Bundle?) &#123;</span></span><br><span class="line"><span class="string">  super.init(savedInstanceState)</span></span><br><span class="line"><span class="string">  isShowTopBar = false</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> override fun initViewModel() &#123;</span></span><br><span class="line"><span class="string">  viewModel = <span class="subst">$&#123;activityClass&#125;</span>ViewModel()</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"> /**</span></span><br><span class="line"><span class="string">  * 监听数据的变化</span></span><br><span class="line"><span class="string">  */</span></span><br><span class="line"><span class="string"> override fun observe() &#123;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string"> /**</span></span><br><span class="line"><span class="string">  * 控件的点击事件</span></span><br><span class="line"><span class="string">  */</span></span><br><span class="line"><span class="string"> override fun onClick() &#123;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> override fun initData() &#123;</span></span><br><span class="line"><span class="string">  super.initData()</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"> override fun initVariableId(): Int &#123;</span></span><br><span class="line"><span class="string">  TODO(&quot;Not yet implemented&quot;)</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"> &#125; </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>src/main/kotlin/other/mvvm/activity/src/app_package/mvvmRepository.kt</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> other.mvvm.activity.src.app_package</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">mvvmRepository</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        packageName: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        activityClass: <span class="type">String</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">package <span class="subst">$&#123;packageName&#125;</span></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">import androidx.lifecycle.MutableLiveData</span></span><br><span class="line"><span class="string">import com.shide.baselib.base.basemvvm.BaseRepository</span></span><br><span class="line"><span class="string">import com.shide.baselib.base.basemvvm.BaseViewModel</span></span><br><span class="line"><span class="string">import com.shide.baselib.net.exception.ShideApiException</span></span><br><span class="line"><span class="string">import kotlinx.coroutines.CoroutineScope</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">class <span class="subst">$&#123;activityClass&#125;</span>Repository(</span></span><br><span class="line"><span class="string"> baseViewModel: BaseViewModel,</span></span><br><span class="line"><span class="string"> coroutineScope: CoroutineScope,</span></span><br><span class="line"><span class="string"> errorLiveData: MutableLiveData&lt;ShideApiException&gt;</span></span><br><span class="line"><span class="string">) : BaseRepository(baseViewModel, coroutineScope, errorLiveData) &#123;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>src/main/kotlin/other/mvvm/activity/src/app_package/mvvmViewModel.kt</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> other.mvvm.activity.src.app_package</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">mvvmViewModel</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        packageName:<span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        activityClass:<span class="type">String</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">package <span class="subst">$&#123;packageName&#125;</span></span></span><br><span class="line"><span class="string">import androidx.lifecycle.viewModelScope</span></span><br><span class="line"><span class="string">import com.bigademo.baselib.base.basemvvm.BaseViewModel</span></span><br><span class="line"><span class="string">class <span class="subst">$&#123;activityClass&#125;</span>ViewModel : BaseViewModel() &#123;</span></span><br><span class="line"><span class="string"> private val repo by lazy &#123; <span class="subst">$&#123;activityClass&#125;</span>Repository(this, viewModelScope, errorLiveData) &#125;</span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Python思维导图</title>
    <url>/posts/339737483/</url>
    <content><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="Python语言特点"><a href="#Python语言特点" class="headerlink" title="Python语言特点"></a>Python语言特点</h2><ul>
<li>解释型脚本语言。内建高级的数据结构</li>
<li>面向对象的语言。便于数据和逻辑相分离</li>
<li>动态语言。变量本身：类型不固定；可随意转换</li>
<li>不用考虑内存问题</li>
<li>默认编码：UTF-8</li>
</ul>
<h2 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h2><ul>
<li><code>#</code>：注释</li>
<li><code>\n</code>：行分隔符</li>
<li><code>\</code>：继续上一行<ul>
<li><strong>跨行特例</strong>：闭合操作符，各种括号，<code>[],&#123;&#125;,()</code>；三引号，常用于“多行注释”</li>
</ul>
</li>
<li><code>;</code>：在同一行，连续多个语句（会降低可读性，不提倡）</li>
<li><code>:</code>：分开代码块（组），头&amp;体</li>
<li>缩进块：语句“代码块”，用“缩进深度”区分（最好为<strong>4个空格</strong>）</li>
<li>空行：用于分隔函数、类，便于代码维护、重构</li>
<li>模块：<strong>每个脚本文件</strong>均为模块，以“磁盘文件”形式存在；若“模块”过大，考虑拆解代码、另建模块</li>
</ul>
<p><img src="/posts/339737483/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861.jpg" alt="Python-基础知识.png"></p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><img src="/posts/339737483/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.jpg" alt="Python-数据类型.png"></p>
<h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><p><img src="/posts/339737483/%E5%BA%8F%E5%88%97.jpg" alt="Python-序列.png"></p>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><img src="/posts/339737483/%E5%AD%97%E7%AC%A6%E4%B8%B2.jpg" alt="Python-字符串.png"></p>
<h1 id="列表-amp-元组"><a href="#列表-amp-元组" class="headerlink" title="列表 &amp; 元组"></a>列表 &amp; 元组</h1><p><img src="/posts/339737483/%E5%88%97%E8%A1%A8%E4%B8%8E%E5%85%83%E7%BB%84.jpg" alt="Python-列表、元组.png"></p>
<h1 id="字典-amp-集合"><a href="#字典-amp-集合" class="headerlink" title="字典 &amp; 集合"></a>字典 &amp; 集合</h1><p><img src="/posts/339737483/%E5%AD%97%E5%85%B8%E4%B8%8E%E9%9B%86%E5%90%88.jpg" alt="Python-字典、集合.png"></p>
<h1 id="条件-amp-循环"><a href="#条件-amp-循环" class="headerlink" title="条件 &amp; 循环"></a>条件 &amp; 循环</h1><p><img src="/posts/339737483/%E6%9D%A1%E4%BB%B6%E4%B8%8E%E5%BE%AA%E7%8E%AF.jpg" alt="Python-条件、循环.png"></p>
<h1 id="文件对象"><a href="#文件对象" class="headerlink" title="文件对象"></a>文件对象</h1><p><img src="/posts/339737483/%E6%96%87%E4%BB%B6%E5%AF%B9%E8%B1%A1.jpg" alt="Python-文件对象.png"></p>
<h1 id="错误-amp-异常"><a href="#错误-amp-异常" class="headerlink" title="错误 &amp; 异常"></a>错误 &amp; 异常</h1><p><img src="/posts/339737483/%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8.jpg" alt="Python-错误、异常.png"></p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><img src="/posts/339737483/%E5%87%BD%E6%95%B0%E4%B8%80.jpg" alt="Python-函数.png"></p>
<p><img src="/posts/339737483/%E5%87%BD%E6%95%B0%E4%BA%8C.jpg" alt="Python-函数2.png"></p>
<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p><img src="/posts/339737483/%E6%A8%A1%E5%9D%97.jpg" alt="Python-模块.png"></p>
<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p><img src="/posts/339737483/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.jpg" alt="Python-面向对象编程.png"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/posts/1821512031/</url>
    <content><![CDATA[<p>Spring基本原理：</p>
<p>通过反射解析类及其类的各种信息，包括构造器、方法及其参数、属性。然后将其封装成bean定义信息类、constructor信息类、method信息类、property信息类，最终放到一个map里，也就是所谓的container，池等等，其实就是个map。</p>
<p>当写好配置文件，启动项目后，框架会先按照配置文件找到那个要scan的包，然后解析包里面的所有类，找到所有含有@bean、@service等注解的类，利用反射解析它们，包括解析构造器、方法、属性等等，然后放到一个map里。</p>
<p>当你需要一个bean的时候，框架就会从container找是不是有这个类的定义，若找到就通过构造器new出来（这就是<strong>控制反转</strong>，框架会帮你new出来）。再在这个类找是不是又要注入的属性或者方法，比如标@autowired的属性，若有则还到container里找到对应的解析类，new出对象，并通过之前解析出来的信息类找到setter方法，然后用该方法注入对象（这就是<strong>依赖注入</strong>）。如果其中有一个类在container里没找到，则抛出异常，比如常见的spring无法找到该类定义、无法wire的异常。</p>
<p>嵌套bean则用到了<strong>递归</strong>，container会放到servletcontext里面，每次request从servletcontext找到这个container即可，不用多次解析类定义。如果bean的scope是singleton，则会重用这个bean不再重新创建，将这个bean放到一个map里，每次用都先从这个map里面找。如果scope是session，则该bean会放到session里面。</p>
<p>Spring容器是个Map映射</p>
<p>IOC底层是反射机制</p>
<p>AOP底层是动态代理</p>
<p>SpringMVC是对Servlet进行的封装</p>
<h1 id="Spring源码地址"><a href="#Spring源码地址" class="headerlink" title="Spring源码地址"></a>Spring源码地址</h1><p><a href="https://github.com/spring-projects/spring-framework.git">Spring-framework源码地址</a></p>
<p>参考：</p>
<p>pdf：《Spring3.x企业应用开发实战》-陈雄华 林开雄</p>
<p>微信读书：《Spring3.0就是这么简单》-陈雄华 林开雄</p>
<p>pdf：《Spring揭秘》-王福强</p>
<h1 id="认识Spring"><a href="#认识Spring" class="headerlink" title="认识Spring"></a>认识Spring</h1><p>Spring是分层的Java SE&#x2F;EE应用一站式的轻量级开源框架，以反转控制（Inverse of Control，IoC）和面向切面编程（Aspect Oriented Programming，AOP）为内核，提供了展现层Spring MVC、持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术。</p>
<ul>
<li>方便解耦，简化开发</li>
</ul>
<p>通过Spring提供的Ioc容器，将对象之间的依赖关系交由Spring进行控制。</p>
<ul>
<li>AOP编程的支持</li>
</ul>
<p>通过Spring提供的AOP功能，用户可以进行面向切面编程</p>
<ul>
<li>声明式事务的支持</li>
<li>方便程序的测试</li>
<li>方便继承各种优秀的框架</li>
<li>降低Jave EE API的适用难度</li>
</ul>
<p>为如JDBC、JavaMail、远程调用等提供了一个薄薄的封装层，简化调用</p>
<h2 id="Spring体系结构"><a href="#Spring体系结构" class="headerlink" title="Spring体系结构"></a>Spring体系结构</h2><p>Spring框架由1400多个类组成，整个框架按其所属功能可以划分5个主要模块</p>
<p><img src="/posts/1821512031/Spring%E6%A1%86%E6%9E%B6%E7%BB%93%E6%9E%84.jpg" alt="Spring框架结构.png"></p>
<ul>
<li><p>IoC</p>
<p>Spring核心模块实现了IoC的功能，用配置的方式进行类与类之间依赖关系的描述。<strong>BeanFactory</strong>接口是Spring框架的核心接口，其实现了许多核心功能。</p>
<p>Context模块构建于核心模块之上，扩展了BeanFactory的功能，添加了i18n国际化、Bean生命周期控制、框架事件体系、资源加载透明化等多项功能。还提供如邮件服务、任务调度、JNDI定位、EJB集成、远程访问等。<strong>ApplicationContext</strong>是Context模块的核心接口。</p>
<p>表达式语言模块时统一表达式语言（unified EL）的一个扩展，用于查询和管理运行期的对象，支持设置和获取对象属性，调用对象方法，操作数组、集合等。还提供了逻辑表达式运算、变量定义等功能。使用它就可以方便地通过表达式和Spring IoC容器进行交互。</p>
</li>
</ul>
<p>IoC包括DI（Dependence Injection依赖注入）和DL（Dependence Lookup依赖查找）</p>
<p>IoC有两阶段：收集和注册（即写配置文件等）；分析和组装</p>
<blockquote>
<p>三种依赖注入方式：</p>
<ol>
<li>构造方法注入（constructor injection）</li>
<li>setter方法注入（setter injection）</li>
<li>接口注入（interface injection）</li>
</ol>
</blockquote>
<blockquote>
<p>其中分析组装的依据：</p>
<ul>
<li>用xml配置来描述bean与bean之间的关系；</li>
<li>用注解方式（如@Autowired和@Inject）；</li>
</ul>
</blockquote>
<p><img src="/posts/1821512031/IoC%E7%9A%84%E8%A7%92%E8%89%B2.jpg" alt="IoC的角色.png"></p>
<p>被注入对象和依赖对象由Ioc Service Provider统一管理。Ioc容器充当Ioc Service Provider角色。被注入对象需要什么直接跟Ioc Service Provider招呼一声就行。</p>
<p><img src="/posts/1821512031/%E4%BD%BF%E7%94%A8IoC%E5%89%8D%E5%90%8E%E7%9A%84%E5%B7%AE%E5%88%AB.jpg" alt="使用IoC前后的差别.png"></p>
<ul>
<li>AOP</li>
</ul>
<p>Java 5.0引入<code>java.lang.instrument</code>，允许在JVM启动时启用一个代理类，通过该代理类在运行期修改类地字节码，改变一个类的功能，实现AOP的功能。</p>
<ul>
<li>数据访问和集成</li>
</ul>
<p>任何应用程序的核心问题都是对数据的访问和操作。数据又多种表现形式，如数据表、XML、消息等。其中数据表的访问可以通过JDBC、Hibernate或iBatis等。</p>
<p>Spring站在DAO的抽象层面，建立了一套面向DAO层统一的异常体系，同时将各种访问数据的检查型异常转换为非检查型异常，为整合各种持久层框架提供基础。</p>
<ul>
<li>Web及远程访问</li>
</ul>
<p>Spring提供了一个完整的类似于Struts的MVC框架，称为Spring MVC。</p>
<h1 id="实例功能概述"><a href="#实例功能概述" class="headerlink" title="实例功能概述"></a>实例功能概述</h1><p>以登录模块为例</p>
<h2 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h2><p><img src="/posts/1821512031/Spring%E7%99%BB%E5%BD%95%E5%AE%9E%E4%BE%8B%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="Spring登录实例交互流程图.png"></p>
<ol>
<li>首先用户访问<code>login.jsp</code>，返回带用户名&#x2F;密码表单的登录页面。</li>
<li>用户在登陆页面输入用户名&#x2F;密码，提交表单到服务器，Spring根据配置（如又一城的<code>tile.xml</code>）调用<code>LoginController</code>控制器来响应登录请求。</li>
<li><code>LoginController</code>调用<code>UserService#hashMatchUser()</code>方法，根据用户名和密码查询是否存在匹配的用户，<code>UserService</code>内部通过调用持久层<code>UserDao</code>完成具体的数据库访问操作。</li>
<li>如果不存在匹配的用户，重定向<code>login.jsp</code>页面，并报告错误，否则到下一步。</li>
<li><code>LoginController</code>调用<code>UserService#findUserByUserName()</code>方法，加载匹配的<code>User</code>对象并更新用户最近一次的登录时间和登录IP地址。</li>
<li><code>LoginController</code>调用<code>UserService#loginSuccess()</code>方法，进行登陆成功的业务处理，创建一个<code>LoginLog</code>对象，并利用<code>LoginLogDao</code>将其插入数据库中。</li>
<li>重定向到欢饮页面<code>main.jsp</code>，欢迎页面产生响应返回给用户。</li>
</ol>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><strong>数据库MySQL5.x、IntelliJ IDEA、Maven、</strong></p>
<blockquote>
<p>MySQL 4.1.0以前不支持事务，MySQL 4.1.0对事务提供有限的支持</p>
</blockquote>
<ol>
<li>创建库表</li>
<li>初始化一条数据</li>
<li>创建项目：设置pom文件、分包dao、domain、service、web（若项目大则把dao、service分到功能内）、项目大的情况下对配置文件也要按模块划分</li>
</ol>
<ul>
<li><p>领域对象（domain）（也叫实体类）：一般要 <code>implements Serializable</code>，以便可以序列号</p>
</li>
<li><p>传统JDBC API太底层，执行一条最简单的查询操作都要：获取连接–创建Statement–执行数据操作–获取结果–关闭Statement–关闭结果集–关闭连接</p>
<p>Spring JDBC对传统JDBC API进行了薄层的封装，用户可不必写那些样板式的代码，只写必不可少的代码通过模板类即可完成大部分数据访问的操作。</p>
</li>
</ul>
<p><code>applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--❶扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.smart.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--❷定义一个使用DBCP实现的数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:driverClassName</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:url</span>=<span class="string">&quot;jdbc:mysql://localhost:3309/sampledb&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:username</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:password</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--❸定义JDBC模板Bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:dataSource-ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在❶处，我们使用Spring的<code>&lt;context:component-scan&gt;</code>扫描指定类包下的所有类，这样在类中定义的Spring注解（如@Repository、@Autowired等）才能产生作用。</p>
<p>在❷处，我们使用Jakarta的DBCP开源数据源实现方案定义了一个数据源，数据库驱动器类为com.mysql.jdbc.Driver，由于我们设置的MySQL数据库的服务端口为3309，而非默认的3306，所以数据库URL中显式指定了3309端口的信息。</p>
<p>在❸处配置了JdbcTemplate Bean，将❷处声明的dataSource注入JdbcTemplate中，而这个JdbcTemplate Bean将通过@Autowired自动注入LoginLog和UserDao的Bean中，可见Spring可以很好地将注解配置和XML配置统一起来。</p>
</blockquote>
<h1 id="Spring-IoC"><a href="#Spring-IoC" class="headerlink" title="Spring IoC"></a><a href="https://www.jianshu.com/p/20cea9170110">Spring IoC</a></h1><p>IoC：Inverse of Control（控制反转）</p>
<ul>
<li><p>读作“反转控制”，更好理解，不是什么技术，是一种<strong>设计思想</strong>。将原本在程序中手动<strong>创建对象</strong>的控制权，交由Spring框架来管理。</p>
</li>
<li><p>正控：若要使用某个对象，需要自己去负责对象的创建</p>
</li>
<li><p>反控：若要使用某个对象，只需要从Spring容器中获取需要使用的对象，不关心对象的创建过程，也就是把创建对象的控制权反转给了Spring框架</p>
</li>
<li><p>好莱坞法则：Don’t call me, I’ll call you</p>
</li>
</ul>
<h2 id="Spring-IoC阐述"><a href="#Spring-IoC阐述" class="headerlink" title="Spring IoC阐述"></a>Spring IoC阐述</h2><p>控制反转是一种通过描述（在Java中可以是XML或者注解）并购第三方（Spring）去产生或获取特定对象的方式。</p>
<ul>
<li><p>好处:</p>
<p>降低对象之间的耦合</p>
<p>我们不需要理解一个类的具体实现，只需要知道它有什么用就好了（直接向IoC容器拿）</p>
</li>
</ul>
<p>主动创建的模式种，责任归于开发者，而在被动的模式下，责任归于IoC容器，基于这样的被动形式，我们就说对象被控制反转了。（也可以说是反转了控制）</p>
<h2 id="Spring-IoC容器的设计"><a href="#Spring-IoC容器的设计" class="headerlink" title="Spring IoC容器的设计"></a>Spring IoC容器的设计</h2><p>Spring IoC容器的设计主要是基于以下两个接口：</p>
<ul>
<li>BeanFactory</li>
<li>ApplicationContext</li>
</ul>
<p><img src="/posts/1821512031/SpringIoc%E5%AE%B9%E5%99%A8%E7%9A%84ApplicationContext%E7%B1%BB%E5%9B%BE.jpg" alt="SpringIoc容器的ApplicationContext类图.png"></p>
<h3 id="BanFactory"><a href="#BanFactory" class="headerlink" title="BanFactory"></a>BanFactory</h3><p><img src="/posts/1821512031/SpringIoc%E5%AE%B9%E5%99%A8%E7%9A%84BeanFactory%E7%BB%93%E6%9E%84.jpg" alt="SpringIoc容器的BeanFactory结构.png"></p>
<ul>
<li>getBean</li>
</ul>
<p>对应了多个方法来获取配置给Spring IoC容器的Bean</p>
<ol>
<li>按类型拿bean</li>
</ol>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bean</span> <span class="operator">=</span> (Bean) factory.getBean()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>要求在Spring种只配置了一个这种类型的实例，否则会有不知道获取哪一个而报错。</p>
<ol start="2">
<li>按照bean的名字拿bean</li>
</ol>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bean</span> <span class="operator">=</span> (Bean) factory.getBean(<span class="string">&quot;beanName&quot;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>这种不安全，IDE不会检查其安全性（关联性）</p>
<ol start="3">
<li>按照名字和类型拿bean：（推荐）</li>
</ol>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">bean</span> = (Bean) factory.getBean(<span class="string">&quot;beanName&quot;</span>, Bean.class)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>isSingleton 判断是否单例（默认为true）</p>
</li>
<li><p>isPrototype若为真，则你从容器中获取Bean，容器会为你生成一个新的实例（默认为false）</p>
</li>
<li><p>关于type的匹配，这是个按Java类型匹配的方式</p>
</li>
<li><p>getAliases获取别名</p>
</li>
</ul>
<h1 id="《看透Spring-MVC源代码分析与实践》"><a href="#《看透Spring-MVC源代码分析与实践》" class="headerlink" title="《看透Spring MVC源代码分析与实践》"></a>《看透Spring MVC源代码分析与实践》</h1><h2 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h2><ul>
<li><p>BS结构网络传输的分解方式有两种：OSI参考模型、TCP&#x2F;IP参考模型</p>
<p><img src="/posts/1821512031/OSI%E5%92%8CTCP-IP%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B.jpg" alt="OSI和TCP-IP参考模型.jpg"></p>
</li>
<li><p>网络传输的规矩<strong>不是强制的</strong>，所以不叫制度也不叫标准而叫<strong>协议</strong></p>
<p>TCP&#x2F;IP参考模型可看作是种协议</p>
<p>BS结构中TCP&#x2F;IP模型中的网络接入层没有相应协议，网际互联层是IP协议，传输层是TCP协议，应用层是HTTP协议</p>
<p>BS中还用到DNS协议。在HTTP上层还有相关的规范，如Java Web开发中使用的Servlet标准</p>
</li>
<li><p>数据传输的本质就是按照<strong>晶振震动周期</strong>或者其整数倍来传输代表0&#x2F;1的高低电平，传输过程中最核心的就是各种传输协议，对直接连接的硬件来说就是各种<strong>总线协议</strong>，对网络传输来说就是<strong>网络协议</strong>。</p>
</li>
<li><p>BS模型中解决问题的核心主要就是解决<strong>海量数据操作</strong>问题和<strong>高并发</strong>问题，网站复杂的架构就是从这俩问题演变出来的。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>登录与授权、HTTPS、TCP/IP 协议族</title>
    <url>/posts/263355501/</url>
    <content><![CDATA[<h1 id="登录和授权"><a href="#登录和授权" class="headerlink" title="登录和授权"></a>登录和授权</h1><h2 id="登录和授权使用的方式"><a href="#登录和授权使用的方式" class="headerlink" title="登录和授权使用的方式"></a>登录和授权使用的方式</h2><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><blockquote>
<p>Cookie是个机制，浏览器只做存。修改是服务器通过set cookie发给浏览器。</p>
</blockquote>
<ul>
<li><p>由来：购物车</p>
</li>
<li><p>工作机制：</p>
</li>
</ul>
<p><img src="/posts/263355501/Cookie%E6%9C%BA%E5%88%B61.png" alt="hencoder/Cookie机制1"></p>
<p><img src="/posts/263355501/Cookie%E6%9C%BA%E5%88%B62.png" alt="hencoder/Cookie机制2"></p>
<p>​	客户端发送购物车信息给服务器，服务器接收到后Set-Cookie（其中cart只是个名字是服务端定的）返回给客户端（服务器不存储）</p>
<p>​	客户端接收到Set-Cookie存储Cookie。</p>
<p>​	客户端再次发送新消息时把Cookie信息带过去，服务器接收到后Set-Cookie全部返回给客户端，</p>
<p>​	客户端接收到Set-Cookie信息存储Cookie信息。</p>
<ul>
<li><p>作用：</p>
<ul>
<li><p>会话管理：登录状态、购物车等</p>
<p><img src="/posts/263355501/Cookie%E6%9C%BA%E5%88%B63.png" alt="hencoder/Cookie机制3"></p>
<p><img src="/posts/263355501/Cookie%E6%9C%BA%E5%88%B64.png" alt="hencoder/Cookie机制4"></p>
<ul>
<li><p>个性化：用户偏好、主题</p>
<p><img src="/posts/263355501/Cookie%E6%9C%BA%E5%88%B65.png" alt="hencoder/Cookie机制5"></p>
</li>
<li><p>Tracking：分析用户行为</p>
<p><img src="/posts/263355501/Cookie%E6%9C%BA%E5%88%B66.png" alt="hencoder/Cookie机制6"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="XSS（Cross-site-scripting）（了解即可）：HttpOnly"><a href="#XSS（Cross-site-scripting）（了解即可）：HttpOnly" class="headerlink" title="XSS（Cross-site scripting）（了解即可）：HttpOnly"></a>XSS（Cross-site scripting）（了解即可）：HttpOnly</h3><p>跨站脚本攻击。即使⽤ JavaScript 拿到浏览器的Cookie 之后，发送到⾃⼰的⽹站，以这种⽅式来盗取⽤户 Cookie。应对⽅式：Server 在发送Cookie 时，敏感的 Cookie 加上 HttpOnly。</p>
<ul>
<li>应对⽅式：HttpOnly——这个 Cookie 只能⽤于 HTTP 请求，不能被 JavaScript 调⽤。它可以防⽌本地代码滥⽤ Cookie。</li>
</ul>
<h3 id="XSRF（Cross-site-request-forgery）（了解即可）：Referer"><a href="#XSRF（Cross-site-request-forgery）（了解即可）：Referer" class="headerlink" title="XSRF（Cross-site request forgery）（了解即可）：Referer"></a>XSRF（Cross-site request forgery）（了解即可）：Referer</h3><p>跨站请求伪造。即在⽤户不知情的情况下访问已经保存了 Cookie 的⽹站，以此来越权操作⽤户账户（例如盗取⽤户资⾦）。应对⽅式主要是从服务器安全⻆度考虑，就不多说了。</p>
<ul>
<li>应对⽅式：Referer 校验。（历史原因，正确单词是referrer）</li>
</ul>
<h3 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h3><p>两种主流方式：Basic和Bearer</p>
<h4 id="Basic："><a href="#Basic：" class="headerlink" title="Basic："></a>Basic：</h4><ul>
<li><p>格式：<code>Authorization:Basic &lt;username：password(Base64ed)&gt;</code></p>
<p>通过计算得来的</p>
</li>
<li><p>例子：github的token给客户端登录</p>
</li>
</ul>
<h4 id="Bearer：（持票人）"><a href="#Bearer：（持票人）" class="headerlink" title="Bearer：（持票人）"></a>Bearer：（持票人）</h4><ul>
<li><p>格式：<code>Authorization:Bearer &lt;bearer token&gt;</code></p>
<p>让授权方给予</p>
</li>
<li><p>bearer <strong>token</strong></p>
</li>
</ul>
<h5 id="OAuth2-（第三方验证）"><a href="#OAuth2-（第三方验证）" class="headerlink" title="OAuth2:（第三方验证）"></a>OAuth2:（第三方验证）</h5><h6 id="OAuth2流程"><a href="#OAuth2流程" class="headerlink" title="OAuth2流程"></a>OAuth2流程</h6><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">get /<span class="keyword">user</span> <span class="title">http</span>/<span class="number">1.1</span></span><br><span class="line">Host: github.com</span><br><span class="line">Authorization: Bearer abcccc</span><br></pre></td></tr></table></figure>

<p>例子：掘金网站用第三方github登录方式（github给掘金授权）；第三方登录的第三方是github，第三方授权的第三方是掘金；流程：github授权（访问一些关键信息的权限）给掘金，掘金有了权限后再去获取github的头像、昵称等信息（这一过程github并不知道它登录了哪里），掘金拿到信息登录的过程它是第一方。</p>
<p>第三方登录是产品角度的叫法。在技术角度只是授权（Authorize）访问一些头像昵称等信息（那个“第三方”根本不知道它登录了啥）</p>
<p><img src="/posts/263355501/OAuth1.png" alt="hencoder/OAuth1"></p>
<blockquote>
<p>这个client_id是开发这个3rd-party.com的时候向github平台注册的，github平台给这个平台分配的client_id</p>
</blockquote>
<p><img src="/posts/263355501/OAuth2.png" alt="hencoder/OAuth2"></p>
<blockquote>
<p>3rd-party.com使用“github第三方登录”方式</p>
</blockquote>
<p><img src="/posts/263355501/OAuth3.png" alt="hencoder/OAuth3"></p>
<blockquote>
<p>github返回Authorization Code给登录的网站，这个网站就能根据这个code去获取github上的头像等信息</p>
</blockquote>
<p><img src="/posts/263355501/OAuth4.png" alt="hencoder/OAuth4"></p>
<blockquote>
<p>其中的client_secret不能丢，否则坏人就能拿它去做坏事</p>
</blockquote>
<p>完整流程：</p>
<p><img src="/posts/263355501/OAuth5.png" alt="hencoder/OAuth5"></p>
<p>步骤：</p>
<ul>
<li>开发者先在 <a href="http://github.com/">github.com</a> 这个第三方平台上进行注册，会得到 client_id 和 client_secret；</li>
<li>在浏览器上访问 <a href="http://github.com/">github.com</a> 获取授权的时候会把 client_id 带过去；</li>
<li><a href="http://github.com/">github.com</a> 收到 client_id 会返回一个授权码 Authorization code；</li>
<li>浏览器获取到授权码后提交给后台（为了安全，浏览器不可信任）；</li>
<li>后台接收到 Authorization code 后，再把它和 client_secret 一起发送到 <a href="http://github.com/">github.com</a> 来获取 access_token；这样整个 OAuth2 流程就完成了。</li>
</ul>
<p>后续向 <a href="http://github.com/">github.com</a> 请求个人头像等信息只要让服务器带上 access_token 即可（”bearer+值”的形式）</p>
<h6 id="微信登录"><a href="#微信登录" class="headerlink" title="微信登录"></a>微信登录</h6><p>是个完整的OAuth2流程</p>
<blockquote>
<p>为了安全考虑：<br>客户端获取到微信授权码Authorization Code后，应该给服务端，服务端去跟微信的服务端通信，获取微信的access token等信息，再提供给客户端。客户端不应该拿token和Secret</p>
</blockquote>
<h5 id="自家App中使用Bearer-token"><a href="#自家App中使用Bearer-token" class="headerlink" title="自家App中使用Bearer token"></a>自家App中使用Bearer token</h5><p>App获取到token后，下次请求直接带上给服务端</p>
<h5 id="refresh-token"><a href="#refresh-token" class="headerlink" title="refresh token"></a>refresh token</h5><p>为了安全，token失效了不让客户重新授权，直接告诉第三方github让原来的token失效掉</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">post /<span class="built_in">ref</span>resh_token http/<span class="number">1.1</span></span><br><span class="line"><span class="built_in">ref</span>resh_token=ababab</span><br></pre></td></tr></table></figure>





<h3 id="TCP-x2F-IP协议族"><a href="#TCP-x2F-IP协议族" class="headerlink" title="TCP&#x2F;IP协议族"></a>TCP&#x2F;IP协议族</h3><p>由于网络的不稳定，需要网络分层模型</p>
<p><img src="/posts/263355501/TCP-IP%E5%8D%8F%E8%AE%AE%E6%97%8F.png" alt="hencoder/TCP-IP协议族"></p>
<ul>
<li><p>Application Layer应用层：HTTP、FTP、DNS</p>
</li>
<li><p>Transport Layer传输层：TCP、UDP</p>
<p>TCP：会把数据分包进行传，失败会重传（数据严谨性）</p>
<p>UDP：不是所有场景需要重传，比如游戏</p>
</li>
<li><p>Internet Layer网络层：IP</p>
<p>IP层（寻址作用）接收到就往目的传，不关心传成功与否</p>
</li>
<li><p>Link Layer数据链路层：以太网、Wi-Fi</p>
<p>实际传输数据</p>
</li>
</ul>
<h4 id="TCP-连接（是有状态的）"><a href="#TCP-连接（是有状态的）" class="headerlink" title="TCP 连接（是有状态的）"></a>TCP 连接（是有状态的）</h4><p>通信双⽅建⽴确认「可以通信」，不会将对⽅的消息丢弃，即为「建⽴连接」</p>
<h5 id="TCP-连接的建⽴与关闭"><a href="#TCP-连接的建⽴与关闭" class="headerlink" title="TCP 连接的建⽴与关闭"></a>TCP 连接的建⽴与关闭</h5><p>三次握手（连三下）</p>
<p><img src="/posts/263355501/TCP%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B.png" alt="hencoder/TCP连接建立"></p>
<blockquote>
<ol>
<li>请求方发送消息给接收方：我要给你发消息了</li>
<li>接收方发送消息给请求方：好的，我知道了，我也要给你发消息了</li>
<li>请求方发送消息给接收方：好的，我知道了</li>
</ol>
</blockquote>
<p>四次挥手（连四下）</p>
<p><img src="/posts/263355501/TCP%E8%BF%9E%E6%8E%A5%E5%85%B3%E9%97%AD.png" alt="hencoder/TCP连接关闭"></p>
<blockquote>
<ol>
<li>请求方发送消息给接收方：我不给你发消息了</li>
<li>接收方发送消息给请求方：好的，我知道了（可能还有消息没发完，所以不告诉请求方进行关闭）</li>
<li>接收方发送消息给请求方：（他把消息发完了）我不给你发消息了</li>
<li>请求方发送消息给接收方：好的，我知道了（此时TCP连接关闭）</li>
</ol>
</blockquote>
<h4 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h4><h5 id="为什么要长连接？"><a href="#为什么要长连接？" class="headerlink" title="为什么要长连接？"></a>为什么要长连接？</h5><p>因为移动网络并不在 Internet 中，而是在运营商的内网，并不具有真正的公网 IP，因此当某个TCP 在一段时间不通信后网关会考虑网络性能而关闭这条 TCP 连接和公网的连接通道，那么这个 TCP端口不再收到外部通信消息，即 TCP连接被动关闭。</p>
<h5 id="长连接的实现方式"><a href="#长连接的实现方式" class="headerlink" title="长连接的实现方式"></a>长连接的实现方式</h5><p>心跳。在一定时间间隔内使用 TCP 发送超短无意义消息来让网关不能把这个连接归为“空闲连接”，从而防止这个连接被关闭。</p>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>HTTP over SSL的简称，即工作在SSL（或TLS）上的HTTP。说白了就是加密通信的HTTP。</p>
<blockquote>
<p>HTTP是种协议，HTTPS不是个单独的协议。是HTTP建立在SSL上的</p>
</blockquote>
<p>SSL：Secure Socket Layer（以前的） -&gt; TLS Transport Layer Secure（现在的）</p>
<blockquote>
<p>HTTPS是种概念上的层，是在HTTP传输数据前进行加密再传的东西（更靠近HTTP这一层）</p>
</blockquote>
<h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>本质：在客户端和服务器之间协商出一个对称密钥（用非对称加密商讨），每次发送信息之前将内容加密，收到之后解密，达到内容的加密传输。</p>
<h4 id="不用非对称加密的原因"><a href="#不用非对称加密的原因" class="headerlink" title="不用非对称加密的原因"></a>不用非对称加密的原因</h4><p>从数学方面理解，它要经过复杂的计算，效率太慢。</p>
<h4 id="HTTPS-连接建⽴的过程"><a href="#HTTPS-连接建⽴的过程" class="headerlink" title="HTTPS 连接建⽴的过程"></a>HTTPS 连接建⽴的过程</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 客户端请求建立TLS连接</span><br><span class="line"><span class="bullet">2.</span> 服务器发回证书</span><br><span class="line"><span class="bullet">3.</span> 客户端验证服务器证书</span><br><span class="line"><span class="bullet">4.</span> 客户端信任服务器后，和服务器协商对称密钥</span><br><span class="line"><span class="bullet">5.</span> 使用对称密钥开始通信</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中1~4的步骤都是TCP通信</p>
</blockquote>
<p><img src="/posts/263355501/HTTPS%E7%9A%84%E8%BF%9E%E6%8E%A5.png" alt="hencoder/HTTPS的连接"></p>
<ol>
<li><blockquote>
<p>附带随机数（后续用来计算密钥）、TLS版本、Cipher Suite（加密套件（打包一起发送的）：可支持什么对称加密算法、非对称加密算法、Hash算法）</p>
</blockquote>
</li>
<li><p>Server Hello（服务器返回“好的”）</p>
<blockquote>
<p>服务器把它确定的TLS版本、Cipher [ˈsaɪfər]  Suite，再附带服务端的随机数、客户端随机数返回</p>
</blockquote>
</li>
<li><p>服务器证书信任建⽴（服务器附带证书）</p>
<blockquote>
<p>（用来给客户端验证是否是它要访问的服务器）</p>
<p>包含：</p>
<p>服务器地址、服务器名称等</p>
<p>证书公钥（是核心。是非对称加密的公钥）</p>
<p>证书签名（证明信息是真实的，不是别人模拟的）</p>
<p>​	证书机构的公钥及其他信息（证明证书签名是这个证书机构颁发的这条信息是真实的）</p>
<p>​		证书机构的签发方的信息（证明证书机构的信息是这个签发方签发的的这条信息是真实的）</p>
</blockquote>
<p><img src="/posts/263355501/%E7%BD%91%E7%AB%99HTTPS%E8%AF%81%E4%B9%A6%E7%BB%93%E6%9E%84.png" alt="网站HTTPS证书结构"></p>
<blockquote>
<p>其中证书签发方的真实性是可靠的（需要无条件信任），每个系统内都有“系统根证书”列表</p>
<p>根证书列表是操作系统研发方验证后放在系统中的（只要操作系统、浏览器不被干掉就是安全的）</p>
</blockquote>
<p><img src="/posts/263355501/%E8%AF%81%E4%B9%A6%E7%9A%84%E6%A0%A1%E9%AA%8C%E8%BF%87%E7%A8%8B.png" alt="证书的校验过程"></p>
</li>
<li><p>Pre-master Secret</p>
<blockquote>
<p>唯一一次非对称加密传过去的随机数</p>
<p>服务端随机数、客户端随机数、<code>pre-master Secret</code>，这三个随机数通过算法计算出 <code>Master secret</code>，用Master secret计算对称加密的密钥</p>
<p><code>Master Secret</code>（由客户端加密密钥、服务端加密密钥、客户端<code>MAC Secret</code>、服务端<code>MAC Secret</code>生成）（客户端发送消息用客户端加密密钥加密，服务端发送消息用服务端加密密钥加密）(<code>MAC Secret</code>是用来验证身份的)</p>
</blockquote>
<blockquote>
<p>PS：<code>HMAC：Hash-based Message Authenticate Code</code>，改良版的hash（<code>HMAC(a)=MD5(fun(a))=c</code>即中间经过一些变换，使得MD5加密后得到的hash值不容易被破解，而且这个转换只有通信两方知道，要用<code>MAC Secret</code>来参与转换，最终保证这个消息的真实性）</p>
</blockquote>
</li>
<li><p>客户端通知：我要使⽤加密通信了</p>
</li>
<li><p>客户端发送：Finished</p>
<blockquote>
<p>其中的内容包含前面那些密钥、Finished消息，用客户端MAC Secret进行hash</p>
</blockquote>
</li>
<li><p>服务器通知：我要使⽤加密通信了</p>
</li>
<li><p>服务器发送：Finished</p>
<blockquote>
<p>服务端发送的消息包含了前面的1~6的内容和它要发送的Finished消息，再用服务端MAC Secret进行hash</p>
</blockquote>
</li>
</ol>
<p>最后：TCP只知道有应用层消息（如：“应⽤层消息：#@R#RTERT#$TWERT”）根本不知道是什么协议，客户端和服务端发送出来的都是这种的</p>
<h4 id="在-Android-中使⽤-HTTPS"><a href="#在-Android-中使⽤-HTTPS" class="headerlink" title="在 Android 中使⽤ HTTPS"></a>在 <strong>Android</strong> 中使⽤ <strong>HTTPS</strong></h4><h5 id="正常情况"><a href="#正常情况" class="headerlink" title="正常情况"></a>正常情况</h5><p>直接使⽤</p>
<h5 id="什么时候会不行？"><a href="#什么时候会不行？" class="headerlink" title="什么时候会不行？"></a>什么时候会不行？</h5><ul>
<li><p>用的自签名证书（例如只用于内网的https）</p>
</li>
<li><p>证书信息不全，缺乏证书机构信息</p>
</li>
<li><p>什么操作系统比较旧，没有安装最新加入的根证书</p>
</li>
</ul>
<h5 id="怎么办？"><a href="#怎么办？" class="headerlink" title="怎么办？"></a>怎么办？</h5><ul>
<li><p>自己写证书验证过程</p>
<p>官网地址：<a href="https://developer.android.com/training/articles/security-ssl">https://developer.android.com/training/articles/security-ssl</a></p>
<p>中文官网地址：<a href="https://developer.android.google.cn/training/articles/security-ssl">https://developer.android.google.cn/training/articles/security-ssl</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>hencoder</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-反射</title>
    <url>/posts/3896618705/</url>
    <content><![CDATA[<p><img src="/posts/3896618705/%E5%8F%8D%E5%B0%84.png" alt="Java/反射"></p>
<p><img src="/posts/3896618705/%E5%8F%8D%E5%B0%841.png" alt="Java/反射1"></p>
<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>简单例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jasonwu.Test&quot;</span>);</span><br><span class="line">    <span class="comment">//获取构造方法</span></span><br><span class="line">    Constructor[] publicConstructors = cls.getConstructors();</span><br><span class="line">    <span class="comment">//获取全部构造方法</span></span><br><span class="line">    Constructor[] declaredConstructors = cls.getDeclaredConstructors();</span><br><span class="line">    <span class="comment">//获取公开方法</span></span><br><span class="line">    Method[] methods = cls.getMethods();</span><br><span class="line">    <span class="comment">//获取全部方法</span></span><br><span class="line">    Method[] declaredMethods = cls.getDeclaredMethods();</span><br><span class="line">    <span class="comment">//获取公开属性</span></span><br><span class="line">    Field[] publicFields = cls.getFields();</span><br><span class="line">    <span class="comment">//获取全部属性</span></span><br><span class="line">    Field[] declaredFields = cls.getDeclaredFields();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">clsObject</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getDeclaredMethod(<span class="string">&quot;getModule1Functionality&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> method.invoke(<span class="literal">null</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h1 id="Java反射效率低的主要原因（结论）："><a href="#Java反射效率低的主要原因（结论）：" class="headerlink" title="Java反射效率低的主要原因（结论）："></a><a href="https://mp.weixin.qq.com/s?__biz=MzI3OTcyNjQ5MQ==&mid=2247483786&idx=1&sn=f17b8fdb8134267a757afcf59050f99a&scene=45#wechat_redirect">Java反射效率低的主要原因</a>（结论）：</h1><ul>
<li>Method#invoke方法会对参数做封装和解封操作</li>
<li>需要检查方法可见性</li>
<li>需要校验参数</li>
<li>反射方法难以内联</li>
<li>JIT无法优化</li>
</ul>
<h1 id="Java反射原理–获取要反射的方法"><a href="#Java反射原理–获取要反射的方法" class="headerlink" title="Java反射原理–获取要反射的方法"></a>Java反射原理–获取要反射的方法</h1><h2 id="反射的使用"><a href="#反射的使用" class="headerlink" title="反射的使用"></a>反射的使用</h2><p>例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.ab.java.RefTest&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">refTest</span> <span class="operator">=</span> Clazz.newInstance();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;refMethod&quot;</span>);</span><br><span class="line">            method.invoke(refTest);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取反射方法时有俩方法，<code>getMethod</code>和<code>getDeclaredMethod</code></p>
</blockquote>
<h2 id="getMethod-x2F-getDeclaredMethod"><a href="#getMethod-x2F-getDeclaredMethod" class="headerlink" title="getMethod &#x2F; getDeclaredMethod"></a>getMethod &#x2F; getDeclaredMethod</h2><p>先整体看下 <code>getMethod/getDeclaredMethod</code> 的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Class</span> &#123;</span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> Method <span class="title function_">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span><br><span class="line">        <span class="keyword">throws</span> NoSuchMethodException, SecurityException &#123;</span><br><span class="line">        Objects.requireNonNull(name);</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">sm</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 1. 检查方法权限</span></span><br><span class="line">            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 获取方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> getMethod0(name, parameterTypes);</span><br><span class="line">        <span class="keyword">if</span> (method == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodException</span>(methodToString(name, parameterTypes));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 返回方法的拷贝</span></span><br><span class="line">        <span class="keyword">return</span> getReflectionFactory().copyMethod(method);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> Method <span class="title function_">getDeclaredMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span><br><span class="line">        <span class="keyword">throws</span> NoSuchMethodException, SecurityException &#123;</span><br><span class="line">        Objects.requireNonNull(name);</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">sm</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 1. 检查方法权限</span></span><br><span class="line">            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 获取方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> searchMethods(privateGetDeclaredMethods(<span class="literal">false</span>), name, parameterTypes);</span><br><span class="line">        <span class="keyword">if</span> (method == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodException</span>(methodToString(name, parameterTypes));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 返回方法的拷贝</span></span><br><span class="line">        <span class="keyword">return</span> getReflectionFactory().copyMethod(method);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="俩方法有两个区别："><a href="#俩方法有两个区别：" class="headerlink" title="俩方法有两个区别："></a>俩方法有两个区别：</h3><ol>
<li><strong><code>checkMemberAccess</code>传入的参数不一样</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Member</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Identifies the set of all public members of a class or interface,</span></span><br><span class="line"><span class="comment">     * including inherited members.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PUBLIC</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Identifies the set of declared members of a class or interface.</span></span><br><span class="line"><span class="comment">     * Inherited members are not included.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DECLARED</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即<code>PUBLIC</code>会包含所有的<code>public</code>方法，包括父类的方法。<code>DECLARED</code>会包括所有自己定义的方法，<code>public</code>、<code>protected</code>、<code>private</code>都在此，不包括父类的方法。</p>
<ol start="2">
<li><strong>获取方法不同，<code>getMethod</code>调用 <code>getMethod0</code>，<code>getDeclaredMethod</code>调用<code>privateGetDeclaredMethods</code></strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取自身定义的方法，参数 publicOnly表示是否只获取公共方法</span></span><br><span class="line"><span class="keyword">private</span> Method[] privateGetDeclaredMethods(<span class="type">boolean</span> publicOnly)&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>getMethod0</code>会递归查找父类方法，其中会调用到<code>privateGetDeclaredMethods</code>方法</p>
</blockquote>
<h2 id="getMethod"><a href="#getMethod" class="headerlink" title="getMethod"></a>getMethod</h2><h3 id="getMethod方法流程图"><a href="#getMethod方法流程图" class="headerlink" title="getMethod方法流程图"></a>getMethod方法流程图</h3><p><img src="/posts/3896618705/java%E5%8F%8D%E5%B0%84getMethod%E6%96%B9%E6%B3%95%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg%22" alt="java反射getMethod方法流程图" title="java反射getMethod方法流程图"></p>
<h3 id="checkMemberAccess"><a href="#checkMemberAccess" class="headerlink" title="checkMemberAccess"></a><code>checkMemberAccess</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Class</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkMemberAccess</span><span class="params">(SecurityManager sm, <span class="type">int</span> which, Class&lt;?&gt; caller, <span class="type">boolean</span> checkProxyInterfaces)</span>&#123;</span><br><span class="line">        <span class="comment">/* Default policy allows access to all &#123;@link Member#PUBLIC&#125; members,</span></span><br><span class="line"><span class="comment">         * as well as access to classes that have the same class loader as the caller.</span></span><br><span class="line"><span class="comment">         * In all other cases, it requires RuntimePermission(&quot;accessDeclaredMembers&quot;)</span></span><br><span class="line"><span class="comment">         * permission.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ClassLoader</span> <span class="variable">ccl</span> <span class="operator">=</span> ClassLoader.getClassLoader(caller);</span><br><span class="line">        <span class="keyword">if</span> (which != Member.PUBLIC) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> getClassLoader0();</span><br><span class="line">            <span class="keyword">if</span> (ccl != cl) &#123;</span><br><span class="line">                sm.checkPermission(SecurityConstants.CHECK_MEMBER_ACCESS_PERMISSION);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.checkPackageAccess(sm, ccl, checkProxyInterfaces);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>getMethod0</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Class</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Method <span class="title function_">getMethod0</span><span class="params">(String name, Class&lt;?&gt;[] parameterType)</span>&#123;</span><br><span class="line">        PublicMethods.<span class="type">MethodList</span> <span class="variable">res</span> <span class="operator">=</span> getMethodsRecursive(name, parameterTypes == <span class="literal">null</span> ? EMPTY_CLASS_ARRAY : parameterTypes,<span class="comment">/* includeStatic */</span> <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//res.getMostSpecific()返回具体的（Child）方法（Child继承自Parent）</span></span><br><span class="line">        <span class="type">return</span> <span class="variable">res</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="literal">null</span> : res.getMostSpecific();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>getMethodsRecursive</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Class</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PublicMethods.MethodList <span class="title function_">getMethodsRecursive</span><span class="params">(String name, Class&lt;?&gt;[] parameterTypes, <span class="type">boolean</span> includeStatic)</span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取自己的public方法</span></span><br><span class="line">        Method[] methods = privateGetDeclareMethods(<span class="comment">/* publicOnly */</span> <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//2. 筛选符合条件的方法，构造MethodList对象</span></span><br><span class="line">        PublicMethods.<span class="type">MethodList</span> <span class="variable">res</span> <span class="operator">=</span> PublicMethods.MethodList.filter(methods, name, parameterTypes, includeStatic);</span><br><span class="line">        <span class="comment">//找到方法，直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(res != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3. 没有找到方法，就获取其父类，递归调用 getMethodsRecursive 方法</span></span><br><span class="line">        Class&lt;?&gt; sc = getSuperclass();</span><br><span class="line">        <span class="keyword">if</span>(sc != <span class="literal">null</span>)&#123;</span><br><span class="line">            res = sc.getMethodsRecursive(name, parameterTypes, includeStatic);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4. 获取接口中对应的方法</span></span><br><span class="line">        <span class="keyword">for</span>(Class&lt;?&gt; intf: getInterfaces(<span class="comment">/* cloneArray */</span> <span class="literal">false</span>))&#123;</span><br><span class="line">            res = PublicMethods.MethodList.merge(res, intf.getMethodsRecursive(name, parameterTypes, <span class="comment">/* includeStatic */</span> <span class="literal">false</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><em><strong>我们平时编写Java代码时，同一个类是不能有方法名和方法参数都相同的方法的，在JVM中一个方法签名是和返回值、方法名、方法参数三者相关的。也就是说，在JVM中可以存在方法名和方法参数都相同但是返回值不同的方法。</strong></em></p>
<p><img src="/posts/3896618705/Java%E5%8F%8D%E5%B0%84%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.jpg" alt="Java反射思维导图"></p>
<h1 id="sun-misc-Unsafe"><a href="#sun-misc-Unsafe" class="headerlink" title="sun.misc.Unsafe"></a>sun.misc.Unsafe</h1><h2 id="例子：获取对象地址"><a href="#例子：获取对象地址" class="headerlink" title="例子：获取对象地址"></a>例子：获取对象地址</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">addressOf</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">    Object[] array = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">long</span> <span class="variable">objectAddress</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.misc.Unsafe&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">unsafe</span> <span class="operator">=</span> field.get(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">unsafeCls</span> <span class="operator">=</span> unsafe.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">arrayBaseOffset</span> <span class="operator">=</span> unsafeCls.getMethod(<span class="string">&quot;arrayBaseOffset&quot;</span>, Object.class.getClass());</span><br><span class="line">        <span class="type">int</span> <span class="variable">baseOffset</span> <span class="operator">=</span> (<span class="type">int</span>) arrayBaseOffset.invoke(unsafe, Object[].class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">size</span> <span class="operator">=</span> unsafeCls.getMethod(<span class="string">&quot;addressSize&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">addressSize</span> <span class="operator">=</span> (<span class="type">int</span>) size.invoke(unsafe);</span><br><span class="line">        <span class="keyword">switch</span> (addressSize) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="type">Method</span> <span class="variable">getInt</span> <span class="operator">=</span> unsafeCls.getMethod(<span class="string">&quot;getInt&quot;</span>, Object.class, <span class="type">long</span>.class);</span><br><span class="line">                objectAddress = (<span class="type">long</span>) getInt.invoke(unsafe, array, baseOffset);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                <span class="type">Method</span> <span class="variable">getLong</span> <span class="operator">=</span> unsafeCls.getMethod(<span class="string">&quot;getLong&quot;</span>,  Object.class, <span class="type">long</span>.class);</span><br><span class="line">                objectAddress = (<span class="type">long</span>) getLong.invoke(unsafe, array, baseOffset);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;unsupported address size: &quot;</span> + addressSize);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchFieldException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objectAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="深入理解sun-misc-Unsafe原理"><a href="#深入理解sun-misc-Unsafe原理" class="headerlink" title="深入理解sun.misc.Unsafe原理"></a><a href="https://blog.csdn.net/zyzzxycj/article/details/89877863">深入理解sun.misc.Unsafe原理</a></h2><p>Unsafe类中的核心方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重新分配内存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">reallocateMemory</span><span class="params">(<span class="type">long</span> address, <span class="type">long</span> bytes)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//分配内存  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">allocateMemory</span><span class="params">(<span class="type">long</span> bytes)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//释放内存  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">freeMemory</span><span class="params">(<span class="type">long</span> address)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//在给定的内存块中设置值  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">long</span> bytes, <span class="type">byte</span> value)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//从一个内存块拷贝到另一个内存块  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">copyMemory</span><span class="params">(Object srcBase, <span class="type">long</span> srcOffset, Object destBase, <span class="type">long</span> destOffset, <span class="type">long</span> bytes)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//获取值，不管java的访问限制，其他有类似的getInt，getDouble，getLong，getChar等等  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">getObject</span><span class="params">(Object o, <span class="type">long</span> offset)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置值，不管java的访问限制，其他有类似的putInt,putDouble，putLong，putChar等等  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Object o, <span class="type">long</span> offset)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//从一个给定的内存地址获取本地指针，如果不是allocateMemory方法的，结果将不确定  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">getAddress</span><span class="params">(<span class="type">long</span> address)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//存储一个本地指针到一个给定的内存地址,如果地址不是allocateMemory方法的，结果将不确定  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putAddress</span><span class="params">(<span class="type">long</span> address, <span class="type">long</span> x)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//该方法返回给定field的内存地址偏移量，这个值对于给定的filed是唯一的且是固定不变的  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">staticFieldOffset</span><span class="params">(Field f)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//报告一个给定的字段的位置，不管这个字段是private，public还是保护类型，和staticFieldBase结合使用  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">objectFieldOffset</span><span class="params">(Field f)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一个给定字段的位置  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">staticFieldBase</span><span class="params">(Field f)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//确保给定class被初始化，这往往需要结合基类的静态域（field）  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">ensureClassInitialized</span><span class="params">(Class c)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//可以获取数组第一个元素的偏移地址  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">arrayBaseOffset</span><span class="params">(Class arrayClass)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//可以获取数组的转换因子，也就是数组中元素的增量地址。将arrayBaseOffset与arrayIndexScale配合使用， 可以定位数组中每个元素在内存中的位置  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">arrayIndexScale</span><span class="params">(Class arrayClass)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//获取本机内存的页数，这个值永远都是2的幂次方  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">pageSize</span><span class="params">()</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//告诉虚拟机定义了一个没有安全检查的类，默认情况下这个类加载器和保护域来着调用者类  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Class <span class="title function_">defineClass</span><span class="params">(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len, ClassLoader loader, ProtectionDomain protectionDomain)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个类，但是不让它知道类加载器和系统字典  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Class <span class="title function_">defineAnonymousClass</span><span class="params">(Class hostClass, <span class="type">byte</span>[] data, Object[] cpPatches)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//锁定对象，必须是没有被锁的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">monitorEnter</span><span class="params">(Object o)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//解锁对象  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">monitorExit</span><span class="params">(Object o)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//试图锁定对象，返回true或false是否锁定成功，如果锁定，必须用monitorExit解锁  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">tryMonitorEnter</span><span class="params">(Object o)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//引发异常，没有通知  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">throwException</span><span class="params">(Throwable ee)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//CAS，如果对象偏移量上的值=期待值，更新为x,返回true.否则false.类似的有compareAndSwapInt,compareAndSwapLong,compareAndSwapBoolean,compareAndSwapChar等等。  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapObject</span><span class="params">(Object o, <span class="type">long</span> offset,  Object expected, Object x)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 该方法获取对象中offset偏移地址对应的整型field的值,支持volatile load语义。类似的方法有getIntVolatile，getBooleanVolatile等等  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">getObjectVolatile</span><span class="params">(Object o, <span class="type">long</span> offset)</span>;   </span><br><span class="line"></span><br><span class="line"><span class="comment">//线程调用该方法，线程将一直阻塞直到超时，或者是中断条件出现。  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">park</span><span class="params">(<span class="type">boolean</span> isAbsolute, <span class="type">long</span> time)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//终止挂起的线程，恢复正常.java.util.concurrent包中挂起操作都是在LockSupport类实现的，也正是使用这两个方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">unpark</span><span class="params">(Object thread)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//获取系统在不同时间系统的负载情况  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">getLoadAverage</span><span class="params">(<span class="type">double</span>[] loadavg, <span class="type">int</span> nelems)</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个类的实例，不需要调用它的构造函数、初使化代码、各种JVM安全检查以及其它的一些底层的东西。即使构造函数是私有，我们也可以通过这个方法创建它的实例,对于单例模式，简直是噩梦。 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">allocateInstance</span><span class="params">(Class cls)</span> <span class="keyword">throws</span> InstantiationException;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin关键字</title>
    <url>/posts/981932355/</url>
    <content><![CDATA[<h1 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h1><h2 id="变量类型、函数、接口、返回值"><a href="#变量类型、函数、接口、返回值" class="headerlink" title=": 变量类型、函数、接口、返回值"></a><code>:</code> 变量类型、函数、接口、返回值</h2><ul>
<li><p>定义变量</p>
<ul>
<li>不可变变量<ul>
<li><code>val a ：Int</code></li>
<li><code>val a ：Int = 4</code></li>
</ul>
</li>
<li>可变变量<ul>
<li><code>var b ：String</code></li>
</ul>
</li>
</ul>
</li>
<li><p>继承基类</p>
<ul>
<li><p><code>calss 子类 : 父类() &#123;&#125;</code></p>
<p>注意“<code>：</code>”后是父类的构造方法【父类带括号“()”】</p>
</li>
</ul>
</li>
<li><p>实现接口</p>
<ul>
<li><code>class 类 ： 接口 &#123;&#125;</code></li>
</ul>
</li>
<li><p>定义函数返回值</p>
<ul>
<li><code>class 类 ： 返回值类型&#123;&#125;</code></li>
</ul>
</li>
</ul>
<h2 id="创建一个成员引用或者一个类引用"><a href="#创建一个成员引用或者一个类引用" class="headerlink" title=":: 创建一个成员引用或者一个类引用"></a><code>::</code> 创建一个<a href="https://legacy.kotlincn.net/docs/reference/reflection.html#%E5%87%BD%E6%95%B0%E5%BC%95%E7%94%A8">成员引用</a>或者一个<a href="https://legacy.kotlincn.net/docs/reference/reflection.html#%E7%B1%BB%E5%BC%95%E7%94%A8">类引用</a></h2><h2 id="将类型标记为可空"><a href="#将类型标记为可空" class="headerlink" title="? 将类型标记为可空"></a><code>?</code> 将类型标记为<a href="https://legacy.kotlincn.net/docs/reference/null-safety.html#%E5%8F%AF%E7%A9%BA%E7%B1%BB%E5%9E%8B%E4%B8%8E%E9%9D%9E%E7%A9%BA%E7%B1%BB%E5%9E%8B">可空</a></h2><h2 id="判空不处理"><a href="#判空不处理" class="headerlink" title="?.  判空不处理"></a><code>?.</code>  判空不处理</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> ages1 = age?.toInt()  <span class="comment">//空的话不处理</span></span><br></pre></td></tr></table></figure>



<h2 id="判空取后面的值"><a href="#判空取后面的值" class="headerlink" title="?: 判空取后面的值"></a><code>?:</code> 判空取后面的值</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">data</span> = lesson.<span class="keyword">data</span> ?: <span class="string">&quot;日期待定&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果<code>lesson.data</code>是<code>null</code>则把后面的默认值赋值给<code>data</code>，否则把<code>lesson.data</code>赋值给<code>data</code></p>
</blockquote>
<p>例子：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(user.username?.length ?: <span class="number">0</span> &lt; <span class="number">4</span>)&#123;&#125;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">if</span>(user.username == <span class="literal">null</span> || user.username.length &lt; <span class="number">4</span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>user.username</code>是<code>null</code>，那么<code>user.username?.length</code>这个整体就是<code>null</code>，就会得到<code>0</code>；否则，<code>user.username</code>有值则可以取到它的<code>length</code>，然后判断是否<code>&lt;4</code>，就会忽略 <code>?:0</code></p>
</blockquote>
<h2 id="逻辑非"><a href="#逻辑非" class="headerlink" title="! 逻辑非"></a><code>! </code>逻辑非</h2><h2 id="非空断言运算符"><a href="#非空断言运算符" class="headerlink" title="!! 非空断言运算符"></a><code>!!</code> 非空断言运算符</h2><p>将任何值转换为非空类型，若该值为空则抛出异常</p>
<h2 id="gt"><a href="#gt" class="headerlink" title="-&gt;"></a><code>-&gt;</code></h2><ul>
<li>分隔 <a href="https://legacy.kotlincn.net/docs/reference/lambdas.html#lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95">lambda 表达式</a>的参数与主体</li>
<li>分隔在<a href="https://legacy.kotlincn.net/docs/reference/lambdas.html#%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B">函数类型</a>中的参数类型与返回类型声明</li>
<li>分隔 <a href="https://legacy.kotlincn.net/docs/reference/control-flow.html#when-%E8%A1%A8%E8%BE%BE%E5%BC%8F">when 表达式</a>分支的条件与代码体</li>
</ul>
<h2 id="、-、-、-、-——-数学操作符-x2F-也用于将数组传递给-vararg-参数"><a href="#、-、-、-、-——-数学操作符-x2F-也用于将数组传递给-vararg-参数" class="headerlink" title="+、- 、* 、/ 、%  —— 数学操作符-&#x2F;% 也用于将数组传递给 vararg 参数"></a><code>+</code>、<code>-</code> 、<code>*</code> 、<code>/</code> 、<code>%</code>  —— 数学操作符-<em>&#x2F;%</em> 也用于将数组传递给 vararg 参数</h2><h2 id="it"><a href="#it" class="headerlink" title="it"></a>it</h2><p><code>kotlin</code>的<code>lambda</code>更加简约</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正常情况</span></span><br><span class="line">view.setOnClickListener(&#123;v -&gt; v.setVisibility(View.INVISIBLE)&#125;)</span><br><span class="line"><span class="comment">//当lambda是函数的最后一个参数时，可以将其移到括号外面</span></span><br><span class="line">view.setOnClickListener()&#123;v -&gt; v.setVisibility(View.INVISIBLE)&#125;</span><br><span class="line"><span class="comment">//当函数只有一个lambda类型的参数，可以省去括号</span></span><br><span class="line">view.setOnClickListener&#123;v -&gt; v.setVisibility(View.INVISIBLE)&#125;</span><br><span class="line"><span class="comment">//当lambda只有一个参数，可省去参数列表，在表达式部分用it引用参数</span></span><br><span class="line">view.setOnClickListener&#123;it.setVisibility(View.INVISIBLE)&#125;</span><br></pre></td></tr></table></figure>

<h2 id="reified"><a href="#reified" class="headerlink" title="reified"></a><a href="https://www.jianshu.com/p/24397a9dd428">reified</a></h2><h3 id="不再需要传参数clazz"><a href="#不再需要传参数clazz" class="headerlink" title="不再需要传参数clazz"></a>不再需要传参数clazz</h3><p>比如定义实现一个扩展函数的启动<code>Activity</code>，一般都需要传<code>Class&lt;T&gt;</code>参数：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Function</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span><span class="type">&lt;T: Activity&gt;</span> Activity.<span class="title">startActivity</span><span class="params">(context: <span class="type">Context</span>, clazz: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;)</span></span>&#123;</span><br><span class="line">    startActivity(Intent(context, clazz))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Caller</span></span><br><span class="line">startActivity(context,  NewActivity::<span class="keyword">class</span>.java)</span><br></pre></td></tr></table></figure>

<p>使用<code>reified</code>方式</p>
<blockquote>
<p>通过添加类型传递简化泛型参数</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Function</span></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span><span class="type">&lt;<span class="keyword">reified</span> T: Activity&gt;</span> Activity.<span class="title">startActivity</span><span class="params">(context: <span class="type">Context</span>)</span></span>&#123;</span><br><span class="line">    startActivity(Intent(context, T::<span class="keyword">class</span>.java))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Caller</span></span><br><span class="line">startActivity&lt;NewActivity&gt;(context)</span><br></pre></td></tr></table></figure>



<h3 id="不安全的转换"><a href="#不安全的转换" class="headerlink" title="不安全的转换"></a>不安全的转换</h3><p>kotlin中，使用 安装转换操作符<code>as?</code>，它可以在失败时返回<code>null</code>。如下，我们认为会安全的获取数据或返回null。然后如果获得的数据不是它期望的类型，这个函数会出现<code>crash</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Function</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Bundle.<span class="title">getDataOrNull</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">return</span> getSerializable(DATA_KEY) <span class="keyword">as</span>? T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Caller</span></span><br><span class="line"><span class="keyword">val</span> bundle: Bundle? = Bundle()</span><br><span class="line">bundle?.putSerializable(DATA_KEY, <span class="string">&quot;Testing&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> strData: String? = bundle?.getDataOrNull()</span><br><span class="line"><span class="keyword">val</span> intData: <span class="built_in">Int</span>? = bundle?.getDataOrNull() <span class="comment">//crash</span></span><br></pre></td></tr></table></figure>

<p>如果不想crash的，修改如下</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Function</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Bundle.<span class="title">getDataOrNull</span><span class="params">(clazz: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;)</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span> = getSerializable(DATA_KEY)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (clazz.isInstance(<span class="keyword">data</span>))&#123;</span><br><span class="line">        <span class="keyword">data</span> <span class="keyword">as</span> T</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Caller</span></span><br><span class="line"><span class="keyword">val</span> bundle: Bundle? = Bundle()</span><br><span class="line">bundle?.putSerializable(DATA_KEY, <span class="string">&quot;Testing&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> strData: String? = bundle?.getDataOrNull(String::<span class="keyword">class</span>.java)</span><br><span class="line"><span class="keyword">val</span> intData: <span class="built_in">Int</span>? = bundle?.getDataOrNull(String::<span class="keyword">class</span>.java) <span class="comment">//Null</span></span><br></pre></td></tr></table></figure>

<p>使用<code>reified</code>方式</p>
<blockquote>
<p>简化泛型参数和保证 <code>as?</code> 类型转换安全性</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Function</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T&gt;</span> Bundle.<span class="title">getDataOrNull</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">return</span> getSerializable(DATA_KEY) <span class="keyword">as</span>? T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Caller</span></span><br><span class="line"><span class="keyword">val</span> bundle: Bundle? = Bundle()</span><br><span class="line">bundle?.putSerializable(DATA_KEY, <span class="string">&quot;Testing&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> strData: String? = bundle?.getDataOrNull()</span><br><span class="line"><span class="keyword">val</span> intData: <span class="built_in">Int</span>? = bundle?.getDataOrNull() <span class="comment">//Null</span></span><br></pre></td></tr></table></figure>



<h3 id="不同的返回类型函数重载"><a href="#不同的返回类型函数重载" class="headerlink" title="不同的返回类型函数重载"></a>不同的返回类型函数重载</h3><p>实现一个函数计算 DP 到像素，并返回一个 Int 或 Float。这种情况就会想到函数重载，如下所示：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Resources.<span class="title">dpToPx</span><span class="params">(value: <span class="type">Int</span>)</span></span>: <span class="built_in">Float</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> TypedValue.applyDimension(</span><br><span class="line">        TypedValue.COMPLEX_UNIT_DIP,</span><br><span class="line">        value.toFloat(), displayMetrics)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Resources.<span class="title">dpToPx</span><span class="params">(value: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> floatValue: <span class="built_in">Float</span> = dpToPx(value)</span><br><span class="line">    <span class="keyword">return</span> floatValue.toInt()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，这将导致编译时出错。原因是，函数重载方式只能根据参数计数和类型不同，而不能根据返回类型。</p>
<p>使用<code>reified</code>方式</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T&gt;</span> Resources.<span class="title">dpToPx</span><span class="params">(value: <span class="type">Int</span>)</span></span>:  T &#123;</span><br><span class="line">    <span class="keyword">val</span> result = TypedValue.applyDimension(</span><br><span class="line">    	TypedValue.COMPLEX_UNIT_DIP,</span><br><span class="line">        value.toFloat(), displayMetrics)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span>(T::<span class="class"><span class="keyword">class</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">Float</span>::<span class="class"><span class="keyword">class</span> -&gt; <span class="title">result</span> <span class="title">as</span> <span class="title">T</span></span></span><br><span class="line">        <span class="built_in">Int</span>::<span class="class"><span class="keyword">class</span> -&gt; <span class="title">result</span>.<span class="title">toInt</span></span>() <span class="keyword">as</span> T</span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalStateException(<span class="string">&quot;Type not supported&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Caller</span></span><br><span class="line"><span class="keyword">val</span> intValue: <span class="built_in">Int</span> = resource.dpToPx(<span class="number">64</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h2><p>相当于Java中的Object，如果在泛型中还可以用“*”表示，如<code>&lt;*&gt;</code></p>
<h1 id="硬关键字"><a href="#硬关键字" class="headerlink" title="硬关键字"></a>硬关键字</h1><h2 id="as"><a href="#as" class="headerlink" title="as"></a><code>as</code></h2><ul>
<li><p>用于<a href="https://legacy.kotlincn.net/docs/reference/typecasts.html#%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E7%AC%A6">类型转换</a></p>
</li>
<li><p>为<a href="https://legacy.kotlincn.net/docs/reference/packages.html#%E5%AF%BC%E5%85%A5">导入指定一个别名</a></p>
</li>
</ul>
<h2 id="as-1"><a href="#as-1" class="headerlink" title="as?"></a><code>as?</code></h2><p>用于<a href="https://legacy.kotlincn.net/docs/reference/typecasts.html#%E5%AE%89%E5%85%A8%E7%9A%84%E5%8F%AF%E7%A9%BA%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E7%AC%A6">安全类型转换</a></p>
<h2 id="break"><a href="#break" class="headerlink" title="break"></a><code>break</code></h2><p><a href="https://legacy.kotlincn.net/docs/reference/returns.html">终止循环的执行</a></p>
<h2 id="class"><a href="#class" class="headerlink" title="class"></a><code>class</code></h2><p>声明一个<a href="https://legacy.kotlincn.net/docs/reference/classes.html">类</a></p>
<h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a><code>continue</code></h2><p><a href="https://legacy.kotlincn.net/docs/reference/returns.html">继续最近层循环的下一步</a></p>
<h2 id="do"><a href="#do" class="headerlink" title="do"></a><code>do</code></h2><p>开始一个 <a href="https://legacy.kotlincn.net/docs/reference/control-flow.html#while-%E5%BE%AA%E7%8E%AF">do&#x2F;while 循环</a>（后置条件的循环）</p>
<h2 id="else"><a href="#else" class="headerlink" title="else"></a><code>else</code></h2><p>定义一个 <a href="https://legacy.kotlincn.net/docs/reference/control-flow.html#if-%E8%A1%A8%E8%BE%BE%E5%BC%8F">if 表达式</a>条件为 false 时执行的分支</p>
<h2 id="false"><a href="#false" class="headerlink" title="false"></a><code>false</code></h2><p>指定<a href="https://legacy.kotlincn.net/docs/reference/basic-types.html#%E5%B8%83%E5%B0%94">布尔类型</a>的“假”值</p>
<h2 id="for"><a href="#for" class="headerlink" title="for"></a><code>for</code></h2><p>开始一个 <a href="https://legacy.kotlincn.net/docs/reference/control-flow.html#for-%E5%BE%AA%E7%8E%AF">for 循环</a></p>
<h2 id="fun"><a href="#fun" class="headerlink" title="fun"></a><code>fun</code></h2><p>声明一个<a href="https://legacy.kotlincn.net/docs/reference/functions.html">函数</a></p>
<h2 id="if"><a href="#if" class="headerlink" title="if"></a><code>if</code></h2><p>开始一个 <a href="https://legacy.kotlincn.net/docs/reference/control-flow.html#if-%E8%A1%A8%E8%BE%BE%E5%BC%8F">if 表达式</a></p>
<h2 id="in"><a href="#in" class="headerlink" title="in"></a><code>in</code></h2><ul>
<li>指定在 <a href="https://legacy.kotlincn.net/docs/reference/control-flow.html#for-%E5%BE%AA%E7%8E%AF">for 循环</a>中迭代的对象</li>
<li>用作中缀操作符以检测一个值属于<a href="https://legacy.kotlincn.net/docs/reference/ranges.html">一个区间</a>、 一个集合或者其他<a href="https://legacy.kotlincn.net/docs/reference/operator-overloading.html#in">定义“contains”方法</a>的实体</li>
<li>在 <a href="https://legacy.kotlincn.net/docs/reference/control-flow.html#when-%E8%A1%A8%E8%BE%BE%E5%BC%8F">when 表达式中</a>用于上述目的</li>
<li>将一个类型参数标记为<a href="https://legacy.kotlincn.net/docs/reference/generics.html#%E5%A3%B0%E6%98%8E%E5%A4%84%E5%9E%8B%E5%8F%98">逆变</a></li>
</ul>
<h2 id="in-1"><a href="#in-1" class="headerlink" title="!in"></a><code>!in</code></h2><ul>
<li>用作中缀操作符以检测一个值<strong>不</strong>属于<a href="https://legacy.kotlincn.net/docs/reference/ranges.html">一个区间</a>、 一个集合或者其他<a href="https://legacy.kotlincn.net/docs/reference/operator-overloading.html#in">定义“contains”方法</a>的实体</li>
<li>在 <a href="https://legacy.kotlincn.net/docs/reference/control-flow.html#when-%E8%A1%A8%E8%BE%BE%E5%BC%8F">when 表达式中</a>用于上述目的</li>
</ul>
<h2 id="interface"><a href="#interface" class="headerlink" title="interface"></a><code>interface</code></h2><p>声明一个<a href="https://legacy.kotlincn.net/docs/reference/interfaces.html">接口</a></p>
<h2 id="is"><a href="#is" class="headerlink" title="is"></a><code>is</code></h2><ul>
<li>检测<a href="https://legacy.kotlincn.net/docs/reference/typecasts.html#is-%E4%B8%8E-is-%E6%93%8D%E4%BD%9C%E7%AC%A6">一个值具有指定类型</a></li>
<li>在 <a href="https://legacy.kotlincn.net/docs/reference/control-flow.html#when-%E8%A1%A8%E8%BE%BE%E5%BC%8F">when 表达式中</a>用于上述目的</li>
</ul>
<h2 id="is-1"><a href="#is-1" class="headerlink" title="!is"></a><code>!is</code></h2><ul>
<li>检测<a href="https://legacy.kotlincn.net/docs/reference/typecasts.html#is-%E4%B8%8E-is-%E6%93%8D%E4%BD%9C%E7%AC%A6">一个值<strong>不</strong>具有指定类型</a></li>
<li>在 <a href="https://legacy.kotlincn.net/docs/reference/control-flow.html#when-%E8%A1%A8%E8%BE%BE%E5%BC%8F">when 表达式中</a>用于上述目的</li>
</ul>
<h2 id="null"><a href="#null" class="headerlink" title="null"></a><code>null</code></h2><p>是表示不指向任何对象的对象引用的常量</p>
<h2 id="object"><a href="#object" class="headerlink" title="object"></a><code>object</code></h2><p>同时声明<a href="https://legacy.kotlincn.net/docs/reference/object-declarations.html">一个类及其实例</a></p>
<h2 id="package"><a href="#package" class="headerlink" title="package"></a><code>package</code></h2><p>指定<a href="https://legacy.kotlincn.net/docs/reference/packages.html">当前文件的包</a></p>
<h2 id="return"><a href="#return" class="headerlink" title="return"></a><code>return</code></h2><p><a href="https://legacy.kotlincn.net/docs/reference/returns.html">从最近层的函数或匿名函数返回</a></p>
<h2 id="super"><a href="#super" class="headerlink" title="super"></a><code>super</code></h2><ul>
<li><a href="https://legacy.kotlincn.net/docs/reference/classes.html#%E8%B0%83%E7%94%A8%E8%B6%85%E7%B1%BB%E5%AE%9E%E7%8E%B0">引用一个方法或属性的超类实现</a></li>
<li><a href="https://legacy.kotlincn.net/docs/reference/classes.html#%E7%BB%A7%E6%89%BF">在次构造函数中调用超类构造函数</a></li>
</ul>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a><code>this</code></h2><ul>
<li>引用<a href="https://legacy.kotlincn.net/docs/reference/this-expressions.html">当前接收者</a></li>
<li><a href="https://legacy.kotlincn.net/docs/reference/classes.html#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">在次构造函数中调用同一个类的另一个构造函数</a></li>
</ul>
<h2 id="throw"><a href="#throw" class="headerlink" title="throw"></a><code>throw</code></h2><p><a href="https://legacy.kotlincn.net/docs/reference/exceptions.html">抛出一个异常</a></p>
<h2 id="true"><a href="#true" class="headerlink" title="true"></a><code>true</code></h2><p>指定<a href="https://legacy.kotlincn.net/docs/reference/basic-types.html#%E5%B8%83%E5%B0%94">布尔类型</a>的“真”值</p>
<h2 id="try"><a href="#try" class="headerlink" title="try"></a><code>try</code></h2><p><a href="https://legacy.kotlincn.net/docs/reference/exceptions.html">开始一个异常处理块</a></p>
<h3 id="try、catch、finally"><a href="#try、catch、finally" class="headerlink" title="try、catch、finally"></a>try、catch、finally</h3><p><strong>与java的一样（try、catch中都有return的情况）</strong></p>
<ol>
<li>如果try中报错那么走catch的return，再走finally（finally一定会走），finally后代码不执行</li>
<li>如果try中不报错，那么走try的return，再走finally（finally一定会走），finally后代码不执行</li>
</ol>
<p><strong>与java的一样（try、catch中没有return的情况）</strong></p>
<ol>
<li>如果try中报错：try–&gt;catch–&gt;finally，会走finally后的代码</li>
<li>如果try不报错：try–&gt;finally，会走finally后的代码</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;tryIncludeRet:&quot;</span> + tryIncludeRet())</span><br><span class="line">    println(<span class="string">&quot;catchIncludeRet:&quot;</span> + catchIncludeRet())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">tryIncludeRet</span><span class="params">()</span></span>: String&#123;</span><br><span class="line">    println(<span class="string">&quot;=====================tryIncludeRet=====================&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;tryIncludeRet try&quot;</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;tryIncludeRet finally&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;tryIncludeRet finally 后的return&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">catchIncludeRet</span><span class="params">()</span></span>:String&#123;</span><br><span class="line">    println(<span class="string">&quot;=====================catchIncludeRet=====================&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="number">1</span>/<span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;catchIncludeRet try&quot;</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        println(<span class="string">&quot;catch error&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;catchIncludeRet catch&quot;</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;catchIncludeRet finally&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;catchIncludeRet finally 后的renturn&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line">=====================tryIncludeRet=====================</span><br><span class="line">tryIncludeRet <span class="keyword">finally</span></span><br><span class="line">tryIncludeRet:tryIncludeRet <span class="keyword">try</span></span><br><span class="line">=====================catchIncludeRet=====================</span><br><span class="line"><span class="keyword">catch</span> error</span><br><span class="line">catchIncludeRet <span class="keyword">finally</span></span><br><span class="line">catchIncludeRet:catchIncludeRet <span class="keyword">catch</span></span><br></pre></td></tr></table></figure>



<h2 id="typealias"><a href="#typealias" class="headerlink" title="typealias"></a><code>typealias</code></h2><p>声明一个<a href="https://legacy.kotlincn.net/docs/reference/type-aliases.html">类型别名</a></p>
<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a><code>typeof</code></h2><p>保留以供未来使用</p>
<h2 id="val"><a href="#val" class="headerlink" title="val"></a><code>val</code></h2><p>声明一个只读<a href="https://legacy.kotlincn.net/docs/reference/properties.html">属性</a>或<a href="https://legacy.kotlincn.net/docs/reference/basic-syntax.html#defining-variables">局部变量</a></p>
<h2 id="var"><a href="#var" class="headerlink" title="var"></a><code>var</code></h2><p>声明一个可变<a href="https://legacy.kotlincn.net/docs/reference/properties.html">属性</a>或<a href="https://legacy.kotlincn.net/docs/reference/basic-syntax.html#defining-variables">局部变量</a></p>
<h2 id="val-和-var"><a href="#val-和-var" class="headerlink" title="val 和 var"></a>val 和 var</h2><p>val（value 的简写）用来声明一个不可变的变量，对应 Java 中的 final 变量。</p>
<p>var（variable 的简写）用来声明一个可变的变量，对应 Java 中的非 final 变量。</p>
<p>Kotlin 类型推导机制：val 关键字定义了个变量 a，给它赋值 10，a 就会自动推导成整型变量。若把字符串赋值给 a，a 就会自动推导成字符串变量。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> a = <span class="number">10</span> <span class="comment">//(直接赋值)类型自动推导</span></span><br><span class="line">或</span><br><span class="line"><span class="keyword">val</span> a = <span class="string">&quot;hello&quot;</span> <span class="comment">//(直接赋值)类型自动推导</span></span><br></pre></td></tr></table></figure>

<p>延迟赋值：需要显式声明变量的类型 </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a: <span class="built_in">Int</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">a = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> b: <span class="built_in">Int</span></span><br><span class="line">b = <span class="number">12</span></span><br><span class="line">b = <span class="number">20</span><span class="comment">//编译器报错 Val cannot be reassigned</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>val 如果未在声明的时候初始化，之后可以初始化一次，之后再赋值编译不通过</p>
<p>var 可以多次赋值。不过只能赋值同种类型的，赋值不同类型编译器会报错。</p>
</blockquote>
<h2 id="when"><a href="#when" class="headerlink" title="when"></a><code>when</code></h2><p>开始一个 <a href="https://legacy.kotlincn.net/docs/reference/control-flow.html#when-%E8%A1%A8%E8%BE%BE%E5%BC%8F">when 表达式</a>（执行其中一个给定分支）<br>替代switch</p>
<h3 id="when可以与else配合使用"><a href="#when可以与else配合使用" class="headerlink" title="when可以与else配合使用"></a>when可以与else配合使用</h3><h2 id="while"><a href="#while" class="headerlink" title="while"></a><code>while</code></h2><p>开始一个 <a href="https://legacy.kotlincn.net/docs/reference/control-flow.html#while-%E5%BE%AA%E7%8E%AF">while 循环</a>（前置条件的循环）</p>
<h2 id="循环while、for、do-while"><a href="#循环while、for、do-while" class="headerlink" title="循环while、for、do-while"></a>循环while、for、do-while</h2><h3 id="in-2"><a href="#in-2" class="headerlink" title="in"></a>in</h3><ul>
<li>in ‘A’..’F’</li>
<li>(a, b) in treeMap集合</li>
<li>!in</li>
</ul>
<h3 id="downTo"><a href="#downTo" class="headerlink" title="downTo"></a>downTo</h3><h3 id="until"><a href="#until" class="headerlink" title="until"></a>until</h3><h3 id="step"><a href="#step" class="headerlink" title="step"></a>step</h3><h1 id="软关键字"><a href="#软关键字" class="headerlink" title="软关键字"></a>软关键字</h1><p>以下符号在适用的上下文中充当关键字，而在其他上下文中可用作标识符：</p>
<h2 id="by"><a href="#by" class="headerlink" title="by"></a><code>by</code></h2><ul>
<li><a href="https://legacy.kotlincn.net/docs/reference/delegation.html">将接口的实现委托给另一个对象</a></li>
<li><a href="https://legacy.kotlincn.net/docs/reference/delegated-properties.html">将属性访问器的实现委托给另一个对象</a></li>
</ul>
<h2 id="catch"><a href="#catch" class="headerlink" title="catch"></a><code>catch</code></h2><p>开始一个<a href="https://legacy.kotlincn.net/docs/reference/exceptions.html">处理指定异常类型</a>的块</p>
<h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a><code>constructor</code></h2><p>声明一个<a href="https://legacy.kotlincn.net/docs/reference/classes.html#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">主构造函数或次构造函数</a></p>
<h2 id="delegate"><a href="#delegate" class="headerlink" title="delegate"></a><code>delegate</code></h2><p>用作<a href="https://legacy.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></p>
<h2 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a><code>dynamic</code></h2><p>引用一个 Kotlin&#x2F;JS 代码中的<a href="https://legacy.kotlincn.net/docs/reference/dynamic-type.html">动态类型</a></p>
<h2 id="field"><a href="#field" class="headerlink" title="field"></a><code>field</code></h2><p>用作<a href="https://legacy.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></p>
<h2 id="file"><a href="#file" class="headerlink" title="file"></a><code>file</code></h2><p>用作<a href="https://legacy.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></p>
<h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a><code>finally</code></h2><p>开始一个<a href="https://legacy.kotlincn.net/docs/reference/exceptions.html">当 try 块退出时总会执行的块</a></p>
<h2 id="get"><a href="#get" class="headerlink" title="get"></a><code>get</code></h2><ul>
<li>声明<a href="https://legacy.kotlincn.net/docs/reference/properties.html#getters-%E4%B8%8E-setters">属性的 getter</a></li>
<li>用作<a href="https://legacy.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></li>
</ul>
<h2 id="import"><a href="#import" class="headerlink" title="import"></a><code>import</code></h2><p><a href="https://legacy.kotlincn.net/docs/reference/packages.html">将另一个包中的声明导入当前文件</a></p>
<h2 id="init"><a href="#init" class="headerlink" title="init"></a><code>init</code></h2><p>开始一个<a href="https://legacy.kotlincn.net/docs/reference/classes.html#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">初始化块</a></p>
<h2 id="lateinit"><a href="#lateinit" class="headerlink" title="lateinit"></a><code>lateinit</code></h2><ul>
<li>只能修饰<code>var</code>可读可写变量</li>
<li>声明的变量为不可控类型</li>
<li>声明的变量不能有初始值</li>
<li>声明的变量不能是基本数据类型</li>
<li>构造器中初始化的属性需要 lateinit 关键字</li>
</ul>
<p>lateinit声明的var变量，使用的时候要用<code>::xxx.isInitialized</code>进行判断是否初始化过了（然后直接进行判空后的处理），否则会抛出<code>UninitializedPropertyAccessException</code>异常</p>
<h2 id="lazy"><a href="#lazy" class="headerlink" title="lazy"></a><code>lazy</code></h2><ul>
<li>只能修饰<code>val</code>常量。（懒加载：初始化方式已确定，只是在使用的时候执行。）</li>
<li></li>
</ul>
<h2 id="param"><a href="#param" class="headerlink" title="param"></a><code>param</code></h2><p>用作<a href="https://legacy.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></p>
<h2 id="property"><a href="#property" class="headerlink" title="property"></a><code>property</code></h2><p>用作<a href="https://legacy.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></p>
<h2 id="receiver"><a href="#receiver" class="headerlink" title="receiver"></a><code>receiver</code></h2><p>用作<a href="https://legacy.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></p>
<h2 id="set"><a href="#set" class="headerlink" title="set"></a><code>set</code></h2><ul>
<li>声明<a href="https://legacy.kotlincn.net/docs/reference/properties.html#getters-%E4%B8%8E-setters">属性的 setter</a></li>
<li>用作<a href="https://legacy.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></li>
</ul>
<h2 id="setparam"><a href="#setparam" class="headerlink" title="setparam"></a><code>setparam</code></h2><p>用作<a href="https://legacy.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></p>
<h2 id="where"><a href="#where" class="headerlink" title="where"></a><code>where</code></h2><p>指定<a href="https://legacy.kotlincn.net/docs/reference/generics.html#%E4%B8%8A%E7%95%8C">泛型类型参数的约束</a></p>
<h1 id="内置函数let、also、with、run、apply"><a href="#内置函数let、also、with、run、apply" class="headerlink" title="内置函数let、also、with、run、apply"></a><a href="https://cloud.tencent.com/developer/article/1591238">内置函数let、also、with、run、apply</a></h1><p><strong>前言</strong></p>
<p>在<code>Kotlin</code>中，有一些用于扩展 &amp; 方便开发者编码的内置函数，能大大提高开发者的开发效率。今天，我将主要讲解的是：</p>
<ul>
<li>let函数</li>
<li>also函数</li>
<li>with函数</li>
<li>run函数</li>
<li>apply函数</li>
</ul>
<h2 id="基础知识：接口回调中Lambda使用"><a href="#基础知识：接口回调中Lambda使用" class="headerlink" title="基础知识：接口回调中Lambda使用"></a>基础知识：接口回调中Lambda使用</h2><p>在Kotlin中可使用Lambda函数简化一些不必要的嵌套接口回调方法</p>
<blockquote>
<p> 注：仅支持<strong>单个</strong>抽象方法回调，多个回调方法不支持。</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// Java接口回调</span></span><br><span class="line">mVar.setEventListener(new ExamEventListener()&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> void onSuccess(Data <span class="keyword">data</span>)&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同等效果的Kotlin接口回调（无使用lambda表达式）</span></span><br><span class="line">mVar.setEventListener(<span class="keyword">object</span>: ExamEventListener&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> void onSuccess(Data <span class="keyword">data</span>)&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kotlin接口回调（使用lambda表达式，仅留下参数）</span></span><br><span class="line">mVar.setEventListener(&#123;</span><br><span class="line">   <span class="keyword">data</span>: Data -&gt;</span><br><span class="line">   <span class="comment">// ... </span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继续简化</span></span><br><span class="line"><span class="comment">// 简化1：借助kotlin的智能类型推导，忽略数据类型</span></span><br><span class="line">mVar.setEventListener(&#123;</span><br><span class="line">   <span class="keyword">data</span> -&gt;</span><br><span class="line">   <span class="comment">// ... </span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化2：若参数无使用，可忽略</span></span><br><span class="line">mVar.setEventListener(&#123;</span><br><span class="line">   <span class="comment">// ... </span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化3：若setEventListener函数最后一个参数是一个函数，可把括号的实现提到圆括号外</span></span><br><span class="line">mVar.setEventListener()&#123;</span><br><span class="line">   <span class="comment">// ... </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化3：若setEventListener函数只有一个参数 &amp; 无使用到，可省略圆括号</span></span><br><span class="line">mVar.setEventListener&#123;</span><br><span class="line">   <span class="comment">// ... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面，我将讲解<code>Kotlin</code>里提供用于扩展 &amp; 方便开发者编码的几个有用内置函数：let函数、also函数、with函数、 run函数、apply函数。</p>
<h2 id="let函数"><a href="#let函数" class="headerlink" title="let函数"></a>let函数</h2><p><strong>定义</strong></p>
<ul>
<li>一个作用域函数</li>
</ul>
<p><strong>作用</strong></p>
<ul>
<li>定义一个变量在一个特定的作用域范围内</li>
<li>避免写一些判断<code>null</code>的操作</li>
</ul>
<p><strong>应用场景</strong></p>
<ul>
<li>明确一个变量所处特定的作用域范围内可使用</li>
<li>针对一个可<code>null</code>的对象统一做判空处理</li>
</ul>
<p><strong>使用方法</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 作用1：使用it替代object对象去访问其公有的属性 &amp; 方法</span></span><br><span class="line"><span class="keyword">object</span>.let&#123;</span><br><span class="line">    it.todo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作用2：判断object为null的操作</span></span><br><span class="line"><span class="keyword">object</span>?.let&#123;<span class="comment">//表示object不为null的条件下，才会去执行let函数体</span></span><br><span class="line">    it.todo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：返回值 = 最后一行 / return的表达式</span></span><br></pre></td></tr></table></figure>

<p><strong>使用示例</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用Java</span></span><br><span class="line"><span class="keyword">if</span>( mVar != <span class="literal">null</span> )&#123;</span><br><span class="line">    mVar.function1();</span><br><span class="line">    mVar.function2();</span><br><span class="line">    mVar.function3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用kotlin（无使用let函数）</span></span><br><span class="line">mVar?.function1()</span><br><span class="line">mVar?.function2()</span><br><span class="line">mVar?.function3()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用kotlin（使用let函数）</span></span><br><span class="line"><span class="comment">// 方便了统一判空的处理 &amp; 确定了mVar变量的作用域</span></span><br><span class="line">mVar?.let &#123;</span><br><span class="line">    it.function1()</span><br><span class="line">    it.function2()</span><br><span class="line">    it.function3()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="also函数"><a href="#also函数" class="headerlink" title="also函数"></a>also函数</h2><p><strong>作用 &amp; 应用场景</strong></p>
<p>类似let函数，但区别在于返回值：</p>
<ul>
<li>let函数：返回值 &#x3D; 最后一行 &#x2F; return的表达式</li>
<li>also函数：返回值 &#x3D; 传入的对象的本身</li>
</ul>
<p><strong>使用示例</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let函数</span></span><br><span class="line"><span class="keyword">var</span> result = mVar.let &#123;</span><br><span class="line">    it.function1()</span><br><span class="line">    it.function2()</span><br><span class="line">    it.function3()</span><br><span class="line">    <span class="number">999</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最终结果 = 返回999给变量result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// also函数</span></span><br><span class="line"><span class="keyword">var</span> result = mVar.also &#123;</span><br><span class="line">    it.function1()</span><br><span class="line">    it.function2()</span><br><span class="line">    it.function3()</span><br><span class="line">    <span class="number">999</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最终结果 = 返回一个mVar对象给变量result</span></span><br></pre></td></tr></table></figure>



<h2 id="with函数"><a href="#with函数" class="headerlink" title="with函数"></a>with函数</h2><p><strong>作用</strong></p>
<p>调用同一个对象的多个方法 &#x2F; 属性时，可以省去对象名重复，直接调用方法名 &#x2F; 属性即可</p>
<p><strong>应用场景</strong></p>
<p>需要调用同一个对象的多个方法 &#x2F; 属性</p>
<p><strong>使用方法</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">with(<span class="keyword">object</span>)&#123;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值 = 函数块的最后一行 / return表达式</span></span><br></pre></td></tr></table></figure>

<p><strong>使用示例</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此处要调用people的name 和 age属性</span></span><br><span class="line"><span class="comment">// kotlin</span></span><br><span class="line"><span class="keyword">val</span> people = People(<span class="string">&quot;carson&quot;</span>, <span class="number">25</span>)</span><br><span class="line">with(people) &#123;</span><br><span class="line">    println(<span class="string">&quot;my name is <span class="variable">$name</span>, I am <span class="variable">$age</span> years old&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java</span></span><br><span class="line">User peole = new People(<span class="string">&quot;carson&quot;</span>, <span class="number">25</span>);</span><br><span class="line">String var1 = <span class="string">&quot;my name is &quot;</span> + peole.name + <span class="string">&quot;, I am &quot;</span> + peole.age + <span class="string">&quot; years old&quot;</span>;</span><br><span class="line">System.<span class="keyword">out</span>.println(var1);</span><br></pre></td></tr></table></figure>



<h2 id="run函数"><a href="#run函数" class="headerlink" title="run函数"></a>run函数</h2><p><strong>作用 &amp; 应用场景</strong></p>
<p>结合了let、with两个函数的作用，即：</p>
<ol>
<li>调用同一个对象的多个方法 &#x2F; 属性时，可以省去对象名重复，直接调用方法名 &#x2F; 属性即可</li>
<li>定义一个变量在特定作用域内</li>
<li>统一做判空处理</li>
</ol>
<p><strong>使用方法</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span>.run&#123;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回值 = 函数块的最后一行 / return表达式</span></span><br></pre></td></tr></table></figure>

<p><strong>使用示例</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此处要调用people的name 和 age属性，且要判空</span></span><br><span class="line"><span class="comment">// kotlin</span></span><br><span class="line"><span class="keyword">val</span> people = People(<span class="string">&quot;carson&quot;</span>, <span class="number">25</span>)</span><br><span class="line">people?.run&#123;</span><br><span class="line">    println(<span class="string">&quot;my name is <span class="variable">$name</span>, I am <span class="variable">$age</span> years old&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java</span></span><br><span class="line">User peole = new People(<span class="string">&quot;carson&quot;</span>, <span class="number">25</span>);</span><br><span class="line">String var1 = <span class="string">&quot;my name is &quot;</span> + peole.name + <span class="string">&quot;, I am &quot;</span> + peole.age + <span class="string">&quot; years old&quot;</span>;</span><br><span class="line">System.<span class="keyword">out</span>.println(var1);</span><br></pre></td></tr></table></figure>



<h2 id="apply函数"><a href="#apply函数" class="headerlink" title="apply函数"></a>apply函数</h2><p><strong>作用 &amp; 应用场景</strong></p>
<p>与run函数类似，但区别在于返回值：</p>
<ul>
<li>run函数返回最后一行的值 &#x2F; 表达式</li>
<li>apply函数返回传入的对象的本身</li>
</ul>
<p><strong>应用场景</strong></p>
<p>对象实例初始化时需要对对象中的属性进行赋值 &amp; 返回该对象</p>
<p><strong>使用示例</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// run函数</span></span><br><span class="line"><span class="keyword">val</span> people = People(<span class="string">&quot;carson&quot;</span>, <span class="number">25</span>)</span><br><span class="line"><span class="keyword">val</span> result = people?.run&#123;</span><br><span class="line">    println(<span class="string">&quot;my name is <span class="variable">$name</span>, I am <span class="variable">$age</span> years old&quot;</span>)</span><br><span class="line">    <span class="number">999</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最终结果 = 返回999给变量result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// applyh</span></span><br><span class="line"><span class="keyword">val</span> people = People(<span class="string">&quot;carson&quot;</span>, <span class="number">25</span>)</span><br><span class="line"><span class="keyword">val</span> result = people?.apply&#123;</span><br><span class="line">    println(<span class="string">&quot;my name is <span class="variable">$name</span>, I am <span class="variable">$age</span> years old&quot;</span>)</span><br><span class="line">    <span class="number">999</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最终结果 = 返回一个people对象给变量result</span></span><br></pre></td></tr></table></figure>

<p>至此，关于<code>Kotlin</code>里提供用于扩展 &amp; 方便开发者编码的几个有用内置函数讲解完毕。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table>
<thead>
<tr>
<th></th>
<th>可提前判空</th>
<th>可返回值</th>
<th>可重命名入参</th>
<th>定义inline的结构</th>
<th>返回值</th>
<th>是扩展函数</th>
<th>应用场景</th>
</tr>
</thead>
<tbody><tr>
<td>let</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td><code>fun &lt;T,R&gt; T.let(block: (T)-&gt;R): R=block(this)</code></td>
<td>闭包形式返回</td>
<td>Y</td>
<td>1. 明确一个变量所处特定的作用域范围内可使用<br>2. 针对一个可null的对象统一做判空处理</td>
</tr>
<tr>
<td>also</td>
<td>Y</td>
<td><strong>N</strong>(返回自身)</td>
<td>Y</td>
<td><code>fun &lt;T&gt; T.also(block: (T)-&gt;Unit): T&#123;block(this);return this&#125;</code></td>
<td>返回this</td>
<td>Y</td>
<td>同上</td>
</tr>
<tr>
<td>run</td>
<td>Y</td>
<td>Y</td>
<td><strong>N</strong></td>
<td><code>fun &lt;T,R&gt; T.run(block: T.()-&gt;R): R=block()</code></td>
<td>闭包形式返回</td>
<td>Y</td>
<td>1. 调用一个对象的多个方法&#x2F;属性时，可省去对象名重复，直接调用方法名&#x2F;属性即可<br>2. 定义一个变量在特定作用域内<br>3. 统一做判空处理</td>
</tr>
<tr>
<td>apply</td>
<td>Y</td>
<td><strong>N</strong>(返回自身)</td>
<td><strong>N</strong></td>
<td><code>fun &lt;T&gt; T.apply(block: T.()-&gt;Unit): T&#123;block();return this&#125;</code></td>
<td>返回this</td>
<td>Y</td>
<td>对象实例初始化时需要对对象中的属性进行赋值&amp;返回该对象</td>
</tr>
<tr>
<td>with</td>
<td><strong>N</strong></td>
<td>Y</td>
<td><strong>N</strong></td>
<td><code>fun &lt;T,R&gt; with(receiver: T,block: T.()-&gt;R): R=receiver.block()</code></td>
<td>闭包形式返回</td>
<td><strong>N</strong></td>
<td>需要调用同一个对象的多个方法&#x2F;属性</td>
</tr>
</tbody></table>
<p><img src="/posts/981932355/with%E3%80%81run%E3%80%81let%E3%80%81apply%E3%80%81also.png" alt="with、run、let、apply、also"></p>
<h1 id="inline、noinline、crossinline的区别"><a href="#inline、noinline、crossinline的区别" class="headerlink" title="inline、noinline、crossinline的区别"></a><a href="https://juejin.cn/post/6844903730450530311">inline、noinline、crossinline的区别</a></h1><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="companion"><a href="#companion" class="headerlink" title="companion"></a>companion</h2><p><a href="https://www.jianshu.com/p/14db81e1576a">Kotlin中的object 与companion object的区别</a></p>
<ol>
<li><p>object</p>
<p>对象表达式；对象声明</p>
<ul>
<li><p>对象表达式</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> tv = findViewById&lt;TextView&gt;(R.id.tv)</span><br><span class="line">tv.setOnClickListener(<span class="keyword">object</span>: OnClickListener&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(p0: <span class="type">View</span>?)</span></span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">&quot;吐司内容&quot;</span>, Toast.LENGTH_SHORT)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>对象声明</p>
<p>用<code>object</code>修饰的类为静态类，里面的方法和变量都是<code>静态</code>的</p>
<ul>
<li><p>直接声明类</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> DemoManager&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> TAG = <span class="string">&quot;DemoManager&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;此时 object 表示 直接声明类&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>声明静态内部类</p>
<p>类内部的对象声明，没有被<code>inner</code>修饰的内部类都是静态的</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoManager</span></span>&#123;</span><br><span class="line">    <span class="keyword">object</span> MyObject&#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;此时 object 表示 声明静态内部类&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//kotlin中调用</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyObject.a()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>java中调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MyObject.INSTANCE.a();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>companion object</p>
<p>修饰为伴生对象。伴生对象在类中只能存在一个，类似于java中的<code>静态方法</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoManager</span></span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span> TAG = <span class="string">&quot;DemoManager&quot;</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;此时 companion object 表示伴生对象&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//kotlin中调用</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        b()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>java中调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DemoManager.Companion.b();</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="internal"><a href="#internal" class="headerlink" title="internal"></a><a href="https://www.jianshu.com/p/ef3cab8c9226">internal</a></h2><p>internal修饰类的方法，表示这个类方法只适合当前module使用，其他module调用不到这个方法</p>
<h2 id="sealed"><a href="#sealed" class="headerlink" title="sealed"></a><a href="https://www.jianshu.com/p/4c26affb1161">sealed</a></h2><ol>
<li>密封类和它的子类必须定义在一个文件中</li>
<li>密封类是不能被初始化的</li>
</ol>
<p>理解：父类只是一个组织者（对于子类来说）（除了这个功能他什么都做不了）甚至初始化都做不到，具体可以出面做事情的是子类</p>
<h2 id="泛型in、out、where"><a href="#泛型in、out、where" class="headerlink" title="泛型in、out、where"></a><a href="https://book.kotlincn.net/text/generics.html">泛型in、out、where</a></h2>]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>加密解密Hash</title>
    <url>/posts/1174135962/</url>
    <content><![CDATA[<ul>
<li>编码解码 Encoding &amp; Decoding</li>
<li>加密解密 Encryption &amp; Decryption</li>
<li>数字签名 Digital Signature</li>
<li>压缩与解压缩 Compression &amp; Decompression 序列列化 Serialization</li>
<li>哈希 Hash 字符集 Charset</li>
</ul>
<blockquote>
<p>相关词:MD5、SHA1、RSA、DSA、AES、BASE64、encoded URL、Unicode、UTF-8、GBK、ISO-8859-1……</p>
</blockquote>
<h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><h2 id="古典密码学"><a href="#古典密码学" class="headerlink" title="古典密码学"></a>古典密码学</h2><ul>
<li>起源:古代战争——古典密码学</li>
<li>移位式加密:密码棒<ul>
<li>加密算法:缠绕⽊木棒后书写</li>
<li>密钥:⽊木棒的尺⼨寸规格</li>
</ul>
</li>
<li>替换式加密<ul>
<li>加密算法：替换文字</li>
<li>秘钥：码表</li>
</ul>
</li>
</ul>
<h2 id="现代密码学"><a href="#现代密码学" class="headerlink" title="现代密码学"></a>现代密码学</h2><ul>
<li>不止可以用于文字内容，还可以用于各种二进制数据</li>
<li>对称加密<ul>
<li>原理：使用秘钥和加密算法对数据进行转换，得到无意义数据即为密文；使用秘钥和解密算法对密文进行逆向转换，得到元数据。</li>
<li>经典算法：DES，AES</li>
</ul>
</li>
<li>非对称加密<ul>
<li>原理：使用公钥对数据进行加密得到密文；使用秘钥对数据进行解密得到原数据（PS：接收方的公钥公布出去；发送方获取到公钥后发送用公钥加密后的密文；接收方接收到密文，用私钥进行解密得到明文）</li>
<li></li>
</ul>
</li>
</ul>
<h1 id="非对称加密技术：共享密钥"><a href="#非对称加密技术：共享密钥" class="headerlink" title="非对称加密技术：共享密钥"></a><a href="https://juejin.im/post/6844903587693199374">非对称加密技术：共享密钥</a></h1><p>网络早期共享秘钥Diffie Hellman算法所采用的计算方式：<strong>模运算+幂运算</strong></p>
]]></content>
      <categories>
        <category>其他IT</category>
      </categories>
      <tags>
        <tag>hencoder</tag>
      </tags>
  </entry>
  <entry>
    <title>多种语言</title>
    <url>/posts/2955316817/</url>
    <content><![CDATA[<h1 id="学习语言学习其优点"><a href="#学习语言学习其优点" class="headerlink" title="学习语言学习其优点"></a>学习语言学习其优点</h1><h2 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1.面向对象"></a>1.面向对象</h2><p>比如说封装、继承、多态，Prototype，Mixin，Traits，Duck Typing 等<br>每个语言都一样，只在语法层面有所区别。</p>
<h2 id="2-函数式编程"><a href="#2-函数式编程" class="headerlink" title="2.函数式编程"></a>2.函数式编程</h2><p>JVM 的 Lisp:Clojure</p>
<h2 id="3-元编程"><a href="#3-元编程" class="headerlink" title="3.元编程"></a>3.元编程</h2><p>Java 的动态代理，CgLib 这些工具初步具备了元编程的能力，可以在运行时创建新的类；而 Ruby，Python 的开放性让它们的元编程更强一些，可以在运行时修改现有类，但是要想真正地理解元编程，还得去看 Lisp 的宏。<strong>尤其是，你要感受到代码即数据的强大力量</strong></p>
<h2 id="4-并发模型"><a href="#4-并发模型" class="headerlink" title="4.并发模型"></a>4.并发模型</h2><p>Java 主要对线程做支持，还要学习其他并发模型，比如：Python有协程，Go有Go routine，Erlang采用的是 Actor。在这些并发模型中，还得考虑同步与互斥，锁，死锁，软件事物内存等技术。</p>
<h2 id="5-虚拟机和垃圾回收"><a href="#5-虚拟机和垃圾回收" class="headerlink" title="5.虚拟机和垃圾回收"></a>5.虚拟机和垃圾回收</h2><p>JVM 垃圾回收是个集大成者</p>
<h2 id="6-静态类型，动态类型，类型推导"><a href="#6-静态类型，动态类型，类型推导" class="headerlink" title="6.静态类型，动态类型，类型推导"></a>6.静态类型，动态类型，类型推导</h2><ul>
<li>静态类型的语言在编译器就能确定类型，编译器能帮忙发现错误，做些优化，但是会增加代码量；</li>
<li>动态类型是在运行期才能发现错误。所谓动态一时爽，重构火葬场。</li>
<li>类型推导在 Java10 就引入了</li>
</ul>
<h2 id="7-抽象语法树-AST"><a href="#7-抽象语法树-AST" class="headerlink" title="7.抽象语法树(AST)"></a>7.抽象语法树(AST)</h2><p>几乎所有的主流编程语言，都要转换成AST 这么一个形式。有些语言还可以对 AST 做一些操作。</p>
<h2 id="8-指针"><a href="#8-指针" class="headerlink" title="8.指针"></a>8.指针</h2><p>指针是 C 语言的精华，虽然现在的 Java，Python，Ruby 等已经去掉了，但理解指针对理解计算机的底层运作大有好处。</p>
<h2 id="9-其他"><a href="#9-其他" class="headerlink" title="9.其他"></a>9.其他</h2><p>错误处理（异常），泛型，同步异步，序列化等</p>
<h1 id="gt-、-x3D-gt-、-等符号的比对"><a href="#gt-、-x3D-gt-、-等符号的比对" class="headerlink" title="-&gt;、&#x3D;&gt;、$等符号的比对"></a>-&gt;、&#x3D;&gt;、$等符号的比对</h1><table>
<thead>
<tr>
<th>符号</th>
<th>语言</th>
</tr>
</thead>
<tbody><tr>
<td><code>a1,a2 -&gt; code</code>或<code>int a,String b -&gt; code</code></td>
<td>groovy 传参</td>
</tr>
<tr>
<td><code>when(e)&#123; a,b -&gt; code [else-&gt;code]&#125;</code>或<code>when(e)&#123;is a -&gt; code [else-&gt;code]&#125;</code></td>
<td>kotlin分支结构</td>
</tr>
<tr>
<td><code>（参数列表）-&gt; code</code>或<code>(参数列表)-&gt;&#123;code&#125;</code></td>
<td>flutter</td>
</tr>
<tr>
<td><code>a1,a2 =&gt; &#123;code&#125;</code>或<code>()=&gt;&#123;code&#125;</code></td>
<td>微信小程序（js的箭头函数）</td>
</tr>
<tr>
<td><code>$name</code>或<code>$&#123;name&#125;</code></td>
<td>groovy字符串内取值</td>
</tr>
<tr>
<td><code>$变量</code>或<code>$&#123;对象.name&#125;</code>或<code>$&#123;数组[index]&#125;</code>或<code>$&#123;表达式&#125;</code></td>
<td>kotlin字符串内取值</td>
</tr>
<tr>
<td><code>$name</code>或<code>$&#123;对象.name&#125;</code>或<code>$对象.$对象</code>或<code>$&#123;数组[index]&#125;</code></td>
<td>flutter字符串内取值</td>
</tr>
<tr>
<td><code>&#123;&#123;name&#125;&#125;</code></td>
<td>微信小程序 数据绑定</td>
</tr>
</tbody></table>
<h1 id="Python和ES6语法差别"><a href="#Python和ES6语法差别" class="headerlink" title="Python和ES6语法差别"></a>Python和ES6语法差别</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><table>
<thead>
<tr>
<th></th>
<th>JavaScript</th>
<th>Python</th>
</tr>
</thead>
<tbody><tr>
<td>Boolean</td>
<td>true false</td>
<td>True False</td>
</tr>
<tr>
<td>Nothing</td>
<td>null</td>
<td>None</td>
</tr>
<tr>
<td>Empty Value</td>
<td>undefined</td>
<td></td>
</tr>
<tr>
<td>Number</td>
<td>Number</td>
<td>int float long complex</td>
</tr>
<tr>
<td>Sequences</td>
<td>Array</td>
<td>List tuple byte array buffer xrange</td>
</tr>
<tr>
<td>Key Value Store</td>
<td>Object</td>
<td>Dictionary</td>
</tr>
</tbody></table>
<blockquote>
<p>两者都是动态类型，但是 <code>python</code> 连接时并不会自动转换类型</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JavaScript</span></span><br><span class="line"><span class="keyword">let</span> coered = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> concatenated = coered + <span class="string">&#x27;string&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//Python</span><br><span class="line">not_coerced = <span class="number">1</span></span><br><span class="line">concatenated = not_coerced + <span class="string">&#x27;string&#x27;</span> //直接报错：TypeError： cannot concatenate <span class="string">&#x27;str&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;int&#x27;</span> objects</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//Python 只有提前把num转换为字符串类型才能正确运行</span><br><span class="line">not_coerced = <span class="number">1</span></span><br><span class="line">concatenated = <span class="built_in">str</span>(not_coerced) + <span class="string">&#x27;string&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Funtions-or-methods"><a href="#Funtions-or-methods" class="headerlink" title="Funtions or methods?"></a><code>Funtions</code> or <code>methods</code>?</h2><p>在 JavaScript 和 Python 中，函数和条件的结构极为相似。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JavaScript</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drSeuss</span>(<span class="params">catInTheHat, thing1, thing2</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(catInTheHat ==<span class="literal">true</span> &amp;&amp; thing1 == <span class="literal">true</span> &amp;&amp; thing2 == <span class="literal">true</span>)&#123;</span><br><span class="line">    co¬nsole.<span class="title function_">log</span>(<span class="string">&#x27;is cray&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(catInTheHat != <span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;boring&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;so boring&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//Python</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dr_seuss</span>(<span class="params">cat_in_the_hat, thing1, thing2</span>):</span><br><span class="line">  <span class="keyword">if</span> cat_in_the_hat == <span class="literal">True</span> <span class="keyword">and</span> thing1 == <span class="literal">True</span> <span class="keyword">and</span> thing2 == <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;is cray&#x27;</span></span><br><span class="line">  <span class="keyword">elif</span> cat_in_the_hat != <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;boring&#x27;</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;so boring&#x27;</span></span><br></pre></td></tr></table></figure>

<p>但在<code>JavaScript</code>中，“<code>methods</code>”的通俗定义是指语言规范中内置的方法，例如：<code>Function.prototype.apply（）</code>。</p>
<p>在<code>MDN</code>上有对二者的解释：</p>
<p>在大多数方面，<code>Functions</code>和<code>methods</code>相同，但有两个主要区别：</p>
<ul>
<li><code>methods</code>可以被隐式传递到调用该<code>methods</code>的对象上。</li>
<li><code>methods</code>能够对类中包含的数据进行操作。</li>
</ul>
<p>然鹅，在<code>JavaScript</code>中，“类”只是语法糖的存在，稍后我们再进行对比。</p>
<h3 id="3-模板字符串"><a href="#3-模板字符串" class="headerlink" title="3. 模板字符串"></a>3. 模板字符串</h3><p>在模板字符串上，<code>JavaScript</code>之前是领先于<code>python</code>的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// JavaScript</span><br><span class="line"><span class="built_in">let</span> exclamation = <span class="string">&#x27;Whoa!&#x27;</span>;</span><br><span class="line"><span class="built_in">let</span> sentence = `They are really similar to Python.`;</span><br><span class="line"> </span><br><span class="line">console.log(`Template Literals: <span class="variable">$&#123;exclamation&#125;</span> <span class="variable">$&#123;sentence&#125;</span>`);</span><br><span class="line">复制代码</span><br><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;打印: &#123;&#125; &#123;&#125;&#x27;</span>.format(<span class="string">&#x27;Whoa.&#x27;</span>, <span class="string">&#x27;Quite!&#x27;</span>)</span><br><span class="line"><span class="comment"># 打印: Yup. Quite!</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><code>&#123;&#125;</code>充当占位符。 这种语法被诟病颇多，于是在后来的<code>Python3.6</code>版本中，又提供了一种字符串格式化语法——<code>f-strings</code>。</p>
<p>直接对比：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">age = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;他叫 <span class="subst">&#123;name&#125;</span>, <span class="subst">&#123;age&#125;</span> 岁&quot;</span>)</span><br><span class="line"><span class="comment"># &quot;他叫Tom, 3 岁&quot;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="4-参数默认值"><a href="#4-参数默认值" class="headerlink" title="4. 参数默认值"></a>4. 参数默认值</h3><p><code>JavaScript</code>再次完美“借鉴”<code>Python</code>:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> JavaScript</span><br><span class="line"><span class="keyword">function</span> nom(food=<span class="string">&quot;ice cream&quot;</span>) &#123;</span><br><span class="line">  console.log(`Time to eat <span class="variable">$&#123;food&#125;</span>`);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">nom();<span class="regexp">//</span> Time to eat ice cream</span><br><span class="line">复制代码</span><br><span class="line"><span class="comment"># Python</span></span><br><span class="line">def nom(food=<span class="string">&quot;ice cream&quot;</span>):</span><br><span class="line">  print <span class="string">&#x27;Time to eat &#123;&#125;&#x27;</span>.format(food)</span><br><span class="line"> </span><br><span class="line">nom() <span class="comment"># Time to eat ice cream</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="5-其余参数和-args"><a href="#5-其余参数和-args" class="headerlink" title="5. 其余参数和* args"></a>5. 其余参数和<code>* args</code></h3><p><code>Rest</code>参数语法，使我们可以将不定数量的参数表示为数组，传入函数中。</p>
<ul>
<li>在<code>Python</code>中，它们称为<code>* args</code></li>
<li>在<code>JavaScript</code>中<code>...xxx</code>就表示为其余参数。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JavaScript</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">joke</span>(<span class="params">question, ...phrases</span>) </span>&#123;</span><br><span class="line">  console.<span class="title function_ invoke__">log</span>(question);</span><br><span class="line">  <span class="keyword">for</span> (let i = <span class="number">0</span>; i &gt; phrases.length; i++) &#123;</span><br><span class="line">    console.<span class="title function_ invoke__">log</span>(phrases[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let es6Joke = <span class="string">&quot;Why does JS single out one parameter?&quot;</span></span><br><span class="line"><span class="title function_ invoke__">joke</span>(es6Joke, <span class="string">&quot;Because it doesn&#x27;t&quot;</span>, <span class="string">&#x27;really like&#x27;</span>, <span class="string">&#x27;all the REST of them!&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Why does JS single out one parameter?</span></span><br><span class="line"><span class="comment">// Because it doesn&#x27;t</span></span><br><span class="line"><span class="comment">// really like</span></span><br><span class="line"><span class="comment">// all the REST of them!</span></span><br><span class="line">复制代码</span><br><span class="line"><span class="comment"># Python</span></span><br><span class="line">def <span class="title function_ invoke__">pirate_joke</span>(question, *args):</span><br><span class="line">  <span class="keyword">print</span> question</span><br><span class="line">  <span class="keyword">for</span> arg in args:</span><br><span class="line">    <span class="keyword">print</span> arg</span><br><span class="line"> </span><br><span class="line">python_joke = <span class="string">&quot;What&#x27;s a Pyrate&#x27;s favorite parameter?&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">pirate_joke</span>(python_joke, <span class="string">&quot;*args!&quot;</span>, <span class="string">&quot;*arrgs!&quot;</span>, <span class="string">&quot;*arrrgs!&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># What&#x27;s a Pyrate&#x27;s favorite parameter?</span></span><br><span class="line"><span class="comment"># *args!</span></span><br><span class="line"><span class="comment"># *arrgs!</span></span><br><span class="line"><span class="comment"># *arrrgs!</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="6-Classes：类"><a href="#6-Classes：类" class="headerlink" title="6. Classes：类"></a>6. <code>Classes</code>：类</h3><p>众所周知，<code>ES6</code>类实际上是语法糖。 <code>Python</code>具有内置的类，可以快速，轻松地进行面向对象的编程。</p>
<p>而<code>JavaScript</code>原型链继承，是每个前端的必须课。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JavaScript</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span> </span>&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">this</span>.neocortex = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Mammal</span> </span>&#123;</span><br><span class="line">  constructor(name, years) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.years = years;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  eat(food) &#123;</span><br><span class="line">    console.log(&#x27;nom &#x27; + food);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br><span class="line"># <span class="type">Python</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span>(<span class="params">object</span>)</span>:</span><br><span class="line">  neo_cortex = <span class="type">True</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params"><span class="type">Mammal</span></span>)</span>:</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span></span>(self, name, years):</span><br><span class="line">    self.name = name</span><br><span class="line">    self.years = years</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eat</span></span>(food):</span><br><span class="line">    print &#x27;nom %s&#x27; % (food)</span><br><span class="line"> </span><br><span class="line">fry_cat = <span class="type">Cat</span>(&#x27;<span class="type">Fry</span>&#x27;, <span class="number">7</span>)</span><br><span class="line">fry_cat.eat(&#x27;steak&#x27;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>平心而论，<code>Python</code>的写法更优雅。。。</p>
<h3 id="7-Modules-and-import：模块"><a href="#7-Modules-and-import：模块" class="headerlink" title="7. Modules and import：模块"></a>7. <code>Modules and import</code>：模块</h3><p><code>ES6</code>的模块语言借鉴于<code>python</code>，却优秀于它。 两者之间有一些区别：</p>
<ol>
<li><code>JavaScript</code>导入是静态的；<code>Python</code>是动态的。</li>
<li><code>JavaScript</code>模块必须显式导出。在<code>Python</code>中，所有模块均可导入。</li>
<li><code>JavaScript</code>具有默认导出的概念。<code>Python</code>没有。</li>
</ol>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># python</span><br><span class="line"><span class="keyword">import</span> mymodule</span><br><span class="line">mymodule.myfunc()</span><br><span class="line">复制代码</span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myalias <span class="keyword">from</span> <span class="string">&quot;./mymodule&quot;</span>;</span><br><span class="line">myalias.myfunc();</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h4 id="1-导入分模块"><a href="#1-导入分模块" class="headerlink" title="1. 导入分模块"></a>1. 导入分模块</h4><p>在<code>javascript</code>中，我们想导入分模块直接解构赋值就可以了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">import</span> &#123; myvar, myfunc &#125; <span class="keyword">from</span> <span class="string">&quot;./mymodule&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myvar);</span><br><span class="line"><span class="title function_">myfunc</span>();</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>而在<code>python</code>，其语义则相反：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="keyword">from</span> mymodule <span class="keyword">import</span> myvar, myfunc</span><br><span class="line"><span class="built_in">print</span> myvar</span><br><span class="line">myfunc()</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h4 id="2-导出空函数"><a href="#2-导出空函数" class="headerlink" title="2. 导出空函数"></a>2. 导出空函数</h4><p>如何想导出一段空函数，<code>python</code>需要用到“<code>pass</code>“关键词占位，避免运行出错。 mymodule.py:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># python</span></span><br><span class="line"><span class="function">def <span class="title">myfunc</span>(): pass</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// javascript</span></span></span><br><span class="line"><span class="function">export function <span class="title">myfunc</span>()</span> &#123;&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>更多详细对比可以看这篇： <a href="https://link.juejin.cn/?target=https://www.saltycrane.com/blog/2015/12/modules-and-import-es6-python-developers/">Modules and import in ES6 for Python developers</a></p>
]]></content>
      <categories>
        <category>其他IT</category>
      </categories>
      <tags>
        <tag>其他IT知识</tag>
      </tags>
  </entry>
  <entry>
    <title>UI-Canvas</title>
    <url>/posts/55855980/</url>
    <content><![CDATA[<h1 id="Bitmap围绕一个点进行旋转"><a href="#Bitmap围绕一个点进行旋转" class="headerlink" title="Bitmap围绕一个点进行旋转"></a>Bitmap围绕一个点进行旋转</h1><p>在项目中需要使用定位功能，也就是一个点围绕一个圆心进行旋转，查看了<code>canvas</code>的函数也就只有一个 <code>canvas.drawBitmap(bitmap, matrix, paint)</code>通过使用<code>Matrix</code>来实现旋转，这里实现一个<code>demo</code>，功能就是小原点顺时针绘制一个原然后逆时针撤销这个圆，通过<code>Timer</code>来实现。代码如下:</p>
<h2 id="Surface-java实现绘制图形的类"><a href="#Surface-java实现绘制图形的类" class="headerlink" title="Surface.java实现绘制图形的类"></a>Surface.java实现绘制图形的类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Matrix;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.PixelFormat;</span><br><span class="line"><span class="keyword">import</span> android.graphics.PorterDuff.Mode;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.SurfaceHolder;</span><br><span class="line"><span class="keyword">import</span> android.view.SurfaceView;</span><br><span class="line"><span class="keyword">import</span> android.view.SurfaceHolder.Callback;</span><br><span class="line"><span class="meta">@SuppressLint(&quot;HandlerLeak&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Surface</span> <span class="keyword">extends</span> <span class="title class_">SurfaceView</span> <span class="keyword">implements</span> <span class="title class_">Callback</span>&#123;</span><br><span class="line">    Bitmap bmp;</span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line">    <span class="keyword">private</span> SurfaceHolder mHolder;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Surface</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        mHolder = getHolder();</span><br><span class="line">        mHolder.addCallback(<span class="built_in">this</span>);</span><br><span class="line">        mPaint = <span class="keyword">new</span> <span class="title class_">Paint</span>();</span><br><span class="line">        mPaint.setColor(Color.GREEN);</span><br><span class="line">        mPaint.setAntiAlias(<span class="literal">true</span>);<span class="comment">//抗锯齿</span></span><br><span class="line">        setFocusable(<span class="literal">true</span>);</span><br><span class="line">        setFocusableInTouchMode(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//        setZOrderOnTop(true);</span></span><br><span class="line">        <span class="comment">//        mHolder.setFormat(PixelFormat.TRANSPARENT);//设置背景透明</span></span><br><span class="line">        bmp = BitmapFactory.decodeResource(getResources(), R.drawable.camera_r_local);</span><br><span class="line">        bmp = Bitmap.createScaledBitmap(bmp, <span class="number">15</span>, <span class="number">15</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    canvas_ok();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">super</span>.handleMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">canvas_ok</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Canvas</span> <span class="variable">canvas</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            canvas = mHolder.lockCanvas();</span><br><span class="line">            canvas.drawColor(Color.TRANSPARENT, Mode.CLEAR);<span class="comment">//清除屏幕</span></span><br><span class="line">            <span class="comment">//          canvas.save();</span></span><br><span class="line">            <span class="type">Matrix</span> <span class="variable">matrix</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">            matrix.postTranslate(<span class="number">130</span>, <span class="number">0</span>);</span><br><span class="line">            matrix.postRotate(degree, <span class="number">130</span> ,<span class="number">130</span>);</span><br><span class="line">            canvas.drawBitmap(bmp, matrix, mPaint);</span><br><span class="line">            <span class="comment">//          canvas.restore();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(canvas != <span class="literal">null</span>) &#123;</span><br><span class="line">                mHolder.unlockCanvasAndPost(canvas);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">degree</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">surfaceCreated</span><span class="params">(SurfaceHolder holder)</span> &#123;</span><br><span class="line">        canvas_ok();</span><br><span class="line">        timer.schedule(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    degree++;</span><br><span class="line">                    <span class="keyword">if</span> (degree == <span class="number">360</span>) &#123;</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    degree--;</span><br><span class="line">                    <span class="keyword">if</span>(degree == -<span class="number">360</span> || degree == <span class="number">0</span>)&#123;</span><br><span class="line">                        flag = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Log.e(<span class="string">&quot;flag&quot;</span>, degree+<span class="string">&quot;  : &quot;</span>+flag);</span><br><span class="line">                handler.sendEmptyMessage(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">surfaceChanged</span><span class="params">(SurfaceHolder holder, <span class="type">int</span> format, <span class="type">int</span> width,</span></span><br><span class="line"><span class="params">                               <span class="type">int</span> height)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">surfaceDestroyed</span><span class="params">(SurfaceHolder holder)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer != <span class="literal">null</span>) &#123;</span><br><span class="line">            timer.cancel();</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Main7-java是主类"><a href="#Main7-java是主类" class="headerlink" title="Main7.java是主类"></a>Main7.java是主类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.RelativeLayout;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main7</span> <span class="keyword">extends</span> <span class="title class_">Activity</span>&#123;</span><br><span class="line">    Surface surface;</span><br><span class="line">    RelativeLayout.LayoutParams laParams;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        surface = <span class="keyword">new</span> <span class="title class_">Surface</span>(<span class="built_in">this</span>);</span><br><span class="line">        laParams = <span class="keyword">new</span> <span class="title class_">RelativeLayout</span>.LayoutParams(<span class="number">260</span>,  <span class="number">260</span>);</span><br><span class="line">        setContentView(surface, laParams);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓代码片段UI</tag>
      </tags>
  </entry>
  <entry>
    <title>UI-CheckBox</title>
    <url>/posts/c91d7a26/</url>
    <content><![CDATA[<h1 id="CheckBox"><a href="#CheckBox" class="headerlink" title="CheckBox"></a>CheckBox</h1><h2 id="一个ImageView实现CheckBox功能"><a href="#一个ImageView实现CheckBox功能" class="headerlink" title="一个ImageView实现CheckBox功能"></a>一个ImageView实现CheckBox功能</h2><h3 id="定义ImageView布局控件"><a href="#定义ImageView布局控件" class="headerlink" title="定义ImageView布局控件"></a>定义ImageView布局控件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;ImageView</span><br><span class="line">    android:id=<span class="string">&quot;@+id/iv_select&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;20dp&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;20dp&quot;</span></span><br><span class="line">    android:layout_centerVertical=<span class="string">&quot;true&quot;</span></span><br><span class="line">    android:layout_alignParentLeft=<span class="string">&quot;true&quot;</span></span><br><span class="line">    android:layout_marginLeft=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">    android:layout_marginRight=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">    android:scaleType=<span class="string">&quot;centerCrop&quot;</span></span><br><span class="line">    android:src=<span class="string">&quot;@drawable/draftboxselector&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>其中src的资源为（drawable下的<code>draftboxselector.xml</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;level-list xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:drawable=<span class="string">&quot;@drawable/ic_caogao_unselect&quot;</span></span><br><span class="line">        android:maxLevel=<span class="string">&quot;0&quot;</span> /&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:drawable=<span class="string">&quot;@drawable/ic_caogao_select&quot;</span></span><br><span class="line">        android:maxLevel=<span class="string">&quot;1&quot;</span> /&gt;</span><br><span class="line">&lt;/level-list&gt;</span><br></pre></td></tr></table></figure>

<h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">selectIv.setImageLevel(<span class="number">1</span>);</span><br><span class="line">和</span><br><span class="line">selectIv.setImageLevel(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>



<h2 id="checkbox样式"><a href="#checkbox样式" class="headerlink" title="checkbox样式"></a>checkbox样式</h2><ol>
<li>首先要导入你准备用作CheckBox选中和补选中状态的两图片到res的drawable中，如checkbox_checked.png，checkbox_normal.png；</li>
</ol>
<p>在res&#x2F;drawable中添加checkbox.xml，定义checkbox的state list drawable图片 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_checked</span>=<span class="string">&quot;true&quot;</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/checkbox_checked&quot;</span> /&gt;</span> <span class="comment">&lt;!-- checked --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_checked</span>=<span class="string">&quot;false&quot;</span> <span class="attr">android:drawable</span>=<span class="string">&quot;@drawable/checkbox_normal&quot;</span> /&gt;</span> <span class="comment">&lt;!-- default --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在Layout中修改checkbox的属性：android:button&#x3D;”@drawable&#x2F;checkbox” 定制button样式</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">CheckBox</span> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/chkItem&quot;</span> <span class="attr">android:button</span>=<span class="string">&quot;@drawable/checkbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">CheckBox</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样就完成了定制工作，效果如下：<br><img src="/posts/c91d7a26/checkbox%E6%A0%B7%E5%BC%8F.png" alt="img"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓代码片段UI</tag>
      </tags>
  </entry>
  <entry>
    <title>Dialog相关</title>
    <url>/posts/1852176610/</url>
    <content><![CDATA[<h1 id="Dialog相关"><a href="#Dialog相关" class="headerlink" title="Dialog相关"></a>Dialog相关</h1><h2 id="自定义布局的Dialog"><a href="#自定义布局的Dialog" class="headerlink" title="自定义布局的Dialog"></a>自定义布局的Dialog</h2><p><strong>基类dialog</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.app.Dialog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseDialog</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span> <span class="keyword">implements</span></span><br><span class="line">        <span class="title class_">android</span>.view.View.OnClickListener &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Activity context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseDialog</span><span class="params">(Activity context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, R.style.Dialog);</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        getWindow().setBackgroundDrawableResource(android.R.color.transparent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseDialog</span><span class="params">(Activity context, String transparent)</span> &#123;<span class="comment">//背景透明</span></span><br><span class="line">        <span class="built_in">super</span>(context, R.style.Dialog_transparent);</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        getWindow().setBackgroundDrawableResource(android.R.color.transparent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseDialog</span><span class="params">(Activity context, <span class="type">int</span> resId)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, R.style.dialog_bottom);</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        setContentView(resId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseDialog</span><span class="params">(Activity context, <span class="type">int</span> resId, <span class="type">int</span> styleId)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, styleId);</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        setContentView(resId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        initView();</span><br><span class="line">        initData();</span><br><span class="line">        setListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initView</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initData</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setListener</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>style.xml中</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--背景透明的弹窗风格--&gt;</span><br><span class="line">&lt;style name=<span class="string">&quot;dialog_common&quot;</span> parent=<span class="string">&quot;@style/Dialog&quot;</span>&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;android:windowBackground&quot;</span>&gt;<span class="meta">@android</span>:color/transparent&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">            </span><br><span class="line">&lt;style name=<span class="string">&quot;dialog_animation&quot;</span> parent=<span class="string">&quot;android:Animation&quot;</span>&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;android:windowEnterAnimation&quot;</span>&gt;<span class="meta">@anim</span>/dialog_enter&lt;/item&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;android:windowExitAnimation&quot;</span>&gt;<span class="meta">@anim</span>/dialog_exit&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;style name=<span class="string">&quot;Dialog&quot;</span> parent=<span class="string">&quot;@android:style/Theme.Dialog&quot;</span>&gt;</span><br><span class="line">	&lt;item name=<span class="string">&quot;android:windowFrame&quot;</span>&gt;<span class="meta">@null</span>&lt;/item&gt;</span><br><span class="line">	&lt;item name=<span class="string">&quot;android:windowNoTitle&quot;</span>&gt;<span class="literal">true</span>&lt;/item&gt;</span><br><span class="line">	&lt;item name=<span class="string">&quot;android:windowIsFloating&quot;</span>&gt;<span class="literal">true</span>&lt;/item&gt;</span><br><span class="line">	&lt;item name=<span class="string">&quot;android:windowContentOverlay&quot;</span>&gt;<span class="meta">@null</span>&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;style name=<span class="string">&quot;dialog_bottom&quot;</span> parent=<span class="string">&quot;@style/dialog_common&quot;</span>&gt;</span><br><span class="line">	&lt;item name=<span class="string">&quot;android:windowNoTitle&quot;</span>&gt;<span class="literal">true</span>&lt;/item&gt;</span><br><span class="line">	&lt;item name=<span class="string">&quot;android:windowAnimationStyle&quot;</span>&gt;<span class="meta">@style</span>/dialog_animation&lt;/item&gt;</span><br><span class="line">	&lt;item name=<span class="string">&quot;android:windowContentOverlay&quot;</span>&gt;<span class="meta">@null</span>&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;style name=<span class="string">&quot;Dialog_transparent&quot;</span> parent=<span class="string">&quot;@android:style/Theme.Dialog&quot;</span>&gt;</span><br><span class="line">	&lt;item name=<span class="string">&quot;android:windowFrame&quot;</span>&gt;<span class="meta">@null</span>&lt;/item&gt;</span><br><span class="line">	&lt;item name=<span class="string">&quot;android:windowNoTitle&quot;</span>&gt;<span class="literal">true</span>&lt;/item&gt;</span><br><span class="line">	&lt;item name=<span class="string">&quot;android:windowIsFloating&quot;</span>&gt;<span class="literal">true</span>&lt;/item&gt;</span><br><span class="line">	&lt;item name=<span class="string">&quot;android:windowContentOverlay&quot;</span>&gt;<span class="meta">@null</span>&lt;/item&gt;</span><br><span class="line">	&lt;item name=<span class="string">&quot;android:windowBackground&quot;</span>&gt;<span class="meta">@color</span>/transparent&lt;/item&gt;</span><br><span class="line">	&lt;item name=<span class="string">&quot;android:backgroundDimEnabled&quot;</span>&gt;<span class="literal">false</span>&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">&lt;style name=<span class="string">&quot;PopupAnimation&quot;</span> mce_bogus=<span class="string">&quot;1&quot;</span> parent=<span class="string">&quot;android:Animation&quot;</span>&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;android:windowEnterAnimation&quot;</span>&gt;<span class="meta">@anim</span>/push_in_style&lt;/item&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;android:windowExitAnimation&quot;</span>&gt;<span class="meta">@anim</span>/push_out_style&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p><code>dialog_enter.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYDelta</span>=<span class="string">&quot;0%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fillAfter</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYDelta</span>=<span class="string">&quot;100%p&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>dialog_exit.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYDelta</span>=<span class="string">&quot;0%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fillAfter</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYDelta</span>=<span class="string">&quot;100%p&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>





<p><strong>创建自己的dialog</strong></p>
<p><img src="/posts/1852176610/%E8%87%AA%E5%AE%9A%E4%B9%89dialog.png" alt="image-20221025104747429"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FiltrateDataDialog</span> <span class="keyword">extends</span> <span class="title class_">BaseDialog</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FiltrateDialogOnClick filtrateDialogOnClick;</span><br><span class="line">    <span class="keyword">private</span> TextView oneItemTv;</span><br><span class="line">    <span class="keyword">private</span> TextView twoItemTv;</span><br><span class="line">    <span class="keyword">private</span> TextView threeItemTv;</span><br><span class="line">    <span class="keyword">private</span> TextView cancelItemTv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FiltrateDataDialog</span><span class="params">(Activity context)</span> &#123;</span><br><span class="line">    <span class="comment">//自定义的布局</span></span><br><span class="line">        <span class="built_in">super</span>(context, R.layout.dialog_filtrate);</span><br><span class="line"></span><br><span class="line">        <span class="type">Window</span> <span class="variable">window</span> <span class="operator">=</span> getWindow();</span><br><span class="line">        window.setWindowAnimations(R.style.PopupAnimation);</span><br><span class="line">        window.setGravity(Gravity.BOTTOM);</span><br><span class="line">        window.getDecorView().setPadding(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        WindowManager.<span class="type">LayoutParams</span> <span class="variable">lp</span> <span class="operator">=</span> window.getAttributes();</span><br><span class="line">        lp.width = WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">        lp.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">        window.setAttributes(lp);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initView</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.initView();</span><br><span class="line">        oneItemTv = (TextView) findViewById(R.id.dialog_filtrate_total_tv);</span><br><span class="line">        twoItemTv = (TextView) findViewById(R.id.tv_issue_costomer);</span><br><span class="line">        threeItemTv = (TextView) findViewById(R.id.tv_issue_main);</span><br><span class="line">        cancelItemTv = (TextView) findViewById(R.id.tv_issue_diss);</span><br><span class="line">        oneItemTv.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        twoItemTv.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        threeItemTv.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        cancelItemTv.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 提供对外的接口</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FiltrateDialogOnClick</span>&#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">dialogOnClick</span><span class="params">(<span class="type">int</span> state, FiltrateDataDialog dialog)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFiltrateDialogOnClick</span><span class="params">(FiltrateDialogOnClick filtrateDialogOnClick)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.filtrateDialogOnClick = filtrateDialogOnClick;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>dialog_filtrate.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/ll_issue&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@color/white&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/dialog_filtrate_total_tv&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;39dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;14dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;14dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@drawable/dialog_picture_taker_normal_bg&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;历史总额&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#444&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;15dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_issue_costomer&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;39dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;14dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;14dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@drawable/dialog_picture_taker_normal_bg&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;最近30天&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#444&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;15dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_issue_main&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;39dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;14dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;14dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@drawable/dialog_picture_taker_normal_bg&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;最近7天&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#444&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;15dp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_issue_diss&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;14dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;14dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;14dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;15dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@drawable/issue_dialog_diss&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;取消&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#848484&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;15dp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><code>push_in_style.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYDelta</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYDelta</span>=<span class="string">&quot;100%p&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">alpha</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromAlpha</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toAlpha</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>push_out_style.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYDelta</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYDelta</span>=<span class="string">&quot;100%p&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">alpha</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromAlpha</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toAlpha</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="自定义布局的Dialog-选择日期Dialog"><a href="#自定义布局的Dialog-选择日期Dialog" class="headerlink" title="自定义布局的Dialog+选择日期Dialog"></a>自定义布局的Dialog+选择日期Dialog</h2><p><strong>效果图</strong></p>
<p>自定义布局弹窗.jpg</p>
<p>选择日期弹窗.jpg</p>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><strong>DateOrCityChooseLdy.java 基于WheelView的年月日选择器(城市选择器)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.u1city.androidframe.Component.wheelview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Dialog;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.res.AssetManager;</span><br><span class="line"><span class="keyword">import</span> android.text.format.Time;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.R;</span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.common.system.DateUtil;</span><br><span class="line"><span class="keyword">import</span> com.u1city.<span class="keyword">module</span>.common.Debug;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParser;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.SAXParserFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> linjy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2015-12-18 16:13:08</span></span><br><span class="line"><span class="comment"> * 类说明：基于WheelView的年月日选择器(城市选择器)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateOrCityChooseLdy</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span> <span class="keyword">implements</span> <span class="title class_">OnClickListener</span>, OnWheelChangedListener &#123;</span><br><span class="line">    <span class="comment">/************* 日期选择 *****************/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> View contentView;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">visibleItems</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">private</span> WheelView yearWv;</span><br><span class="line">    <span class="keyword">private</span> WheelView monthWv;</span><br><span class="line">    <span class="keyword">private</span> WheelView dayWv;</span><br><span class="line">    <span class="keyword">public</span> Button cancelBtn;</span><br><span class="line">    <span class="keyword">public</span> TextView confirmBtn;</span><br><span class="line">    <span class="keyword">public</span> TextView titleView;</span><br><span class="line">    <span class="keyword">private</span> DateOrCityChooseListener dateChooseListener;</span><br><span class="line">    <span class="keyword">private</span> String[] years;</span><br><span class="line">    <span class="keyword">private</span> String[] months;</span><br><span class="line">    <span class="keyword">private</span> String[] days;</span><br><span class="line">    <span class="type">int</span> <span class="variable">minYear</span> <span class="operator">=</span> <span class="number">1900</span>;<span class="comment">//选择日期的最小年 默认1940 //应燕谷坊要求修改最小年默认值为1900 by yangn</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxMonth</span> <span class="operator">=</span> <span class="number">12</span>;<span class="comment">//选择日期的最大月份</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isDatechoose;<span class="comment">// 是否日期选择 否城市选择</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;DateChooseLdy&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isToToday;<span class="comment">// 日期是否只到当前日期</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxDay;<span class="comment">//选择日期的最大日数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/************* 城市选择 *****************/</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有省</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String[] provinceDatas;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key - 省 value - 市</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String[]&gt; citiesMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String[]&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key - 市 values - 区</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String[]&gt; districsMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String[]&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key - 区 values - 邮编</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; zipCodesMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前省的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String currentProvince;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前市的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String currentCity;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前区的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">currentDistrict</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前区的邮政编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">currentZipCode</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> ArrayWheelAdapter&lt;String&gt; yearAdapter;<span class="comment">//年份apapter</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DateOrCityChooseLdy</span><span class="params">(Context context, <span class="keyword">final</span> DateOrCityChooseListener dateChooseListener, <span class="type">boolean</span> isDatechoose)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="built_in">this</span>.dateChooseListener = dateChooseListener;</span><br><span class="line">        <span class="built_in">this</span>.isDatechoose = isDatechoose;</span><br><span class="line">        <span class="comment">/*** 注：这边共用城市选择的wheelView ***/</span></span><br><span class="line">        contentView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.layout_city_choose_ldy, <span class="literal">null</span>);</span><br><span class="line">        yearWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_province_wv);</span><br><span class="line">        yearWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        monthWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_city_wv);</span><br><span class="line">        monthWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        dayWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_district_wv);</span><br><span class="line">        dayWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        yearWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);<span class="comment">// 设置颜色</span></span><br><span class="line">        monthWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);</span><br><span class="line">        dayWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);</span><br><span class="line">        setVisibleItems(visibleItems);</span><br><span class="line"></span><br><span class="line">        cancelBtn = (Button) contentView.findViewById(R.id.layout_city_choose_cancel_btn);</span><br><span class="line">        confirmBtn = (Button) contentView.findViewById(R.id.layout_city_choose_confirm_btn);</span><br><span class="line"></span><br><span class="line">        cancelBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        confirmBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        titleView = (TextView) contentView.findViewById(R.id.layout_city_choose_title_tv);</span><br><span class="line">        setContentView(contentView);</span><br><span class="line">        initDates();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DateOrCityChooseLdy</span><span class="params">(Context context, <span class="type">int</span> style, <span class="keyword">final</span> DateOrCityChooseListener dateChooseListener, <span class="type">boolean</span> isDatechoose)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, style);</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="built_in">this</span>.dateChooseListener = dateChooseListener;</span><br><span class="line">        <span class="built_in">this</span>.isDatechoose = isDatechoose;</span><br><span class="line">        contentView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.layout_city_choose_ldy, <span class="literal">null</span>);</span><br><span class="line">        yearWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_province_wv);</span><br><span class="line">        yearWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        monthWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_city_wv);</span><br><span class="line">        monthWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        dayWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_district_wv);</span><br><span class="line">        dayWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        yearWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);<span class="comment">// 设置颜色</span></span><br><span class="line">        monthWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);</span><br><span class="line">        dayWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);</span><br><span class="line">        setVisibleItems(visibleItems);</span><br><span class="line">        cancelBtn = (Button) contentView.findViewById(R.id.layout_city_choose_cancel_btn);</span><br><span class="line">        confirmBtn = (Button) contentView.findViewById(R.id.layout_city_choose_confirm_btn);</span><br><span class="line">        cancelBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        confirmBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        titleView = (TextView) contentView.findViewById(R.id.layout_city_choose_title_tv);</span><br><span class="line">        setContentView(contentView);</span><br><span class="line"></span><br><span class="line">        initDates();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DateOrCityChooseLdy</span><span class="params">(Context context, <span class="type">int</span> style, <span class="keyword">final</span> DateOrCityChooseListener dateChooseListener, <span class="type">boolean</span> isDatechoose, <span class="type">int</span> minYear)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, style);</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="built_in">this</span>.dateChooseListener = dateChooseListener;</span><br><span class="line">        <span class="built_in">this</span>.isDatechoose = isDatechoose;</span><br><span class="line">        <span class="built_in">this</span>.minYear = minYear;</span><br><span class="line">        contentView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.layout_city_choose_ldy, <span class="literal">null</span>);</span><br><span class="line">        yearWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_province_wv);</span><br><span class="line">        yearWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        monthWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_city_wv);</span><br><span class="line">        monthWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        dayWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_district_wv);</span><br><span class="line">        dayWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        yearWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);<span class="comment">// 设置颜色</span></span><br><span class="line">        monthWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);</span><br><span class="line">        dayWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);</span><br><span class="line">        setVisibleItems(visibleItems);</span><br><span class="line">        cancelBtn = (Button) contentView.findViewById(R.id.layout_city_choose_cancel_btn);</span><br><span class="line">        confirmBtn = (TextView) contentView.findViewById(R.id.layout_city_choose_confirm_btn);</span><br><span class="line">        cancelBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        confirmBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        titleView = (TextView) contentView.findViewById(R.id.layout_city_choose_title_tv);</span><br><span class="line">        setContentView(contentView);</span><br><span class="line"></span><br><span class="line">        initDates();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DateOrCityChooseLdy</span><span class="params">(Context context, <span class="type">int</span> style, <span class="type">boolean</span> isDatechoose, <span class="type">int</span> minYear)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, style);</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="built_in">this</span>.isDatechoose = isDatechoose;</span><br><span class="line">        <span class="built_in">this</span>.minYear = minYear;</span><br><span class="line">        contentView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.layout_city_choose_ldy, <span class="literal">null</span>);</span><br><span class="line">        yearWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_province_wv);</span><br><span class="line">        yearWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        monthWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_city_wv);</span><br><span class="line">        monthWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        dayWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_district_wv);</span><br><span class="line">        dayWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        yearWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);<span class="comment">// 设置颜色</span></span><br><span class="line">        monthWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);</span><br><span class="line">        dayWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);</span><br><span class="line">        setVisibleItems(visibleItems);</span><br><span class="line">        cancelBtn = (Button) contentView.findViewById(R.id.layout_city_choose_cancel_btn);</span><br><span class="line">        confirmBtn = (TextView) contentView.findViewById(R.id.layout_city_choose_confirm_btn);</span><br><span class="line">        cancelBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        confirmBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        titleView = (TextView) contentView.findViewById(R.id.layout_city_choose_title_tv);</span><br><span class="line">        setContentView(contentView);</span><br><span class="line">        initDates();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DateOrCityChooseLdy</span><span class="params">(Context context, <span class="type">int</span> style, <span class="type">boolean</span> isDatechoose, <span class="type">int</span> minYear, <span class="type">int</span> maxMonth)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, style);</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="built_in">this</span>.isDatechoose = isDatechoose;</span><br><span class="line">        <span class="built_in">this</span>.minYear = minYear;</span><br><span class="line">        <span class="built_in">this</span>.maxMonth = maxMonth;</span><br><span class="line">        contentView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.layout_city_choose_ldy, <span class="literal">null</span>);</span><br><span class="line">        yearWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_province_wv);</span><br><span class="line">        yearWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        monthWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_city_wv);</span><br><span class="line">        monthWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        dayWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_district_wv);</span><br><span class="line">        dayWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        yearWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);<span class="comment">// 设置颜色</span></span><br><span class="line">        monthWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);</span><br><span class="line">        dayWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);</span><br><span class="line">        setVisibleItems(visibleItems);</span><br><span class="line">        cancelBtn = (Button) contentView.findViewById(R.id.layout_city_choose_cancel_btn);</span><br><span class="line">        confirmBtn = (TextView) contentView.findViewById(R.id.layout_city_choose_confirm_btn);</span><br><span class="line">        cancelBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        confirmBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        titleView = (TextView) contentView.findViewById(R.id.layout_city_choose_title_tv);</span><br><span class="line">        setContentView(contentView);</span><br><span class="line">        initDates();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DateOrCityChooseLdy</span><span class="params">(Context context, <span class="type">int</span> style, <span class="type">boolean</span> isDatechoose)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, style);</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="built_in">this</span>.isDatechoose = isDatechoose;</span><br><span class="line">        contentView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.layout_city_choose_ldy, <span class="literal">null</span>);</span><br><span class="line">        yearWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_province_wv);</span><br><span class="line">        yearWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        monthWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_city_wv);</span><br><span class="line">        monthWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        dayWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_district_wv);</span><br><span class="line">        dayWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        yearWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);<span class="comment">// 设置颜色</span></span><br><span class="line">        monthWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);</span><br><span class="line">        dayWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);</span><br><span class="line">        setVisibleItems(visibleItems);</span><br><span class="line">        cancelBtn = (Button) contentView.findViewById(R.id.layout_city_choose_cancel_btn);</span><br><span class="line">        confirmBtn = (TextView) contentView.findViewById(R.id.layout_city_choose_confirm_btn);</span><br><span class="line">        cancelBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        confirmBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        titleView = (TextView) contentView.findViewById(R.id.layout_city_choose_title_tv);</span><br><span class="line">        setContentView(contentView);</span><br><span class="line">        initDates();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DateOrCityChooseLdy</span><span class="params">(Context context, <span class="type">int</span> style, <span class="type">boolean</span> isDatechoose, <span class="type">boolean</span> isToToday)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, style);</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="built_in">this</span>.isDatechoose = isDatechoose;</span><br><span class="line">        <span class="built_in">this</span>.isToToday = isToToday;</span><br><span class="line">        contentView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.layout_city_choose_ldy, <span class="literal">null</span>);</span><br><span class="line">        yearWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_province_wv);</span><br><span class="line">        yearWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        monthWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_city_wv);</span><br><span class="line">        monthWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        dayWv = (WheelView) contentView.findViewById(R.id.layout_city_choose_district_wv);</span><br><span class="line">        dayWv.addChangingListener(<span class="built_in">this</span>);</span><br><span class="line">        yearWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);<span class="comment">// 设置颜色</span></span><br><span class="line">        monthWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);</span><br><span class="line">        dayWv.setShadowColor(<span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>, <span class="number">0xf0f0f0</span>);</span><br><span class="line">        setVisibleItems(visibleItems);</span><br><span class="line">        cancelBtn = (Button) contentView.findViewById(R.id.layout_city_choose_cancel_btn);</span><br><span class="line">        confirmBtn = (TextView) contentView.findViewById(R.id.layout_city_choose_confirm_btn);</span><br><span class="line">        cancelBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        confirmBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        titleView = (TextView) contentView.findViewById(R.id.layout_city_choose_title_tv);</span><br><span class="line">        setContentView(contentView);</span><br><span class="line">        initDates();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DateOrCityChooseLdy</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context, <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.isDatechoose = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新显示日</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDatechoose) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">currentItem</span> <span class="operator">=</span> yearWv.getCurrentItem();</span><br><span class="line">            <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> years[currentItem];</span><br><span class="line"></span><br><span class="line">            <span class="type">Time</span> <span class="variable">time</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Time</span>();</span><br><span class="line">            time.setToNow();</span><br><span class="line">            <span class="keyword">if</span> (string.equals(time.year + <span class="string">&quot;年&quot;</span>)) &#123;</span><br><span class="line">                months = <span class="keyword">new</span> <span class="title class_">String</span>[maxMonth];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxMonth; i++) &#123;</span><br><span class="line">                    months[i] = (i + <span class="number">1</span>) + <span class="string">&quot;月&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                months = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">12</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">                    months[i] = (i + <span class="number">1</span>) + <span class="string">&quot;月&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            monthWv.setViewAdapter(<span class="keyword">new</span> <span class="title class_">ArrayWheelAdapter</span>&lt;String&gt;(context, months));</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> string.substring(<span class="number">0</span>, string.length() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">currentItem2</span> <span class="operator">=</span> monthWv.getCurrentItem();</span><br><span class="line">            <span class="keyword">if</span> (months.length &lt; currentItem2 + <span class="number">1</span>) &#123;</span><br><span class="line">                currentItem2 = months.length - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">string2</span> <span class="operator">=</span> months[currentItem2];</span><br><span class="line">            monthWv.setCurrentItem(currentItem2, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isCurrentYearMonth</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (string2.equals((time.month + <span class="number">1</span>) + <span class="string">&quot;月&quot;</span>) &amp;&amp; string.equals(time.year + <span class="string">&quot;年&quot;</span>)) &#123;</span><br><span class="line">                isCurrentYearMonth = <span class="literal">true</span>;<span class="comment">//wheelview选中年月为当前年月</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> string2.substring(<span class="number">0</span>, string2.length() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Integer.parseInt(str1) % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; Integer.parseInt(str1) % <span class="number">100</span> != <span class="number">0</span> || Integer.parseInt(str1) % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (str2.equals(<span class="string">&quot;1&quot;</span>) || str2.equals(<span class="string">&quot;3&quot;</span>) || str2.equals(<span class="string">&quot;5&quot;</span>) || str2.equals(<span class="string">&quot;7&quot;</span>) || str2.equals(<span class="string">&quot;8&quot;</span>) || str2.equals(<span class="string">&quot;10&quot;</span>) || str2.equals(<span class="string">&quot;12&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isToToday &amp;&amp; isCurrentYearMonth) &#123;</span><br><span class="line">                        maxDay = DateUtil.getDay();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        maxDay = <span class="number">31</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    days = <span class="keyword">new</span> <span class="title class_">String</span>[maxDay];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxDay; i++) &#123;</span><br><span class="line">                        days[i] = (i + <span class="number">1</span>) + <span class="string">&quot;日&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str2.equals(<span class="string">&quot;4&quot;</span>) || str2.equals(<span class="string">&quot;6&quot;</span>) || str2.equals(<span class="string">&quot;9&quot;</span>) || str2.equals(<span class="string">&quot;11&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isToToday &amp;&amp; isCurrentYearMonth) &#123;</span><br><span class="line">                        maxDay = DateUtil.getDay();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        maxDay = <span class="number">30</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    days = <span class="keyword">new</span> <span class="title class_">String</span>[maxDay];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxDay; i++) &#123;</span><br><span class="line">                        days[i] = (i + <span class="number">1</span>) + <span class="string">&quot;日&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isToToday &amp;&amp; isCurrentYearMonth) &#123;</span><br><span class="line">                        maxDay = DateUtil.getDay();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        maxDay = <span class="number">29</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    days = <span class="keyword">new</span> <span class="title class_">String</span>[maxDay];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxDay; i++) &#123;</span><br><span class="line">                        days[i] = (i + <span class="number">1</span>) + <span class="string">&quot;日&quot;</span>;</span><br><span class="line">                        Debug.e(TAG, <span class="string">&quot;year:&quot;</span> + <span class="string">&quot; 2月：&quot;</span> + string + days[i]);</span><br><span class="line">                        System.out.print(<span class="string">&quot;year:&quot;</span> + <span class="string">&quot; 2月：&quot;</span> + string + days[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (str2.equals(<span class="string">&quot;1&quot;</span>) || str2.equals(<span class="string">&quot;3&quot;</span>) || str2.equals(<span class="string">&quot;5&quot;</span>) || str2.equals(<span class="string">&quot;7&quot;</span>) || str2.equals(<span class="string">&quot;8&quot;</span>) || str2.equals(<span class="string">&quot;10&quot;</span>) || str2.equals(<span class="string">&quot;12&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isToToday &amp;&amp; isCurrentYearMonth) &#123;</span><br><span class="line">                        maxDay = DateUtil.getDay();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        maxDay = <span class="number">31</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    days = <span class="keyword">new</span> <span class="title class_">String</span>[maxDay];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxDay; i++) &#123;</span><br><span class="line">                        days[i] = (i + <span class="number">1</span>) + <span class="string">&quot;日&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str2.equals(<span class="string">&quot;4&quot;</span>) || str2.equals(<span class="string">&quot;6&quot;</span>) || str2.equals(<span class="string">&quot;9&quot;</span>) || str2.equals(<span class="string">&quot;11&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isToToday &amp;&amp; isCurrentYearMonth) &#123;</span><br><span class="line">                        maxDay = DateUtil.getDay();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        maxDay = <span class="number">30</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    days = <span class="keyword">new</span> <span class="title class_">String</span>[maxDay];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxDay; i++) &#123;</span><br><span class="line">                        days[i] = (i + <span class="number">1</span>) + <span class="string">&quot;日&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isToToday &amp;&amp; isCurrentYearMonth) &#123;</span><br><span class="line">                        maxDay = DateUtil.getDay();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        maxDay = <span class="number">28</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    days = <span class="keyword">new</span> <span class="title class_">String</span>[maxDay];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxDay; i++) &#123;</span><br><span class="line">                        days[i] = (i + <span class="number">1</span>) + <span class="string">&quot;日&quot;</span>;</span><br><span class="line">                        Debug.e(TAG, <span class="string">&quot;year:&quot;</span> + <span class="string">&quot; 2月：&quot;</span> + string + days[i]);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dayWv.setViewAdapter(<span class="keyword">new</span> <span class="title class_">ArrayWheelAdapter</span>&lt;String&gt;(context, days));</span><br><span class="line">            dayWv.setCurrentItem(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (yearWv.getViewAdapter() == <span class="literal">null</span>) &#123;</span><br><span class="line">                yearWv.setViewAdapter(<span class="keyword">new</span> <span class="title class_">ArrayWheelAdapter</span>&lt;String&gt;(context, provinceDatas));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            updateCities();</span><br><span class="line"></span><br><span class="line">            updateDistrict();</span><br><span class="line"></span><br><span class="line">            updateZipCode(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新显示的城市数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateCities</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">provinceItem</span> <span class="operator">=</span> yearWv.getCurrentItem();</span><br><span class="line"></span><br><span class="line">        currentProvince = provinceDatas[provinceItem];</span><br><span class="line">        String[] cities = citiesMap.get(currentProvince);</span><br><span class="line">        <span class="keyword">if</span> (cities == <span class="literal">null</span>) &#123;</span><br><span class="line">            cities = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        monthWv.setViewAdapter(<span class="keyword">new</span> <span class="title class_">ArrayWheelAdapter</span>&lt;String&gt;(context, cities));</span><br><span class="line">        monthWv.setCurrentItem(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新显示的区县数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateDistrict</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cityItem</span> <span class="operator">=</span> monthWv.getCurrentItem();</span><br><span class="line">        String[] cities = citiesMap.get(currentProvince);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cities == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        currentCity = cities[cityItem];</span><br><span class="line"></span><br><span class="line">        String[] areas = districsMap.get(currentCity);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (areas == <span class="literal">null</span>) &#123;</span><br><span class="line">            areas = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dayWv.setViewAdapter(<span class="keyword">new</span> <span class="title class_">ArrayWheelAdapter</span>&lt;String&gt;(context, areas));</span><br><span class="line">        dayWv.setCurrentItem(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 增加此句，主要修复只选市，没选区时，一直显示昌平区问题</span></span><br><span class="line">        currentDistrict = districsMap.get(currentCity)[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新显示邮编</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateZipCode</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        currentDistrict = districsMap.get(currentCity)[position];</span><br><span class="line">        currentZipCode = zipCodesMap.get(currentDistrict);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVisibleItems</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> visibleItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置可见条目数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVisibleItems</span><span class="params">(<span class="type">int</span> visibleItems)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.visibleItems = visibleItems;</span><br><span class="line">        yearWv.setVisibleItems(visibleItems);</span><br><span class="line">        monthWv.setVisibleItems(visibleItems);</span><br><span class="line">        dayWv.setVisibleItems(visibleItems);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DateOrCityChooseListener <span class="title function_">getDateChooseListener</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dateChooseListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置选择器回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDateOrCityChooseListener</span><span class="params">(DateOrCityChooseListener dateChooseListener)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dateChooseListener = dateChooseListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getContentView</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> contentView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前年份、 获取当前省</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCurrentYear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDatechoose) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">currentItem</span> <span class="operator">=</span> yearWv.getCurrentItem();</span><br><span class="line">            <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> years[currentItem];</span><br><span class="line">            <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> string.substring(<span class="number">0</span>, string.length() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> str1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> currentProvince;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前月份 、 获取当前城市</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCurrentMonth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDatechoose) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">currentItem2</span> <span class="operator">=</span> monthWv.getCurrentItem();</span><br><span class="line">            <span class="type">String</span> <span class="variable">string2</span> <span class="operator">=</span> months[currentItem2];</span><br><span class="line">            <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> string2.substring(<span class="number">0</span>, string2.length() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> str2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> currentCity;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前日 、 获取当前区</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCurrentDay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDatechoose) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">currentItem3</span> <span class="operator">=</span> dayWv.getCurrentItem();</span><br><span class="line">            <span class="type">String</span> <span class="variable">string3</span> <span class="operator">=</span> days[currentItem3];</span><br><span class="line">            <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> string3.substring(<span class="number">0</span>, string3.length() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> str3;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> currentDistrict;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initDates</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 初始化年月</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (isDatechoose) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">Time</span> <span class="variable">time</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Time</span>();</span><br><span class="line">            time.setToNow();</span><br><span class="line">            <span class="type">int</span> <span class="variable">lenth</span> <span class="operator">=</span> time.year - minYear;</span><br><span class="line">            years = <span class="keyword">new</span> <span class="title class_">String</span>[lenth + <span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> minYear; i &lt; time.year + <span class="number">1</span>; i++) &#123;</span><br><span class="line">                years[j] = i + <span class="string">&quot;年&quot;</span>;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isToToday) &#123;</span><br><span class="line">                maxMonth = DateUtil.getMonth();</span><br><span class="line">            &#125;</span><br><span class="line">            months = <span class="keyword">new</span> <span class="title class_">String</span>[maxMonth];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxMonth; i++) &#123;</span><br><span class="line">                months[i] = (i + <span class="number">1</span>) + <span class="string">&quot;月&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (yearWv.getViewAdapter() == <span class="literal">null</span>) &#123;</span><br><span class="line">                yearAdapter = <span class="keyword">new</span> <span class="title class_">ArrayWheelAdapter</span>&lt;String&gt;(context, years);</span><br><span class="line">                yearWv.setViewAdapter(yearAdapter);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            updateData();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 初始化城市选择</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            List&lt;ProvinceModel&gt; provinceList = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">AssetManager</span> <span class="variable">asset</span> <span class="operator">=</span> context.getAssets();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> asset.open(<span class="string">&quot;province_data.xml&quot;</span>);</span><br><span class="line">                <span class="comment">// 创建一个解析xml的工厂对象</span></span><br><span class="line">                <span class="type">SAXParserFactory</span> <span class="variable">spf</span> <span class="operator">=</span> SAXParserFactory.newInstance();</span><br><span class="line">                <span class="comment">// 解析xml</span></span><br><span class="line">                <span class="type">SAXParser</span> <span class="variable">parser</span> <span class="operator">=</span> spf.newSAXParser();</span><br><span class="line">                <span class="type">XmlParserHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlParserHandler</span>();</span><br><span class="line">                parser.parse(input, handler);</span><br><span class="line">                input.close();</span><br><span class="line">                <span class="comment">// 获取解析出来的数据</span></span><br><span class="line">                provinceList = handler.getDataList();</span><br><span class="line">                <span class="comment">// 初始化默认选中的省、市、区</span></span><br><span class="line">                <span class="keyword">if</span> (provinceList != <span class="literal">null</span> &amp;&amp; !provinceList.isEmpty()) &#123;</span><br><span class="line">                    currentProvince = provinceList.get(<span class="number">0</span>).getName();</span><br><span class="line">                    List&lt;CityModel&gt; cityList = provinceList.get(<span class="number">0</span>).getCityList();</span><br><span class="line">                    <span class="keyword">if</span> (cityList != <span class="literal">null</span> &amp;&amp; !cityList.isEmpty()) &#123;</span><br><span class="line">                        currentCity = cityList.get(<span class="number">0</span>).getName();</span><br><span class="line">                        List&lt;DistrictModel&gt; districtList = cityList.get(<span class="number">0</span>).getDistrictList();</span><br><span class="line">                        currentDistrict = districtList.get(<span class="number">0</span>).getName();</span><br><span class="line">                        currentZipCode = districtList.get(<span class="number">0</span>).getZipcode();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                provinceDatas = <span class="keyword">new</span> <span class="title class_">String</span>[provinceList.size()];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; provinceList.size(); i++) &#123;</span><br><span class="line">                    <span class="comment">// 遍历所有省的数据</span></span><br><span class="line">                    provinceDatas[i] = provinceList.get(i).getName();</span><br><span class="line">                    List&lt;CityModel&gt; cityList = provinceList.get(i).getCityList();</span><br><span class="line">                    String[] cityNames = <span class="keyword">new</span> <span class="title class_">String</span>[cityList.size()];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; cityList.size(); j++) &#123;</span><br><span class="line">                        <span class="comment">// 遍历省下面的所有市的数据</span></span><br><span class="line">                        cityNames[j] = cityList.get(j).getName();</span><br><span class="line">                        List&lt;DistrictModel&gt; districtList = cityList.get(j).getDistrictList();</span><br><span class="line">                        String[] distrinctNameArray = <span class="keyword">new</span> <span class="title class_">String</span>[districtList.size()];</span><br><span class="line">                        DistrictModel[] distrinctArray = <span class="keyword">new</span> <span class="title class_">DistrictModel</span>[districtList.size()];</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; districtList.size(); k++) &#123;</span><br><span class="line">                            <span class="comment">// 遍历市下面所有区/县的数据</span></span><br><span class="line">                            <span class="type">DistrictModel</span> <span class="variable">districtModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DistrictModel</span>(districtList.get(k).getName(), districtList.get(k).getZipcode());</span><br><span class="line">                            <span class="comment">// 区/县对于的邮编，保存到zipCodesMap</span></span><br><span class="line">                            zipCodesMap.put(districtList.get(k).getName(), districtList.get(k).getZipcode());</span><br><span class="line">                            distrinctArray[k] = districtModel;</span><br><span class="line">                            distrinctNameArray[k] = districtModel.getName();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 市-区/县的数据，保存到districsMap</span></span><br><span class="line">                        districsMap.put(cityNames[j], distrinctNameArray);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 省-市的数据，保存到citiesMap</span></span><br><span class="line">                    citiesMap.put(provinceList.get(i).getName(), cityNames);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                updateData();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DateOrCityChooseListener</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 点击取消按钮</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCancel</span><span class="params">(DateOrCityChooseLdy chooseLdy)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 点击确认按钮</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConfirm</span><span class="params">(String date, DateOrCityChooseLdy dateChooseLdy)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dateChooseListener == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (v == cancelBtn) &#123;</span><br><span class="line">            dateChooseListener.onCancel(DateOrCityChooseLdy.<span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v == confirmBtn) &#123;</span><br><span class="line">            dateChooseListener.onConfirm(getDate(), DateOrCityChooseLdy.<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 滚动条位置变化时的监听</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChanged</span><span class="params">(WheelView wheel, <span class="type">int</span> oldValue, <span class="type">int</span> newValue)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDatechoose) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (wheel == monthWv) &#123;</span><br><span class="line">                updateData();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (wheel == yearWv) &#123;</span><br><span class="line">                updateData();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (wheel == yearWv) &#123;</span><br><span class="line">                updateCities();</span><br><span class="line">                updateDistrict();</span><br><span class="line">                updateZipCode(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (wheel == monthWv) &#123;</span><br><span class="line">                updateDistrict();</span><br><span class="line">                updateZipCode(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (wheel == dayWv) &#123;</span><br><span class="line">                updateZipCode(newValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WheelView <span class="title function_">getYearWv</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> yearWv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WheelView <span class="title function_">getMonthWv</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monthWv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WheelView <span class="title function_">getDayWv</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dayWv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDatechoose) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> getCurrentMonth();</span><br><span class="line">            <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> getCurrentDay();</span><br><span class="line">            <span class="keyword">if</span> (str2.length() != <span class="number">2</span>) &#123;</span><br><span class="line">                str2 = <span class="string">&quot;0&quot;</span> + str2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (str3.length() != <span class="number">2</span>) &#123;</span><br><span class="line">                str3 = <span class="string">&quot;0&quot;</span> + str3;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> getCurrentYear() + <span class="string">&quot;-&quot;</span> + str2 + <span class="string">&quot;-&quot;</span> + str3;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getCurrentYear() + <span class="string">&quot; &quot;</span> + getCurrentMonth() + <span class="string">&quot; &quot;</span> + getCurrentDay();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置最后一个是否显示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLastViewVisible</span><span class="params">(<span class="type">int</span> VISIBLE)</span> &#123;</span><br><span class="line">        dayWv.setVisibility(VISIBLE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTitle</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        titleView.setText(title);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置右边确认btn字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRightText</span><span class="params">(String Text)</span> &#123;</span><br><span class="line">        confirmBtn.setText(Text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置右边确认btn颜色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRightColor</span><span class="params">(<span class="type">int</span> color)</span> &#123;</span><br><span class="line">        confirmBtn.setTextColor(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置日期的最小年</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMinYear</span><span class="params">(<span class="type">int</span> MinYear)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDatechoose) &#123;</span><br><span class="line">            <span class="built_in">this</span>.minYear = MinYear;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置到指定的年</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDatechoose) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; years.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (year == Integer.parseInt(years[i].substring(<span class="number">0</span>, <span class="number">4</span>))) &#123;</span><br><span class="line">                    yearWv.setCurrentItem(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置到指定月</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonth</span><span class="params">(<span class="type">int</span> month)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDatechoose) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; months.length; i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> months[i];</span><br><span class="line">                <span class="keyword">if</span> (month == Integer.parseInt(string.substring(<span class="number">0</span>, string.length() - <span class="number">1</span>))) &#123;</span><br><span class="line">                    monthWv.setCurrentItem(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置到指定日</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDay</span><span class="params">(<span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDatechoose) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; days.length; i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> days[i];</span><br><span class="line">                <span class="keyword">if</span> (day == Integer.parseInt(string.substring(<span class="number">0</span>, string.length() - <span class="number">1</span>))) &#123;</span><br><span class="line">                    dayWv.setCurrentItem(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>layout_city_choose_ldy.xml</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:background=<span class="string">&quot;#FFFFFF&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:id=<span class="string">&quot;@+id/layout_city_choose_button_rl&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;50dp&quot;</span></span><br><span class="line">        android:paddingLeft=<span class="string">&quot;12dp&quot;</span></span><br><span class="line">        android:paddingRight=<span class="string">&quot;12dp&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=<span class="string">&quot;@+id/layout_city_choose_cancel_btn&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_alignParentLeft=<span class="string">&quot;true&quot;</span></span><br><span class="line">            android:layout_centerVertical=<span class="string">&quot;true&quot;</span></span><br><span class="line">            android:background=<span class="string">&quot;@drawable/bg_my_info_city_cancel&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;取消&quot;</span></span><br><span class="line">            android:visibility=<span class="string">&quot;gone&quot;</span></span><br><span class="line">            android:textColor=<span class="string">&quot;#FFFFFF&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;14sp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=<span class="string">&quot;@+id/layout_city_choose_confirm_btn&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_alignParentRight=<span class="string">&quot;true&quot;</span></span><br><span class="line">            android:layout_centerVertical=<span class="string">&quot;true&quot;</span></span><br><span class="line">            android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;确定&quot;</span></span><br><span class="line">            android:textColor=<span class="string">&quot;#f25d56&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;14sp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=<span class="string">&quot;@+id/layout_city_choose_title_tv&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_centerInParent=<span class="string">&quot;true&quot;</span></span><br><span class="line">            android:textColor=<span class="string">&quot;#484848&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;16sp&quot;</span> /&gt;</span><br><span class="line">    &lt;/RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;View</span><br><span class="line">        android:id=<span class="string">&quot;@+id/layout_city_choose_border_view&quot;</span></span><br><span class="line">        style=<span class="string">&quot;@style/ViewSoildLine&quot;</span></span><br><span class="line">        android:layout_below=<span class="string">&quot;@id/layout_city_choose_button_rl&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_below=<span class="string">&quot;@id/layout_city_choose_border_view&quot;</span></span><br><span class="line">        android:orientation=<span class="string">&quot;horizontal&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;com.u1city.androidframe.Component.wheelview.WheelView</span><br><span class="line">            android:id=<span class="string">&quot;@+id/layout_city_choose_province_wv&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_weight=<span class="string">&quot;1&quot;</span>&gt;&lt;/com.u1city.androidframe.Component.wheelview.WheelView&gt;</span><br><span class="line"></span><br><span class="line">        &lt;com.u1city.androidframe.Component.wheelview.WheelView</span><br><span class="line">            android:id=<span class="string">&quot;@+id/layout_city_choose_city_wv&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_weight=<span class="string">&quot;1&quot;</span>&gt;&lt;/com.u1city.androidframe.Component.wheelview.WheelView&gt;</span><br><span class="line"></span><br><span class="line">        &lt;com.u1city.androidframe.Component.wheelview.WheelView</span><br><span class="line">            android:id=<span class="string">&quot;@+id/layout_city_choose_district_wv&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">            android:layout_weight=<span class="string">&quot;1&quot;</span>&gt;&lt;/com.u1city.androidframe.Component.wheelview.WheelView&gt;</span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>



<p><strong>Wheel.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  Android Wheel Control.</span></span><br><span class="line"><span class="comment"> *  https://code.google.com/p/android-wheel/</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  Copyright 2011 Yuri Kanivets</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> *  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> *  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> *  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> *  limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.u1city.androidframe.Component.wheelview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.database.DataSetObserver;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.GradientDrawable;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.GradientDrawable.Orientation;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup.LayoutParams;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.Interpolator;</span><br><span class="line"><span class="keyword">import</span> android.widget.LinearLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.u1city.androidframe.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Numeric wheel view.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yuri Kanivets</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WheelView</span> <span class="keyword">extends</span> <span class="title class_">View</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Top and bottom shadows colors */</span></span><br><span class="line">	<span class="comment">/*/ Modified by wulianghuan 2014-11-25</span></span><br><span class="line"><span class="comment">	private int[] SHADOWS_COLORS = new int[] &#123; 0xFF111111,</span></span><br><span class="line"><span class="comment">			0x00AAAAAA, 0x00AAAAAA &#125;;</span></span><br><span class="line"><span class="comment">	//*/</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>[] SHADOWS_COLORS = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">0xefE9E9E9</span>,</span><br><span class="line">			<span class="number">0xcfE9E9E9</span>, <span class="number">0x3fE9E9E9</span> &#125;;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Top and bottom items offset (to hide that) */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ITEM_OFFSET_PERCENT</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Left and right padding value */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PADDING</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Default count of visible items */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEF_VISIBLE_ITEMS</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Wheel Values</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> <span class="variable">currentItem</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Count of visible items</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> <span class="variable">visibleItems</span> <span class="operator">=</span> DEF_VISIBLE_ITEMS;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Item height</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> <span class="variable">itemHeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Center Line</span></span><br><span class="line">	<span class="keyword">private</span> Drawable centerDrawable;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Wheel drawables</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> <span class="variable">wheelBackground</span> <span class="operator">=</span> R.drawable.wheel_bg;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> <span class="variable">wheelForeground</span> <span class="operator">=</span> R.drawable.wheel_val;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Shadows drawables</span></span><br><span class="line">	<span class="keyword">private</span> GradientDrawable topShadow;</span><br><span class="line">	<span class="keyword">private</span> GradientDrawable bottomShadow;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Draw Shadows</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">drawShadows</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Scrolling</span></span><br><span class="line">	<span class="keyword">private</span> WheelScroller scroller;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> isScrollingPerformed;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> scrollingOffset;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Cyclic</span></span><br><span class="line">	<span class="type">boolean</span> <span class="variable">isCyclic</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Items layout</span></span><br><span class="line">	<span class="keyword">private</span> LinearLayout itemsLayout;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The number of first item in layout</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> firstItem;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// View adapter</span></span><br><span class="line">	<span class="keyword">private</span> WheelViewAdapter viewAdapter;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Recycle</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">WheelRecycle</span> <span class="variable">recycle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WheelRecycle</span>(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Listeners</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;OnWheelChangedListener&gt; changingListeners = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;OnWheelChangedListener&gt;();</span><br><span class="line">	<span class="keyword">private</span> List&lt;OnWheelScrollListener&gt; scrollingListeners = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;OnWheelScrollListener&gt;();</span><br><span class="line">	<span class="keyword">private</span> List&lt;OnWheelClickedListener&gt; clickingListeners = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;OnWheelClickedListener&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Constructor</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">WheelView</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyle)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>(context, attrs, defStyle);</span><br><span class="line">		initData(context);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Constructor</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">WheelView</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>(context, attrs);</span><br><span class="line">		initData(context);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Constructor</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">WheelView</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>(context);</span><br><span class="line">		initData(context);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Initializes class data</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> context the context</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initData</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">		scroller = <span class="keyword">new</span> <span class="title class_">WheelScroller</span>(getContext(), scrollingListener);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Scrolling listener</span></span><br><span class="line">	WheelScroller.<span class="type">ScrollingListener</span> <span class="variable">scrollingListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WheelScroller</span>.ScrollingListener() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStarted</span><span class="params">()</span> &#123;</span><br><span class="line">			isScrollingPerformed = <span class="literal">true</span>;</span><br><span class="line">			notifyScrollingListenersAboutStart();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onScroll</span><span class="params">(<span class="type">int</span> distance)</span> &#123;</span><br><span class="line">			doScroll(distance);</span><br><span class="line"></span><br><span class="line">			<span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> getHeight();</span><br><span class="line">			<span class="keyword">if</span> (scrollingOffset &gt; height) &#123;</span><br><span class="line">				scrollingOffset = height;</span><br><span class="line">				scroller.stopScrolling();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (scrollingOffset &lt; -height) &#123;</span><br><span class="line">				scrollingOffset = -height;</span><br><span class="line">				scroller.stopScrolling();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFinished</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (isScrollingPerformed) &#123;</span><br><span class="line">				notifyScrollingListenersAboutEnd();</span><br><span class="line">				isScrollingPerformed = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			scrollingOffset = <span class="number">0</span>;</span><br><span class="line">			invalidate();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onJustify</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (Math.abs(scrollingOffset) &gt; WheelScroller.MIN_DELTA_FOR_SCROLLING) &#123;</span><br><span class="line">				scroller.scroll(scrollingOffset, <span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Set the the specified scrolling interpolator</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> interpolator the interpolator</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInterpolator</span><span class="params">(Interpolator interpolator)</span> &#123;</span><br><span class="line">		scroller.setInterpolator(interpolator);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Gets count of visible items</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the count of visible items</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVisibleItems</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> visibleItems;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Sets the desired count of visible items.</span></span><br><span class="line"><span class="comment">	 * Actual amount of visible items depends on wheel layout parameters.</span></span><br><span class="line"><span class="comment">	 * To apply changes and rebuild view call measure().</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> count the desired count for visible items</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVisibleItems</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">		visibleItems = count;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Gets view adapter</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the view adapter</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> WheelViewAdapter <span class="title function_">getViewAdapter</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> viewAdapter;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Adapter listener</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">DataSetObserver</span> <span class="variable">dataObserver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSetObserver</span>() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChanged</span><span class="params">()</span> &#123;</span><br><span class="line">			invalidateWheel(<span class="literal">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onInvalidated</span><span class="params">()</span> &#123;</span><br><span class="line">			invalidateWheel(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Sets view adapter. Usually new adapters contain different views, so</span></span><br><span class="line"><span class="comment">	 * it needs to rebuild view by calling measure().</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> viewAdapter the view adapter</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setViewAdapter</span><span class="params">(WheelViewAdapter viewAdapter)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.viewAdapter != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="built_in">this</span>.viewAdapter.unregisterDataSetObserver(dataObserver);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">this</span>.viewAdapter = viewAdapter;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.viewAdapter != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="built_in">this</span>.viewAdapter.registerDataSetObserver(dataObserver);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		invalidateWheel(<span class="literal">false</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Adds wheel changing listener</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> listener the listener</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addChangingListener</span><span class="params">(OnWheelChangedListener listener)</span> &#123;</span><br><span class="line">		changingListeners.add(listener);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Removes wheel changing listener</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> listener the listener</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeChangingListener</span><span class="params">(OnWheelChangedListener listener)</span> &#123;</span><br><span class="line">		changingListeners.remove(listener);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Notifies changing listeners</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> oldValue the old wheel value</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> newValue the new wheel value</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">notifyChangingListeners</span><span class="params">(<span class="type">int</span> oldValue, <span class="type">int</span> newValue)</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (OnWheelChangedListener listener : changingListeners) &#123;</span><br><span class="line">			listener.onChanged(<span class="built_in">this</span>, oldValue, newValue);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Adds wheel scrolling listener</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> listener the listener</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addScrollingListener</span><span class="params">(OnWheelScrollListener listener)</span> &#123;</span><br><span class="line">		scrollingListeners.add(listener);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Removes wheel scrolling listener</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> listener the listener</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeScrollingListener</span><span class="params">(OnWheelScrollListener listener)</span> &#123;</span><br><span class="line">		scrollingListeners.remove(listener);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Notifies listeners about starting scrolling</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">notifyScrollingListenersAboutStart</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (OnWheelScrollListener listener : scrollingListeners) &#123;</span><br><span class="line">			listener.onScrollingStarted(<span class="built_in">this</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Notifies listeners about ending scrolling</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">notifyScrollingListenersAboutEnd</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (OnWheelScrollListener listener : scrollingListeners) &#123;</span><br><span class="line">			listener.onScrollingFinished(<span class="built_in">this</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Adds wheel clicking listener</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> listener the listener</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addClickingListener</span><span class="params">(OnWheelClickedListener listener)</span> &#123;</span><br><span class="line">		clickingListeners.add(listener);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Removes wheel clicking listener</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> listener the listener</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeClickingListener</span><span class="params">(OnWheelClickedListener listener)</span> &#123;</span><br><span class="line">		clickingListeners.remove(listener);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Notifies listeners about clicking</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">notifyClickListenersAboutClick</span><span class="params">(<span class="type">int</span> item)</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (OnWheelClickedListener listener : clickingListeners) &#123;</span><br><span class="line">			listener.onItemClicked(<span class="built_in">this</span>, item);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Gets current value</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the current value</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurrentItem</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> currentItem;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Sets the current item. Does nothing when index is wrong.</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index the item index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> animated the animation flag</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrentItem</span><span class="params">(<span class="type">int</span> index, <span class="type">boolean</span> animated)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (viewAdapter == <span class="literal">null</span> || viewAdapter.getItemsCount() == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>; <span class="comment">// throw?</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> <span class="variable">itemCount</span> <span class="operator">=</span> viewAdapter.getItemsCount();</span><br><span class="line">		<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= itemCount) &#123;</span><br><span class="line">			<span class="keyword">if</span> (isCyclic) &#123;</span><br><span class="line">				<span class="keyword">while</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">					index += itemCount;</span><br><span class="line">				&#125;</span><br><span class="line">				index %= itemCount;</span><br><span class="line">			&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">return</span>; <span class="comment">// throw?</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (index != currentItem) &#123;</span><br><span class="line">			<span class="keyword">if</span> (animated) &#123;</span><br><span class="line">				<span class="type">int</span> <span class="variable">itemsToScroll</span> <span class="operator">=</span> index - currentItem;</span><br><span class="line">				<span class="keyword">if</span> (isCyclic) &#123;</span><br><span class="line">					<span class="type">int</span> <span class="variable">scroll</span> <span class="operator">=</span> itemCount + Math.min(index, currentItem) - Math.max(index, currentItem);</span><br><span class="line">					<span class="keyword">if</span> (scroll &lt; Math.abs(itemsToScroll)) &#123;</span><br><span class="line">						itemsToScroll = itemsToScroll &lt; <span class="number">0</span> ? scroll : -scroll;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				scroll(itemsToScroll, <span class="number">0</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				scrollingOffset = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">				<span class="type">int</span> <span class="variable">old</span> <span class="operator">=</span> currentItem;</span><br><span class="line">				currentItem = index;</span><br><span class="line"></span><br><span class="line">				notifyChangingListeners(old, currentItem);</span><br><span class="line"></span><br><span class="line">				invalidate();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Sets the current item w/o animation. Does nothing when index is wrong.</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index the item index</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrentItem</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">		setCurrentItem(index, <span class="literal">false</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Tests if wheel is cyclic. That means before the 1st item there is shown the last one</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true if wheel is cyclic</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCyclic</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> isCyclic;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Set wheel cyclic flag</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> isCyclic the flag to set</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCyclic</span><span class="params">(<span class="type">boolean</span> isCyclic)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.isCyclic = isCyclic;</span><br><span class="line">		invalidateWheel(<span class="literal">false</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Determine whether shadows are drawn</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true is shadows are drawn</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">drawShadows</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> drawShadows;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Set whether shadows should be drawn</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> drawShadows flag as true or false</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDrawShadows</span><span class="params">(<span class="type">boolean</span> drawShadows)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.drawShadows = drawShadows;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Set the shadow gradient color</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> middle</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setShadowColor</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> middle, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">		SHADOWS_COLORS = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;start, middle, end&#125;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Sets the drawable for the wheel background</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> resource</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWheelBackground</span><span class="params">(<span class="type">int</span> resource)</span> &#123;</span><br><span class="line">		wheelBackground = resource;</span><br><span class="line">		setBackgroundResource(wheelBackground);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Sets the drawable for the wheel foreground</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> resource</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWheelForeground</span><span class="params">(<span class="type">int</span> resource)</span> &#123;</span><br><span class="line">		wheelForeground = resource;</span><br><span class="line">		centerDrawable = getContext().getResources().getDrawable(wheelForeground);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Invalidates wheel</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> clearCaches if true then cached views will be clear</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invalidateWheel</span><span class="params">(<span class="type">boolean</span> clearCaches)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (clearCaches) &#123;</span><br><span class="line">			recycle.clearAll();</span><br><span class="line">			<span class="keyword">if</span> (itemsLayout != <span class="literal">null</span>) &#123;</span><br><span class="line">				itemsLayout.removeAllViews();</span><br><span class="line">			&#125;</span><br><span class="line">			scrollingOffset = <span class="number">0</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (itemsLayout != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="comment">// cache all items</span></span><br><span class="line">			recycle.recycleItems(itemsLayout, firstItem, <span class="keyword">new</span> <span class="title class_">ItemsRange</span>());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		invalidate();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Initializes resources</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initResourcesIfNecessary</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (centerDrawable == <span class="literal">null</span>) &#123;</span><br><span class="line">			centerDrawable = getContext().getResources().getDrawable(wheelForeground);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (topShadow == <span class="literal">null</span>) &#123;</span><br><span class="line">			topShadow = <span class="keyword">new</span> <span class="title class_">GradientDrawable</span>(Orientation.TOP_BOTTOM, SHADOWS_COLORS);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (bottomShadow == <span class="literal">null</span>) &#123;</span><br><span class="line">			bottomShadow = <span class="keyword">new</span> <span class="title class_">GradientDrawable</span>(Orientation.BOTTOM_TOP, SHADOWS_COLORS);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		setBackgroundResource(wheelBackground);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Calculates desired height for layout</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> layout</span></span><br><span class="line"><span class="comment">	 *            the source layout</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the desired layout height</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getDesiredHeight</span><span class="params">(LinearLayout layout)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (layout != <span class="literal">null</span> &amp;&amp; layout.getChildAt(<span class="number">0</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">			itemHeight = layout.getChildAt(<span class="number">0</span>).getMeasuredHeight();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> <span class="variable">desired</span> <span class="operator">=</span> itemHeight * visibleItems - itemHeight * ITEM_OFFSET_PERCENT / <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> Math.max(desired, getSuggestedMinimumHeight());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns height of wheel item</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the item height</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getItemHeight</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (itemHeight != <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> itemHeight;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (itemsLayout != <span class="literal">null</span> &amp;&amp; itemsLayout.getChildAt(<span class="number">0</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">			itemHeight = itemsLayout.getChildAt(<span class="number">0</span>).getHeight();</span><br><span class="line">			<span class="keyword">return</span> itemHeight;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> getHeight() / visibleItems;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Calculates control width and creates text layouts</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> widthSize the input layout width</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> mode the layout mode</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the calculated control width</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> <span class="title function_">calculateLayoutWidth</span><span class="params">(<span class="type">int</span> widthSize, <span class="type">int</span> mode)</span> &#123;</span><br><span class="line">		initResourcesIfNecessary();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span> make it static</span></span><br><span class="line">		itemsLayout.setLayoutParams(<span class="keyword">new</span> <span class="title class_">LayoutParams</span>(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));</span><br><span class="line">		itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize, MeasureSpec.UNSPECIFIED),</span><br><span class="line">				MeasureSpec.makeMeasureSpec(<span class="number">0</span>, MeasureSpec.UNSPECIFIED));</span><br><span class="line">		<span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> itemsLayout.getMeasuredWidth();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (mode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">			width = widthSize;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			width += <span class="number">2</span> * PADDING;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Check against our minimum width</span></span><br><span class="line">			width = Math.max(width, getSuggestedMinimumWidth());</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (mode == MeasureSpec.AT_MOST &amp;&amp; widthSize &lt; width) &#123;</span><br><span class="line">				width = widthSize;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - <span class="number">2</span> * PADDING, MeasureSpec.EXACTLY),</span><br><span class="line">				MeasureSpec.makeMeasureSpec(<span class="number">0</span>, MeasureSpec.UNSPECIFIED));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> width;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">widthMode</span> <span class="operator">=</span> MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">		<span class="type">int</span> <span class="variable">heightMode</span> <span class="operator">=</span> MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">		<span class="type">int</span> <span class="variable">widthSize</span> <span class="operator">=</span> MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">		<span class="type">int</span> <span class="variable">heightSize</span> <span class="operator">=</span> MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">		buildViewForMeasuring();</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> calculateLayoutWidth(widthSize, widthMode);</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> height;</span><br><span class="line">		<span class="keyword">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">			height = heightSize;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			height = getDesiredHeight(itemsLayout);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">				height = Math.min(height, heightSize);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		setMeasuredDimension(width, height);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onLayout</span><span class="params">(<span class="type">boolean</span> changed, <span class="type">int</span> l, <span class="type">int</span> t, <span class="type">int</span> r, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">		layout(r - l, b - t);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Sets layouts width and height</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> width the layout width</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> height the layout height</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">layout</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">itemsWidth</span> <span class="operator">=</span> width - <span class="number">2</span> * PADDING;</span><br><span class="line"></span><br><span class="line">		itemsLayout.layout(<span class="number">0</span>, <span class="number">0</span>, itemsWidth, height);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (viewAdapter != <span class="literal">null</span> &amp;&amp; viewAdapter.getItemsCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			updateView();</span><br><span class="line"></span><br><span class="line">			drawItems(canvas);</span><br><span class="line">			drawCenterRect(canvas);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (drawShadows) drawShadows(canvas);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Draws shadows on top and bottom of control</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> canvas the canvas for drawing</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">drawShadows</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">		<span class="comment">/*/ Modified by wulianghuan 2014-11-25</span></span><br><span class="line"><span class="comment">		int height = (int)(1.5 * getItemHeight());</span></span><br><span class="line"><span class="comment">		//*/</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> (<span class="type">int</span>)(<span class="number">3</span> * getItemHeight());</span><br><span class="line">		<span class="comment">//*/</span></span><br><span class="line">		topShadow.setBounds(<span class="number">0</span>, <span class="number">0</span>, getWidth(), height);</span><br><span class="line">		topShadow.draw(canvas);</span><br><span class="line"></span><br><span class="line">		bottomShadow.setBounds(<span class="number">0</span>, getHeight() - height, getWidth(), getHeight());</span><br><span class="line">		bottomShadow.draw(canvas);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Draws items</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> canvas the canvas for drawing</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">drawItems</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">		canvas.save();</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> (currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / <span class="number">2</span>;</span><br><span class="line">		canvas.translate(PADDING, - top + scrollingOffset);</span><br><span class="line"></span><br><span class="line">		itemsLayout.draw(canvas);</span><br><span class="line"></span><br><span class="line">		canvas.restore();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Draws rect for current value</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> canvas the canvas for drawing</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">drawCenterRect</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">center</span> <span class="operator">=</span> getHeight() / <span class="number">2</span>;</span><br><span class="line">		<span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> (<span class="type">int</span>) (getItemHeight() / <span class="number">2</span> * <span class="number">1.2</span>);</span><br><span class="line">		<span class="comment">/*/ Remarked by wulianghuan 2014-11-27  使用自己的画线，而不是描边</span></span><br><span class="line"><span class="comment">		Rect rect = new Rect(left, top, right, bottom)</span></span><br><span class="line"><span class="comment">		centerDrawable.setBounds(bounds)</span></span><br><span class="line"><span class="comment">		centerDrawable.setBounds(0, center - offset, getWidth(), center + offset);</span></span><br><span class="line"><span class="comment">		centerDrawable.draw(canvas);</span></span><br><span class="line"><span class="comment">		//*/</span></span><br><span class="line">		<span class="type">Paint</span> <span class="variable">paint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Paint</span>();</span><br><span class="line">		paint.setColor(getResources().getColor(R.color.province_line_border));</span><br><span class="line">		<span class="comment">// 设置线宽</span></span><br><span class="line">		paint.setStrokeWidth((<span class="type">float</span>) <span class="number">3</span>);</span><br><span class="line">		<span class="comment">// 绘制上边直线</span></span><br><span class="line">		canvas.drawLine(<span class="number">0</span>, center - offset, getWidth(), center - offset, paint);</span><br><span class="line">		<span class="comment">// 绘制下边直线</span></span><br><span class="line">		canvas.drawLine(<span class="number">0</span>, center + offset, getWidth(), center + offset, paint);</span><br><span class="line">		<span class="comment">//*/</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (!isEnabled() || getViewAdapter() == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">			<span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">				<span class="keyword">if</span> (getParent() != <span class="literal">null</span>) &#123;</span><br><span class="line">					getParent().requestDisallowInterceptTouchEvent(<span class="literal">true</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">				<span class="keyword">if</span> (!isScrollingPerformed) &#123;</span><br><span class="line">					<span class="type">int</span> <span class="variable">distance</span> <span class="operator">=</span> (<span class="type">int</span>) event.getY() - getHeight() / <span class="number">2</span>;</span><br><span class="line">					<span class="keyword">if</span> (distance &gt; <span class="number">0</span>) &#123;</span><br><span class="line">						distance += getItemHeight() / <span class="number">2</span>;</span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">						distance -= getItemHeight() / <span class="number">2</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="type">int</span> <span class="variable">items</span> <span class="operator">=</span> distance / getItemHeight();</span><br><span class="line">					<span class="keyword">if</span> (items != <span class="number">0</span> &amp;&amp; isValidItemIndex(currentItem + items)) &#123;</span><br><span class="line">						notifyClickListenersAboutClick(currentItem + items);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> scroller.onTouchEvent(event);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Scrolls the wheel</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> delta the scrolling value</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doScroll</span><span class="params">(<span class="type">int</span> delta)</span> &#123;</span><br><span class="line">		scrollingOffset += delta;</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> <span class="variable">itemHeight</span> <span class="operator">=</span> getItemHeight();</span><br><span class="line">		<span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> scrollingOffset / itemHeight;</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> currentItem - count;</span><br><span class="line">		<span class="type">int</span> <span class="variable">itemCount</span> <span class="operator">=</span> viewAdapter.getItemsCount();</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> <span class="variable">fixPos</span> <span class="operator">=</span> scrollingOffset % itemHeight;</span><br><span class="line">		<span class="keyword">if</span> (Math.abs(fixPos) &lt;= itemHeight / <span class="number">2</span>) &#123;</span><br><span class="line">			fixPos = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (isCyclic &amp;&amp; itemCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (fixPos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				pos--;</span><br><span class="line">				count++;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (fixPos &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				pos++;</span><br><span class="line">				count--;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// fix position by rotating</span></span><br><span class="line">			<span class="keyword">while</span> (pos &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				pos += itemCount;</span><br><span class="line">			&#125;</span><br><span class="line">			pos %= itemCount;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//</span></span><br><span class="line">			<span class="keyword">if</span> (pos &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				count = currentItem;</span><br><span class="line">				pos = <span class="number">0</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pos &gt;= itemCount) &#123;</span><br><span class="line">				count = currentItem - itemCount + <span class="number">1</span>;</span><br><span class="line">				pos = itemCount - <span class="number">1</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pos &gt; <span class="number">0</span> &amp;&amp; fixPos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				pos--;</span><br><span class="line">				count++;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pos &lt; itemCount - <span class="number">1</span> &amp;&amp; fixPos &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				pos++;</span><br><span class="line">				count--;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> scrollingOffset;</span><br><span class="line">		<span class="keyword">if</span> (pos != currentItem) &#123;</span><br><span class="line">			setCurrentItem(pos, <span class="literal">false</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			invalidate();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// update offset</span></span><br><span class="line">		scrollingOffset = offset - count * itemHeight;</span><br><span class="line">		<span class="keyword">if</span> (scrollingOffset &gt; getHeight()) &#123;</span><br><span class="line">			scrollingOffset = scrollingOffset % getHeight() + getHeight();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Scroll the wheel</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> itemsToSkip items to scroll</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> time scrolling duration</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scroll</span><span class="params">(<span class="type">int</span> itemsToScroll, <span class="type">int</span> time)</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">distance</span> <span class="operator">=</span> itemsToScroll * getItemHeight() - scrollingOffset;</span><br><span class="line">		scroller.scroll(distance, time);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Calculates range for wheel items</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the items range</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> ItemsRange <span class="title function_">getItemsRange</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (getItemHeight() == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> currentItem;</span><br><span class="line">		<span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (count * getItemHeight() &lt; getHeight()) &#123;</span><br><span class="line">			first--;</span><br><span class="line">			count += <span class="number">2</span>; <span class="comment">// top + bottom items</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (scrollingOffset != <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (scrollingOffset &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				first--;</span><br><span class="line">			&#125;</span><br><span class="line">			count++;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// process empty items above the first or below the second</span></span><br><span class="line">			<span class="type">int</span> <span class="variable">emptyItems</span> <span class="operator">=</span> scrollingOffset / getItemHeight();</span><br><span class="line">			first -= emptyItems;</span><br><span class="line">			count += Math.asin(emptyItems);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ItemsRange</span>(first, count);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Rebuilds wheel items if necessary. Caches all unused items.</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true if items are rebuilt</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">rebuildItems</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">boolean</span> <span class="variable">updated</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="type">ItemsRange</span> <span class="variable">range</span> <span class="operator">=</span> getItemsRange();</span><br><span class="line">		<span class="keyword">if</span> (itemsLayout != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> recycle.recycleItems(itemsLayout, firstItem, range);</span><br><span class="line">			updated = firstItem != first;</span><br><span class="line">			firstItem = first;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			createItemsLayout();</span><br><span class="line">			updated = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!updated) &#123;</span><br><span class="line">			updated = firstItem != range.getFirst() || itemsLayout.getChildCount() != range.getCount();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (firstItem &gt; range.getFirst() &amp;&amp; firstItem &lt;= range.getLast()) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> firstItem - <span class="number">1</span>; i &gt;= range.getFirst(); i--) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!addViewItem(i, <span class="literal">true</span>)) &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				firstItem = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			firstItem = range.getFirst();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> firstItem;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> itemsLayout.getChildCount(); i &lt; range.getCount(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!addViewItem(firstItem + i, <span class="literal">false</span>) &amp;&amp; itemsLayout.getChildCount() == <span class="number">0</span>) &#123;</span><br><span class="line">				first++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		firstItem = first;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> updated;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Updates view. Rebuilds items and label if necessary, recalculate items sizes.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateView</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (rebuildItems()) &#123;</span><br><span class="line">			calculateLayoutWidth(getWidth(), MeasureSpec.EXACTLY);</span><br><span class="line">			layout(getWidth(), getHeight());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Creates item layouts if necessary</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createItemsLayout</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (itemsLayout == <span class="literal">null</span>) &#123;</span><br><span class="line">			itemsLayout = <span class="keyword">new</span> <span class="title class_">LinearLayout</span>(getContext());</span><br><span class="line">			itemsLayout.setOrientation(LinearLayout.VERTICAL);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Builds view for measuring</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildViewForMeasuring</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// clear all items</span></span><br><span class="line">		<span class="keyword">if</span> (itemsLayout != <span class="literal">null</span>) &#123;</span><br><span class="line">			recycle.recycleItems(itemsLayout, firstItem, <span class="keyword">new</span> <span class="title class_">ItemsRange</span>());</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			createItemsLayout();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// add views</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">addItems</span> <span class="operator">=</span> visibleItems / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> currentItem + addItems; i &gt;= currentItem - addItems; i--) &#123;</span><br><span class="line">			<span class="keyword">if</span> (addViewItem(i, <span class="literal">true</span>)) &#123;</span><br><span class="line">				firstItem = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Adds view for item to items layout</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index the item index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> first the flag indicates if view should be first</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true if corresponding item exists and is added</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">addViewItem</span><span class="params">(<span class="type">int</span> index, <span class="type">boolean</span> first)</span> &#123;</span><br><span class="line">		<span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> getItemView(index);</span><br><span class="line">		<span class="keyword">if</span> (view != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (first) &#123;</span><br><span class="line">				itemsLayout.addView(view, <span class="number">0</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				itemsLayout.addView(view);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Checks whether intem index is valid</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index the item index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true if item index is not out of bounds or the wheel is cyclic</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValidItemIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> viewAdapter != <span class="literal">null</span> &amp;&amp; viewAdapter.getItemsCount() &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">				(isCyclic || index &gt;= <span class="number">0</span> &amp;&amp; index &lt; viewAdapter.getItemsCount());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns view for specified item</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index the item index</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> item view or empty view if index is out of bounds</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> View <span class="title function_">getItemView</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (viewAdapter == <span class="literal">null</span> || viewAdapter.getItemsCount() == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> viewAdapter.getItemsCount();</span><br><span class="line">		<span class="keyword">if</span> (!isValidItemIndex(index)) &#123;</span><br><span class="line">			<span class="keyword">return</span> viewAdapter.getEmptyItem(recycle.getEmptyItem(), itemsLayout);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">while</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				index = count + index;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		index %= count;</span><br><span class="line">		<span class="keyword">return</span> viewAdapter.getItem(index, recycle.getItem(), itemsLayout);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Stops scrolling</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stopScrolling</span><span class="params">()</span> &#123;</span><br><span class="line">		scroller.stopScrolling();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p><strong>dialog_choose_date.xml 这是dialog的布局</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">    android:background=<span class="string">&quot;@drawable/radius_style&quot;</span></span><br><span class="line">    android:paddingBottom=<span class="string">&quot;25dp&quot;</span></span><br><span class="line">    android:paddingTop=<span class="string">&quot;20dp&quot;</span></span><br><span class="line">    android:paddingLeft=<span class="string">&quot;@dimen/dp_10&quot;</span></span><br><span class="line">    android:paddingRight=<span class="string">&quot;@dimen/dp_10&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/tv_start_date&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:gravity=<span class="string">&quot;center_vertical|center&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;2020-01-01&quot;</span></span><br><span class="line">        android:textColor=<span class="string">&quot;#444&quot;</span></span><br><span class="line">        android:padding=<span class="string">&quot;@dimen/dp_10&quot;</span></span><br><span class="line">        android:background=<span class="string">&quot;@color/default_app_bg&quot;</span></span><br><span class="line">        android:textSize=<span class="string">&quot;16sp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/tv_to&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_below=<span class="string">&quot;@+id/tv_start_date&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;20dp&quot;</span></span><br><span class="line">        android:gravity=<span class="string">&quot;center_vertical|center&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;至&quot;</span></span><br><span class="line">        android:textColor=<span class="string">&quot;#444&quot;</span></span><br><span class="line">        android:textSize=<span class="string">&quot;16sp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/tv_end_date&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:padding=<span class="string">&quot;@dimen/dp_10&quot;</span></span><br><span class="line">        android:background=<span class="string">&quot;@color/default_app_bg&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_below=<span class="string">&quot;@+id/tv_to&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;20dp&quot;</span></span><br><span class="line">        android:gravity=<span class="string">&quot;center_vertical|center&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;2020-02-01&quot;</span></span><br><span class="line">        android:textColor=<span class="string">&quot;#444&quot;</span></span><br><span class="line">        android:textSize=<span class="string">&quot;16sp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=<span class="string">&quot;@+id/btn_ok&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_centerHorizontal=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:layout_below=<span class="string">&quot;@+id/tv_end_date&quot;</span></span><br><span class="line">        android:background=<span class="string">&quot;@android:color/holo_blue_dark&quot;</span></span><br><span class="line">        android:padding=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;33dp&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;确定&quot;</span></span><br><span class="line">        android:textColor=<span class="string">&quot;#FFFFFF&quot;</span></span><br><span class="line">        android:textSize=<span class="string">&quot;16dp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Activity中调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> AlertDialog alertDialog;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 弹出日期范围选择弹窗</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showDateRangeDialog</span><span class="params">()</span> &#123;</span><br><span class="line">    alertDialog = <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(<span class="built_in">this</span>).create();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Window</span> <span class="variable">window</span> <span class="operator">=</span> alertDialog.getWindow();</span><br><span class="line">    alertDialog.show();</span><br><span class="line">    window.clearFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);<span class="comment">// 显示软键盘</span></span><br><span class="line">    window.setContentView(R.layout.dialog_choose_date);<span class="comment">// 加载自定义布局</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">TextView</span> <span class="variable">startDateTv</span> <span class="operator">=</span> (TextView) window.findViewById(R.id.tv_start_date);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">TextView</span> <span class="variable">endDateTv</span> <span class="operator">=</span> (TextView) window.findViewById(R.id.tv_end_date);</span><br><span class="line">    startDateTv.setText(<span class="string">&quot;2020-01-01&quot;</span>);</span><br><span class="line">    endDateTv.setText(<span class="string">&quot;2020-02-01&quot;</span>);</span><br><span class="line">    startDateTv.setOnClickListener(<span class="keyword">new</span> <span class="title class_">OnClickListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> startDateTv.getText().toString().trim().replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            showDatePickerDialog(startDateTv, dateStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    endDateTv.setOnClickListener(<span class="keyword">new</span> <span class="title class_">OnClickListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> endDateTv.getText().toString().trim().replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            showDatePickerDialog(endDateTv, dateStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确定按键监听</span></span><br><span class="line">    window.findViewById(R.id.btn_ok).setOnClickListener(<span class="keyword">new</span> <span class="title class_">OnClickListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">startDateStr</span> <span class="operator">=</span> startDateTv.getText().toString().trim().replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">endDateStr</span> <span class="operator">=</span> endDateTv.getText().toString().trim().replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(startDateStr) || StringUtils.isEmpty(endDateStr)) &#123;</span><br><span class="line">                ToastUtil.showToastLong(MainStoreActivity.<span class="built_in">this</span>, <span class="string">&quot;请选择日期！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//比较开始日期和结束日期，哪个比较大则作为结束日期传入</span></span><br><span class="line">                String temp;</span><br><span class="line">                <span class="keyword">if</span> (startDateStr.compareTo(endDateStr) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    temp = endDateStr;</span><br><span class="line">                    endDateStr = startDateStr;</span><br><span class="line">                    startDateStr = temp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//todo：可以使用这两个日期进行其他的操作</span></span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打开日期选择器，选择具体某一天</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showDatePickerDialog</span><span class="params">(<span class="keyword">final</span> TextView dateTv, String dateStr)</span> &#123;</span><br><span class="line">    <span class="type">DateOrCityChooseLdy</span> <span class="variable">datePickerDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DateOrCityChooseLdy</span>(mContext, R.style.FullScreenDialog, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//生日参数不为空。设置日期选择框为用户生日信息</span></span><br><span class="line">    String[] dates = dateStr.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    datePickerDialog.setYear(Integer.valueOf(dates[<span class="number">0</span>]));</span><br><span class="line">    datePickerDialog.setMonth(Integer.valueOf(dates[<span class="number">1</span>]));</span><br><span class="line">    datePickerDialog.setDay(Integer.valueOf(dates[<span class="number">2</span>]));<span class="comment">//设置为当前用户的年月日</span></span><br><span class="line"></span><br><span class="line">    datePickerDialog.setDateOrCityChooseListener(<span class="keyword">new</span> <span class="title class_">DateOrCityChooseLdy</span>.DateOrCityChooseListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCancel</span><span class="params">(DateOrCityChooseLdy chooseLdy)</span> &#123;</span><br><span class="line">            chooseLdy.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConfirm</span><span class="params">(String date, DateOrCityChooseLdy dateChooseLdy)</span> &#123;</span><br><span class="line">            dateTv.setText(date);</span><br><span class="line">            dateChooseLdy.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">Window</span> <span class="variable">window</span> <span class="operator">=</span> datePickerDialog.getWindow();</span><br><span class="line">    window.setWindowAnimations(R.style.PopupAnimation);</span><br><span class="line">    window.setGravity(Gravity.BOTTOM);</span><br><span class="line">    window.getDecorView().setPadding(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    WindowManager.<span class="type">LayoutParams</span> <span class="variable">lp</span> <span class="operator">=</span> window.getAttributes();</span><br><span class="line">    lp.width = WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">    lp.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">    window.setAttributes(lp);</span><br><span class="line">    datePickerDialog.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="带输入框的弹窗"><a href="#带输入框的弹窗" class="headerlink" title="带输入框的弹窗"></a>带输入框的弹窗</h2><p><strong>示例图</strong></p>
<p>带输入框的弹窗.jpg</p>
<p><strong>ChangePriceDialog.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用以更改价格or库存的dialog</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shenbh</span></span><br><span class="line"><span class="comment"> * time 2020-02-13 11:55</span></span><br><span class="line"><span class="comment"> * email shenbh@qq.com</span></span><br><span class="line"><span class="comment"> * 维护者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangePriceDialog</span> <span class="keyword">extends</span> <span class="title class_">BaseDialog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> View customView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView titleTv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText editText;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button confirmBtn;</span><br><span class="line">    <span class="keyword">private</span> Button cancelBtn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChangePriceDialog</span><span class="params">(Activity context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        setCancelable(<span class="literal">true</span>);</span><br><span class="line">        customView = LayoutInflater.from(getContext()).inflate(R.layout.dialog_change_price, <span class="literal">null</span>);</span><br><span class="line">        setContentView(customView);</span><br><span class="line"></span><br><span class="line">        titleTv = (TextView) customView.findViewById(R.id.dialog_change_type);</span><br><span class="line">        editText = (EditText) customView.findViewById(R.id.dialog_change_et);</span><br><span class="line"><span class="comment">//        editText.setKeyListener(new DigitsKeyListener() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int getInputType() &#123;</span></span><br><span class="line"><span class="comment">//                return InputType.TYPE_TEXT_VARIATION_PASSWORD;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            protected char[] getAcceptedChars() &#123;</span></span><br><span class="line"><span class="comment">//                char[] data = getStringData(R.string.login_only_can_input).toCharArray();</span></span><br><span class="line"><span class="comment">//                return data;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">        confirmBtn = (Button) customView.findViewById(R.id.ok_btn);</span><br><span class="line">        cancelBtn = (Button) customView.findViewById(R.id.cancel_btn);</span><br><span class="line"></span><br><span class="line">        cancelBtn.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                ChangePriceDialog.<span class="built_in">this</span>.dismiss();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        WindowManager.<span class="type">LayoutParams</span> <span class="variable">params</span> <span class="operator">=</span> getWindow().getAttributes();</span><br><span class="line">        params.width = dpToPixels(context, <span class="number">288</span>);</span><br><span class="line">        params.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">        getWindow().setAttributes(params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取输入框内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getText</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> editText.getText().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setText</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        editText.setText(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getCustomView</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> customView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置输入的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTextLimit</span><span class="params">(<span class="type">int</span> digit)</span> &#123;</span><br><span class="line">        editText.setFilters(<span class="keyword">new</span> <span class="title class_">InputFilter</span>[]&#123;<span class="keyword">new</span> <span class="title class_">InputFilter</span>.LengthFilter(digit)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置小数点后两位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDecimalLimit</span><span class="params">()</span>&#123;</span><br><span class="line">        editText.addTextChangedListener(<span class="keyword">new</span> <span class="title class_">TextWatcher</span>() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> selectionStart;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> selectionEnd;</span><br><span class="line">            <span class="keyword">private</span> CharSequence temp;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeTextChanged</span><span class="params">(CharSequence s, <span class="type">int</span> start, <span class="type">int</span> count, <span class="type">int</span> after)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTextChanged</span><span class="params">(CharSequence s, <span class="type">int</span> start, <span class="type">int</span> before, <span class="type">int</span> count)</span> &#123;</span><br><span class="line">                temp = s;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterTextChanged</span><span class="params">(Editable s)</span> &#123;</span><br><span class="line">                selectionStart = editText.getSelectionStart();</span><br><span class="line">                selectionEnd = editText.getSelectionEnd();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!isOnlyPointNumber(editText.getText().toString()))&#123;</span><br><span class="line">                    <span class="comment">//删除多余输入的字（不会显示出来）</span></span><br><span class="line">                    s.delete(selectionStart - <span class="number">1</span>, selectionEnd);</span><br><span class="line">                    editText.setText(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置保留两位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> number</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOnlyPointNumber</span><span class="params">(String number)</span> &#123;<span class="comment">//保留两位小数正则</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^\\d+\\.?\\d&#123;0,2&#125;$&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(number);</span><br><span class="line">        <span class="keyword">return</span> matcher.matches();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**设置输入框的inputType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputType</span></span><br><span class="line"><span class="comment">     *              InputType.TYPE_CLASS_NUMBER         输入类型为数字文本</span></span><br><span class="line"><span class="comment">     *              InputType.TYPE_NUMBER_FLAG_DECIMAL  输入类型为小数数字，允许十进制小数点提供分数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEdtInputType</span><span class="params">(<span class="type">int</span> inputType)</span>&#123;</span><br><span class="line">        editText.setInputType(inputType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置标题的文案</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCustomTitle</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        titleTv.setText(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置确认按钮的文案</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setConfirmText</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        confirmBtn.setText(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置取消按钮的文案</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCancelText</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        cancelBtn.setText(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置&quot;确认&quot;的监听事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> onClickListener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setConfirmListener</span><span class="params">(View.OnClickListener onClickListener)</span> &#123;</span><br><span class="line">        confirmBtn.setOnClickListener(onClickListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置&quot;取消&quot;的监听事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> onClickListener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCancelListener</span><span class="params">(View.OnClickListener onClickListener)</span> &#123;</span><br><span class="line">        cancelBtn.setOnClickListener(onClickListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.show();</span><br><span class="line">        keyBoradHandler(editText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">keyBoradHandler</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);</span><br><span class="line">        <span class="type">InputMethodManager</span> <span class="variable">imm</span> <span class="operator">=</span> (InputMethodManager) getContext().</span><br><span class="line">                getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line">        imm.showSoftInput(customView, <span class="number">0</span>); <span class="comment">//显示软键盘</span></span><br><span class="line">        imm.toggleSoftInput(<span class="number">0</span>, InputMethodManager.HIDE_NOT_ALWAYS); <span class="comment">//显示软键盘</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置光标位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPosition</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CharSequence</span> <span class="variable">text</span> <span class="operator">=</span> editText.getText();</span><br><span class="line">        <span class="comment">//Debug.asserts(text instanceof Spannable);</span></span><br><span class="line">        <span class="keyword">if</span> (text <span class="keyword">instanceof</span> Spannable) &#123;</span><br><span class="line">            <span class="type">Spannable</span> <span class="variable">spanText</span> <span class="operator">=</span> (Spannable) text;</span><br><span class="line">            Selection.setSelection(spanText, text.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dpToPixels</span><span class="params">(Context context, <span class="type">float</span> dp)</span> &#123;</span><br><span class="line">        <span class="type">Resources</span> <span class="variable">res</span> <span class="operator">=</span> context.getResources();</span><br><span class="line">        <span class="type">float</span> <span class="variable">px</span> <span class="operator">=</span> TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, res.getDisplayMetrics());</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>dialog_change_price.xml</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;288dp&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">    android:background=<span class="string">&quot;@color/white&quot;</span></span><br><span class="line">    android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">    android:padding=<span class="string">&quot;27dp&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/dialog_change_type&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:singleLine=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;售价&quot;</span></span><br><span class="line">        android:paddingBottom=<span class="string">&quot;@dimen/dp_10&quot;</span></span><br><span class="line">        android:paddingTop=<span class="string">&quot;@dimen/dp_10&quot;</span></span><br><span class="line">        android:gravity=<span class="string">&quot;center_vertical&quot;</span></span><br><span class="line">        android:textColor=<span class="string">&quot;#444&quot;</span></span><br><span class="line">        android:textSize=<span class="string">&quot;16sp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id=<span class="string">&quot;@+id/dialog_change_et&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;40dp&quot;</span></span><br><span class="line">        android:layout_alignTop=<span class="string">&quot;@+id/dialog_change_type&quot;</span></span><br><span class="line">        android:layout_marginLeft=<span class="string">&quot;10dp&quot;</span></span><br><span class="line">        android:layout_toRightOf=<span class="string">&quot;@+id/dialog_change_type&quot;</span></span><br><span class="line">        android:layout_alignBottom=<span class="string">&quot;@+id/dialog_change_type&quot;</span></span><br><span class="line">        android:background=<span class="string">&quot;@drawable/bg_about_app_item&quot;</span></span><br><span class="line">        android:paddingLeft=<span class="string">&quot;8dp&quot;</span></span><br><span class="line">        android:paddingRight=<span class="string">&quot;8dp&quot;</span></span><br><span class="line">        android:textColor=<span class="string">&quot;#444&quot;</span></span><br><span class="line">        android:textColorHint=<span class="string">&quot;#999&quot;</span></span><br><span class="line">        android:textSize=<span class="string">&quot;16dp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_below=<span class="string">&quot;@+id/dialog_change_type&quot;</span></span><br><span class="line">        android:orientation=<span class="string">&quot;horizontal&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=<span class="string">&quot;@+id/ok_btn&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;40dp&quot;</span></span><br><span class="line">            android:layout_marginTop=<span class="string">&quot;28dp&quot;</span></span><br><span class="line">            android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">            android:background=<span class="string">&quot;@drawable/bg_solid_23b4f3_corners_3&quot;</span></span><br><span class="line">            android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;确认&quot;</span></span><br><span class="line">            android:textColor=<span class="string">&quot;#ffffff&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;15sp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=<span class="string">&quot;@+id/cancel_btn&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;40dp&quot;</span></span><br><span class="line">            android:layout_marginTop=<span class="string">&quot;28dp&quot;</span></span><br><span class="line">            android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">            android:layout_marginLeft=<span class="string">&quot;@dimen/dp_10&quot;</span></span><br><span class="line">            android:background=<span class="string">&quot;@drawable/bg_border_dddddd_corners_3&quot;</span></span><br><span class="line">            android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">            android:text=<span class="string">&quot;取消&quot;</span></span><br><span class="line">            android:textColor=<span class="string">&quot;#999999&quot;</span></span><br><span class="line">            android:textSize=<span class="string">&quot;15sp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>

<p><strong>在Activity中调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ChangePriceDialog</span> <span class="variable">changePriceDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChangePriceDialog</span>(<span class="built_in">this</span>);</span><br><span class="line">changePriceDialog.setCustomTitle(changeType == <span class="number">0</span> ? <span class="string">&quot;售价&quot;</span>: <span class="string">&quot;库存&quot;</span>);</span><br><span class="line">changePriceDialog.setEdtInputType(changeType == <span class="number">0</span> ? (InputType.TYPE_CLASS_NUMBER|InputType.TYPE_NUMBER_FLAG_DECIMAL|InputType.TYPE_NUMBER_VARIATION_NORMAL) : InputType.TYPE_CLASS_NUMBER);</span><br><span class="line"><span class="keyword">if</span> (changeType == <span class="number">0</span>) &#123;</span><br><span class="line">		changePriceDialog.setDecimalLimit();</span><br><span class="line">&#125;</span><br><span class="line">changePriceDialog.setTextLimit(<span class="number">8</span>);</span><br><span class="line">changePriceDialog.setConfirmListener(<span class="keyword">new</span> <span class="title class_">OnClickListener</span>() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">				</span><br><span class="line">		&#125;</span><br><span class="line">&#125;);</span><br><span class="line">changePriceDialog.show();</span><br></pre></td></tr></table></figure>



<h2 id="带一个-x2F-两个按钮的提示dialog"><a href="#带一个-x2F-两个按钮的提示dialog" class="headerlink" title="带一个&#x2F;两个按钮的提示dialog"></a>带一个&#x2F;两个按钮的提示dialog</h2><p><strong>效果图</strong></p>
<p>带一个确认按钮的dialog.png</p>
<p>带两个按钮的dialog.png</p>
<p>带两个按钮的dialog.png</p>
<p><strong>CommentTipDialog.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拥有确定和确定与取消2种样式dialog</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommentTipDialog</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">OK</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">OK_AND_CANCEL</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * dialog类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mDialogType;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView okBtn;</span><br><span class="line">    <span class="keyword">private</span> TextView cancelBtn;</span><br><span class="line">    <span class="keyword">private</span> TextView dialogTitleTv;</span><br><span class="line">    <span class="keyword">private</span> AlertDialog alertDialog;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内容文本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String dialogTitle;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确定文本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String okStr;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消文本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String cancelStr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommentTipDialog</span><span class="params">(Context context, <span class="type">int</span> dialogType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mContext = context;</span><br><span class="line">        <span class="built_in">this</span>.mDialogType = dialogType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        alertDialog = <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(mContext).create();</span><br><span class="line">        alertDialog.show();</span><br><span class="line">        <span class="keyword">if</span>(mDialogType == OK)&#123;</span><br><span class="line">            alertDialog.setContentView(R.layout.dialog_alert);</span><br><span class="line">            okBtn = (TextView) alertDialog.findViewById(R.id.ok_btn);</span><br><span class="line">            okBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mDialogType == OK_AND_CANCEL)&#123;</span><br><span class="line">            alertDialog.setContentView(R.layout.dialog_confirm);</span><br><span class="line">            okBtn = (TextView) alertDialog.findViewById(R.id.ok_btn);</span><br><span class="line">            cancelBtn = (TextView) alertDialog.findViewById(R.id.cancel_btn);</span><br><span class="line">            okBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">            cancelBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dialogTitleTv = (TextView) alertDialog.findViewById(R.id.dialog_title);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(dialogTitle))&#123;</span><br><span class="line">            dialogTitleTv.setText(dialogTitle);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(okStr))&#123;</span><br><span class="line">            okBtn.setText(okStr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(cancelStr))&#123;</span><br><span class="line">            cancelBtn.setText(cancelStr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCancelStr</span><span class="params">(String cancelStr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cancelStr = cancelStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDialogTitle</span><span class="params">(String dialogTitle)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dialogTitle = dialogTitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOkStr</span><span class="params">(String okStr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.okStr = okStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.ok_btn:</span><br><span class="line">                listener.commonDialogClick(view);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.cancel_btn:</span><br><span class="line">                dismiss();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OnCommonDialogClickListener</span>&#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">commonDialogClick</span><span class="params">(View view)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> OnCommonDialogClickListener listener;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOnCommonDialogClickListener</span><span class="params">(OnCommonDialogClickListener l)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.listener = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * dialog消失</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dismiss</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(alertDialog.isShowing())&#123;</span><br><span class="line">            alertDialog.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>dialog_alert.xml</strong> 带一个按钮的dialog的布局文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingLeft</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingRight</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">&quot;28dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">&quot;28dp&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@drawable/corner_white&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/dialog_title&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:lineSpacingExtra</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#444444&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;16sp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/ok_btn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;28dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minWidth</span>=<span class="string">&quot;400dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;15sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;我知道了&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/corner_ff5252&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>drawable&#x2F;corner_ff5252.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">&quot;#ff5252&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;3dp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">padding</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:bottom</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:left</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:right</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:top</span>=<span class="string">&quot;5dp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>dialog_confirm.xml</strong> 带两个按钮的dialog的布局文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:padding</span>=<span class="string">&quot;28dp&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:background</span>=<span class="string">&quot;@drawable/corner_white&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/dialog_title&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:lineSpacingExtra</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#444444&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;16sp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/cancel_btn&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;28dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#999999&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;15sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;取消&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@drawable/corner_ffffff&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/ok_btn&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;28dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;40dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;15sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;27dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;我知道了&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@drawable/corner_ff5252&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个按钮</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showRuleDialog</span><span class="params">(String rule)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">CommentTipDialog</span> <span class="variable">dialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommentTipDialog</span>(<span class="built_in">this</span>, CommentTipDialog.OK);</span><br><span class="line">    dialog.setOkStr(<span class="string">&quot;我知道了&quot;</span>);</span><br><span class="line">    dialog.setDialogTitle(rule);</span><br><span class="line">    dialog.show();</span><br><span class="line">    dialog.setOnCommonDialogClickListener(<span class="keyword">new</span> <span class="title class_">CommentTipDialog</span>.OnCommonDialogClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commonDialogClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">            <span class="comment">//点击按钮后的一些事件</span></span><br><span class="line">            dialog.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两个按钮</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showRuleDialog</span><span class="params">(String rule)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">CommentTipDialog</span> <span class="variable">dialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommentTipDialog</span>(<span class="built_in">this</span>, CommentTipDialog.OK_AND_CANCEL);</span><br><span class="line">    dialog.setOkStr(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line">    dialog.setCancelStr(<span class="string">&quot;取消&quot;</span>);</span><br><span class="line">    dialog.setDialogTitle(rule);</span><br><span class="line">    dialog.show();</span><br><span class="line">    dialog.setOnCommonDialogClickListener(<span class="keyword">new</span> <span class="title class_">CommentTipDialog</span>.OnCommonDialogClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commonDialogClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">            <span class="comment">//点确认按钮后的一些事件</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Dialog去除边框"><a href="#Dialog去除边框" class="headerlink" title="Dialog去除边框"></a><a href="https://blog.csdn.net/weixin_36838630/article/details/78541869">Dialog去除边框</a></h2><p>先新建一个Style</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dialog样式   没有四周边框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;ShareDialog&quot;</span>  <span class="attr">parent</span>=<span class="string">&quot;android:Theme.Dialog&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowFrame&quot;</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowNoTitle&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:background&quot;</span>&gt;</span>@color/colorTransparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowBackground&quot;</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsFloating&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowContentOverlay&quot;</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:backgroundDimAmount&quot;</span>&gt;</span>0.7<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>新建一个类继承Dialog</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OBDPopDialog</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OBDPopDialog</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, R.style.ShareDialog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就和一般的Dialog用法一样了（下面代码附带让Dialog出现位置以及展示大小）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">OBDPopDialog</span> <span class="variable">dialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OBDPopDialog</span>(mContext);</span><br><span class="line"><span class="type">View</span> <span class="variable">view_rd</span> <span class="operator">=</span> LayoutInflater.from(mContext).inflate(R.layout.dialog_display_remove_display, <span class="literal">null</span>);</span><br><span class="line">setPromptWin(dialog);</span><br><span class="line">dialog.setContentView(view_rd);</span><br><span class="line">dialog.setCanceledOnTouchOutside(<span class="literal">true</span>);</span><br><span class="line">dialog.show();</span><br></pre></td></tr></table></figure>

<p>里面的那个方法就是控制位置和大小的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setPromptWin</span><span class="params">(OBDPopDialog dia)</span> &#123;</span><br><span class="line">    <span class="type">Window</span> <span class="variable">win</span> <span class="operator">=</span> dia.getWindow();</span><br><span class="line">    WindowManager.<span class="type">LayoutParams</span> <span class="variable">lp</span> <span class="operator">=</span> win.getAttributes();</span><br><span class="line">    win.setGravity(Gravity.LEFT | Gravity.TOP);</span><br><span class="line">    lp.x = (<span class="type">int</span>) (ScreenUtils.getScreenWidth(mContext) * <span class="number">0.141333</span>);</span><br><span class="line">    lp.y = (<span class="type">int</span>) (ScreenUtils.getScreenHeight(mContext) * <span class="number">0.293663</span>);</span><br><span class="line">    win.setAttributes(lp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="Dialog设置全屏时隐藏状态栏"><a href="#Dialog设置全屏时隐藏状态栏" class="headerlink" title="Dialog设置全屏时隐藏状态栏"></a><a href="https://blog.csdn.net/weixin_36838630/article/details/78541869">Dialog设置全屏时隐藏状态栏</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OBDDialogP</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OBDDialogP</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context , R.style.kdialog);</span><br><span class="line">        setCancelable(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        applyCompat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">applyCompat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">19</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        getWindow().setFlags(</span><br><span class="line">            WindowManager.LayoutParams.FLAG_FULLSCREEN,</span><br><span class="line">            WindowManager.LayoutParams.FLAG_FULLSCREEN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>里面的Style 文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dialog 样式  四周没有边框 加 全屏时不会有隐藏标题栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;kdialog&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;@android:style/Theme.Dialog&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowBackground&quot;</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowFrame&quot;</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowNoTitle&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsFloating&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsTranslucent&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:backgroundDimEnabled&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>调用的时候</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">OBDDialogP</span> <span class="variable">dialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OBDDialogP</span>(<span class="built_in">this</span>);</span><br><span class="line"><span class="type">View</span> <span class="variable">viewDialog</span> <span class="operator">=</span> LayoutInflater.from(<span class="built_in">this</span>).inflate(R.layout.dialog_perfoemance_other, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">dialog.setContentView(viewDialog);</span><br><span class="line">dialog.setCanceledOnTouchOutside(<span class="literal">false</span>);</span><br><span class="line">dialog.show();</span><br><span class="line">setPromptWin(dialog);</span><br></pre></td></tr></table></figure>

<p>自定义方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setPromptWin</span><span class="params">(OBDDialogP dia)</span> &#123;</span><br><span class="line">    <span class="type">WindowManager</span> <span class="variable">windowManager</span> <span class="operator">=</span> getWindowManager();</span><br><span class="line">    <span class="type">Display</span> <span class="variable">display</span> <span class="operator">=</span> windowManager.getDefaultDisplay();</span><br><span class="line">    WindowManager.<span class="type">LayoutParams</span> <span class="variable">lp</span> <span class="operator">=</span> dia.getWindow().getAttributes();</span><br><span class="line">    lp.width = WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">    lp.height = WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">    dia.getWindow().setAttributes(lp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Dialog全屏（不隐藏状态栏）"><a href="#Dialog全屏（不隐藏状态栏）" class="headerlink" title="Dialog全屏（不隐藏状态栏）"></a>Dialog全屏（不隐藏状态栏）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.app.Dialog;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewSearchMoreDialog</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Activity mContext;</span><br><span class="line">    <span class="keyword">private</span> FrameLayout toolbar_search_more_fl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NewSearchMoreDialog</span><span class="params">(<span class="keyword">final</span> Activity context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(context, R.style.MyDialogStyle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NewSearchMoreDialog</span><span class="params">(<span class="keyword">final</span> Activity context, <span class="type">int</span> themeId)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, themeId);</span><br><span class="line">        mContext = context;</span><br><span class="line">        getWindow().setGravity(Gravity.CENTER);</span><br><span class="line">        setCancelable(<span class="literal">true</span>);</span><br><span class="line">        setCanceledOnTouchOutside(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">LayoutInflater</span> <span class="variable">from</span> <span class="operator">=</span> LayoutInflater.from(context);</span><br><span class="line">        <span class="type">View</span> <span class="variable">contentView</span> <span class="operator">=</span> from.inflate(R.layout.dialog_searchmore, <span class="literal">null</span>);</span><br><span class="line">        setContentView(contentView);</span><br><span class="line">        getWindow().setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.MATCH_PARENT);</span><br><span class="line">        getWindow().getDecorView().setBackground(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//设置状态栏字体颜色是“黑色”</span></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP_MR1) &#123;</span><br><span class="line">            getWindow().getDecorView().setSystemUiVisibility(</span><br><span class="line">                    View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);</span><br><span class="line">            getWindow().setStatusBarColor(Color.BLACK);</span><br><span class="line">        &#125;</span><br><span class="line">        initView(contentView);</span><br><span class="line">        <span class="comment">//initData();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initView</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        toolbar_search_more_fl = view.findViewById(R.id.toolbar_search_more_fl);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 非全屏（不延伸到状态栏下） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;MyDialogStyle&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowBackground&quot;</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowFrame&quot;</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowNoTitle&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsFloating&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsTranslucent&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowContentOverlay&quot;</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowAnimationStyle&quot;</span>&gt;</span>@android:style/Animation.Dialog<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:backgroundDimEnabled&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 全屏（延伸到状态栏底下） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;MyDialogStyleFullScreen&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowBackground&quot;</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowFrame&quot;</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowNoTitle&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsFloating&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsTranslucent&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowContentOverlay&quot;</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowAnimationStyle&quot;</span>&gt;</span>@android:style/Animation.Dialog<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:backgroundDimEnabled&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (newSearchMoreDialog == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (Dialog不要全屏的条件) &#123;</span><br><span class="line">        newSearchMoreDialog = <span class="keyword">new</span> <span class="title class_">NewSearchMoreDialog</span>(getActivity());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        newSearchMoreDialog = <span class="keyword">new</span> <span class="title class_">NewSearchMoreDialog</span>(getActivity(), R.style.MyDialogStyleFullScreen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="dialog禁止系统返回键（包含手势）"><a href="#dialog禁止系统返回键（包含手势）" class="headerlink" title="dialog禁止系统返回键（包含手势）"></a>dialog禁止系统返回键（包含手势）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dialog禁止系统返回键（包含手势）</span></span><br><span class="line">DialogInterface.<span class="type">OnKeyListener</span> <span class="variable">keyListener</span> <span class="operator">=</span> (dialog, keyCode, event) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; event.getRepeatCount() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在把这个listener注册到dialog里面去 当初始化dialog的时候</span></span><br><span class="line">builder.setTitle(getText(R.string.XXXX))</span><br><span class="line">    .setMessage(getText(R.XXXXXX))</span><br><span class="line">    .setOnKeyListener(key).setCancelable(<span class="literal">false</span>)</span><br><span class="line">    .setPositiveButton(android.R.string.ok, someOKButtonListener)</span><br><span class="line">    .setCanceledOnTouchOutside(<span class="literal">false</span>)</span><br><span class="line">    .setNegativeButton(android.R.string.cancel, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>





<h2 id="弹软键盘后再弹Dialog，软键盘不要收缩"><a href="#弹软键盘后再弹Dialog，软键盘不要收缩" class="headerlink" title="弹软键盘后再弹Dialog，软键盘不要收缩"></a>弹软键盘后再弹Dialog，软键盘不要收缩</h2><blockquote>
<p>Dialog中加载了ProgressBar，来当全局的loading</p>
</blockquote>
<ol>
<li>Activity的清单文件中不要设置<code>android:windowSoftInputMode</code>，即用默认的</li>
<li>Dialog的style中添加<code>&lt;item name=&quot;android:windowSoftInputMode&quot;&gt;stateUnchanged&lt;/item&gt;</code></li>
<li>在Activity初始化完成的时候，editText获取下焦点，让它弹出软键盘</li>
</ol>
<p>完整代码：</p>
<ol>
<li><p>Dialog的style</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;Loading&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;@android:style/Theme.Dialog&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowFrame&quot;</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsFloating&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsTranslucent&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowNoTitle&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 设置背景色 透明--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:background&quot;</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowBackground&quot;</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 设置是否显示背景 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:backgroundDimEnabled&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 设置背景透明度 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:backgroundDimAmount&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 设置点击空白不消失 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowCloseOnTouchOutside&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowSoftInputMode&quot;</span>&gt;</span>stateUnchanged<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>LoadingDialog.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">LoadingDialog</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Window window;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">cancle</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoadingDialog</span><span class="params">(<span class="meta">@NonNull</span> <span class="meta">@NotNull</span> Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, R.style.Loading);</span><br><span class="line">        <span class="comment">//加载布局</span></span><br><span class="line">        setContentView(R.layout.view_loading);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置Dialog参数</span></span><br><span class="line">        <span class="keyword">if</span> (window == <span class="literal">null</span>) &#123;</span><br><span class="line">            window = getWindow();</span><br><span class="line">        &#125;</span><br><span class="line">        WindowManager.<span class="type">LayoutParams</span> <span class="variable">params</span> <span class="operator">=</span> window.getAttributes();</span><br><span class="line">        params.gravity = Gravity.CENTER;</span><br><span class="line">        window.setAttributes(params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBackPressed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//回调</span></span><br><span class="line">        cancle();</span><br><span class="line">        <span class="comment">//关闭Loading</span></span><br><span class="line">        dismiss();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>view_loading.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;@dimen/dp64&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/dp64&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@drawable/loading_background_20&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/loading_rl&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;@dimen/dp40&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/dp40&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/loading&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:indeterminateBehavior</span>=<span class="string">&quot;repeat&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:indeterminateDrawable</span>=<span class="string">&quot;@drawable/anim&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>调用Dialog的地方</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> LoadingDialog loadingDialog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showLoading</span><span class="params">()</span> &#123;</span><br><span class="line">    showLoading(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showLoading</span><span class="params">(<span class="type">boolean</span> cancelable)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (loadingDialog == <span class="literal">null</span>) &#123;</span><br><span class="line">            loadingDialog = <span class="keyword">new</span> <span class="title class_">LoadingDialog</span>(mView.getUIContext()) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancle</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        loadingDialog.setCanceledOnTouchOutside(cancelable);</span><br><span class="line">        <span class="keyword">if</span> (mView != <span class="literal">null</span> &amp;&amp; !(mView.getUIContext() <span class="keyword">instanceof</span> ViewPager.DecorView)</span><br><span class="line">            &amp;&amp; !loadingDialog.isShowing()) &#123;</span><br><span class="line">            loadingDialog.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dismissLoading</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mView != <span class="literal">null</span> &amp;&amp; !(mView.getUIContext() <span class="keyword">instanceof</span> ViewPager.DecorView)</span><br><span class="line">            &amp;&amp; loadingDialog != <span class="literal">null</span> &amp;&amp; loadingDialog.isShowing()) &#123;</span><br><span class="line">            loadingDialog.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="xm597的Dialog"><a href="#xm597的Dialog" class="headerlink" title="xm597的Dialog"></a>xm597的Dialog</h1><h2 id="BaseDialog"><a href="#BaseDialog" class="headerlink" title="BaseDialog"></a>BaseDialog</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.app.Dialog;</span><br><span class="line"><span class="keyword">import</span> android.view.Gravity;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.WindowManager;</span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseDialog</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> View view;</span><br><span class="line">    <span class="keyword">public</span> Activity mcontext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseDialog</span><span class="params">(<span class="keyword">final</span> Activity context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, R.style.BaseDialogStyle);</span><br><span class="line">        <span class="keyword">if</span> (view == <span class="literal">null</span>) &#123;</span><br><span class="line">            mcontext = context;</span><br><span class="line">            view = LayoutInflater.from(context).inflate(getLayoutId(), <span class="literal">null</span>);</span><br><span class="line">            getWindow().setGravity(setGravity());</span><br><span class="line">            setCanceledOnTouchOutside(<span class="literal">true</span>);</span><br><span class="line">            setContentView(view);</span><br><span class="line">            WindowManager.<span class="type">LayoutParams</span> <span class="variable">params</span> <span class="operator">=</span> getLayoutParams(context);</span><br><span class="line">            getWindow().setAttributes(params);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要重写高度的话重写这个方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">protected</span> WindowManager.LayoutParams <span class="title function_">getLayoutParams</span><span class="params">(Activity context)</span> &#123;</span><br><span class="line">        WindowManager.<span class="type">LayoutParams</span> <span class="variable">params</span> <span class="operator">=</span> getWindow().getAttributes();</span><br><span class="line"></span><br><span class="line">        params.width = getScreenWidthPixels(context);</span><br><span class="line">        params.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getLayoutId</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">getview</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他位置的话重写这方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setGravity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Gravity.CENTER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isShowing())&#123;</span><br><span class="line">            <span class="built_in">super</span>.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取屏幕widthPixels</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> widthPixels 屏幕宽</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScreenWidthPixels</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getDeviceMetrics(context).widthPixels;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取屏幕相关参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> metrics</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> DisplayMetrics <span class="title function_">getDeviceMetrics</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="type">DisplayMetrics</span> <span class="variable">metrics</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DisplayMetrics</span>();</span><br><span class="line">        <span class="type">WindowManager</span> <span class="variable">wm</span> <span class="operator">=</span> (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">        <span class="keyword">if</span> (wm != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Display</span> <span class="variable">display</span> <span class="operator">=</span> wm.getDefaultDisplay();</span><br><span class="line">            display.getMetrics(metrics);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> metrics;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中的 <code>R.style.BaseDialogStyle</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//styles.xml</span><br><span class="line"><span class="comment">&lt;!-- 底部弹出动画 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;DialogBottomAnim&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;android:Animation&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowEnterAnimation&quot;</span>&gt;</span>@anim/anim_bottom_in<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowExitAnimation&quot;</span>&gt;</span>@anim/anim_bottom_out<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;MyDialogStyle&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowBackground&quot;</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowFrame&quot;</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowNoTitle&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsFloating&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsTranslucent&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowContentOverlay&quot;</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowAnimationStyle&quot;</span>&gt;</span>@android:style/Animation.Dialog<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:backgroundDimEnabled&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;BaseDialogStyle&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;MyDialogStyle&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowAnimationStyle&quot;</span>&gt;</span>@style/DialogBottomAnim<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//anim_bottom_in.xml</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;@android:integer/config_shortAnimTime&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYDelta</span>=<span class="string">&quot;100%p&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYDelta</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//anim_bottom_out.xml</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;@android:integer/config_shortAnimTime&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYDelta</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYDelta</span>=<span class="string">&quot;100%p&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li><p>单个Rv内容的底部弹窗 <code>public class BaseOneRvDialog&lt;T extends IPickerViewData&gt; extends BaseDialog &#123;&#125;</code></p>
</li>
<li><p>单列或两列滚轮的弹窗 <code>public class MultiSalaryDialog extends BaseDialog &#123;&#125;</code></p>
</li>
</ol>
<h1 id="另一套Dialog（DataBinding）"><a href="#另一套Dialog（DataBinding）" class="headerlink" title="另一套Dialog（DataBinding）"></a>另一套Dialog（DataBinding）</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Dialog;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.ColorDrawable;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.view.Window;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> androidx.databinding.DataBindingUtil;</span><br><span class="line"><span class="keyword">import</span> androidx.databinding.ViewDataBinding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">KBaseFullScreenDialog</span>&lt;VD <span class="keyword">extends</span> <span class="title class_">ViewDataBinding</span>&gt; <span class="keyword">extends</span> <span class="title class_">Dialog</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> VD mBinding;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">KBaseFullScreenDialog</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>(context);</span><br><span class="line">		init();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">KBaseFullScreenDialog</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="type">int</span> themeResId)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>(context, themeResId);</span><br><span class="line">		init();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">		setCancelable(<span class="literal">false</span>);</span><br><span class="line">		setCanceledOnTouchOutside(<span class="literal">false</span>);</span><br><span class="line">		requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">		<span class="type">View</span> <span class="variable">contentView</span> <span class="operator">=</span> getLayoutInflater().inflate(setContentViewRes(), <span class="literal">null</span>);</span><br><span class="line">		setContentView(contentView);</span><br><span class="line">		mBinding = DataBindingUtil.bind(contentView);</span><br><span class="line">		<span class="type">Window</span> <span class="variable">window</span> <span class="operator">=</span> getWindow();</span><br><span class="line">		<span class="keyword">if</span> (window != <span class="literal">null</span>) &#123;</span><br><span class="line">			window.setBackgroundDrawable(<span class="keyword">new</span> <span class="title class_">ColorDrawable</span>(Color.TRANSPARENT));</span><br><span class="line">			window.setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</span><br><span class="line">		&#125;</span><br><span class="line">		onContentViewCreated();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dismissDialog</span><span class="params">(View view)</span> &#123;</span><br><span class="line">		dismiss();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">setContentViewRes</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">onContentViewCreated</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="使用-普通弹窗"><a href="#使用-普通弹窗" class="headerlink" title="使用-普通弹窗"></a>使用-普通弹窗</h2><p>继承上面的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseShowTipsDialog</span></span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">KBaseFullScreenDialog</span>&lt;LayoutBaseShowTipsDialogBinding&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseShowTipsDialog</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        initDialog();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseShowTipsDialog</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="type">int</span> themeResId)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, themeResId);</span><br><span class="line">        initDialog();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initDialog</span><span class="params">()</span> &#123;</span><br><span class="line">        setCancelable(<span class="literal">true</span>);</span><br><span class="line">        setCanceledOnTouchOutside(<span class="literal">true</span>);</span><br><span class="line">        setSubContent(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">setContentViewRes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.layout_base_show_tips_dialog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onContentViewCreated</span><span class="params">()</span> &#123;</span><br><span class="line">        mBinding.setView(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTipTitle</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        mBinding.setTipTitle(title);</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(title)) &#123;</span><br><span class="line">            mBinding.tvTitleBaseShowTipDialog.setVisibility(View.GONE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mBinding.tvTitleBaseShowTipDialog.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTipContent</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        mBinding.setTipContent(content);</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(content)) &#123;</span><br><span class="line">            mBinding.tvContentBaseShowTipDialog.setVisibility(View.GONE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mBinding.tvContentBaseShowTipDialog.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSubContent</span><span class="params">(String subTipTitle, <span class="type">int</span> subTipIcon, String subTipContent)</span> &#123;</span><br><span class="line">        mBinding.setSubTipTitle(subTipTitle);</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(subTipTitle)) &#123;</span><br><span class="line">            mBinding.tvSubTipTitleBaseShowTipDialog.setVisibility(View.GONE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mBinding.tvSubTipTitleBaseShowTipDialog.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125;</span><br><span class="line">        mBinding.setSubTipIcon(subTipIcon);</span><br><span class="line"></span><br><span class="line">        mBinding.setSubTipContent(subTipContent);</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(subTipContent)) &#123;</span><br><span class="line">            mBinding.tvSubTipBaseShowTipDialog.setVisibility(View.GONE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mBinding.tvSubTipBaseShowTipDialog.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">subTitleVisible</span> <span class="operator">=</span> mBinding.tvSubTipTitleBaseShowTipDialog.getVisibility();</span><br><span class="line">        <span class="type">int</span> <span class="variable">subTipIconVisible</span> <span class="operator">=</span> mBinding.ivSubTipBaseShowTipDialog.getVisibility();</span><br><span class="line">        <span class="type">int</span> <span class="variable">subTipVisible</span> <span class="operator">=</span> mBinding.tvSubTipBaseShowTipDialog.getVisibility();</span><br><span class="line">        <span class="keyword">if</span> (subTitleVisible != View.VISIBLE &amp;&amp; subTipIconVisible != View.VISIBLE &amp;&amp; subTipVisible != View.VISIBLE) &#123;</span><br><span class="line">            mBinding.llSubContentBaseShowTipDialog.setVisibility(View.GONE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mBinding.llSubContentBaseShowTipDialog.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setButtons</span><span class="params">(String left, String center, String right, String single)</span> &#123;</span><br><span class="line">        mBinding.setLeftButton(left);</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(left)) &#123;</span><br><span class="line">            mBinding.btnLeftBaseShowTipDialog.setVisibility(View.GONE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mBinding.btnLeftBaseShowTipDialog.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125;</span><br><span class="line">        mBinding.setCenterButton(center);</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(center)) &#123;</span><br><span class="line">            mBinding.btnCenterBaseShowTipDialog.setVisibility(View.GONE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mBinding.btnCenterBaseShowTipDialog.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125;</span><br><span class="line">        mBinding.setRightButton(right);</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(right)) &#123;</span><br><span class="line">            mBinding.btnRightBaseShowTipDialog.setVisibility(View.GONE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mBinding.btnRightBaseShowTipDialog.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125;</span><br><span class="line">        mBinding.setSingleButton(single);</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(single)) &#123;</span><br><span class="line">            mBinding.btnSingleBaseShowTipDialog.setVisibility(View.GONE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mBinding.btnSingleBaseShowTipDialog.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">onLeftButtonClick</span><span class="params">(View view)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">onCenterButtonClick</span><span class="params">(View view)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">onRightButtonClick</span><span class="params">(View view)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">onSingleButtonClick</span><span class="params">(View view)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其中的布局"><a href="#其中的布局" class="headerlink" title="其中的布局"></a>其中的布局</h3><p><code>layout_base_show_tips_dialog.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">&quot;android.view.View&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">&quot;android.text.TextUtils&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;view&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;xxx.dialog.base.BaseShowTipsDialog&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;tipTitle&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;tipContent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;subTipTitle&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;subTipContent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;subTipIcon&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;Integer&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;leftButton&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;centerButton&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;rightButton&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;singleButton&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/fl_bg_base_show_tips_dialog&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@color/color00FFFFFF&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">&quot;@&#123;view::dismissDialog&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;@dimen/viewSize48&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">androidx.cardview.widget.CardView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/root_base_show_tips_dialog&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@color/colorWhite&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:cardCornerRadius</span>=<span class="string">&quot;@dimen/viewSize5&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:cardElevation</span>=<span class="string">&quot;0dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:paddingStart</span>=<span class="string">&quot;@dimen/viewSize16&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:paddingTop</span>=<span class="string">&quot;@dimen/viewSize12&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:paddingEnd</span>=<span class="string">&quot;@dimen/viewSize16&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_title_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;@dimen/viewSize12&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">&quot;@&#123;tipTitle&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorAppMainText&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/textSize16&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintBottom_toTopOf</span>=<span class="string">&quot;@id/tv_content_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">tools:text</span>=<span class="string">&quot;标题&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_content_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/viewSize6&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:lineSpacingExtra</span>=<span class="string">&quot;@dimen/viewSize3&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">&quot;@&#123;tipContent&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color333333&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/textSize14&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@id/tv_title_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">tools:text</span>=<span class="string">&quot;提示内容&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/ll_sub_content_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/viewSize12&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:visibility</span>=<span class="string">&quot;gone&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@id/tv_content_base_show_tip_dialog&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_sub_tip_title_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:text</span>=<span class="string">&quot;@&#123;subTipTitle&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/color333333&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/textSize13&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">tools:text</span>=<span class="string">&quot;二级内容标题:&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:id</span>=<span class="string">&quot;@+id/iv_sub_Tip_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;@dimen/viewSize4&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:contentDescription</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:src</span>=<span class="string">&quot;@&#123;subTipIcon&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">tools:src</span>=<span class="string">&quot;@drawable/icon_mobile_0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_sub_Tip_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;@dimen/viewSize8&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:text</span>=<span class="string">&quot;@&#123;subTipContent&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorAppTheme&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">tools:text</span>=<span class="string">&quot;二级提示内容&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/h_line_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/viewSize1&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/viewSize12&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:background</span>=<span class="string">&quot;@color/colorAppDivider&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@id/ll_sub_content_base_show_tip_dialog&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_left_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:onClick</span>=<span class="string">&quot;@&#123;view::onLeftButtonClick&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:paddingTop</span>=<span class="string">&quot;@dimen/viewSize12&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:paddingBottom</span>=<span class="string">&quot;@dimen/viewSize12&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">&quot;@&#123;leftButton&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorAppNormalText&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/textSize14&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">&quot;@id/btn_center_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintHorizontal_chainStyle</span>=<span class="string">&quot;spread&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@id/h_line_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">tools:text</span>=<span class="string">&quot;左边按钮&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_center_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:onClick</span>=<span class="string">&quot;@&#123;view::onCenterButtonClick&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:paddingTop</span>=<span class="string">&quot;@dimen/viewSize12&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:paddingBottom</span>=<span class="string">&quot;@dimen/viewSize12&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">&quot;@&#123;centerButton&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorAppMainText&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/textSize14&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">&quot;@id/btn_right_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintHorizontal_chainStyle</span>=<span class="string">&quot;spread&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">&quot;@id/btn_left_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@id/h_line_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">tools:text</span>=<span class="string">&quot;中间按钮&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_right_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:onClick</span>=<span class="string">&quot;@&#123;view::onRightButtonClick&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:paddingTop</span>=<span class="string">&quot;@dimen/viewSize12&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:paddingBottom</span>=<span class="string">&quot;@dimen/viewSize12&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">&quot;@&#123;rightButton&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorAppTheme&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/textSize14&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintHorizontal_chainStyle</span>=<span class="string">&quot;spread&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">&quot;@id/btn_center_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@id/h_line_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">tools:text</span>=<span class="string">&quot;右边按钮&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_single_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_margin</span>=<span class="string">&quot;@dimen/viewSize12&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:background</span>=<span class="string">&quot;@drawable/selector_background_1&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:onClick</span>=<span class="string">&quot;@&#123;view::onSingleButtonClick&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:paddingTop</span>=<span class="string">&quot;@dimen/viewSize10&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:paddingBottom</span>=<span class="string">&quot;@dimen/viewSize10&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">&quot;@&#123;singleButton&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorWhite&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/textSize16&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@id/h_line_base_show_tip_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">tools:text</span>=<span class="string">&quot;单一按钮&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">androidx.cardview.widget.CardView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="调用-1"><a href="#调用-1" class="headerlink" title="调用"></a>调用</h3><p><img src="/posts/1852176610/dialog%E7%9A%84%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="安卓/dialog的效果图"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleTipDialog</span> <span class="variable">tipDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleTipDialog</span>(getActivity());</span><br><span class="line">tipDialog.setTipTitle(<span class="string">&quot;提示&quot;</span>);<span class="comment">//如果不需要标题，那么这一句删除</span></span><br><span class="line">tipDialog.setTipContent(<span class="string">&quot;确定要退出登录吗?&quot;</span>);<span class="comment">//如果不需要内容，那么这一句删除</span></span><br><span class="line">tipDialog.setButtons(<span class="string">&quot;点错了&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;退出&quot;</span>, <span class="string">&quot;&quot;</span>);<span class="comment">//如果不需要对应按钮，那么对应按钮的文案设置为空字符串</span></span><br><span class="line">tipDialog.setSimpleTipDialogListener(() -&gt; &#123;</span><br><span class="line">    MySPUtils.logout(getActivity());</span><br><span class="line">    getActivity().finish();</span><br><span class="line">&#125;);</span><br><span class="line">tipDialog.show();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果两个按钮都有点击事件，那么用</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">tipDialog</span><span class="selector-class">.setSimpleTipDialogListener1</span>(new SimpleTipDialog.ISimpleTipDialogListener1() &#123;</span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public void onCancelClick() &#123;</span><br><span class="line">        <span class="comment">//这个是左侧按钮的点击事件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public void onConfirmClick() &#123;</span><br><span class="line">        <span class="comment">//这个是左侧按钮的点击事件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="使用-图片-一个按钮"><a href="#使用-图片-一个按钮" class="headerlink" title="使用-图片+一个按钮"></a>使用-图片+一个按钮</h2><p><img src="/posts/1852176610/dialog%E7%9A%84%E6%95%88%E6%9E%9C%E5%9B%BE1.png" alt="安卓/dialog的效果图1"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xxx.project.api.impl.bean.ResumeBean;</span><br><span class="line"><span class="keyword">import</span> xxx.project.cache.GeRenAppCache;</span><br><span class="line"><span class="keyword">import</span> xxx.project.manager.WechatSDKUtils;</span><br><span class="line"><span class="keyword">import</span> xxx.utils.datetime.KDateTimeUtils;</span><br><span class="line"><span class="keyword">import</span> xxx.widget.kdialog.KBaseFullScreenDialog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BindWechatCheckDialog</span> <span class="keyword">extends</span> <span class="title class_">KBaseFullScreenDialog</span>&lt;LayoutDialogBindWechatBinding&gt; &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">BindWechatCheckDialog</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>(context);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">setContentViewRes</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> R.layout.layout_dialog_bind_wechat;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onContentViewCreated</span><span class="params">()</span> &#123;</span><br><span class="line">		mBinding.setView(<span class="built_in">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">ResumeBean</span> <span class="variable">resumeBean</span> <span class="operator">=</span> GeRenAppCache.getResumeCache();</span><br><span class="line">		<span class="keyword">if</span> (resumeBean != <span class="literal">null</span> &amp;&amp; resumeBean.getResumeRow() != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="type">String</span> <span class="variable">showTime</span> <span class="operator">=</span> GeRenAppCache.getWechatCheckTime();</span><br><span class="line">			<span class="type">String</span> <span class="variable">currentDate</span> <span class="operator">=</span> KDateTimeUtils.getCurrentDate();</span><br><span class="line">			<span class="keyword">if</span> (TextUtils.isEmpty(showTime) || showTime.compareTo(currentDate) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">				instance.add(Calendar.DATE, <span class="number">7</span>);</span><br><span class="line">				<span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> instance.get(Calendar.YEAR);</span><br><span class="line">				<span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> instance.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">				<span class="type">int</span> <span class="variable">date</span> <span class="operator">=</span> instance.get(Calendar.DATE);</span><br><span class="line">				<span class="type">String</span> <span class="variable">nextShowTime</span> <span class="operator">=</span> year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + date;</span><br><span class="line">				GeRenAppCache.saveWechatCheckTime(nextShowTime);</span><br><span class="line">				show();</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancelDialog</span><span class="params">(View view)</span> &#123;</span><br><span class="line">		dismiss();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">launchMiniProgramRelease</span><span class="params">(View view)</span> &#123;</span><br><span class="line">		dismiss();</span><br><span class="line">		WechatSDKUtils.launchMiniProgramRelease(getContext());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其中的布局-1"><a href="#其中的布局-1" class="headerlink" title="其中的布局"></a>其中的布局</h3><p><code>R.layout.layout_dialog_bind_wechat.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;view&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;com.xm597.app.project.view.dialog.BindWechatCheckDialog&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">androidx.cardview.widget.CardView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;320dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;380dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:cardBackgroundColor</span>=<span class="string">&quot;@android:color/white&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:cardCornerRadius</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:cardElevation</span>=<span class="string">&quot;0dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_close_wechat_bind_tips_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_gravity</span>=<span class="string">&quot;end&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:onClick</span>=<span class="string">&quot;@&#123;view::cancelDialog&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:paddingLeft</span>=<span class="string">&quot;16dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:paddingRight</span>=<span class="string">&quot;16dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">&quot;×&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">&quot;#6E6E6E&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textSize</span>=<span class="string">&quot;34sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">&quot;绑定微信提醒&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">&quot;#1D1D1D&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textSize</span>=<span class="string">&quot;22sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;4dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">&quot;聊天沟通回复及时知道，重要信息不再错过&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">&quot;#A6A6A6&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textSize</span>=<span class="string">&quot;12sp&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;4dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:background</span>=<span class="string">&quot;@android:color/white&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:src</span>=<span class="string">&quot;@drawable/icon_bind_wechat&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/btn_bind_wechat_bind_tips_dialog&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;58dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;8dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;58dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:background</span>=<span class="string">&quot;@drawable/selector_background_0&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:onClick</span>=<span class="string">&quot;@&#123;view::launchMiniProgramRelease&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:paddingTop</span>=<span class="string">&quot;12dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:paddingBottom</span>=<span class="string">&quot;12dp&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:text</span>=<span class="string">&quot;去开启&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">&quot;@drawable/selector_txtcolor_0&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textSize</span>=<span class="string">&quot;16sp&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">androidx.cardview.widget.CardView</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="调用-2"><a href="#调用-2" class="headerlink" title="调用"></a>调用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> BindWechatCheckDialog mBindWechatCheckDialog;<span class="comment">//成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mBindWechatCheckDialog == <span class="literal">null</span>) &#123;</span><br><span class="line">    mBindWechatCheckDialog = <span class="keyword">new</span> <span class="title class_">BindWechatCheckDialog</span>(<span class="built_in">this</span>);</span><br><span class="line">    mBindWechatCheckDialog.setOnDismissListener(dialog -&gt; mPresenter.mWxSubscribe.setValue(-<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> mBindWechatCheckDialog.check();</span><br><span class="line"><span class="keyword">if</span> (!check) &#123;</span><br><span class="line">    mPresenter.mWxSubscribe.setValue(-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="Activity伪装成Dialog"><a href="#Activity伪装成Dialog" class="headerlink" title="Activity伪装成Dialog"></a>Activity伪装成Dialog</h1><p>在注册清单文件中把这个Activity的theme改成dialog的样式即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.easymorse.dialog&quot;</span> <span class="attr">android:versionCode</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:versionName</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/icon&quot;</span> <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.DialogActivity&quot;</span> <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:theme</span>=<span class="string">&quot;@android:style/Theme.Dialog&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">&quot;8&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h1 id="DialogFragment"><a href="#DialogFragment" class="headerlink" title="DialogFragment"></a>DialogFragment</h1><p><a href="https://github.com/crazyqiang/AndroidStudy">https://github.com/crazyqiang/AndroidStudy</a></p>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol>
<li>不用提供布局，内置项目中常用默认的样式</li>
<li>支持自定义复杂的布局、动画、对话框大小、背景色等设置</li>
<li>统一管理多个dialog并顺序弹出</li>
</ol>
<h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><h3 id="引入lib-dialog这个库"><a href="#引入lib-dialog这个库" class="headerlink" title="引入lib_dialog这个库"></a>引入lib_dialog这个库</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//settings.gradle</span></span><br><span class="line">include <span class="string">&#x27;:lib_dialog&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//app的build.gradle</span></span><br><span class="line">implementation project(<span class="attr">path:</span> <span class="string">&quot;:lib_dialog&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="在代码中使用"><a href="#在代码中使用" class="headerlink" title="在代码中使用"></a><a href="https://developer.aliyun.com/article/645531">在代码中使用</a></h3><h4 id="一个按钮"><a href="#一个按钮" class="headerlink" title="一个按钮"></a>一个按钮</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个按钮</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">SYDialog</span>.Builder(<span class="built_in">this</span>)</span><br><span class="line">    .setTitle(<span class="string">&quot;我是标题&quot;</span>)</span><br><span class="line">    .setContent(<span class="string">&quot;您好,我们将在30分钟处理，稍后通知您订单结果！&quot;</span>)</span><br><span class="line">    .setPositiveButton(<span class="keyword">new</span> <span class="title class_">IDialog</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(IDialog dialog)</span> &#123;</span><br><span class="line">            dialog.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .show();</span><br></pre></td></tr></table></figure>

<h4 id="两个按钮"><a href="#两个按钮" class="headerlink" title="两个按钮"></a>两个按钮</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//两个按钮</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">SYDialog</span>.Builder(<span class="built_in">this</span>)</span><br><span class="line">    .setTitle(<span class="string">&quot;我是标题&quot;</span>)</span><br><span class="line">    .setContent(<span class="string">&quot;您好,我们将在30分钟处理，稍后通知您订单结果！&quot;</span>)</span><br><span class="line">    .setPositiveButton(<span class="keyword">new</span> <span class="title class_">IDialog</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(IDialog dialog)</span> &#123;</span><br><span class="line">            dialog.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .setNegativeButton(<span class="keyword">new</span> <span class="title class_">IDialog</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(IDialog dialog)</span> &#123;</span><br><span class="line">            dialog.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .show();</span><br></pre></td></tr></table></figure>

<h4 id="使用自定义布局"><a href="#使用自定义布局" class="headerlink" title="使用自定义布局"></a>使用自定义布局</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用自定义布局</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">SYDialog</span>.Builder(<span class="built_in">this</span>)</span><br><span class="line">    .setDialogView(R.layout.layout_dialog)<span class="comment">//设置dialog布局</span></span><br><span class="line">    .setAnimStyle(R.style.translate_style)<span class="comment">//设置动画 默认没有动画</span></span><br><span class="line">    .setScreenWidthP(<span class="number">0.85f</span>) <span class="comment">//设置屏幕宽度比例 0.0f-1.0f</span></span><br><span class="line">    .setGravity(Gravity.CENTER)<span class="comment">//设置Gravity</span></span><br><span class="line">    .setWindowBackgroundP(<span class="number">0.2f</span>)<span class="comment">//设置背景透明度 0.0f-1.0f 1.0f完全不透明</span></span><br><span class="line">    .setCancelable(<span class="literal">true</span>)<span class="comment">//设置是否屏蔽物理返回键 true不屏蔽 false屏蔽</span></span><br><span class="line">    .setCancelableOutSide(<span class="literal">true</span>)<span class="comment">//设置dialog外点击是否可以让dialog消失</span></span><br><span class="line">    .setBuildChildListener(<span class="keyword">new</span> <span class="title class_">IDialog</span>.OnBuildListener() &#123;</span><br><span class="line">        <span class="comment">//设置子View</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBuildChildView</span><span class="params">(<span class="keyword">final</span> IDialog dialog, View view, <span class="type">int</span> layoutRes)</span> &#123;</span><br><span class="line">            <span class="comment">//dialog: IDialog</span></span><br><span class="line">            <span class="comment">//view： DialogView</span></span><br><span class="line">            <span class="comment">//layoutRes :Dialog的资源文件 如果一个Activity里有多个dialog 可以通过layoutRes来区分</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">EditText</span> <span class="variable">editText</span> <span class="operator">=</span> view.findViewById(R.id.et_content);</span><br><span class="line">            <span class="type">Button</span> <span class="variable">btn_ok</span> <span class="operator">=</span> view.findViewById(R.id.btn_ok);</span><br><span class="line">            btn_ok.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">editTextStr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (!TextUtils.isEmpty(editText.getText())) &#123;</span><br><span class="line">                        editTextStr = editText.getText().toString();</span><br><span class="line">                    &#125;</span><br><span class="line">                    dialog.dismiss();</span><br><span class="line">                    Toast.makeText(MyApplication.getApplication(), editTextStr, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).show();</span><br></pre></td></tr></table></figure>

<h4 id="统一管理多个Dialog依次弹出"><a href="#统一管理多个Dialog依次弹出" class="headerlink" title="统一管理多个Dialog依次弹出"></a>统一管理多个Dialog依次弹出</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SYDialog.<span class="type">Builder</span> <span class="variable">builder1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SYDialog</span>.Builder(<span class="built_in">this</span>);</span><br><span class="line">SYDialog.<span class="type">Builder</span> <span class="variable">builder2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SYDialog</span>.Builder(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//添加第一个Dialog</span></span><br><span class="line">SYDialogsManager.getInstance().requestShow(<span class="keyword">new</span> <span class="title class_">DialogWrapper</span>(builder1));</span><br><span class="line"><span class="comment">//添加第二个Dialog</span></span><br><span class="line">SYDialogsManager.getInstance().requestShow(<span class="keyword">new</span> <span class="title class_">DialogWrapper</span>(builder2));</span><br></pre></td></tr></table></figure>



<h1 id="Dialog引发的内存泄露"><a href="#Dialog引发的内存泄露" class="headerlink" title="Dialog引发的内存泄露"></a>Dialog引发的内存泄露</h1><p>就是在activity关闭的时候dialog还在show状态</p>
<p>解决 ：(添加lifecycleObserver进行生命周期监听)</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> androidx.activity.ComponentActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.Lifecycle;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.LifecycleObserver;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.OnLifecycleEvent;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TipDialog</span></span>(context: Context) : Dialog(context), LifecycleObserver&#123;</span><br><span class="line">    <span class="keyword">init</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(context  <span class="keyword">is</span> ComponentActivity)&#123;</span><br><span class="line">            (context <span class="keyword">as</span> ComponentActivity).lifecycle.addObserver(<span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.item_tip_dialog)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_DEESTROY)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isShowing)&#123;</span><br><span class="line">            dismiss()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h1 id="Dialog相关问题"><a href="#Dialog相关问题" class="headerlink" title="Dialog相关问题"></a>Dialog相关问题</h1><h2 id="Dialog上使用加载框progressdialog不显示"><a href="#Dialog上使用加载框progressdialog不显示" class="headerlink" title="Dialog上使用加载框progressdialog不显示"></a>Dialog上使用加载框progressdialog不显示</h2><h2 id="Dialog改变message无效的问题"><a href="#Dialog改变message无效的问题" class="headerlink" title="Dialog改变message无效的问题"></a>Dialog改变message无效的问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关于加载框或者是dialogfragment，中途改变message消息无效的问题：</span></span><br><span class="line"><span class="comment">//参考如下写法，验证有效：</span></span><br><span class="line">mConnectResultTv.setText(mess);</span><br><span class="line">mConnectResultTv.invalidate();</span><br><span class="line">mConnectResultTv.postDelayed(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        dismiss();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="dialog不居中的问题"><a href="#dialog不居中的问题" class="headerlink" title="dialog不居中的问题"></a>dialog不居中的问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Window</span> <span class="variable">dialogWindow</span> <span class="operator">=</span> mProgressDlg.getWindow();</span><br><span class="line">WindowManager.<span class="type">LayoutParams</span> <span class="variable">lp</span> <span class="operator">=</span> dialogWindow.getAttributes();</span><br><span class="line">dialogWindow.setGravity(Gravity.CENTER);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//去除tile布局     mProgressDlg.requestWindowFeature(Window.FEATURE_NO_TITLE);</span></span><br><span class="line">mProgressDlg.setContentView(R.layout.dialog_progress);</span><br></pre></td></tr></table></figure>

<h2 id="Unable-to-add-window-–-token-null-is-not-valid"><a href="#Unable-to-add-window-–-token-null-is-not-valid" class="headerlink" title="Unable to add window – token null is not valid"></a>Unable to add window – token null is not valid</h2><p>问题详情：<code>android.view.WindowManager$BadTokenException: Unable to add window -- token null is not valid; is your activity running?</code></p>
<p>排查：dialog和progressbar等不能在ApplicationContext中创建，需要依托于Activity</p>
<p>解决：</p>
<h2 id="添加了windowSoftInputMode-x3D-adjustPan-adjustResize还是会被软键盘盖住"><a href="#添加了windowSoftInputMode-x3D-adjustPan-adjustResize还是会被软键盘盖住" class="headerlink" title="添加了windowSoftInputMode&#x3D;adjustPan|adjustResize还是会被软键盘盖住"></a>添加了windowSoftInputMode&#x3D;adjustPan|adjustResize还是会被软键盘盖住</h2><p>Activity的清单文件中加了 <code>android:windowSoftInputMode=&quot;adjustResize|adjustPan&quot;</code>，但dialog带edittext还是会被软键盘盖住（不会顶起来）</p>
<p>解决：原来是Activity在清单文件中的主题带有　<code>&lt;item name=&quot;android:windowTranslucentStatus&quot; tools:targetApi=&quot;19&quot;&gt;true&lt;/item&gt;</code> 属性，导致这个顶起效果失效，改activity的主题为<code>android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot;</code></p>
<p><a href="https://cloud.tencent.com/developer/article/1741756">5种方法完美解决android软键盘挡住输入框方法详解-腾讯云开发者社区-腾讯云</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓代码片段UI</tag>
      </tags>
  </entry>
  <entry>
    <title>UI-Toast</title>
    <url>/posts/a6fcb4d0/</url>
    <content><![CDATA[<h1 id="ToastUtils"><a href="#ToastUtils" class="headerlink" title="ToastUtils"></a>ToastUtils</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.view.Gravity;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToastUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Toast sToast;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ToastUtils</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showToast</span><span class="params">(Context context, String text)</span> &#123;</span><br><span class="line">        showToastInner(context, text, Toast.LENGTH_SHORT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showToast</span><span class="params">(Context context, <span class="type">int</span> stringId)</span> &#123;</span><br><span class="line">        showToastInner(context, context.getString(stringId), Toast.LENGTH_SHORT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showToastLong</span><span class="params">(Context context, String text)</span> &#123;</span><br><span class="line">        showToastInner(context, text, Toast.LENGTH_LONG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showToastLong</span><span class="params">(Context context, <span class="type">int</span> stringId)</span> &#123;</span><br><span class="line">        showToastInner(context, context.getString(stringId), Toast.LENGTH_LONG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showToastInner</span><span class="params">(Context context, String text, <span class="type">int</span> duration)</span> &#123;</span><br><span class="line">        ensureToast(context);</span><br><span class="line">        sToast.setText(text);</span><br><span class="line">        <span class="comment">//居中显示</span></span><br><span class="line">        sToast.setGravity(Gravity.CENTER, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//显示时长</span></span><br><span class="line">        sToast.setDuration(duration);</span><br><span class="line">        sToast.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint(&quot;ShowToast&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ensureToast</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sToast != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (ToastUtils.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sToast != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sToast = Toast.makeText(context.getApplicationContext(), <span class="string">&quot; &quot;</span>, Toast.LENGTH_SHORT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="居中显示带自定义布局"><a href="#居中显示带自定义布局" class="headerlink" title="居中显示带自定义布局"></a>居中显示带自定义布局</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Toastutil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Toast odltoast;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短暂显示Toast消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showShortToast</span><span class="params">(Context context, Object message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (message == <span class="literal">null</span>) &#123;</span><br><span class="line">            message = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (context != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Toast</span> <span class="variable">mytoast</span> <span class="operator">=</span> Toast.makeText(context.getApplicationContext(), message.toString(), Toast.LENGTH_SHORT);<span class="comment">//用getApplicationContext防止内存溢出</span></span><br><span class="line">            mytoast.setGravity(Gravity.CENTER_VERTICAL, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            cancelToast();</span><br><span class="line">            odltoast = mytoast;</span><br><span class="line">            mytoast.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先隐藏再显示新的（效果是最终会显示最后一条toast内容）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cancelToast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (odltoast != <span class="literal">null</span>) &#123;</span><br><span class="line">            odltoast.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短暂显示Toast消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showlongToast</span><span class="params">(Context context, Object message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (message == <span class="literal">null</span>) &#123;</span><br><span class="line">            message = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (context != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Toast</span> <span class="variable">mytoast</span> <span class="operator">=</span> Toast.makeText(context.getApplicationContext(), message.toString(), Toast.LENGTH_LONG);<span class="comment">//用getApplicationContext防止内存溢出</span></span><br><span class="line">            mytoast.setGravity(Gravity.CENTER_VERTICAL, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            cancelToast();</span><br><span class="line">            odltoast = mytoast;</span><br><span class="line">            mytoast.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 居中展示，带自定义布局</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> duration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showToastCustomView</span><span class="params">(Context context, Object message, <span class="type">int</span> duration)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (message == <span class="literal">null</span>) &#123;</span><br><span class="line">            message = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (context != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//使用布局加载器，将编写的toast_layout布局加载进来</span></span><br><span class="line">            <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(context).inflate(R.layout.toast_layout, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//获取TextView</span></span><br><span class="line">            <span class="type">TextView</span> <span class="variable">title</span> <span class="operator">=</span> (TextView) view.findViewById(R.id.toast_tv);</span><br><span class="line">            <span class="comment">//设置显示的内容</span></span><br><span class="line">            title.setText(message.toString());</span><br><span class="line">            <span class="type">Toast</span> <span class="variable">toast</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Toast</span>(context);</span><br><span class="line">            toast.setGravity(Gravity.CENTER_VERTICAL, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">//设置显示时间</span></span><br><span class="line">            toast.setDuration(duration);</span><br><span class="line">            toast.setView(view);</span><br><span class="line">            cancelToast();</span><br><span class="line">            odltoast = toast;</span><br><span class="line">            toast.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>toast_layout.xml</code>自定义toast的布局</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@drawable/shape_corner_90_color_999999&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/toast_tv&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;一段很长的测试文字&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;@color/text_big&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>shape_corner_90_color_999999.xml</code>圆角背景</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:shape</span>=<span class="string">&quot;rectangle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">&quot;#999999&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;90dp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>









<h1 id="Toast问题"><a href="#Toast问题" class="headerlink" title="Toast问题"></a>Toast问题</h1><h2 id="Toast运行在子线程问题，handler问题：Can-39-t-toast-on-a-thread-that-has-not-called-Looper-prepare"><a href="#Toast运行在子线程问题，handler问题：Can-39-t-toast-on-a-thread-that-has-not-called-Looper-prepare" class="headerlink" title="Toast运行在子线程问题，handler问题：Can&#39;t toast on a thread that has not called Looper.prepare()"></a>Toast运行在子线程问题，handler问题：<code>Can&#39;t toast on a thread that has not called Looper.prepare()</code></h2><p>正确写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        ToastUtils.showRoundRectToast(<span class="string">&quot;潇湘剑雨-杨充&quot;</span>);</span><br><span class="line">        Looper.loop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓代码片段UI</tag>
      </tags>
  </entry>
  <entry>
    <title>UI-TextView相关</title>
    <url>/posts/8ab4e809/</url>
    <content><![CDATA[<h1 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h1><h2 id="TV内容过长，显示省略号"><a href="#TV内容过长，显示省略号" class="headerlink" title="TV内容过长，显示省略号"></a>TV内容过长，显示省略号</h2><p>TextView中有个ellipsize属性,作用是当文字过长时,该控件该如何显示,解释如下: </p>
<ol>
<li><code>android:ellipsize=&quot;start&quot;</code>—–省略号显示在开头 </li>
<li><code>android:ellipsize=&quot;end&quot;</code>——省略号显示在结尾 </li>
<li><code>android:ellipsize=&quot;middle&quot;</code>—-省略号显示在中间 </li>
<li><code>android:ellipsize=&quot;marquee&quot;</code>–以跑马灯的方式显示(动画横向移动)</li>
</ol>
<p>以上需要搭配 <code>android:maxLines=&quot;1&quot;</code> 属性才可生效（<code>android:singleLine=&quot;true&quot;</code>已经不推荐使用）</p>
<h2 id="TV的省略号不起效"><a href="#TV的省略号不起效" class="headerlink" title="TV的省略号不起效"></a>TV的省略号不起效</h2><p>解析：设置了属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:ellipsize=&quot;end&quot;</span><br><span class="line">android:maxLines=&quot;1&quot;</span><br></pre></td></tr></table></figure>

<p>但在代码中使用了以下的代码，导致省略号不起效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringHelpUtils.setSpannableString(tv, color, name, matchStr);</span><br></pre></td></tr></table></figure>

<p>其中setSpannableString的代码是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> textView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clickColor 不是id是颜色</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> alltext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clickText</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setSpannableString</span><span class="params">(<span class="meta">@NonNull</span> TextView textView, <span class="type">int</span> clickColor, String alltext, String clickText)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (textView == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(alltext)) &#123;</span><br><span class="line">        textView.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        DebugLog.log(<span class="string">&quot;请输入非空字段&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(clickText)) &#123;</span><br><span class="line">        textView.setText(alltext);</span><br><span class="line">        DebugLog.log(<span class="string">&quot;clickText不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!alltext.contains(clickText)) &#123;</span><br><span class="line">        textView.setText(alltext);</span><br><span class="line">        DebugLog.log(<span class="string">&quot;没有需要点击事件或者改变颜色的字段&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    avoidHintColor(textView);</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> alltext.indexOf(clickText);</span><br><span class="line">    <span class="type">SpannableString</span> <span class="variable">spannableString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpannableString</span>(alltext);</span><br><span class="line">    spannableString.setSpan(<span class="keyword">new</span> <span class="title class_">ForegroundColorSpan</span>(clickColor), start, start + clickText.length(), Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</span><br><span class="line">    textView.setText(spannableString);</span><br><span class="line">    textView.setMovementMethod(LinkMovementMethod.getInstance());  <span class="comment">//为TextView设置完Span后，别忘了setMovementMethod</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是因为<code>textView.setMovementMethod</code>影响到的</p>
<p>解决：</p>
<ol>
<li><p>方法一：使用<code>android:singleLine=&quot;true&quot;</code>可以解决上述问题，但是这个属性不推荐了</p>
</li>
<li><p>方法二：自己拼接<code>...</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewTreeObserver;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnGlobalLayoutListenerByEllipSize</span> <span class="keyword">implements</span> <span class="title class_">ViewTreeObserver</span>.OnGlobalLayoutListener &#123;</span><br><span class="line">    <span class="keyword">private</span> TextView mTextView;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mMaxLines;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OnGlobalLayoutListenerByEllipSize</span><span class="params">(TextView textView, <span class="type">int</span> maxLines)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (maxLines &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;maxLines不能小于等于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.mTextView = textView;</span><br><span class="line">        <span class="built_in">this</span>.mMaxLines = maxLines;</span><br><span class="line">        <span class="built_in">this</span>.mTextView.setMaxLines(mMaxLines + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">this</span>.mTextView.setSingleLine(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onGlobalLayout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mTextView.getLineCount() &gt; mMaxLines) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">line</span> <span class="operator">=</span> mTextView.getLayout().getLineEnd(mMaxLines - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//定义成CharSequence类型，是为了兼容emoji表情，如果是String类型会造成emoji无法显示</span></span><br><span class="line">            <span class="type">CharSequence</span> <span class="variable">truncate</span> <span class="operator">=</span> <span class="string">&quot;...&quot;</span>;</span><br><span class="line">            <span class="type">CharSequence</span> <span class="variable">text</span> <span class="operator">=</span> mTextView.getText();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                text = text.subSequence(<span class="number">0</span>, line - <span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                truncate = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                text = mTextView.getText();</span><br><span class="line">            &#125;</span><br><span class="line">            TextUtils.<span class="type">TruncateAt</span> <span class="variable">at</span> <span class="operator">=</span> mTextView.getEllipsize();</span><br><span class="line">            <span class="keyword">if</span> (at == TextUtils.TruncateAt.START) &#123;</span><br><span class="line">                mTextView.setText(truncate);</span><br><span class="line">                mTextView.append(text);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (at == TextUtils.TruncateAt.MIDDLE) &#123;</span><br><span class="line">                mTextView.setText(text.subSequence(<span class="number">0</span>, text.length() / <span class="number">2</span>));</span><br><span class="line">                mTextView.append(truncate);</span><br><span class="line">                mTextView.append(text.subSequence(text.length() / <span class="number">2</span>, text.length()));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mTextView.setText(text);</span><br><span class="line">                mTextView.append(truncate);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用：<code>tv.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListenerByEllipSize(tv,1));</code></p>
<p>但此种做法会导致tv后面会多一些空白，使用控件位置检测看到有个空白的控件（未解决）</p>
</li>
<li><p><a href="https://yangqiuyan.github.io/2018/11/21/LinkMovementMethod/">方法三：</a>去掉<code>tv.setMovementMethod(LinkMovementMethod.getInstance());</code>（会导致span不能点击了），然后自己添加点击事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// textview点击监听</span></span><br><span class="line">linkText.setOnTouchListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnTouchListener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouch</span><span class="params">(View v, MotionEvent event)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">action</span> <span class="operator">=</span> event.getAction();</span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            startTime = System.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> (TextView) v;</span><br><span class="line">        <span class="type">CharSequence</span> <span class="variable">text</span> <span class="operator">=</span> tv.getText();</span><br><span class="line">        <span class="keyword">if</span> (text <span class="keyword">instanceof</span> SpannableString) &#123;</span><br><span class="line">            <span class="keyword">if</span> (action == MotionEvent.ACTION_UP) &#123;</span><br><span class="line">                <span class="comment">// 避免长按和点击冲突，如果超过300毫秒，认为是在长按，不执行点击操作</span></span><br><span class="line">                <span class="keyword">if</span> (System.currentTimeMillis() - startTime &gt; <span class="number">300</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (<span class="type">int</span>) event.getX();</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> (<span class="type">int</span>) event.getY();</span><br><span class="line"></span><br><span class="line">                x -= tv.getTotalPaddingLeft();</span><br><span class="line">                y -= tv.getTotalPaddingTop();</span><br><span class="line"></span><br><span class="line">                x += tv.getScrollX();</span><br><span class="line">                y += tv.getScrollY();</span><br><span class="line"></span><br><span class="line">                <span class="type">Layout</span> <span class="variable">layout</span> <span class="operator">=</span> tv.getLayout();</span><br><span class="line">                <span class="type">int</span> <span class="variable">line</span> <span class="operator">=</span> layout.getLineForVertical(y);</span><br><span class="line">                <span class="type">int</span> <span class="variable">off</span> <span class="operator">=</span> layout.getOffsetForHorizontal(line, x);</span><br><span class="line"></span><br><span class="line">                ClickableSpan[] link = ((SpannableString) text).getSpans(off, off, ClickableSpan.class);</span><br><span class="line">                <span class="keyword">if</span> (link.length != <span class="number">0</span>) &#123;</span><br><span class="line">                    link[<span class="number">0</span>].onClick(tv);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="TV部分关键字带下划线可点击的"><a href="#TV部分关键字带下划线可点击的" class="headerlink" title="TV部分关键字带下划线可点击的"></a>TV部分关键字带下划线可点击的</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">&quot;AutoLinkStyleTextView&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;AutoLinkStyleTextView_text_value&quot;</span> <span class="attr">format</span>=<span class="string">&quot;string|reference&quot;</span>/&gt;</span>//key word with color and underline, and split with &#x27;,&#x27;(en)</span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;AutoLinkStyleTextView_default_color&quot;</span> <span class="attr">format</span>=<span class="string">&quot;color|reference&quot;</span>/&gt;</span>//word and underline&#x27;s color</span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;AutoLinkStyleTextView_has_under_line&quot;</span> <span class="attr">format</span>=<span class="string">&quot;boolean&quot;</span>/&gt;</span>//underline with true and false</span><br><span class="line"><span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xx.AutoLinkStyleTextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_clause&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;我已核对付款金额，仔细阅读并同意“购买须知”及约克论坛团购“用户条款”&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;16sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:AutoLinkStyleTextView_text_value</span>=<span class="string">&quot;“购买须知”,“用户条款”&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">autoLinkStyleTextView.setOnClickCallBack(<span class="keyword">new</span> <span class="title class_">AutoLinkStyleTextView</span>.ClickCallBack() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;购买须知&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">1</span>) &#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;用户条款&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="/posts/8ab4e809/TextView%E4%B8%8B%E5%88%92%E7%BA%BF.png" alt="image-20210218102959106"></p>
<h2 id="TV部分文字响应点击事件"><a href="#TV部分文字响应点击事件" class="headerlink" title="TV部分文字响应点击事件"></a>TV部分文字响应点击事件</h2><ol>
<li>给TextView设置设置文字背景为透明色,不然会有点击选中效果</li>
<li>SpannableString拼接字符串,给8到11的字符串用Clickable对象去处理<br>  1).Clickable对象继承ClickableSpan 实现了onclick()跟updateDrawState()方法<br>  2).onclick()处理点击事件,updateDrawState()中可以改变字体颜色,控件背景色</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;  </span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_main);  </span><br><span class="line">          </span><br><span class="line">        TextView textView=(TextView) findViewById(R.id.hello_world);  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//ds.setColor()设定的是span超链接的文本颜色，而不是点击后的颜色，  </span></span><br><span class="line">        <span class="comment">//点击后的背景颜色(HighLightColor)属于TextView的属性，  </span></span><br><span class="line">        <span class="comment">//Android4.0以上默认是淡绿色，低版本的是黄色。解决方法就是通过重新设置文字背景为透明色  </span></span><br><span class="line">        textView.setHighlightColor(getResources().getColor(android.R.color.transparent));  </span><br><span class="line">          </span><br><span class="line">        <span class="type">SpannableString</span> <span class="variable">spanableInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpannableString</span>(<span class="string">&quot;这是一个测试&quot;</span>+<span class="string">&quot;: &quot;</span>+<span class="string">&quot;点击我&quot;</span>);  </span><br><span class="line">        spanableInfo.setSpan(<span class="keyword">new</span> <span class="title class_">Clickable</span>(clickListener),<span class="number">8</span>,<span class="number">11</span>,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  </span><br><span class="line">        textView.setText(spanableInfo);  </span><br><span class="line">        textView.setMovementMethod(LinkMovementMethod.getInstance());  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> OnClickListener clickListener=<span class="keyword">new</span> <span class="title class_">OnClickListener</span>() &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;  </span><br><span class="line">            Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;点击成功....&quot;</span>,Toast.LENGTH_SHORT).show();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Clickable</span> <span class="keyword">extends</span> <span class="title class_">ClickableSpan</span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> View.OnClickListener mListener;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Clickable</span><span class="params">(View.OnClickListener l)</span> &#123;  </span><br><span class="line">            mListener = l;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 重写父类点击事件 </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;  </span><br><span class="line">            mListener.onClick(v);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 重写父类updateDrawState方法  我们可以给TextView设置字体颜色,背景颜色等等... </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateDrawState</span><span class="params">(TextPaint ds)</span> &#123;  </span><br><span class="line">            ds.setColor(getResources().getColor(R.color.video_comment_like_number));  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/hello_world&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/posts/8ab4e809/TextView%E9%83%A8%E5%88%86%E7%82%B9%E5%87%BB.png" alt="image-20210218103755471"></p>
<h2 id="TV部分文字响应点击事件（法2）"><a href="#TV部分文字响应点击事件（法2）" class="headerlink" title="TV部分文字响应点击事件（法2）"></a>TV部分文字响应点击事件（法2）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.text.TextPaint;</span><br><span class="line"><span class="keyword">import</span> android.text.style.ClickableSpan;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shenbh</span></span><br><span class="line"><span class="comment"> * time 2021/2/6 22:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecordClickSpan</span> <span class="keyword">extends</span> <span class="title class_">ClickableSpan</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View widget)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateDrawState</span><span class="params">(TextPaint ds)</span> &#123;</span><br><span class="line">        ds.setColor(DemoApplication.getInstance().getResources().getColor(R.color.main_color));</span><br><span class="line">        ds.setUnderlineText(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//感谢使用爱学拼音！使用前请仔细阅读《用户协议》和《隐私协议》了解您的合法权益。我们将严格遵守承诺，保护个人信息。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">protocolName</span> <span class="operator">=</span> <span class="string">&quot;《用户协议》&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">privacyName</span> <span class="operator">=</span> <span class="string">&quot;《隐私协议》&quot;</span>;</span><br><span class="line"><span class="type">SpannableString</span> <span class="variable">protocolSpannable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpannableString</span>(protocolName);</span><br><span class="line"><span class="type">SpannableString</span> <span class="variable">privacySpannable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpannableString</span>(privacyName);</span><br><span class="line"><span class="type">RecordClickSpan</span> <span class="variable">protocolSpan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecordClickSpan</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View widget)</span> &#123;</span><br><span class="line">        context.startActivity(WebViewActivity.createIntent(context, <span class="string">&quot;用户协议&quot;</span>, HttpRequest.getH5Url(<span class="string">&quot;userAgreement&quot;</span> )));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">RecordClickSpan</span> <span class="variable">privacySpan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecordClickSpan</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View widget)</span> &#123;</span><br><span class="line">        context.startActivity(WebViewActivity.createIntent(context, <span class="string">&quot;隐私协议&quot;</span>, HttpRequest.getH5Url(<span class="string">&quot;privacyPolicy&quot;</span> )));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">protocolSpannable.setSpan(protocolSpan, <span class="number">0</span>, protocolName.length(), Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</span><br><span class="line">privacySpannable.setSpan(privacySpan, <span class="number">0</span>, privacyName.length(), Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</span><br><span class="line"><span class="comment">//append需要分开一个个来，否则会有奇怪的问题</span></span><br><span class="line">contentTv.append(<span class="string">&quot;感谢使用爱学拼音！使用前请仔细阅读&quot;</span>);</span><br><span class="line">contentTv.append(protocolSpannable);</span><br><span class="line">contentTv.append(<span class="string">&quot;和&quot;</span>);</span><br><span class="line">contentTv.append(privacySpannable);</span><br><span class="line">contentTv.append(<span class="string">&quot;了解您的合法权益。我们将严格遵守承诺，保护个人信息。&quot;</span>);</span><br><span class="line">contentTv.setMovementMethod(LinkMovementMethod.getInstance());</span><br></pre></td></tr></table></figure>

<h2 id="TV加中划线、下划线"><a href="#TV加中划线、下划线" class="headerlink" title="TV加中划线、下划线"></a>TV加中划线、下划线</h2><p>加中划线</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tv.getPaint().setFlags(Paint.STRIKE_THRU_TEXT_FLAG);<span class="comment">//设置中划线</span></span><br><span class="line">tv.getPaint().setFlags(Paint.STRIKE_THRU_TEXT_FLAG|Paint.ANTI_ALIAS_FLAG);  <span class="comment">// 设置中划线并加清晰</span></span><br></pre></td></tr></table></figure>

<p>加下划线（5种做法）</p>
<ol>
<li><p>将要处理的文字写到一个资源文件，<strong>如string.xml（使用html用法格式化）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">u</span>&gt;</span>phone:0123456<span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;app_name&quot;</span>&gt;</span>MyLink<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>当文字中出现URL、E-mail、电话号码等的时候，可以将TextView的<strong>android:autoLink属性</strong>设置为相应的的值，如果是所有的类型都出来就是<strong>android:autoLink&#x3D;”all”，</strong>当然也可以在java代码里 做,<strong>textView01.setAutoLinkMask(Linkify.ALL);</strong> </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>  </span></span><br><span class="line"><span class="tag">     <span class="attr">android:id</span>=<span class="string">&quot;@+id/text1&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span>  </span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>  </span></span><br><span class="line"><span class="tag">     <span class="attr">android:autoLink</span>=<span class="string">&quot;all&quot;</span>  </span></span><br><span class="line"><span class="tag">     <span class="attr">android:text</span>=<span class="string">&quot;@string/link_text_auto&quot;</span>  /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>用<strong>Html类的fromHtml（）</strong>方法格式化要放到TextView里的文字 ，与第1种一样，只是是用代码动态设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TextView</span> <span class="variable">textView</span> <span class="operator">=</span> (TextView)findViewById(R.id.tv_test); </span><br><span class="line">textView.setText(Html.fromHtml(<span class="string">&quot;&lt;u&gt;&quot;</span>+<span class="string">&quot;0123456&quot;</span>+<span class="string">&quot;&lt;/u&gt;&quot;</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置TextView的Paint属性：<strong>tvTest.getPaint().setFlags(Paint. UNDERLINE_TEXT_FLAG ); &#x2F;&#x2F;下划线</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tvTest.getPaint().setFlags(Paint.UNDERLINE_TEXT_FLAG); <span class="comment">//下划线</span></span><br><span class="line">tvTest.getPaint().setAntiAlias(<span class="literal">true</span>);<span class="comment">//抗锯齿 </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>用Spannable或实现它的类，如<strong>SpannableString</strong>来格式部分字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SpannableString</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpannableString</span>(str);</span><br><span class="line">content.setSpan(<span class="keyword">new</span> <span class="title class_">UnderLineSpan</span>, <span class="number">0</span>, str.length(), <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>另外附上一篇博客介绍：<a href="http://blog.csdn.net/snowdream86/article/details/6776629">Android TextView中文字通过SpannableString来设置超链接、颜色、字体等属性</a></p>
</li>
</ol>
<p>取消设置的线</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">tv.get<span class="constructor">Paint()</span>.set<span class="constructor">Flags(0)</span>; <span class="comment">// 取消设置的的划线 </span></span><br></pre></td></tr></table></figure>

<p>自定义超链接样式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TextView tv=<span class="keyword">new</span> <span class="title class_">TextView</span>(<span class="built_in">this</span>);</span><br><span class="line">tv.setText(Html.fromHtml(<span class="string">&quot;&lt;a href=\&quot;http://blog.csdn.net/CAIYUNFREEDOM\&quot;&gt;自定义的超链接样式&lt;/a&gt;&quot;</span>));</span><br><span class="line"><span class="comment">// 在单击链接时凡是有要执行的动作，都必须设置MovementMethod对象</span></span><br><span class="line">tv.setMovementMethod(LinkMovementMethod.getInstance());  </span><br><span class="line"><span class="type">CharSequence</span> <span class="variable">text</span>  <span class="operator">=</span>  tv.getText();</span><br><span class="line"><span class="keyword">if</span> (text <span class="keyword">instanceof</span> Spannable)&#123; </span><br><span class="line">    <span class="type">int</span>  <span class="variable">end</span>  <span class="operator">=</span>  text.length();   </span><br><span class="line">    <span class="type">Spannable</span> <span class="variable">sp</span>  <span class="operator">=</span>  (Spannable)tv.getText();   </span><br><span class="line">    URLSpan[] urls = sp.getSpans( <span class="number">0</span> , end, URLSpan.class );   </span><br><span class="line"></span><br><span class="line">    <span class="type">SpannableStringBuilder</span> <span class="variable">style</span> <span class="operator">=</span> <span class="keyword">new</span>  <span class="title class_">SpannableStringBuilder</span>(text);   </span><br><span class="line">    style.clearSpans(); <span class="comment">// should clear old spans    </span></span><br><span class="line">    <span class="keyword">for</span> (URLSpan url : urls)&#123;     </span><br><span class="line">        URLSpan myURLSpan=   <span class="keyword">new</span>  <span class="title class_">URLSpan</span>(url.getURL());                        </span><br><span class="line">        style.setSpan(myURLSpan,sp.getSpanStart(url),sp.getSpanEnd(url),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  </span><br><span class="line">        style.setSpan(<span class="keyword">new</span><span class="comment">//设置前景色为红色</span></span><br><span class="line">    &#125; </span><br><span class="line">    tv.setText(style);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Tv跑马灯"><a href="#Tv跑马灯" class="headerlink" title="Tv跑马灯"></a>Tv跑马灯</h2><p>有时文字过长，又只想单行显示来节省空间，走马灯式显示是个不错的选择。（饿了么顶部地址显示就是这种情况）</p>
<p>其实只要在布局文件的<code>Textview</code>中添加属性<code>android:ellipsize=&quot;marquee&quot;</code></p>
<p>但是要在获得焦点的情况下该属性才会起作用。</p>
<p>那么怎么让控件一直获得焦点呢？</p>
<p>系统判断<code>TextView</code>是否获得焦点是通过 <code>isFocused()</code>这个方法的返回值来判断</p>
<p>这样的话就可以新创建一个类，继承<code>Textveiw</code>，重写<code>isFoused()</code>方法，让它返回<code>true</code>就ko了。</p>
<p>文字左右滚动三个属性： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:singleLine=&quot;true&quot; </span><br><span class="line">android:ellipsize=&quot;marquee&quot; </span><br><span class="line">android:marqueeRepeatLimit=&quot;marquee_forever&quot;</span><br></pre></td></tr></table></figure>



<h2 id="Tv动态添加drawableLeft"><a href="#Tv动态添加drawableLeft" class="headerlink" title="Tv动态添加drawableLeft"></a>Tv动态添加drawableLeft</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Drawable</span> <span class="variable">drawable</span> <span class="operator">=</span> mContext.getResources().getDrawable(R.drawable.icon_location_4);</span><br><span class="line">drawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, drawable.getMinimumWidth(), drawable.getMinimumHeight());</span><br><span class="line">tv.setCompoundDrawables(drawable, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">//设置drawablePadding</span></span><br><span class="line"> .setCompoundDrawablePadding(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>



<h2 id="判断是否所有TextView都不为空"><a href="#判断是否所有TextView都不为空" class="headerlink" title="判断是否所有TextView都不为空"></a>判断是否所有TextView都不为空</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xm597.common.manager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.text.Editable;</span><br><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"><span class="keyword">import</span> android.text.TextWatcher;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     desc   : 判断是否所有TextView（EditText）都不为空</span></span><br><span class="line"><span class="comment"> *			  EditText是继承于TextView的</span></span><br><span class="line"><span class="comment"> *     author : shenbh</span></span><br><span class="line"><span class="comment"> *     e-mail : shenbh@qq.com</span></span><br><span class="line"><span class="comment"> *     time   : 2021-12-30 15:28</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TvIsEmptyManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isAllTvNotEmpty</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> TextWatcher watcher;</span><br><span class="line">    <span class="keyword">private</span> TextWatcher mWatcher;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;TextView&gt; mTextViews = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TvIsEmptyManager</span><span class="params">()</span> &#123;</span><br><span class="line">        watcher = <span class="keyword">new</span> <span class="title class_">TextWatcher</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeTextChanged</span><span class="params">(CharSequence s, <span class="type">int</span> start, <span class="type">int</span> count, <span class="type">int</span> after)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTextChanged</span><span class="params">(CharSequence s, <span class="type">int</span> start, <span class="type">int</span> before, <span class="type">int</span> count)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterTextChanged</span><span class="params">(Editable s)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (getWatcher() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    getWatcher().afterTextChanged(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEditTexts</span><span class="params">(ArrayList&lt;TextView&gt; textViews)</span> &#123;</span><br><span class="line">        mTextViews.clear();</span><br><span class="line">        <span class="keyword">if</span> (textViews != <span class="literal">null</span>) &#123;</span><br><span class="line">            mTextViews.addAll(textViews);</span><br><span class="line">            <span class="keyword">for</span> (TextView tv : textViews) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tv != <span class="literal">null</span>) &#123;</span><br><span class="line">                    tv.addTextChangedListener(watcher);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAllTvNotEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;CharSequence&gt; builder = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (TextView textView : mTextViews) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(textView.getText())) &#123;</span><br><span class="line">                builder.add(textView.getText());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.size() == mTextViews.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TextWatcher <span class="title function_">getWatcher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mWatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWatcher</span><span class="params">(TextWatcher mWatcher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mWatcher = mWatcher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;TextView&gt; textViews = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">textViews.add(mBinding.nameMicroResume.getRightEdt());</span><br><span class="line">textViews.add(mBinding.birthMicroResume.getRightEdt());</span><br><span class="line">textViews.add(mBinding.cityMicroResume.getRightEdt());</span><br><span class="line">textViews.add(mBinding.jobIntentionMicroResume.getRightEdt());</span><br><span class="line">textViews.add(mBinding.salaryMicroResume.getRightEdt());</span><br><span class="line"><span class="type">TvIsEmptyManager</span> <span class="variable">tvIsEmptyManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TvIsEmptyManager</span>();</span><br><span class="line">tvIsEmptyManager.setWatcher(<span class="keyword">new</span> <span class="title class_">TextWatcher</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeTextChanged</span><span class="params">(CharSequence s, <span class="type">int</span> start, <span class="type">int</span> count, <span class="type">int</span> after)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTextChanged</span><span class="params">(CharSequence s, <span class="type">int</span> start, <span class="type">int</span> before, <span class="type">int</span> count)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterTextChanged</span><span class="params">(Editable s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tvIsEmptyManager.isAllTvNotEmpty())&#123;</span><br><span class="line">            mBinding.btnConfirmMicroResume.setBackground(getResources().getDrawable(R.drawable.shape_corner_5_color_f5f5f6));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">tvIsEmptyManager.setEditTexts(textViews);</span><br></pre></td></tr></table></figure>

<h2 id="判断页面所有控件是否有为空的"><a href="#判断页面所有控件是否有为空的" class="headerlink" title="判断页面所有控件是否有为空的"></a>判断页面所有控件是否有为空的</h2><p>注：</p>
<ol>
<li><p>extraIds是表示不参与判断的控件的id，可以对这些id在页面中单独判断</p>
</li>
<li><p>底下的AllWidgetHasEmpty目前只添加了TextView的处理（EditText是继承于TextView），要对页面中其他种类的控件进行判空的话要在这个类中添加对应的类型以及它的判空逻辑。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     desc   : 判断页面所有控件是否有为空的</span></span><br><span class="line"><span class="comment"> *              注：extraIds是表示不参与判断的控件的id，可以对这些id在页面中单独判断</span></span><br><span class="line"><span class="comment"> *     author : shenbh</span></span><br><span class="line"><span class="comment"> *     e-mail : shenbh@qq.com</span></span><br><span class="line"><span class="comment"> *     time   : 2021-12-30 17:07</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AllWidgetHasEmpty</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;AllWidgetNotEmpty&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">AllWidgetHasEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AllWidgetHasEmpty <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> AllWidgetNotEmptyHolder.singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例模式-&gt;静态内部类&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 多线程情况下，使用合理一些,推荐</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AllWidgetNotEmptyHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">AllWidgetHasEmpty</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AllWidgetHasEmpty</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用for遍历添加观察者对象</span></span><br><span class="line"><span class="comment">     * 可以重写</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids  不参与判断的控件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(View view, ArrayList&lt;Integer&gt; ids)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (view == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;view参数不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (view != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (view.getVisibility() == View.VISIBLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (view <span class="keyword">instanceof</span> EditText) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (TextUtils.isEmpty(((EditText) view).getText())) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view <span class="keyword">instanceof</span> TextView) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (TextUtils.isEmpty(((TextView) view).getText())) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">observerviewgroup</span> <span class="operator">=</span> observerviewgroup((ViewGroup) view, ids);</span><br><span class="line">                    <span class="keyword">if</span> (observerviewgroup) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果是集合就这样遍历</span></span><br><span class="line"><span class="comment">     * 这里采用递归</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids  不参与判断的控件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">observerviewgroup</span><span class="params">(ViewGroup view, ArrayList&lt;Integer&gt; ids)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">childCount</span> <span class="operator">=</span> view.getChildCount();</span><br><span class="line">        <span class="keyword">if</span> (childCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                <span class="type">View</span> <span class="variable">child</span> <span class="operator">=</span> view.getChildAt(i);</span><br><span class="line">                <span class="keyword">if</span> (child.getVisibility() == View.VISIBLE) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ids != <span class="literal">null</span> &amp;&amp; !ids.isEmpty() &amp;&amp; ids.contains(view.getId())) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child <span class="keyword">instanceof</span> TextView) &#123;<span class="comment">//这里添加你需要的view</span></span><br><span class="line">                        <span class="keyword">if</span> (TextUtils.isEmpty(((TextView) child).getText())) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isEmpty(child, ids)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<p>先在基类Activity中写，方便它的子类直接使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BaseActivity.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;Integer&gt; extraIds;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    allViewHasEmpty();</span><br><span class="line">    onCreated(savedInstanceState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页面所有控件是否有一个为空</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">allViewHasEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) &#123;</span><br><span class="line">        <span class="comment">//getWindow().getDecorView()页面所有的控件元素</span></span><br><span class="line">        <span class="type">ViewTreeObserver</span> <span class="variable">viewTreeObserver</span> <span class="operator">=</span> getWindow().getDecorView().getViewTreeObserver();</span><br><span class="line">        viewTreeObserver.addOnDrawListener(<span class="keyword">new</span> <span class="title class_">ViewTreeObserver</span>.OnDrawListener() &#123;</span><br><span class="line">            <span class="comment">//控件在内容、焦点变化的时候都会走这个绘制方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">hasEmpty</span> <span class="operator">=</span></span><br><span class="line">                    AllWidgetHasEmpty.getInstance().isEmpty(getWindow().getDecorView(),</span><br><span class="line">                                                            extraIds);</span><br><span class="line">                onViewDrawChange(hasEmpty);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置需要页面单独处理的控件id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setExtraIds</span><span class="params">(ArrayList&lt;Integer&gt; extraIds)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.extraIds = extraIds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类重写这个方法来实现自己的判空后的逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onViewDrawChange</span><span class="params">(<span class="type">boolean</span> hasEmpty)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子类Activity中使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreated</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; extraIds = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    extraIds.add(R.id.gender_female_micro_resume);</span><br><span class="line">    extraIds.add(R.id.gender_male_micro_resume);</span><br><span class="line">    setExtraIds(extraIds);</span><br><span class="line">    allViewHasEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类的判空后的逻辑处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onViewDrawChange</span><span class="params">(<span class="type">boolean</span> hasEmpty)</span> &#123;</span><br><span class="line">    <span class="comment">//hasEmpty是页面ViewGroup中所有控件元素是否有为空的判断。“||”后面的是extraIds中的单独判空逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (hasEmpty || (!mBinding.genderFemaleMicroResume.isSelected() &amp;&amp; !mBinding.genderMaleMicroResume.isSelected()))&#123;</span><br><span class="line">        <span class="comment">//添加开关，避免 setBackground 后会调用 onDraw，进入到死循环</span></span><br><span class="line">        <span class="keyword">if</span> (mBinding.btnConfirmMicroResume.isClickable()) &#123;</span><br><span class="line">            mBinding.btnConfirmMicroResume.setClickable(<span class="literal">false</span>);</span><br><span class="line">            mBinding.btnConfirmMicroResume.setBackground(getResources().getDrawable(R.drawable.shape_corner_5_color_2b4b9));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//添加开关，避免 setBackground 后会调用 onDraw，进入到死循环</span></span><br><span class="line">        <span class="keyword">if</span> (!mBinding.btnConfirmMicroResume.isClickable()) &#123;</span><br><span class="line">            mBinding.btnConfirmMicroResume.setClickable(<span class="literal">true</span>);</span><br><span class="line">            mBinding.btnConfirmMicroResume.setBackground(getResources().getDrawable(R.drawable.shape_corner_5_color_ff5c5b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="进一步封装"><a href="#进一步封装" class="headerlink" title="进一步封装"></a>进一步封装</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     desc   : 判断页面所有控件是否有为空的</span></span><br><span class="line"><span class="comment"> *              注：extraIds是表示不参与判断的控件的id，可以对这些id在页面中单独判断</span></span><br><span class="line"><span class="comment"> *     author : shenbh</span></span><br><span class="line"><span class="comment"> *     e-mail : shenbh@qq.com</span></span><br><span class="line"><span class="comment"> *     time   : 2021-12-30 17:07</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AllWidgetHasEmpty</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">AllWidgetHasEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AllWidgetHasEmpty <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> AllWidgetNotEmptyHolder.singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例模式-&gt;静态内部类&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 多线程情况下，使用合理一些,推荐</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AllWidgetNotEmptyHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">AllWidgetHasEmpty</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AllWidgetHasEmpty</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用for遍历添加观察者对象</span></span><br><span class="line"><span class="comment">     * 可以重写</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener 把判空处理下发出去</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(View view, ViewsEmptyListener listener)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (view == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;view参数不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (view != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (view.getVisibility() == View.VISIBLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (listener != <span class="literal">null</span> &amp;&amp; listener.hasEmpty(view)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">observerviewgroup</span> <span class="operator">=</span> observerviewgroup((ViewGroup) view, listener);</span><br><span class="line">                    <span class="keyword">if</span> (observerviewgroup) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果是集合就这样遍历</span></span><br><span class="line"><span class="comment">     * 这里采用递归</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listener 把判空处理下发出去</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">observerviewgroup</span><span class="params">(ViewGroup view, ViewsEmptyListener listener)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">childCount</span> <span class="operator">=</span> view.getChildCount();</span><br><span class="line">        <span class="keyword">if</span> (childCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">                <span class="type">View</span> <span class="variable">child</span> <span class="operator">=</span> view.getChildAt(i);</span><br><span class="line">                <span class="keyword">if</span> (isEmpty(child, listener)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewsEmptyListener listener;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ViewsEmptyListener <span class="title function_">getListener</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setListener</span><span class="params">(ViewsEmptyListener listener)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ViewsEmptyListener</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">hasEmpty</span><span class="params">(View view)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<p>先在基类中写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BaseActivity.java中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AllWidgetHasEmpty.ViewsEmptyListener viewsEmptyListener;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    initViewsEmptyListener();</span><br><span class="line">    allViewHasEmpty();</span><br><span class="line">    onCreated(savedInstanceState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一些公共控件的判空处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initViewsEmptyListener</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (viewsEmptyListener == <span class="literal">null</span>) &#123;</span><br><span class="line">        viewsEmptyListener = <span class="keyword">new</span> <span class="title class_">AllWidgetHasEmpty</span>.ViewsEmptyListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasEmpty</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (specialViewHasEmpty(view)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view <span class="keyword">instanceof</span> EditText) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (TextUtils.isEmpty(((EditText) view).getText())) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view <span class="keyword">instanceof</span> TextView) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (TextUtils.isEmpty(((TextView) view).getText())) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有控件是否有空值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">allViewHasEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) &#123;</span><br><span class="line">        <span class="type">ViewTreeObserver</span> <span class="variable">viewTreeObserver</span> <span class="operator">=</span> getWindow().getDecorView().getViewTreeObserver();</span><br><span class="line">        viewTreeObserver.addOnDrawListener(() -&gt; &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">hasEmpty</span> <span class="operator">=</span></span><br><span class="line">                AllWidgetHasEmpty.getInstance().isEmpty(getWindow().getDecorView(),</span><br><span class="line">                                                        viewsEmptyListener);</span><br><span class="line">            onViewDrawChange(hasEmpty);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 特殊控件是否有空值</span></span><br><span class="line"><span class="comment"> * 子类有特殊控件需要判空的需要重写这个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">specialViewHasEmpty</span><span class="params">(View view)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类重写这个方法来实现自己的判空后的逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onViewDrawChange</span><span class="params">(<span class="type">boolean</span> hasEmpty)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在具体子类中使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重写两个方法即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 特殊控件是否有空值</span></span><br><span class="line"><span class="comment"> * 子类有特殊控件需要判空的重写这个方法，加上子类自己特殊控件的判空逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">specialViewHasEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !mBinding.genderFemaleMicroResume.isSelected() &amp;&amp; !mBinding.genderMaleMicroResume.isSelected();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类的判空后的逻辑处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onViewDrawChange</span><span class="params">(<span class="type">boolean</span> hasEmpty)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasEmpty != mBinding.btnConfirmMicroResume.isSelected()) &#123;</span><br><span class="line">        mBinding.btnConfirmMicroResume.setSelected(hasEmpty);</span><br><span class="line">        <span class="keyword">if</span> (hasEmpty) &#123;</span><br><span class="line">            mBinding.btnConfirmMicroResume.setBackground(getResources().getDrawable(R.drawable.shape_corner_5_color_2b4b9));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mBinding.btnConfirmMicroResume.setBackground(getResources().getDrawable(R.drawable.shape_corner_5_color_ff5c5b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="标题右侧带个标签，标题长度是包裹内容且能换行（标签不能顶出屏幕）"><a href="#标题右侧带个标签，标题长度是包裹内容且能换行（标签不能顶出屏幕）" class="headerlink" title="标题右侧带个标签，标题长度是包裹内容且能换行（标签不能顶出屏幕）"></a>标题右侧带个标签，标题长度是包裹内容且能换行（标签不能顶出屏幕）</h2><p>方法一：</p>
<p><img src="/posts/8ab4e809/%E6%A0%87%E9%A2%98%E9%95%BF%E5%BA%A6%E5%8A%A8%E6%80%81.png" alt="安卓/标题长度动态"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;end&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:text</span>=<span class="string">&quot;收到Ladd利夫卡是领导看了发生的反馈爱上了肯定是法兰克福的十六客服的是客服&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:text</span>=<span class="string">&quot;全职&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<p>另一个思路：</p>
<p>在代码中动态测量，动态设置左侧标题的宽度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">titleTv.setText(jobRow.getJname());</span><br><span class="line">tagTv.setText(jobRow.getJobTypeStr());</span><br><span class="line">KViewMeasurer.measureView(titleTv);</span><br><span class="line">KViewMeasurer.measureView(tagTv);</span><br><span class="line"><span class="type">int</span> <span class="variable">titleWidth</span> <span class="operator">=</span> titleTv.getMeasuredWidth();</span><br><span class="line"><span class="type">int</span> <span class="variable">useableWidth</span> <span class="operator">=</span> ScreenUtils.getScreenWidth() - tagTv.getMeasuredWidth() - <span class="number">64</span>;<span class="comment">//64是 各种margin的和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">minWidth</span> <span class="operator">=</span> Math.min(titleWidth, useableWidth);</span><br><span class="line">ViewGroup.<span class="type">LayoutParams</span> <span class="variable">lp</span> <span class="operator">=</span> titleTv.getLayoutParams();</span><br><span class="line">lp.width = minWidth;</span><br><span class="line">titleTv.setLayoutParams(lp);</span><br></pre></td></tr></table></figure>

<h2 id="Tv英文的换行问题"><a href="#Tv英文的换行问题" class="headerlink" title="Tv英文的换行问题"></a>Tv英文的换行问题</h2><p>思路：动态测量，手动切割字符串</p>
<h2 id="设置可滚动"><a href="#设置可滚动" class="headerlink" title="设置可滚动"></a>设置可滚动</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:id</span>=<span class="string">&quot;@+id/txt_scroll&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:scrollbars</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:scrollbarStyle</span>=<span class="string">&quot;outsideInset&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">tools:text</span>=<span class="string">&quot;<span class="symbol">&amp;lt;</span>p<span class="symbol">&amp;gt;</span>因工作需要，厦门市人力资源和社会保障局拟面向社会公开招聘非在编驾驶员。现将简章公布如下：&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>设置scrollbars属性（有三个属性 horizontal、vertical、none）</p>
<p>系统默认scrolbar是渐隐效果，如果需要常显设置 android:fadeScrollbars&#x3D;”false”</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>()&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        <span class="keyword">val</span> text = findViewById&lt;TextView&gt;(R.id.txt_scroll)</span><br><span class="line">        text.movementMethod = ScrollingMovementMethod.getInstance()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>调用 public final void setMovementMethod(MovementMethod movement){}，设置 MovementMethod</p>
</blockquote>
<h2 id="显示html"><a href="#显示html" class="headerlink" title="显示html"></a>显示html</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tv.setText(Html.fromHtml(htmlStr));</span><br></pre></td></tr></table></figure>



<h2 id="支持外链跳转"><a href="#支持外链跳转" class="headerlink" title="支持外链跳转"></a>支持外链跳转</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">&quot;16dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;123&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:autoLink</span>=<span class="string">&quot;phone&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>添加 android:autoLink 属性</p>
</blockquote>
<h1 id="TextView相关问题"><a href="#TextView相关问题" class="headerlink" title="TextView相关问题"></a>TextView相关问题</h1><h2 id="tv-setTextColor-color-显示出来的颜色值不对"><a href="#tv-setTextColor-color-显示出来的颜色值不对" class="headerlink" title="tv.setTextColor(color)显示出来的颜色值不对"></a><code>tv.setTextColor(color)</code>显示出来的颜色值不对</h2><p>解决：tv.setTextColor(R.color.red);&#x2F;&#x2F;不报错，但是显示效果不是红色</p>
<p>改成 tv.setTextColor(getResource().getColor(R.color.red));&#x2F;&#x2F;即可</p>
<h2 id="显示不出省略号…的问题"><a href="#显示不出省略号…的问题" class="headerlink" title="显示不出省略号…的问题"></a>显示不出省略号…的问题</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_storeName&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:ellipsize</span>=<span class="string">&quot;end&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:lines</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:maxLength</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:textColor</span>=<span class="string">&quot;@color/dark_text_color&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:textSize</span>=<span class="string">&quot;14sp&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">tools:text</span>=<span class="string">&quot;门店2门店2门店2门店2门店2门店2门店2门店2门店2门店2门店2门店2门店2门店2门店2门店2门店2门店2门店2门店2门店2&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解决：网上查tv有<code>android:inputType=&quot;text&quot;</code>属性要去掉。此处的问题是<code>android:maxLength=&quot;10&quot;</code>属性，改成<code>android:maxEms=&quot;10&quot;</code>即可</p>
<h2 id="TextView跑马灯无效"><a href="#TextView跑马灯无效" class="headerlink" title="TextView跑马灯无效"></a>TextView跑马灯无效</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">          <span class="attr">style</span>=<span class="string">&quot;@style/fillX&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:text</span>=<span class="string">&quot;内容需要超过tv的宽度才能有跑马灯的效果&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:ellipsize</span>=<span class="string">&quot;marquee&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:focusableInTouchMode</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:focusable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:marqueeRepeatLimit</span>=<span class="string">&quot;marquee_forever&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>android:marqueeRepeatLimit&#x3D;”marquee_forever”重复次数</p>
</blockquote>
<p>默认是需要获取到焦点才能滚动，所以多个tv一起跑马灯需要自定义TV，重写<code>isFocused()</code>方法返回true</p>
<blockquote>
<p>android:ellipsize&#x3D;”start”—–省略号显示在开头 “…pedia”<br>android:ellipsize&#x3D;”end”——省略号显示在结尾 “encyc…”<br>android:ellipsize&#x3D;”middle”—-省略号显示在中间 “en…dia”<br>android:ellipsize&#x3D;”marquee”–以横向滚动方式显示(需获得当前焦点时)</p>
</blockquote>
<h2 id="TextView有值但是width或height为0，导致不显示"><a href="#TextView有值但是width或height为0，导致不显示" class="headerlink" title="TextView有值但是width或height为0，导致不显示"></a>TextView有值但是width或height为0，导致不显示</h2><p>（又一城）发生在SBC2.0的燕谷坊的首页的店名，发现用as第一次运行出现这个问题“（debug模式取到值）TextView有值但是width或height为0，导致不显示”。而通过as的Tools-Layout Inspector却得到此TextView的值为“”且width和height为0</p>
<p>尝试解决：textview调用invalidate()、requestLayout()、measure(500,50)、post(Runnable)都不行</p>
<p>后来<a href="https://stackoverflow.com/questions/23063893/android-view-not-shown-after-addview-method">借鉴stackoverflow相似的问题</a>在xml中在对应TextView中加上 </p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">android:</span>animateLayoutChanges=<span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure>

<p>运行了几次是可以的，但是具体是否解决了这个问题还需待验证。</p>
<blockquote>
<p>android:animateLayoutChanges&#x3D;”false” 的作用是关闭系统带的动画效果</p>
</blockquote>
<p><a href="https://blog.csdn.net/javazejian/article/details/52571779">布局动画实之LayoutTransition</a></p>
<p>前面我们说过ViewGroup在设置<code>android:animateLayoutChanges=&quot;true&quot;</code>后在添加或者删除子view时可以启用系统带着的动画效果，但这种效果无法通过自定义动画去替换。不过还好android官方为我们提供了LayoutTransition类，通过LayoutTransition就可以很容易为ViewGroup在添加或者删除子view设置自定义动画的过渡效果了。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓代码片段UI</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP的概念、原理、⼯作机制、数据格式</title>
    <url>/posts/84782788/</url>
    <content><![CDATA[<h1 id="HTTP的概念、原理、工作机制、数据格式"><a href="#HTTP的概念、原理、工作机制、数据格式" class="headerlink" title="HTTP的概念、原理、工作机制、数据格式"></a>HTTP的概念、原理、工作机制、数据格式</h1><h2 id="HTTP-的定义"><a href="#HTTP-的定义" class="headerlink" title="HTTP 的定义"></a>HTTP 的定义</h2><p>一种网络传输协议，位于 <code>TCP/IP</code> 协议族的最顶层——应用层（这句话后面的课会详细解释）。</p>
<p><strong>两种最直观的印象</strong>：</p>
<ol>
<li>浏览器地址栏输入地址，打开网页</li>
<li>Android中发送网络请求，返回对应内容</li>
</ol>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p><code>Hypertext Transfer Protocol</code>，超文本传输协议，和 <code>HTML</code> (<code>Hypertext Markup Language</code> 超文本标记语⾔) 一起诞生，用于在网络上请求和传输 <code>HTML</code> 内容。</p>
<p>超文本，即「扩展型文本」，指的是 <code>HTML</code> 中可以有链向别的文本的链接（<code>hyperlink</code>）。</p>
<p><img src="/posts/84782788/HTML%E6%A0%BC%E5%BC%8F.png" alt="HTML格式"></p>
<h2 id="HTTP-的工作方式"><a href="#HTTP-的工作方式" class="headerlink" title="HTTP  的工作方式"></a>HTTP  的工作方式</h2><h3 id="浏览器："><a href="#浏览器：" class="headerlink" title="浏览器："></a>浏览器：</h3><p>用户输入地址后回车或点击链接 -&gt; 浏览器拼装 <code>HTTP</code> 报文并发送请求给服务器 -&gt; 服务器处理请求后发送响应报文给浏览器 -&gt; 浏览器解析响应报文并使用渲染引擎显示到界面</p>
<h3 id="手机-App："><a href="#手机-App：" class="headerlink" title="手机 App："></a>手机 App：</h3><p>用户点击或界面自动触发联网需求 -&gt; Android 代码调用拼装 HTTP 报文并发送请求到服务器 -&gt; 服务器处理请求后发送响应报文给⼿机 -&gt; Android 代码处理响应报文并作出相应处理（如储存数据、加⼯数据、显示数据到界面）</p>
<h3 id="URL-和-HTTP-报文"><a href="#URL-和-HTTP-报文" class="headerlink" title="URL 和 HTTP 报文"></a>URL 和 HTTP 报文</h3><h4 id="URL-格式"><a href="#URL-格式" class="headerlink" title="URL 格式"></a>URL 格式</h4><p>三部分：协议类型、服务器地址(和端⼝号)、路径(Path)</p>
<p>协议类型:&#x2F;&#x2F;服务器地址[:端⼝号]路径</p>
<blockquote>
<p>例子：<a href="http://hencoder.com/users?gender=male">http://hencoder.com/users?gender=male</a></p>
</blockquote>
<h3 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h3><p><img src="/posts/84782788/HTTP%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E5%92%8C%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.png" alt="HTTP报文格式"></p>
<blockquote>
<p>只关心“状态行 <code>HTTP/1.1 200 OK</code>”、“<code>content-encoding:gzip</code>”</p>
<p>关键内容：<code>Request method</code>、<code>Response status code</code>、<code>Headers</code>、<code>Body</code></p>
</blockquote>
<h3 id="Request-Method请求方法"><a href="#Request-Method请求方法" class="headerlink" title="Request Method请求方法"></a>Request Method请求方法</h3><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><ul>
<li>用于获取资源；请求没有<code>Body</code></li>
<li>对服务器数据不进行修改</li>
<li>不发送<code>Body</code>（<code>Retrofit</code>中<code>get</code>带<code>body</code>会直接报错）</li>
<li>是幂等的（多次调用与一次调用结果一样）</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">GET</span> /users/<span class="number">1</span> HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">Host</span>:api.github.com</span><br></pre></td></tr></table></figure>

<p>对应Retrofit的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GET(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line">Call&lt;User&gt; <span class="title function_">getUser</span><span class="params">(<span class="meta">@Path(&quot;id&quot;)</span> String id, <span class="meta">@Query(&quot;gender&quot;)</span> <span class="meta">@String</span> gender)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><ul>
<li>用于增加或修改资源：请求有<code>Body</code></li>
<li>发送给服务器的内容写在Body里面</li>
<li>不具有幂等性（因为有新增的情况）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">POST /users HTTP/<span class="number">1.1</span></span><br><span class="line">Host: api.github.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: <span class="number">13</span></span><br><span class="line">name=rengwuxian&amp;gender=male</span><br></pre></td></tr></table></figure>

<p>对应 <code>Retrofifit</code> 的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="meta">@POST(&quot;/users&quot;)</span></span><br><span class="line">Call&lt;User&gt; <span class="title function_">addUser</span><span class="params">(<span class="meta">@Field(&quot;name&quot;)</span> String name, <span class="meta">@Field(&quot;gender&quot;)</span> String</span></span><br><span class="line"><span class="params">gender)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h4><ul>
<li>用于修改资源：请求有<code>Body</code></li>
<li>发送给服务器的内容写在 <code>Body</code> 里面</li>
<li>具有幂等性（只有修改的情况）</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">PUT</span> /users/<span class="number">1</span> HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">Host</span>: api.github.com</span><br><span class="line"><span class="attribute">Content</span>-Type: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content</span>-Length: <span class="number">13</span></span><br><span class="line"><span class="attribute">gender</span>=female</span><br></pre></td></tr></table></figure>

<p>对应 <code>Retrofifit</code> 的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="meta">@PUT(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line">Call&lt;User&gt; <span class="title function_">updateGender</span><span class="params">(<span class="meta">@Path(&quot;id&quot;)</span> String id, <span class="meta">@Field(&quot;gender&quot;)</span> String</span></span><br><span class="line"><span class="params">gender)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><ul>
<li>用于删除资源：请求没有<code>Body</code></li>
<li>不发送 <code>Body</code></li>
<li>具有幂等性</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="string">/users/1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.github.com</span><br></pre></td></tr></table></figure>

<p>对应 <code>Retrofifit</code> 的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DELETE(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line">Call&lt;User&gt; <span class="title function_">getUser</span><span class="params">(<span class="meta">@Path(&quot;id&quot;)</span> String id, <span class="meta">@Query(&quot;gender&quot;)</span> String gender)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h4><ul>
<li><p>和 GET 使用方法完全相同</p>
</li>
<li><p>和 GET 唯一区别在于，返回的响应中没有 Body</p>
</li>
</ul>
<h3 id="Status-Code-状态码"><a href="#Status-Code-状态码" class="headerlink" title="Status Code 状态码"></a>Status Code 状态码</h3><blockquote>
<p>三位数字，用于对响应结果做出类型化描述（如「获取成功」「内容未找到」）。</p>
</blockquote>
<ul>
<li><p><code>1xx</code>：临时性消息。如：<code>100</code> （继续发送：一个请求拆分成多个请求，请求中带个<code>except: 100</code>标识（其中<code>except</code>可能不对））、<code>101</code>（正在切换协议：问服务器是否支持（<code>header</code>内有”<code>Upgrade h2c</code>“）服务端不懂<code>HTTP2</code>协议，返回<code>101</code>切换成<code>HTTP1</code>）</p>
</li>
<li><p><code>2xx</code>：成功。最典型的是 <code>200</code>（OK）、<code>201</code>（创建成功）。</p>
</li>
<li><p><code>3xx</code>：重定向。如 <code>301</code>（永久移动）、<code>302</code>（暂时移动）、<code>304</code>（内容未改变）。</p>
</li>
<li><p><code>4xx</code>：客户端错误。如 <code>400</code>（客户端请求错误）、<code>401</code>（认证失败）、<code>403</code>（被禁⽌）、<code>404</code>（找不到内容）。</p>
</li>
<li><p><code>5xx</code>：服务器错误。如 <code>500</code>（服务器内部错误）。</p>
</li>
</ul>
<h3 id="Header-⾸部"><a href="#Header-⾸部" class="headerlink" title="Header ⾸部"></a><code>Header</code> ⾸部</h3><p>作用：<code>HTTP</code> 消息的元数据（<code>metadata</code>）（数据的属性）。</p>
<blockquote>
<p>元数据：数据的数据（从前有座山，山上有个老和尚对小和尚说“从前有座山，山上有个老和尚对小和尚说：‘…’”）</p>
</blockquote>
<h4 id="Host"><a href="#Host" class="headerlink" title="Host"></a><code>Host</code></h4><p>⽬标主机。注意：不是在网络上用于寻址的，而是在目标服务器上用于定位子服务器的。（在请求刚开始就通过<code>DNS</code>寻找对应的<code>IP</code>地址）</p>
<h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a><code>Content-Type</code></h4><p>指定 <code>Body</code> 的类型。主要有<code>4</code>类：</p>
<ol>
<li><p><code>text/html</code></p>
<ul>
<li>请求 <code>Web</code> 页面时返回响应的类型，<code>Body</code> 中返回 <code>html</code> 文本。格式如下：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 853</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        ......</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Content-Type: text/html;charset=utf-8</code></li>
</ul>
</li>
<li><p><code>x-www-form-urlencoded</code></p>
<ul>
<li>Web 页面纯文本表单的提交方式。<code>encoded URL</code>格式</li>
<li><code>Content-Type: application/x-www-form-urlencoded</code></li>
</ul>
<p><img src="/posts/84782788/HTTP%E8%AF%B7%E6%B1%82%E7%9A%84%E8%A1%A8%E5%8D%95%E6%99%AE%E9%80%9A%E6%8F%90%E4%BA%A4.png" alt="Http纯文本表单提交方式"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;nickName&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;昵称&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>格式如下：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">POST /users HTTP/1.1</span><br><span class="line"><span class="section">HOST:api.github.com</span></span><br><span class="line"><span class="section">Content-Type:application/x-www-form-urlencoded</span></span><br><span class="line"><span class="section">Content-Length:27</span></span><br><span class="line"></span><br><span class="line">name=renwuxian&amp;gender=male</span><br></pre></td></tr></table></figure>

<p>对应<code>Retrofit</code>的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="meta">@POST(&quot;/users&quot;)</span></span><br><span class="line">Call&lt;User&gt; <span class="title function_">addUser</span><span class="params">(<span class="meta">@Field(&quot;name&quot;)</span> String name, <span class="meta">@Field(&quot;gender&quot;)</span> String gender)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>multitype/form-data</code></p>
<ul>
<li>Web 页面含有二进制文件时的提交方式</li>
<li><code>Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW</code></li>
</ul>
<p><img src="/posts/84782788/HTTP%E8%AF%B7%E6%B1%82%E7%9A%84%E8%A1%A8%E5%8D%95%E6%96%87%E4%BB%B6%E6%8F%90%E4%BA%A4.png" alt="Http含二进制文件时的提交方式"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>文件名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;文件名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>格式如下：</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">POST /users HTTP/<span class="number">1.1</span></span><br><span class="line">Host: hencoder.com</span><br><span class="line">Content-<span class="keyword">Type</span>: multipart/<span class="keyword">form</span>-<span class="keyword">data</span>; boundary=----</span><br><span class="line">WebKitFormBoundary7MA4YWxkTrZu0gW</span><br><span class="line">Content-Length: <span class="number">2382</span></span><br><span class="line">------WebKitFormBoundary7MA4YWxkTrZu0gW</span><br><span class="line">Content-Disposition: <span class="keyword">form</span>-<span class="keyword">data</span>; <span class="keyword">name</span>=<span class="string">&quot;name&quot;</span></span><br><span class="line">rengwuxian</span><br><span class="line">------WebKitFormBoundary7MA4YWxkTrZu0gW</span><br><span class="line">Content-Disposition: <span class="keyword">form</span>-<span class="keyword">data</span>; <span class="keyword">name</span>=<span class="string">&quot;avatar&quot;</span>; filename=<span class="string">&quot;avatar.jpg&quot;</span></span><br><span class="line">Content-<span class="keyword">Type</span>: image/jpeg</span><br><span class="line">JFIFHHvOwX9jximQrWa......</span><br><span class="line">------WebKitFormBoundary7MA4YWxkTrZu0gW--</span><br></pre></td></tr></table></figure>

<p>对应 <code>Retrofit</code> 的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Multipart</span></span><br><span class="line"><span class="meta">@POST(&quot;/users&quot;)</span></span><br><span class="line">Call&lt;User&gt; <span class="title function_">addUser</span><span class="params">(<span class="meta">@Part(&quot;name&quot;)</span> RequestBody name, <span class="meta">@Part(&quot;avatar&quot;)</span></span></span><br><span class="line"><span class="params">RequestBody avatar)</span>;</span><br><span class="line">...</span><br><span class="line"><span class="type">RequestBody</span> <span class="variable">namePart</span> <span class="operator">=</span> RequestBody.create(MediaType.parse(<span class="string">&quot;text/plain&quot;</span>),</span><br><span class="line">nameStr);</span><br><span class="line"><span class="type">RequestBody</span> <span class="variable">avatarPart</span> <span class="operator">=</span> RequestBody.create(MediaType.parse(<span class="string">&quot;image/jpeg&quot;</span>),</span><br><span class="line">avatarFile);</span><br><span class="line">api.addUser(namePart, avatarPart);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>application/json</code> , <code>image/jpeg</code> , <code>application/zip</code> …</p>
<ul>
<li><p>单项内容（文本或非文本都可以），用于 <code>Web Api</code> 的响应或者 <code>POST/PUT</code> 的请求</p>
<blockquote>
<p>请求中提交 <code>JSON</code></p>
</blockquote>
</li>
<li><p><code>Content-Type: application/json; charset=utf-8</code>、<code>Content-Type: image/jpeg</code>、<code>Content-Type: application/zip</code></p>
</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">POST <span class="built_in">/users </span>HTTP/1.1</span><br><span class="line">Host: hencoder.com</span><br><span class="line">Content-Type: application/json; <span class="attribute">charset</span>=utf-8</span><br><span class="line">Content-Length: 38</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;rengwuxian&quot;</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;male&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>对应 <code>Retrofifit</code> 的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@POST(&quot;/users&quot;)</span></span><br><span class="line">Call&lt;User&gt; <span class="title function_">addUser</span><span class="params">(<span class="meta">@Body(&quot;user&quot;)</span> User user)</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 需要使用 JSON 相关的 Converter</span></span><br><span class="line">api.addUser(user);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>响应中返回 <code>JSON</code></p>
</blockquote>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">content-type: application/json; charset=utf-<span class="number">8</span></span><br><span class="line">content-length: <span class="number">234</span></span><br><span class="line">[&#123;<span class="string">&quot;login&quot;</span>:<span class="string">&quot;mojombo&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="number">1</span>,<span class="string">&quot;node_id&quot;</span>:<span class="string">&quot;MDQ6VXNl</span></span><br><span class="line">cjE=<span class="string">&quot;,&quot;</span>avatar_url<span class="string">&quot;:&quot;</span>https:<span class="comment">//avatars0.githubuse</span></span><br><span class="line">rcontent.com/u/<span class="number">1</span>?v=<span class="number">4</span><span class="string">&quot;,&quot;</span>gravat......</span><br></pre></td></tr></table></figure>

<blockquote>
<p>请求中提交二进制内容</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">POST</span> /user/<span class="number">1</span>/avatar HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">Host</span>: hencoder.com</span><br><span class="line"><span class="attribute">Content</span>-Type: image/jpeg</span><br><span class="line"><span class="attribute">Content</span>-Length: <span class="number">1575</span></span><br><span class="line"><span class="attribute">JFIFHH9</span>......</span><br></pre></td></tr></table></figure>

<p>对应 <code>Retrofifit</code> 的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@POST(&quot;users/&#123;id&#125;/avatar&quot;)</span></span><br><span class="line">Call&lt;User&gt; <span class="title function_">updateAvatar</span><span class="params">(<span class="meta">@Path(&quot;id&quot;)</span> String id, <span class="meta">@Body</span> RequestBody avatar)</span>;</span><br><span class="line">...</span><br><span class="line"><span class="type">RequestBody</span> <span class="variable">avatarBody</span> <span class="operator">=</span> RequestBody.create(MediaType.parse(<span class="string">&quot;image/jpeg&quot;</span>),</span><br><span class="line">avatarFile);</span><br><span class="line">api.updateAvatar(id, avatarBody)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>相应中返回二进制内容</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">HTTP</span>/<span class="number">1</span>.<span class="number">1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">content</span>-type: image/jpeg</span><br><span class="line"><span class="attribute">content</span>-length: <span class="number">1575</span></span><br><span class="line"><span class="attribute">JFIFHH9</span>......</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Content-Length"><a href="#Content-Length" class="headerlink" title="Content-Length"></a>Content-Length</h4><ul>
<li><p>指定 <code>Body</code> 的长度（字节）。（如果没有长度，那么请求的内容是到哪里结束，服务器就不知道了）</p>
</li>
<li><p>分块传输编码 <code>Chunked Transfer Encoding</code></p>
<ul>
<li>作用：用于当响应发起时，内容长度还没能确定的情况下（二进制传输内容无法确定，有可能混用了比如换行符等用来标识结束的符号）。和 Content-Length 不同时使用。用途是尽早给出响应，减少用户等待。</li>
<li><code>Transfer-Encoding: chunked</code></li>
</ul>
</li>
<li><p>格式：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-<span class="keyword">Type</span>: <span class="type">text</span>/html</span><br><span class="line">Transfer-<span class="keyword">Encoding</span>: chunked</span><br><span class="line"><span class="number">4</span></span><br><span class="line">Chun</span><br><span class="line"><span class="number">9</span></span><br><span class="line">ked Trans</span><br><span class="line"><span class="number">12</span></span><br><span class="line">fer <span class="keyword">Encoding</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h4><p>指定重定向的⽬标 URL</p>
<h4 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h4><ul>
<li>用户代理【了解即可】</li>
<li>作用：即是谁实际发送请求、接受响应的，例如⼿机浏览器、某款⼿机 App。</li>
</ul>
<h4 id="Range-x2F-Accept-Range"><a href="#Range-x2F-Accept-Range" class="headerlink" title="Range &#x2F; Accept-Range"></a>Range &#x2F; Accept-Range</h4><ul>
<li><p>按范围取数据</p>
</li>
<li><p>作用：断点续传、多线程下载。</p>
</li>
<li><p><code>Accept-Range: bytes</code> 响应报文中出现，表示服务器⽀持按字节来取范围数据</p>
</li>
<li><p><code>Range: bytes=&lt;start&gt;-&lt;end&gt;</code> 请求报文中出现，表示要取哪段数据</p>
</li>
<li><p><code>Content-Range:&lt;start&gt;-&lt;end&gt;/total</code> 响应报文中出现，表示发送的是哪段数据</p>
</li>
</ul>
<h3 id="其他-Headers"><a href="#其他-Headers" class="headerlink" title="其他 Headers"></a>其他 Headers</h3><ul>
<li><p><code>Accept</code>: 客户端能接受的数据类型。如 <code>text/html</code></p>
</li>
<li><p><code>Accept-Charset</code>: 客户端接受的字符集。如 <code>utf-8</code></p>
</li>
<li><p><code>Accept-Encoding</code>: 客户端接受的压缩编码类型。如 <code>gzip</code></p>
</li>
<li><p><code>Content-Encoding</code>：压缩类型。如 <code>gzip</code></p>
</li>
</ul>
<h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><ul>
<li>作用：在客户端或中间网络节点缓存数据，降低从服务器取数据的频率，以提⾼网络性能。</li>
<li><code>Cache-Control</code>： <code>no-cache</code>、<code>no-store</code>、<code>max-age</code></li>
<li><code>Last-Modified</code><ul>
<li><code>If-Modified-Since</code></li>
</ul>
</li>
<li><code>Etag</code><ul>
<li><code>If-None-Match</code></li>
</ul>
</li>
<li><code>Cache-Control</code> ：<code>private/public</code></li>
</ul>
<h4 id="Cache和Buffer的-区别"><a href="#Cache和Buffer的-区别" class="headerlink" title="Cache和Buffer的 区别"></a>Cache和Buffer的 区别</h4><ul>
<li><code>Cache</code>：缓存，用过的等下还要用先存着</li>
<li><code>Buffer</code>：缓冲，处理不过来先存着、等下生产来不及先存着，等下再使用</li>
</ul>
<h3 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h3><p><code>REST</code> 的定义众说纷纭，没有统一答案。</p>
<p>扔物线的观点：<code>REST HTTP</code> 即正确使用 <code>HTTP</code>。包括：</p>
<ul>
<li><p>使用资源的格式来定义 <code>URL</code></p>
</li>
<li><p>规范地使用 <code>method</code> 来定义网络请求操作</p>
</li>
<li><p>规范地使用 <code>status code</code> 来表示响应状态</p>
</li>
<li><p>其他符合 <code>HTTP</code> 规范的设计准则</p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>hencoder</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑运算</title>
    <url>/posts/2209453698/</url>
    <content><![CDATA[<h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test7</span>()</span> &#123;</span><br><span class="line">	<span class="comment">// 逻辑运算</span></span><br><span class="line">	<span class="built_in">int</span> a = <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">int</span> b = <span class="number">3</span>;</span><br><span class="line">	System.<span class="keyword">out</span>.println(a + <span class="string">&quot;,&quot;</span> + b + <span class="string">&quot;与运算结果：&quot;</span> + (a &amp; b));</span><br><span class="line">	System.<span class="keyword">out</span>.println(a + <span class="string">&quot;,&quot;</span> + b + <span class="string">&quot;或运算结果：&quot;</span> + (a | b));</span><br><span class="line">	System.<span class="keyword">out</span>.println(a + <span class="string">&quot;,&quot;</span> + b + <span class="string">&quot;异或运算结果：&quot;</span> + (a ^ b));</span><br><span class="line">	System.<span class="keyword">out</span>.println(a + <span class="string">&quot;的非运算结果：&quot;</span> + (~a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>,<span class="number">3</span>与运算结果：<span class="number">2</span></span><br><span class="line"><span class="number">2</span>,<span class="number">3</span>或运算结果：<span class="number">3</span></span><br><span class="line"><span class="number">2</span>,<span class="number">3</span>异或运算结果：<span class="number">1</span></span><br><span class="line"><span class="number">2</span>的非运算结果：-<span class="number">3</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java代码片段</category>
      </categories>
      <tags>
        <tag>Java代码片段</tag>
      </tags>
  </entry>
  <entry>
    <title>File、流</title>
    <url>/posts/76919649/</url>
    <content><![CDATA[<p>摘要：关于文件的增删查改、IO流</p>
<span id="more"></span>

<h1 id="File相关"><a href="#File相关" class="headerlink" title="File相关"></a>File相关</h1><h2 id="File：删除文件"><a href="#File：删除文件" class="headerlink" title="File：删除文件"></a>File：删除文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteFileUtil</span> &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除文件，可以是文件或文件夹</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">	 *            要删除的文件名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 删除成功返回true，否则返回false</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">		<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">		<span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;删除文件失败:&quot;</span> + fileName + <span class="string">&quot;不存在！&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (file.isFile())</span><br><span class="line">				<span class="keyword">return</span> deleteFile(fileName);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">return</span> deleteDirectory(fileName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除单个文件</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">	 *            要删除的文件的文件名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 单个文件删除成功返回true，否则返回false</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">deleteFile</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">		<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">		<span class="comment">// 如果文件路径所对应的文件存在，并且是一个文件，则直接删除</span></span><br><span class="line">		<span class="keyword">if</span> (file.exists() &amp;&amp; file.isFile()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (file.delete()) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;删除单个文件&quot;</span> + fileName + <span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;删除单个文件&quot;</span> + fileName + <span class="string">&quot;失败！&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;删除单个文件失败：&quot;</span> + fileName + <span class="string">&quot;不存在！&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除目录及目录下的文件</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> dir</span></span><br><span class="line"><span class="comment">	 *            要删除的目录的文件路径</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 目录删除成功返回true，否则返回false</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">deleteDirectory</span><span class="params">(String dir)</span> &#123;</span><br><span class="line">		<span class="comment">// 如果dir不以文件分隔符结尾，自动添加文件分隔符</span></span><br><span class="line">		<span class="keyword">if</span> (!dir.endsWith(File.separator))</span><br><span class="line">			dir = dir + File.separator;</span><br><span class="line">		<span class="type">File</span> <span class="variable">dirFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir);</span><br><span class="line">		<span class="comment">// 如果dir对应的文件不存在，或者不是一个目录，则退出</span></span><br><span class="line">		<span class="keyword">if</span> ((!dirFile.exists()) || (!dirFile.isDirectory())) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;删除目录失败：&quot;</span> + dir + <span class="string">&quot;不存在！&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="comment">// 删除文件夹中的所有文件包括子目录</span></span><br><span class="line">		File[] files = dirFile.listFiles();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">			<span class="comment">// 删除子文件</span></span><br><span class="line">			<span class="keyword">if</span> (files[i].isFile()) &#123;</span><br><span class="line">				flag = DeleteFileUtil.deleteFile(files[i].getAbsolutePath());</span><br><span class="line">				<span class="keyword">if</span> (!flag)</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 删除子目录</span></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (files[i].isDirectory()) &#123;</span><br><span class="line">				flag = DeleteFileUtil.deleteDirectory(files[i]</span><br><span class="line">						.getAbsolutePath());</span><br><span class="line">				<span class="keyword">if</span> (!flag)</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;删除目录失败！&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 删除当前目录</span></span><br><span class="line">		<span class="keyword">if</span> (dirFile.delete()) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;删除目录&quot;</span> + dir + <span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//  // 删除单个文件</span></span><br><span class="line"><span class="comment">//  String file = &quot;c:/test/test.txt&quot;;</span></span><br><span class="line"><span class="comment">//  DeleteFileUtil.deleteFile(file);</span></span><br><span class="line"><span class="comment">//  System.out.println();</span></span><br><span class="line">        <span class="comment">// 删除一个目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="string">&quot;D:/home/web/upload/upload/files&quot;</span>;</span><br><span class="line">        DeleteFileUtil.deleteDirectory(dir);</span><br><span class="line"><span class="comment">//  System.out.println();</span></span><br><span class="line"><span class="comment">//  // 删除文件</span></span><br><span class="line"><span class="comment">//  dir = &quot;c:/test/test0&quot;;</span></span><br><span class="line"><span class="comment">//  DeleteFileUtil.delete(dir);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="File：删除文件夹下所有文件"><a href="#File：删除文件夹下所有文件" class="headerlink" title="File：删除文件夹下所有文件"></a>File：删除文件夹下所有文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">delFile</span><span class="params">(File file)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(file.isDirectory())&#123;</span><br><span class="line">    	File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File f : files)&#123;</span><br><span class="line">        	delFile(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> file.delete();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">	<span class="comment">// 删除一个目录</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="string">&quot;D:/home/web/upload/upload/files&quot;</span>;</span><br><span class="line">    delFile(<span class="keyword">new</span> <span class="title class_">File</span>(dir));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="创建文件夹及文件并写入数据"><a href="#创建文件夹及文件并写入数据" class="headerlink" title="创建文件夹及文件并写入数据"></a>创建文件夹及文件并写入数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateFiles</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">String</span> <span class="variable">filenameTemp</span> <span class="operator">=</span> Info.audioPath + <span class="string">&quot;/hhaudio&quot;</span> + <span class="string">&quot;.txt&quot;</span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//创建文件夹及文件  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CreateText</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(Info.audioPath);  </span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                <span class="comment">//按照指定的路径创建文件夹  </span></span><br><span class="line">                file.mkdirs();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> handle exception  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filenameTemp);  </span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;  </span><br><span class="line">              <span class="keyword">try</span> &#123;  </span><br><span class="line">                  <span class="comment">//在指定的文件夹中创建文件  </span></span><br><span class="line">                  dir.createNewFile();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//向已创建的文件中写入数据  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String str)</span> &#123;  </span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">datetime</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">tempDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span> + <span class="string">&quot; &quot;</span>  </span><br><span class="line">                    + <span class="string">&quot;hh:mm:ss&quot;</span>);  </span><br><span class="line">            datetime = tempDate.format(<span class="keyword">new</span> <span class="title class_">java</span>.util.Date()).toString();  </span><br><span class="line">            fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(filenameTemp, <span class="literal">true</span>);<span class="comment">//  </span></span><br><span class="line">            <span class="comment">// 创建FileWriter对象，用来写入字符流  </span></span><br><span class="line">            bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fw); <span class="comment">// 将缓冲对文件的输出  </span></span><br><span class="line">            <span class="type">String</span> <span class="variable">myreadline</span> <span class="operator">=</span> datetime + <span class="string">&quot;[]&quot;</span> + str;  </span><br><span class="line">              </span><br><span class="line">            bw.write(myreadline + <span class="string">&quot;\n&quot;</span>); <span class="comment">// 写入文件  </span></span><br><span class="line">            bw.newLine();  </span><br><span class="line">            bw.flush(); <span class="comment">// 刷新该流的缓冲  </span></span><br><span class="line">            bw.close();  </span><br><span class="line">            fw.close();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                bw.close();  </span><br><span class="line">                fw.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e1) &#123;  </span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h2 id="File：存取文件"><a href="#File：存取文件" class="headerlink" title="File：存取文件"></a>File：存取文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从文件中读取数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		input = <span class="built_in">this</span>.openFileInput(<span class="string">&quot;file.jiahui&quot;</span>);</span><br><span class="line">		<span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> input.read(buffer);</span><br><span class="line">		System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, len));</span><br><span class="line">		et.setText(<span class="string">&quot;无名氏&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (input != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				input.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 往文件中写入数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		output = <span class="built_in">this</span>.openFileOutput(<span class="string">&quot;file.jiahui&quot;</span>, Context.MODE_PRIVATE);</span><br><span class="line">		output.write(<span class="string">&quot;无名氏&quot;</span>.getBytes());</span><br><span class="line">		</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (output != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				output.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="流相关"><a href="#流相关" class="headerlink" title="流相关"></a>流相关</h1>]]></content>
      <categories>
        <category>Java代码片段</category>
      </categories>
      <tags>
        <tag>Java代码片段</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin的Lambda</title>
    <url>/posts/538a9fb3/</url>
    <content><![CDATA[<h1 id="Kotlin的Lambda"><a href="#Kotlin的Lambda" class="headerlink" title="Kotlin的Lambda"></a><a href="https://www.bilibili.com/video/BV1kp4y1C7DE">Kotlin的Lambda</a></h1><p>Kotlin里的”<strong>高阶函数</strong>“：”<strong>参数or返回值为函数类型的函数</strong>“</p>
<p>Kotlin里的”高阶函数“只是个统称，<strong>没有任何特殊性，没有任何特殊功能</strong></p>
<p>Kotlin里【函数并不能传递，传递的是对象】</p>
<p>Kotlin里【匿名函数和Lambda都是函数型对象】</p>
<ul>
<li><p>Java中不允许函数当作参数，但可以通过接口实现类似功能（传递接口的对象，接口对象用不同的函数（这函数前提是实现了这个接口）实例化它）</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注：这是简化后的代码，不是View.java类的源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">View</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    OnClickListener mOnClickListener;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent e)</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mOnClickListener.onClick(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OnClickListener</span>&#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用的地方</span></span><br><span class="line">view.setOnClickListener(<span class="keyword">new</span> <span class="title class_">OnClickListener</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span>&#123;</span><br><span class="line">        doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Kotlin中允许参数是函数类型的。</p>
</li>
<li><p>“<code>::</code>“ Function Reference。<strong>”<code>::函数</code>“是个对象</strong>（<strong>函数类型的对象</strong>）。<code>::</code>可理解成是个指向函数类型的对象的引用，不是指向函数本身。这个对象在代码中看不见，这个对象复制了原函数的功能。</p>
<ul>
<li><code>::函数</code>这个对象不是函数本身，是个和这个函数具有相同功能的对象。（能怎么用函数，就能怎么用这个对象）</li>
<li>对<code>::函数</code>这个对象加括号、加参数，实际是调用这个对象的<code>invoke()</code>函数</li>
</ul>
</li>
<li><p>函数是一类，不是一个，即不同的参数列表、返回值类型，即不同的函数</p>
</li>
</ul>
<h2 id="要传一个函数类型的参数的写法"><a href="#要传一个函数类型的参数的写法" class="headerlink" title="要传一个函数类型的参数的写法"></a>要传一个函数类型的参数的写法</h2><h3 id="法1：用-拿现成的函数来当作函数类型的对象，当参数传递"><a href="#法1：用-拿现成的函数来当作函数类型的对象，当参数传递" class="headerlink" title="法1：用::拿现成的函数来当作函数类型的对象，当参数传递"></a>法1：用<code>::</code>拿现成的函数来当作函数类型的对象，当参数传递</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数类型可以作为函数的参数类型</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">a</span><span class="params">(funParam: (<span class="type">Int</span>) -&gt; <span class="type">String</span>)</span></span>: String&#123;</span><br><span class="line">    <span class="keyword">return</span> funParam(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">b</span><span class="params">(param: <span class="type">Int</span>)</span></span>: String&#123;</span><br><span class="line">    <span class="keyword">return</span> param.toString()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数类型可以作为函数的返回值类型</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">c</span><span class="params">(param: <span class="type">Int</span>)</span></span>: (<span class="built_in">Int</span>) -&gt; <span class="built_in">Unit</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">a(::b)</span><br><span class="line"><span class="comment">//函数类型可以赋值给变量</span></span><br><span class="line"><span class="keyword">val</span> d = ::b</span><br><span class="line">d(<span class="number">1</span>) <span class="comment">//实际调用 d.invoke(1)</span></span><br><span class="line">(::b)(<span class="number">1</span>) <span class="comment">//实际调用 (::b).invoke(1)</span></span><br><span class="line"><span class="comment">//b.invoke(1) //b是函数，会报错。只有函数类型的对象才可以</span></span><br></pre></td></tr></table></figure>

<h3 id="法2：把函数挪过来写"><a href="#法2：把函数挪过来写" class="headerlink" title="法2：把函数挪过来写"></a>法2：把函数挪过来写</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">a</span><span class="params">(funParam: (<span class="type">Int</span>) -&gt; <span class="type">String</span>)</span></span>: String&#123;</span><br><span class="line">    <span class="keyword">return</span> funParam(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">b</span><span class="params">(param: <span class="type">Int</span>)</span></span>: String&#123;</span><br><span class="line">    <span class="keyword">return</span> param.toString()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把函数挪过来写（其中缩略了函数名b，因为此处函数名没有起作用了。缩略后叫匿名函数）</span></span><br><span class="line">a(<span class="function"><span class="title">fun</span><span class="params">(param: <span class="type">Int</span>)</span></span>: String&#123;</span><br><span class="line">    <span class="keyword">return</span> param.toString()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">val</span> d = <span class="function"><span class="title">fun</span><span class="params">(param: <span class="type">Int</span>)</span></span>: String&#123;</span><br><span class="line">    <span class="keyword">return</span> param.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Kotlin中的<strong>匿名函数</strong>（Anonymous Function）不是函数，是对象！！！<strong>【函数型的对象】</strong></p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java中写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    void onClick(View v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> void setOnClickListener(OnClickListener listener)&#123;</span><br><span class="line">    <span class="keyword">this</span>.listener = listener;</span><br><span class="line">&#125;</span><br><span class="line">view.setOnClickListener(new OnClickListener()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    void onClick(View v)&#123;</span><br><span class="line">        switchToNextPage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//kotlin中写法</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setOnClickListener</span><span class="params">(onClick: (<span class="type">View</span>) -&gt; <span class="type">Unit</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.onClick = onClick</span><br><span class="line">&#125;</span><br><span class="line">view.setOnClickListener(<span class="function"><span class="title">fun</span><span class="params">(v: <span class="type">View</span>)</span></span>: <span class="built_in">Unit</span>&#123;</span><br><span class="line">    switchToNextPage()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//匿名函数再简化</span></span><br><span class="line">view.setOnClickListener(&#123;v: View -&gt;</span><br><span class="line">	switchToNextPage()                        </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Lambda是函数的最后一个参数，可以把Lambda写在括号外面</span></span><br><span class="line">view.setOnClickListener()&#123;v: View -&gt;</span><br><span class="line">    switchToNextPage()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Lambda是函数唯一的参数，可以省略括号</span></span><br><span class="line">view.setOnClickListener&#123;v: View -&gt;</span><br><span class="line">    switchToNextPage()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以下这么写是因为函数类型的参数在上面有定义过，即入参和返回值类型都是已知的，Lambda形式是可通过上下文推断出入参个数和类型、返回值类型</span></span><br><span class="line"><span class="comment">//Lambda是单参数，可以省略参数。其实就算用也可以不写，对于唯一参数有默认的it名字</span></span><br><span class="line">view.setOnClickListener&#123;</span><br><span class="line">    switchToNextPage()</span><br><span class="line">    it.setVisibility(GONE)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> d = <span class="function"><span class="title">fun</span><span class="params">(param: <span class="type">Int</span>)</span></span>: String&#123;</span><br><span class="line">    <span class="keyword">return</span> param.toString()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以简写成Lambda的形式。不能省略掉Lambda的参数类型，因为无法从上下文中推断出这个参数的类型</span></span><br><span class="line"><span class="keyword">val</span> d = &#123; param: <span class="built_in">Int</span> -&gt;</span><br><span class="line">    <span class="keyword">return</span> param.toString()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果要省略参数，则需要给左边的变量指明类型</span></span><br><span class="line"><span class="keyword">val</span> d: (<span class="built_in">Int</span>) -&gt; String = &#123;</span><br><span class="line">    it.toString()<span class="comment">//Lambda的返回值是取最后一句代码的值【Lambda是个代码块】</span></span><br><span class="line">    <span class="comment">//return it.toString()//此处return会作为它外层函数的返回值，来直接结束外层函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Kotlin的Lambda语法上不支持有返回值类型</li>
<li>Kotlin的<strong>Lambda也是个函数类型的对象</strong></li>
</ul>
<p>Kotlin不支持用Lambda来简写匿名类对象的，因为有函数型参数了，所以这种单函数接口的写法从根本上就没必要了。但和Java交互时，是支持这种写法的</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java8:</span></span><br><span class="line">view.setOnClickListener(v -&gt; &#123;</span><br><span class="line">    switchToNextPage();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//Kotlin:</span></span><br><span class="line">view.setOnClickListener&#123;</span><br><span class="line">    switchToNextPage()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但kotlin中用接口这种折中的写法是错误的：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">KotlinListener</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onAction</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setKotlinListener</span><span class="params">(listener: <span class="type">KotlinListener</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.listener = listener</span><br><span class="line">&#125;</span><br><span class="line">setKotlinListener&#123;</span><br><span class="line">    <span class="comment">//doSomething()//此处会编译报错。因为Kotlin期望我们用函数类型的参数的写法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<p>Kotlin中存在一种在Java中不存在的，叫【函数类型】，这<strong>一类</strong>类型的对象在可以</p>
<ol>
<li>当函数来使用</li>
<li>作为函数的参数</li>
<li>作为函数的返回值</li>
<li>赋值给变量</li>
</ol>
<p>创建一个函数类型的对象有三种方式：</p>
<ol>
<li>双冒号加函数名 【<code>::函数名</code>】</li>
<li>匿名函数</li>
<li>Lambda</li>
</ol>
<p>Kotlin中匿名函数、Lambda 本质 都是函数类型的对象</p>
<p>Kotlin的Lambda可以归类，它属于函数类型的对象</p>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin笔记</title>
    <url>/posts/2020663480/</url>
    <content><![CDATA[<h1 id="Kotlin大纲"><a href="#Kotlin大纲" class="headerlink" title="Kotlin大纲"></a>Kotlin大纲</h1><p><img src="/posts/2020663480/%E5%A4%A7%E7%BA%B2-Kotlin.png" alt="大纲-Kotlin"></p>
<h1 id="Kotlin基础、类、对象"><a href="#Kotlin基础、类、对象" class="headerlink" title="Kotlin基础、类、对象:"></a>Kotlin基础、类、对象:</h1><p><img src="/posts/2020663480/Kotlin%E5%9F%BA%E7%A1%80%E3%80%81%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1.png" alt="Kotlin基础、类、对象"></p>
<h1 id="一些链接、资源"><a href="#一些链接、资源" class="headerlink" title="一些链接、资源"></a>一些链接、资源</h1><p><a href="https://www.kotlincn.net/docs/reference/">Kotlin参考文档</a><br><a href="https://www.cnblogs.com/Jetictors/p/9227498.html">https://www.cnblogs.com/Jetictors/p/9227498.html</a>  </p>
<p>《Kotlin实战》<br>《Kotlin从零到精通Android开发》</p>
<p>kotlin的活动等信息公布网站：cn.kotlin.tips</p>
<h1 id="Java与Kotlin互转"><a href="#Java与Kotlin互转" class="headerlink" title="Java与Kotlin互转"></a>Java与Kotlin互转</h1><p>（借助Android Studio）</p>
<h2 id="Java转Kotlin"><a href="#Java转Kotlin" class="headerlink" title="Java转Kotlin"></a>Java转Kotlin</h2><p>打开要转的文件  </p>
<ul>
<li>方法1<br>Ctrl+Shift+Alt+K  </li>
<li>方法2<br>Code - Convert Java File To Kotlin File</li>
</ul>
<h2 id="Kotlikn-转-Java"><a href="#Kotlikn-转-Java" class="headerlink" title="Kotlikn 转 Java"></a>Kotlikn 转 Java</h2><ol>
<li>Tools&gt;Kotlin&gt;Show Kotlin Bytecode</li>
<li>Decompile</li>
</ol>
<h1 id="Kotlin特性"><a href="#Kotlin特性" class="headerlink" title="Kotlin特性"></a>Kotlin特性</h1><ol>
<li>空判断，空安全检查</li>
<li><code>==</code>和<code>===</code>，<code>==</code>判断值相等（等价于equals），<code>===</code>判断引用（等价于判断内存地址）</li>
<li>构造函数，也是个函数，跟普通函数调用一样，调用后构造一个对象</li>
<li><code>inline</code>，函数内联，在编译时就进行内联优化，而不是运行时</li>
<li><code>sealed class</code>（“密封类”）同时包含了两个优势–抽象类表示的灵活性和枚举里集合的受限性</li>
<li><strong>互操作性</strong>：Kotlin与所有基于Java的框架完全兼容，而无需将所有代码迁移到Kotlin</li>
<li><strong>支持多平台开发</strong>：不仅可以使用Kotlin开发Android，还可以开发iOS、后端与Web应用程序。享受在平台之间共享公共代码的好处</li>
</ol>
<h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><h2 id="Kotlin与Android开发的关系"><a href="#Kotlin与Android开发的关系" class="headerlink" title="Kotlin与Android开发的关系"></a>Kotlin与Android开发的关系</h2><h2 id="Kotlin开发工具"><a href="#Kotlin开发工具" class="headerlink" title="Kotlin开发工具"></a>Kotlin开发工具</h2><ol>
<li>IntelliJ IDEA 可以运行</li>
<li><a href="https://try.kotlinlang.org/">在线运行 Kotlin 代码</a></li>
<li>使用 Android Studio</li>
</ol>
<h2 id="SDK安装与插件升级"><a href="#SDK安装与插件升级" class="headerlink" title="SDK安装与插件升级"></a>SDK安装与插件升级</h2><h2 id="Kotlin简单配置"><a href="#Kotlin简单配置" class="headerlink" title="Kotlin简单配置"></a>Kotlin简单配置</h2><h2 id="Kotlin相关技术"><a href="#Kotlin相关技术" class="headerlink" title="Kotlin相关技术"></a>Kotlin相关技术</h2><h1 id="【Hencoder】"><a href="#【Hencoder】" class="headerlink" title="【Hencoder】"></a>【Hencoder】</h1><h2 id="变量和函数"><a href="#变量和函数" class="headerlink" title="变量和函数"></a>变量和函数</h2><h3 id="Kotlin的变量、函数和类型"><a href="#Kotlin的变量、函数和类型" class="headerlink" title="Kotlin的变量、函数和类型"></a>Kotlin的变量、函数和类型</h3><p><a href="https://www.bilibili.com/video/BV1x4411o7Wy">视频链接</a><br><a href="https://mp.weixin.qq.com/s/fzDXRiSzm2hDXBT2heDFhA">文章链接</a>  </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明变量。这样写会报Property must be initialized or be abstract</span></span><br><span class="line"><span class="keyword">var</span> v:View</span><br><span class="line"><span class="comment">//Kotlin变量没有默认值，要给初始值（Java的field有默认值。Java局部变量也没有默认值，也要给初始值）</span></span><br></pre></td></tr></table></figure>



<h2 id="java中的“静态”"><a href="#java中的“静态”" class="headerlink" title="java中的“静态”"></a>java中的“静态”</h2><p>在kotlin中有三种方式可以实现java中静态函数的声明</p>
<ol>
<li><p>直接在kotlin文件中直接声明fun函数（不是在class内）<br>会根据文件编译生成属于这个文件的静态函数。叫<code>顶层函数</code>、包级函数<br>在java中调用kotlin的顶层函数：<code>文件名Kt.顶层函数名(参数)</code><br>在kotlin中调用java的静态方法：<code>文件名.静态函数(参数)</code>  </p>
<blockquote>
<p>这种直接在kotlin文件中写的方式，函数不知道归于哪个类。</p>
<p>可在首行添加 <code>@file:JvmName(&quot;KotlinUtils&quot;)</code>来规定类名，那么在java中调用：<code>KotlinUtils.函数(参数)</code></p>
<p><code>@file</code>表示注解使用处的目标，告诉注解它的作用对象是文件</p>
</blockquote>
</li>
<li><p><code>object 类名&#123;&#125;</code> 里面所有函数、变量都会是静态的<br>在java中调用：<code>类名.INSTANCE.函数(参数)</code><br>在kotlin中调用：<code>类名.函数(参数)</code>  </p>
<blockquote>
<p>使用object修饰的类，它会<code>自动</code>创建一个单例，所以在java中调用的话要通过它的单例来调用。</p>
</blockquote>
</li>
<li><p><code>伴生对象</code>（在内部会维护一个内部类的单例对象）【Application（是由Android的Framework来创建）不能使用第2点的自动生成，得用这种伴生对象的方式】</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseApplication</span> : <span class="type">Application</span></span>()&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> currentApplication: Context</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">currentApplication</span><span class="params">()</span></span>: Context&#123;</span><br><span class="line">            <span class="keyword">return</span> currentApplication</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate()</span><br><span class="line">        currentApplication = <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不加<code>@JvmStatic</code>那么它只是个普通函数</p>
</blockquote>
<p>在java中调用：<code>BaseApplication.Companion.currentApplication();</code></p>
<p>在kotlin中调用：</p>
</li>
</ol>
<h2 id="java中的匿名内部类"><a href="#java中的匿名内部类" class="headerlink" title="java中的匿名内部类"></a>java中的匿名内部类</h2><p>java中的匿名内部类：就是创建一个类的对象，在kotlin中可用object的方式来实现这个效果。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> HttpClient: OkHttpClient()&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> gson = Gson()</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">convert</span><span class="params">(json: <span class="type">String</span>?, type: <span class="type">Type</span>)</span></span>: T&#123;</span><br><span class="line">        <span class="keyword">return</span> gson.fromJson(json, type)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">get</span><span class="params">(path: <span class="type">String</span>, type: <span class="type">Type</span>, entityCallback: <span class="type">EntityCallback</span>&lt;<span class="type">T</span>&gt;)</span></span>&#123;</span><br><span class="line">        <span class="keyword">val</span> request = Request.Builder()</span><br><span class="line">        .url(<span class="string">&quot;https://api.hencoder.com/<span class="variable">$path</span>&quot;</span>)</span><br><span class="line">        .build()</span><br><span class="line">        <span class="keyword">val</span> call = <span class="keyword">this</span>.newCall(request)</span><br><span class="line">        <span class="comment">//此处实现的是java中的匿名内部类的效果</span></span><br><span class="line">        call.enqueue(<span class="keyword">object</span>: Callback&#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(call: <span class="type">Call</span>, e: <span class="type">IOException</span>)</span></span>&#123;</span><br><span class="line">                entityCallback.onFailure(<span class="string">&quot;网络异常&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResponse</span><span class="params">(call: <span class="type">Call</span>, response: <span class="type">Response</span>)</span></span>&#123;</span><br><span class="line">                <span class="keyword">val</span> code = response.code()</span><br><span class="line">                <span class="keyword">when</span> (code) &#123;</span><br><span class="line">                    <span class="comment">// code&gt;=200 &amp;&amp; code &lt;=299</span></span><br><span class="line">                    <span class="keyword">in</span> <span class="number">200.</span><span class="number">.299</span>-&gt;&#123;</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>kotlin中没有强制捕获异常</p>
</blockquote>
<ul>
<li><p><code>Java</code>中某个sdk的类在库中可以相互引用，但不想被外面的调用类看到，在这个类的注释中添加 <code>&#123;@hide&#125;</code></p>
</li>
<li><p><code>Kotlin</code>中想实现上述的功能，在类声明时添加 <code>internal</code> 如 <code>internal class 类名&#123;&#125;</code></p>
</li>
<li><p><code>Kotlin</code>中加<code>abstract</code>（类）、<code>open</code>（方法）、<code>override</code>（方法）才可以被继承或重写，普通类默认是<code>final</code>不可以被继承</p>
</li>
<li><p>主构造器，把构造器放到类名后面。原来的次构造器方法名改成<code>init</code></p>
<p><code>kotlin</code>会按代码顺序把<code>init</code>、<code>成员变量</code>放入类中</p>
<p>简化：主构造器 <code>contract(var data: String?)</code>其中加<code>var</code>会默认生成一个<code>data</code>的成员变量【<strong>不加var就不是成员属性</strong>】</p>
</li>
<li><p>enum class 是写枚举类； data class 写数据类（就不用重复写hashcode、equals）</p>
</li>
<li><p>解构：<code>val(构造参数1, 构造参数2, 构造参数3)=execute()</code>一次性得到三个值【顺序跟构造器中的参数是一一对应的】</p>
<p>如果某参数不想要使用结构得重写对应的 Component1()、Component2()、Component3()</p>
<blockquote>
<p>在java中要这样：</p>
<p>val response &#x3D; execute()</p>
<p>val body1 &#x3D; response.body</p>
<p>val code1 &#x3D; response.code</p>
<p>val user1 &#x3D; response.user</p>
<p>在kotlin中用解构可一次性得到三个值 val(body,code,user) &#x3D; execute()</p>
</blockquote>
</li>
<li><p>自定义操作符</p>
<p>加 operator</p>
</li>
<li><p>遍历写法简化</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原来</span></span><br><span class="line"><span class="keyword">val</span> playbackLessons = ArrayList&lt;Lesson&gt;()</span><br><span class="line"><span class="keyword">for</span>(lesson <span class="keyword">in</span> lessons)&#123;</span><br><span class="line">    <span class="keyword">if</span>(lesson.state === Lesson.State.PLAYBACK)&#123;</span><br><span class="line">        playbackLessons.add(lesson)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化</span></span><br><span class="line">lessons.forEach(&#123;lesson: Lesson -&gt; </span><br><span class="line">                <span class="keyword">if</span>(lesson.state === Lesson.State.PLAYBACK)&#123;</span><br><span class="line">                    playbackLessons.add(lesson)</span><br><span class="line">                &#125;&#125;)</span><br><span class="line"><span class="comment">//最后一个传入参数是lambda，那么大括号可以挪外面</span></span><br><span class="line">lessons.forEach()&#123;lesson: Lesson -&gt; </span><br><span class="line">                <span class="keyword">if</span>(lesson.state === Lesson.State.PLAYBACK)&#123;</span><br><span class="line">                    playbackLessons.add(lesson)</span><br><span class="line">                &#125;&#125;</span><br><span class="line"><span class="comment">//传入参数只有一个lambda，那么小括号可以省略</span></span><br><span class="line">lessons.forEach&#123;lesson: Lesson -&gt; </span><br><span class="line">                <span class="keyword">if</span>(lesson.state === Lesson.State.PLAYBACK)&#123;</span><br><span class="line">                    playbackLessons.add(lesson)</span><br><span class="line">                &#125;&#125;</span><br><span class="line"><span class="comment">//类型可以推导，简化</span></span><br><span class="line">lessons.forEach&#123;lesson -&gt; </span><br><span class="line">                <span class="keyword">if</span>(lesson.state === Lesson.State.PLAYBACK)&#123;</span><br><span class="line">                    playbackLessons.add(lesson)</span><br><span class="line">                &#125;&#125;</span><br><span class="line"><span class="comment">//kotlin中lambda只有一个参数，那么参数可以省略</span></span><br><span class="line">lessons.forEach&#123;</span><br><span class="line">    <span class="keyword">if</span>(it.state === Lesson.State.PLAYBACK)&#123;</span><br><span class="line">        playbackLessons.add(it)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果学过rxjava，看到forEach会联想到filter操作符，简化</span></span><br><span class="line"><span class="keyword">val</span> filter = lessons.filter&#123;it.state === Lesson.State.PLAYBACK&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>循环</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//循环100次，输出0..99</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//传入两个参数，最后一个参数是lambda所以可以提取到小括号外，lambda只有一个参数所以省略成it</span></span><br><span class="line">    repeat(<span class="number">100</span>)&#123;</span><br><span class="line">        println(it)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//java中的fori，在kotlin中有in的写法</span></span><br><span class="line">    <span class="keyword">val</span> array = arrayOf(<span class="number">1</span>,<span class="number">23</span>,<span class="number">452</span>,<span class="number">213</span>,<span class="number">23</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span>  <span class="number">0.</span>.(array.size-<span class="number">1</span>))&#123;&#125;</span><br><span class="line">    <span class="comment">//这种写法不优雅，改成</span></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until array.size)&#123;&#125;</span><br><span class="line">    <span class="comment">//实际是 for(i in 0.until(array.size))&#123;&#125;，点until跳过去可以看到是加infix的扩展函数。使得可以写成上面的形式让代码可读性更高点</span></span><br><span class="line">    <span class="comment">//此处array自带一个方法，可以返回一个区间，简化</span></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> array.indices)&#123;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数不想被别的地方调用，函数可以写在另一个函数中，只能被外部函数访问到</p>
<blockquote>
<p>函数嵌套会在外面函数每次被调用的时候生成一个额外对象。所以要考虑外面函数是不是被频繁调用，如果被频繁调用那么不适合这种写法（会额外生成很多临时对象）</p>
</blockquote>
</li>
<li><p>不想让外面更改某个变量,加 <code>private set</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原来：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseApplication</span> : <span class="type">Application</span></span>()&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> currentApplication: Context</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">currentApplication</span><span class="params">()</span></span>: Context&#123;</span><br><span class="line">            <span class="keyword">return</span> currentApplication</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate()</span><br><span class="line">        currentApplication = <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//更改成</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseApplication</span> : <span class="type">Application</span></span>()&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>&#123;</span><br><span class="line">        <span class="keyword">lateinit</span> <span class="keyword">var</span> currentApplication = Context</span><br><span class="line">        	<span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> onCteate()&#123;</span><br><span class="line">        currentApplication = <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//kotlin中调用</span></span><br><span class="line">BaseApplication.currentApplication</span><br><span class="line"><span class="comment">//java中调用</span></span><br><span class="line">BaseApplication.Companion.getCurrentApplication()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果java中调用不想加Companion，那么加@JvmStatic</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseApplication</span>: <span class="type">Application</span></span>()&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>&#123;</span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="keyword">lateinit</span> <span class="keyword">var</span> currentApplication = Context</span><br><span class="line">        	<span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> onCreate()&#123;</span><br><span class="line">        currentApplication = <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//java中调用</span></span><br><span class="line">BaseApplication.getCurrentApplication()</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Kotlin知识体系图"><a href="#Kotlin知识体系图" class="headerlink" title="Kotlin知识体系图"></a>Kotlin知识体系图</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul>
<li><p>整型</p>
<ul>
<li><p>Byte（8）</p>
</li>
<li><p>Short（16）</p>
</li>
<li><p>Int（32）</p>
</li>
<li><p>Long（64）</p>
<p>默认整数类型为Int，需要在后面标记L或l</p>
</li>
</ul>
</li>
<li><p>浮点型</p>
<ul>
<li><p>Float（32）</p>
<p>默认浮点数类型为Double，需要在浮点数后标记f或F</p>
</li>
<li><p>Double（64）</p>
</li>
</ul>
</li>
<li><p>布尔型</p>
</li>
<li><p>Boolean</p>
</li>
<li><p>字符型</p>
<ul>
<li><p>Char</p>
<p>字符用  Char 表示，不能直接当做数字</p>
</li>
</ul>
</li>
<li><p>显式转换</p>
<ul>
<li><p>toByte(): Byte</p>
</li>
<li><p>toShort(): Short</p>
</li>
<li><p>toInt(): Int</p>
</li>
<li><p>toLong(): Long</p>
</li>
<li><p>toFloat(): Float</p>
</li>
<li><p>toDouble(): Double</p>
</li>
<li><p>toChar(): Char</p>
</li>
</ul>
</li>
<li><p>支持的进制</p>
<ul>
<li><p>二进制</p>
</li>
<li><p>十进制</p>
</li>
<li><p>十六进制</p>
</li>
<li><p>注意：不支持八进制</p>
</li>
</ul>
</li>
<li><p>注意</p>
<ul>
<li><p>不显式转换的情况下不能把较小类型的变量赋值给较大类型</p>
</li>
<li><p>&#x3D;&#x3D;&#x3D;：内存地址值相等</p>
</li>
<li><p>&#x3D;&#x3D;：值相等</p>
</li>
<li><p>当需要可空引用时，像数字、字符会被装箱。装箱操作不会保留同一性。</p>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>基本数据类型名称</th>
<th>Kotlin的数据类型</th>
<th>Java的数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>字节型</td>
<td>Byte（8）</td>
<td>byte和Byte（8）</td>
</tr>
<tr>
<td>整型</td>
<td>Int（32）</td>
<td>int和Integer（32）</td>
</tr>
<tr>
<td>长整型</td>
<td>Long（64）</td>
<td>long和Long（64）</td>
</tr>
<tr>
<td>浮点型</td>
<td>Float（32）</td>
<td>float和Float（32）</td>
</tr>
<tr>
<td>双精度</td>
<td>Double（64）</td>
<td>double和Double（64）</td>
</tr>
<tr>
<td>布尔型</td>
<td>Boolean（8）</td>
<td>boolean和Boolean（8）</td>
</tr>
<tr>
<td>字符型</td>
<td>Char</td>
<td>char（16）</td>
</tr>
<tr>
<td>字符串</td>
<td>String</td>
<td>String</td>
</tr>
</tbody></table>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ul>
<li><p>声明：<code>package package.name</code></p>
</li>
<li><p>如果没有显示的声明包名，则使用默认的命名空间</p>
</li>
<li><p>和 Java 不同的是：目录与包的结构无需匹配：源代码可以在文件系统的任意位置</p>
</li>
<li><p>如果两个文件的包名一致，无需导入可以直接使用对方的类和顶层函数、属性</p>
</li>
<li><p>import 的使用方式</p>
<ul>
<li><p>import package.name.*</p>
<p>导入包下的所有顶层的类、函数、属性</p>
</li>
<li><p>import package.name.funname</p>
<p>导入包下的具体某个顶层函数</p>
</li>
<li><p>import package.name.propertyname</p>
<p>导入包下具体的某个顶层属性</p>
</li>
<li><p>import package.name.classname</p>
<p>导入包下具体的某个类</p>
</li>
<li><p>import package.name.classname.*</p>
<p>导入某个类下的所有的成员</p>
</li>
</ul>
</li>
<li><p>注意</p>
<ul>
<li><p>在同一个包下不能存在相同的函数、属性、类</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A.kt</span></span><br><span class="line"><span class="keyword">package</span> cn.intozhou.bean</span><br><span class="line"><span class="keyword">val</span> a  = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person1</span></span></span><br><span class="line"><span class="comment">//B.kt</span></span><br><span class="line"><span class="keyword">package</span> cn.intozhou.bean</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a  = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person1</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的写法是错误的，因为在package相同的情况下函数、类、属性不能相同。这里会编译时会抛出：sayHello a person1 已经在 A.kt 文件中定义</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果在一个文件中导入不同目录下的相同的类、函数、属性，可以使用关键字 as 为不同命名空间下的类、函数、属性起别名</p>
</li>
</ul>
</li>
</ul>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul>
<li><p>无返回值的函数</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">string</span>&gt;)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">string</span>&gt;)</span></span>:<span class="built_in">Unit</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>有返回值的函数</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(x:<span class="type">Int</span>,y:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回值可为空的函数</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parseInt</span><span class="params">(str:<span class="type">String</span>)</span></span>:<span class="built_in">Int</span>?&#123;</span><br><span class="line">    <span class="keyword">return</span> str.toIntOrNull()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>表达式主体函数</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(x:<span class="type">Int</span>,y:<span class="type">Int</span>)</span></span> = <span class="keyword">if</span>(x &gt; y)  x <span class="keyword">else</span>  y</span><br></pre></td></tr></table></figure>
</li>
<li><p>有默认参数值的函数<br>有默认值的参数必须在无默认值参数的右边</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(name:<span class="type">String</span>,age:<span class="type">Int</span> = <span class="number">18</span>)</span></span>:String&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;姓名：<span class="variable">$name</span>,年龄：<span class="variable">$age</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul>
<li><p>var(可变变量)<br>在其初始化赋值后可再次赋值</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">string</span>&gt;)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">0</span>;<span class="comment">//根据值自动推断变量类型</span></span><br><span class="line">  x = <span class="number">1</span>;<span class="comment">//再次赋值Int类型的值，ok</span></span><br><span class="line">  x = <span class="string">&quot;3&quot;</span><span class="comment">//错误。只有在初始赋值的时候会自动推断变量的类型，在此之后的所有赋值的数据类型必须与第一次赋值的类型相同</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> y :String = <span class="string">&quot;&quot;</span><span class="comment">//显示声明变量的类型并赋值</span></span><br><span class="line">  <span class="keyword">var</span> b :<span class="built_in">Boolean</span><span class="comment">//如果声明变量但不赋初始值则必须显示声明变量的类型</span></span><br><span class="line">  b = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>val(不可变变量)<br>在初始化赋值后不可再赋值的的变量</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">string</span>&gt;)</span></span>&#123;</span><br><span class="line">	<span class="keyword">val</span> PI = <span class="number">3.141596253f</span></span><br><span class="line">	PI = <span class="number">4</span><span class="comment">//错误，不可再次赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lessonPresenter</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用伴生对象的形式，让常量是静态的</span></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>&#123;</span><br><span class="line">        <span class="comment">//加const让常量变成是编译期常量</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> LESSON_PATH = ‘lessons</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">string</span>&gt;)</span></span>&#123;</span><br><span class="line">	<span class="keyword">val</span> name = <span class="string">&quot;intozhou&quot;</span></span><br><span class="line">	<span class="keyword">val</span> age = <span class="number">23</span></span><br><span class="line">	println(<span class="string">&quot;姓名<span class="variable">$name</span>,年龄：<span class="variable">$age</span>,<span class="subst">$&#123;if(age &gt; <span class="number">18</span>) <span class="string">&quot;已经成年了&quot;</span> else <span class="string">&quot;未成年不予录用&quot;</span>&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><ul>
<li><p>if表达式</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test3</span><span class="params">(age:<span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">    println(<span class="keyword">if</span>(age &lt; <span class="number">18</span>) <span class="string">&quot;未成年&quot;</span> <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">18</span> &amp;amp;&amp;amp; age &lt; <span class="number">30</span>) <span class="string">&quot;青年&quot;</span> <span class="keyword">else</span> <span class="string">&quot;中年、老年&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>if 既可以作为语句来使用，也可以作为表达式来使用</p>
<p>如果你使用if作为表达式来使用，那么 else 分支是必须要存在的</p>
</blockquote>
</li>
<li><p>when表达式</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">describe</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: String =</span><br><span class="line"><span class="keyword">when</span> (obj) &#123;</span><br><span class="line">  <span class="number">1</span>          -&gt; <span class="string">&quot;One&quot;</span></span><br><span class="line">  <span class="string">&quot;Hello&quot;</span>    -&gt; <span class="string">&quot;Greeting&quot;</span></span><br><span class="line">  <span class="keyword">is</span> <span class="built_in">Long</span>    -&gt; <span class="string">&quot;Long&quot;</span></span><br><span class="line">  !<span class="keyword">is</span> String -&gt; <span class="string">&quot;Not a string&quot;</span></span><br><span class="line">  <span class="keyword">else</span>       -&gt; <span class="string">&quot;Unknown&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方式</p>
<ul>
<li><p>有参数</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span>  <span class="title">getMnemonic</span><span class="params">(color: <span class="type">Color</span>)</span></span> =</span><br><span class="line"><span class="keyword">when</span>(color)&#123;</span><br><span class="line">  Color.RED -&gt; <span class="string">&quot;Richard&quot;</span></span><br><span class="line">  Color.ORANGE -&gt; <span class="string">&quot;Of&quot;</span></span><br><span class="line">  Color.YELLOW -&gt; <span class="string">&quot;York&quot;</span></span><br><span class="line">  Color.GREEN -&gt; <span class="string">&quot;Gave&quot;</span></span><br><span class="line">  Color.BLUE -&gt; <span class="string">&quot;Battle&quot;</span></span><br><span class="line">  Color.INDIGO -&gt; <span class="string">&quot;In&quot;</span></span><br><span class="line">  Color.VIOLET -&gt; <span class="string">&quot;Vain&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>无参数</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不带参数的when</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">mixOptimized</span><span class="params">(c1 : <span class="type">Color</span>, c2 : <span class="type">Color</span>)</span></span> =</span><br><span class="line"><span class="keyword">when</span>&#123;</span><br><span class="line">  (c1 == RED &amp;amp;&amp;amp; c2 == YELLOW) || (c1 == YELLOW &amp;amp;&amp;amp; c2 == RED) -&gt; ORANGE</span><br><span class="line">  (c1 == YELLOW &amp;amp;&amp;amp; c2 == BLUE) || (c1 == BLUE &amp;amp;&amp;amp; c2 == YELLOW) -&gt; GREEN</span><br><span class="line">  (c1 == BLUE &amp;amp;&amp;amp; c2 == VIOLET) || (c1 == VIOLET &amp;amp;&amp;amp; c2 == BLUE) -&gt; INDIGO</span><br><span class="line">  <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> Exception(<span class="string">&quot;Dirty color&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一条分支多个选项</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在一个when分支上合并多个选项</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getWarmth</span><span class="params">(color: <span class="type">Color</span>)</span></span> =</span><br><span class="line"><span class="keyword">when</span>(color)&#123;</span><br><span class="line">  RED,ORANGE,YELLOW -&gt; <span class="string">&quot;warm&quot;</span></span><br><span class="line">  GREEN -&gt; <span class="string">&quot;neutral&quot;</span></span><br><span class="line">  BLUE,INDIGO,VIOLET -&gt; <span class="string">&quot;cold&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>任意参数</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//when 表达式的判断条件可以是任何对象</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">mix</span><span class="params">(c1:<span class="type">Color</span>,c2:<span class="type">Color</span>)</span></span> =</span><br><span class="line"><span class="keyword">when</span>(setOf(c1,c2))&#123;</span><br><span class="line">  setOf(RED,YELLOW) -&gt; ORANGE</span><br><span class="line">  setOf(YELLOW,BLUE) -&gt; GREEN</span><br><span class="line">  setOf(BLUE,VIOLET) -&gt; INDIGO</span><br><span class="line">  <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> Exception(<span class="string">&quot;Dirty color&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>取代了 switch 操作符,比switch更强大<br>when 可以接受任意对象为参数，switch 只支持 常量：枚举常量、字符串常量、数字常量</p>
</li>
<li><p>when 既可以作为语句来使用，也可以作为表达式来使用</p>
</li>
<li><p>如果你使用 when 作为表达式来使用，那么 else 分支是必须要存在的，除非编译器确认分支已经包含所有的可能性</p>
</li>
<li><p>替代 if…else if…else…,可以不提供参数，所有的分支条件都是简单的布尔表达式</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">when</span>&#123;</span><br><span class="line">  x % <span class="number">2</span> == <span class="number">0</span> -&gt; println(<span class="string">&quot;是偶数&quot;</span>)</span><br><span class="line">  x % <span class="number">2</span> == <span class="number">1</span> -&gt; println(<span class="string">&quot;是奇数&quot;</span>)</span><br><span class="line">  <span class="keyword">else</span> -&gt;&#123;</span><br><span class="line">    println(<span class="string">&quot;不是奇数页不是偶数&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>在Kotlin中不支持三元表达式</p>
</li>
<li><p>在kotlin中不支持switch</p>
</li>
</ul>
<h3 id="空值和null检查"><a href="#空值和null检查" class="headerlink" title="空值和null检查"></a>空值和null检查</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">is</span> String) &#123;</span><br><span class="line">    <span class="comment">// `obj` 在该条件分支内自动转换成 `String`</span></span><br><span class="line">    <span class="keyword">return</span> obj.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在离开类型检测分支后，`obj` 仍然是 `Any` 类型</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类型检查和智能类型转换"><a href="#类型检查和智能类型转换" class="headerlink" title="类型检查和智能类型转换"></a>类型检查和智能类型转换</h3><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul>
<li><p>for循环</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">string</span>&gt;)</span></span> &#123;</span><br><span class="line">		<span class="comment">//sampleStart</span></span><br><span class="line">    <span class="keyword">val</span> items = listOf(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;kiwi&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> (item <span class="keyword">in</span> items) &#123;</span><br><span class="line">        println(item)</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">//sampleEnd</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">string</span>&gt;)</span></span> &#123;</span><br><span class="line">		<span class="comment">//sampleStart</span></span><br><span class="line">    <span class="keyword">val</span> items = listOf(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;kiwi&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> (index <span class="keyword">in</span> items.indices) &#123;</span><br><span class="line">        println(<span class="string">&quot;item at <span class="variable">$index</span> is <span class="subst">$&#123;items[index]&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">//sampleEnd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>while循环</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">string</span>&gt;)</span></span> &#123;</span><br><span class="line">		<span class="comment">//sampleStart</span></span><br><span class="line">    <span class="keyword">val</span> items = listOf(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;kiwi&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (index &lt; items.size) &#123;</span><br><span class="line">        println(<span class="string">&quot;item at <span class="variable">$index</span> is <span class="subst">$&#123;items[index]&#125;</span>&quot;</span>)</span><br><span class="line">        index++</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">//sampleEnd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>do…while()循环</p>
</li>
<li><p>break、continue</p>
<ul>
<li><p>break： 跳出循环</p>
</li>
<li><p>continue： 跳出本次循环，执行下次循环</p>
</li>
</ul>
</li>
<li><p>标签处返回</p>
<ul>
<li>label@</li>
</ul>
</li>
</ul>
<h3 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h3><ul>
<li><p>是否在区间</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> x = <span class="number">9</span></span><br><span class="line"><span class="keyword">val</span> y = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//是否在区间内</span></span><br><span class="line"><span class="keyword">if</span>(x <span class="keyword">in</span> <span class="number">0.</span>.y)&#123;</span><br><span class="line">  println(<span class="string">&quot;x 在区间内&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">println(<span class="string">&quot;--------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否不在区间内</span></span><br><span class="line"><span class="keyword">if</span>(x !<span class="keyword">in</span> <span class="number">0.</span>.y)&#123;</span><br><span class="line">  println(<span class="string">&quot;x 不在区间内&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>if(x in x..y)</p>
</blockquote>
</li>
<li><p>迭代区间</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">string</span>&gt;)</span></span> &#123;</span><br><span class="line">		<span class="comment">//sampleStart</span></span><br><span class="line">    <span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) &#123;</span><br><span class="line">        print(x)</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">//sampleEnd</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">string</span>&gt;)</span></span> &#123;</span><br><span class="line">		<span class="comment">//sampleStart</span></span><br><span class="line">    <span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> step <span class="number">2</span>) &#123;</span><br><span class="line">        print(x)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">9</span> downTo <span class="number">0</span> step <span class="number">3</span>) &#123;</span><br><span class="line">        print(x)</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">//sampleEnd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>for(x in items)</p>
</blockquote>
</li>
</ul>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul>
<li><p>List</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;D&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Set</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="keyword">set</span> = setOf(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;E&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="类与继承"><a href="#类与继承" class="headerlink" title="类与继承"></a>类与继承</h3><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><ul>
<li><p>类声明</p>
<ul>
<li>可是使用 class 关键字来声明类。类声明由类名、类头（指定其类型参数、主构造函数等）和由大括号包围的类体构成。类头和类体都是可选的； 如果一个类没有类体，可以省略花括号。</li>
</ul>
</li>
<li><p>类成员</p>
<ul>
<li><p>属性</p>
</li>
<li><p>函数</p>
</li>
<li><p>嵌套类和内部类</p>
</li>
<li><p>对象声明</p>
</li>
</ul>
</li>
</ul>
<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ul>
<li><p>构造函数的可见性是 <code>public</code> 的，如果不希望外部创建改类的实例则需要显式的使用可见性修饰符来修饰构造函数</p>
</li>
<li><p>主构造函数</p>
<ul>
<li><p>只能有一个</p>
</li>
<li><p>主构造函数是类头的一部分：它跟在类名（和可选的类型参数）后。</p>
</li>
<li><p>使用 <code>constructor</code> 关键字来声明主构造函数。如果主构造函数没有任何注解或者可见性修饰符，可以省略这个 <code>constructor</code> 关键字。</p>
</li>
<li><p>主构造函数不能包含任何的代码。初始化的代码可以放到以 <code>init</code> 关键字作为前缀的初始化块</p>
</li>
<li><p>主构造的参数可以在初始化块中使用。它们也可以在类体内声明的属性初始化器中使用</p>
</li>
<li><p>主构造函数中声明的属性可以是可变的（<code>var</code>）或只读的（<code>val</code>）</p>
</li>
<li><p>在 <code>JVM</code> 上，如果主构造函数的所有的参数都有默认值，编译器会生成 一个额外的无参构造函数，它将使用默认值</p>
</li>
<li><p>如果构造函数有注解或可见性修饰符，这个 <code>constructor</code> 关键字是必需的，并且这些修饰符在它前面</p>
</li>
</ul>
</li>
<li><p>次构造函数</p>
<ul>
<li><p>可以有一个或多个</p>
</li>
<li><p>如果类有一个主构造函数，每个次构造函数需要委托给主构造函数， 可以直接委托或者通过别的次构造函数间接委托。委托到同一个类的另一个构造函数用 <code>this</code> 关键字即可</p>
</li>
<li><p>如果一个类没有主构造函数和次构造函数，它会有一个不带参数的主构造函数</p>
</li>
</ul>
</li>
</ul>
<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul>
<li><p>在 <code>Kotlin</code> 中所有类都有一个共同的超类 <code>Any</code>，这对于没有超类型声明的类是默认超类</p>
</li>
<li><p>如果该基类有一个主构造函数，其子类型可以（并且必须） 用（基类型的）主构造函数参数就地初始化。如果类没有主构造函数，那么每个次构造函数必须使用 <code>super</code> 关键字初始化其基类型，或委托给另一个构造函数做到这一点</p>
</li>
<li><p>类上的 <code>open</code> 标注与 <code>Java</code> 中 <code>final</code> 相反，它允许其他类从这个类继承。默认情况下，在 <code>Kotlin</code> 中所有的类都是 <code>final</code>-要么为继承而设计，并提供文档说明，要么就禁止继承</p>
</li>
<li><p>覆盖方法</p>
<ul>
<li><p>与 <code>Java</code> 不同，<code>Kotlin</code> 需要显式标注可覆盖的成员（我们称之为开放）和覆盖后的成员</p>
</li>
<li><p>首先只能覆盖标注了 <code>open</code> 的成员，其次如果覆盖则必须显式地使用 <code>override</code> 标注覆盖后的成员</p>
</li>
<li><p>覆盖成员的前提是类是开放的</p>
</li>
</ul>
</li>
</ul>
<h3 id="属性与字段"><a href="#属性与字段" class="headerlink" title="属性与字段"></a>属性与字段</h3><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h3 id="可见性修饰符"><a href="#可见性修饰符" class="headerlink" title="可见性修饰符"></a>可见性修饰符</h3><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h3 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h3><h3 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h3><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h3 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h3><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><ul>
<li><p>使用 <code>enum class</code> 来定义一个枚举类</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>enum</code> 是软关键字，只有在和<code>class</code>一起使用时才具有特殊含义</p>
</li>
<li><p>枚举常量和方法之间要使用分号(<code>;</code>)分割，这是必须的</p>
</li>
<li><p>如果枚举类定义了主构造函数，那么每个枚举常量在创建时必须指定起初始值</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span></span>(<span class="keyword">var</span> r :<span class="built_in">Int</span>,<span class="keyword">var</span> g:<span class="built_in">Int</span>,<span class="keyword">var</span> b:<span class="built_in">Int</span>)&#123;</span><br><span class="line">    RED(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),ORANGE(<span class="number">255</span>,<span class="number">165</span>,<span class="number">0</span>),</span><br><span class="line">    YELLOW(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>),GREEN(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),</span><br><span class="line">    BLUE(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),INDIGO(<span class="number">75</span>,<span class="number">0</span>,<span class="number">130</span>),</span><br><span class="line">    VIOLET(<span class="number">238</span>,<span class="number">130</span>,<span class="number">238</span>);<span class="comment">//这里的分号是必须的，用于划分常量列表和方法</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">rgb</span><span class="params">()</span></span> = (r * <span class="number">256</span> + g) * <span class="number">256</span> + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><h3 id="委托属性"><a href="#委托属性" class="headerlink" title="委托属性"></a>委托属性</h3>]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin泛型</title>
    <url>/posts/6f6a6f9c/</url>
    <content><![CDATA[<h2 id="Kotlin-泛型"><a href="#Kotlin-泛型" class="headerlink" title="Kotlin 泛型"></a>Kotlin 泛型</h2><h3 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h3><h4 id="kotlin伪泛型"><a href="#kotlin伪泛型" class="headerlink" title="kotlin伪泛型"></a>kotlin伪泛型</h4><p>与Java一样，kotlin的泛型也是编译时期的泛型，在运行时期的时候泛型会被擦除掉，这种泛型可以理解为伪泛型，与之相对，真泛型即在运行期还存在泛型类型。可以通过以下两个例子来验证kotlin类型擦除：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo 1</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> a : List&lt;String&gt; = ArrayList&lt;String&gt;()</span><br><span class="line">    <span class="keyword">val</span> b : List&lt;<span class="built_in">Int</span>&gt; = ArrayList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    println(a.javaClass == b.javaClass)</span><br><span class="line">&#125;</span><br><span class="line">************************************************</span><br><span class="line">运行结果：</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面demo 1代码中定义了两个泛型变量，分别是<code>ArrayList&lt;String&gt;</code>和<code>ArrayList&lt;Int&gt;</code>,并通过获取javaClass对比，结果相等，说明在运行时泛型被擦除了，只剩下了原始类型</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo 2</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> c : MutableList&lt;<span class="built_in">Int</span>&gt; = mutableListOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> method : Method = c::<span class="keyword">class</span>.java.getMethod(<span class="string">&quot;add&quot;</span>,Any::<span class="keyword">class</span>.java)</span><br><span class="line">    method.invoke(c,<span class="string">&quot;list&quot;</span>)</span><br><span class="line">    println(c)</span><br><span class="line">&#125;</span><br><span class="line">*********************************************</span><br><span class="line">运行结果：</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, list]</span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>demo 2中定义了一个泛型类为<code>MutableList&lt;Int&gt;</code>的变量<code>c</code>，变量<code>c</code>的泛型为<code>&lt;Int&gt;</code>，但是通过反射能够添加<code>&lt;String&gt;</code>类型的值，说明运行过程中泛型被擦除，没有了泛型约束</p>
</blockquote>
<p>通过代码反编译也很容易观察到类型擦除：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Kotlin 代码</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">testGenericOne</span><span class="params">()</span></span>: T?&#123;</span><br><span class="line">    <span class="keyword">val</span> t : T? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 反编译后的Java代码</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> static <span class="keyword">final</span> Object testGenericOne() &#123;</span><br><span class="line">    Object t = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从反编译的代码中可以观察到泛型<code>&lt;T&gt;</code>被擦除掉了，在实际运行过程中的类型是<code>Object</code></p>
<h4 id="reified-inline"><a href="#reified-inline" class="headerlink" title="reified inline"></a>reified inline</h4><blockquote>
<p>上述的代码可以证实Java(kotlin)确实存在类型擦除，那么为什么会存在类型擦除呢，这是因为在Java1.5版本之前没有泛型，泛型是在Java1.5版本引入的，因而为了兼容1.5版本及1.5之前的版本，Java选择伪泛型，否则Java需要就需要修改整个底层</p>
</blockquote>
<p>为了版本兼容选择类型擦除无可厚非，但是类型擦除同时也带来了一些限制：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">testGeneric</span><span class="params">(t: <span class="type">T</span>)</span></span>&#123;</span><br><span class="line">    println(T::<span class="keyword">class</span>.java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码无法编译通过，泛型<code>T</code>只是一个泛型参数，无法获取<code>Class</code>信息，同样这也是伪泛型的体现；因为无法通过泛型参数获取<code>Class</code>，因此有时候需要另外传递一个<code>Class</code>参数，比如Gson框架中的fromJson方法：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T fromJson(String json, Class&lt;T&gt; classOfT) throws JsonSyntaxException &#123; </span><br><span class="line">   <span class="keyword">return</span> gson.fromJson(json, clazz); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传递额外参数可以满足需要类对象的场景，kotlin还有另外更彻底的实现方式，通过关键字<code>reified</code>和<code>inline</code>的结合使用，把函数定义成内联函数，同时可以将函数中的泛型参数当成真实参数使用：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// reified inline 使用</span></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T&gt;</span> <span class="title">testGenericTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    println(T::<span class="keyword">class</span>.java)</span><br><span class="line">&#125;</span><br><span class="line">********************************************</span><br><span class="line">运行结果：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="Kotlin型变"><a href="#Kotlin型变" class="headerlink" title="Kotlin型变"></a>Kotlin型变</h3><h4 id="Java协变和逆变"><a href="#Java协变和逆变" class="headerlink" title="Java协变和逆变"></a>Java协变和逆变</h4><p>假设有两个类<code>Father</code>和<code>Son</code>，<code>Son</code>是<code>Father</code>的子类，但是包含这两个泛型的泛型类之间没有任何关系，例如：<code>List&lt;Father&gt;</code>和<code>List&lt;Son&gt;</code>之间没有任何关系，这也意味着以下的代码是走不通的：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="title">extends</span> <span class="title">Father</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Family</span>&lt;<span class="type">T</span>&gt;</span>&#123;&#125;</span><br><span class="line">void addElement(Family&lt;Father&gt; family)&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> void main()&#123;</span><br><span class="line">    Family&lt;Son&gt; sonFamily = new Family&lt;&gt;();</span><br><span class="line">    addElement(sonFamily);</span><br><span class="line">&#125;</span><br><span class="line">************************************************</span><br><span class="line">编译报错：</span><br><span class="line">Type mismatch.</span><br><span class="line">Required:</span><br><span class="line">Family&lt;Father&gt;</span><br><span class="line">Found:</span><br><span class="line">Family&lt;Son&gt;</span><br></pre></td></tr></table></figure>

<p>这段代码提示类型不匹配的，<code>Family&lt;Son&gt;</code>类型对象并不能作为<code>Family&lt;Father&gt;</code>类型参数传递。即使<code>Son</code>和<code>Father</code>之间存在继承关系，但是<code>Family&lt;Son&gt;</code>和<code>Family&lt;Father&gt;</code>之间并没有半毛钱关系；可是在实际开发中有时候会有这样的需求，希望带泛型类型的参数也能够实现多态传递，这个时候就需要借助通配符<code>?</code>，使用<code>? extends</code>或<code>? super </code>。<code>? extends</code>是上界通配符，能够使Java泛型具有协变性，<code>? super</code>是下界通配符，能够使Java泛型就有逆变性。</p>
<blockquote>
<p>在继承关系树中，子类继承自父类，可以认为父类在上，子类在下。<code>extends</code> 限制了泛型类型的父类型，所以叫上界。</p>
<p>与上界通配符对应，这里 super 限制了通配符 ? 的子类型，所以称之为下界。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Family</span>&lt;T&gt;&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addChildElement</span><span class="params">(Family&lt;? extends Father&gt; family)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addParentElement</span><span class="params">(Family&lt;? <span class="built_in">super</span> Son&gt; family)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    Family&lt;Son&gt; sonFamily = <span class="keyword">new</span> <span class="title class_">Family</span>&lt;&gt;();</span><br><span class="line">    Family&lt;Father&gt; fatherFamily = <span class="keyword">new</span> <span class="title class_">Family</span>&lt;&gt;();</span><br><span class="line">    addChildElement(sonFamily); <span class="comment">// 协变调用</span></span><br><span class="line">    addParentElement(fatherFamily); <span class="comment">// 逆变调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过使用<code>? extends</code>，允许传入参数可以是泛型类型参数<code>Father</code>的子类型的任意类型，这种用法就是协变；与之相反，使用<code>? super</code>，就是允许传入参数可以是泛型类型参数Son的父类型的任意类型，这个用法就是逆变。</p>
</blockquote>
<p>与Java相似，Java通过<code>? extends</code>和<code>? super</code>来实现Java泛型的协变和逆变，Kotlin则通过泛型关键字<code>out</code>和<code>in</code>关键字来定义协变和逆变；或者可以说<code>out</code>等同于<code>? extends</code>，<code>in</code>等同于<code>? super</code></p>
<h4 id="协变"><a href="#协变" class="headerlink" title="协变"></a>协变</h4><p><code>out</code>:泛型关键字，实现kotlin泛型协变，out关键字的使用可以是在泛型类定义中，也可以是在带泛型类型参数的函数中</p>
<h5 id="out关键字的使用"><a href="#out关键字的使用" class="headerlink" title="out关键字的使用"></a><code>out</code>关键字的使用</h5><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> : <span class="type">Father</span></span>()&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Family</span>&lt;<span class="type">out T</span>&gt;</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">addElement</span><span class="params">(element: <span class="type">Family</span>&lt;<span class="type">Father</span>&gt;)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> sons : Family&lt;Son&gt; = Family()</span><br><span class="line">    addElement(sons)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于协变来说，假设类型A和类型B存在继承关系，且类型A是类型B的子类，那么通过协变<code>Family&lt;A&gt;</code>是<code>Family&lt;B&gt;</code>的子类型，这个是协变的一个特点</p>
</blockquote>
<h5 id="另外一个角度理解协变"><a href="#另外一个角度理解协变" class="headerlink" title="另外一个角度理解协变"></a>另外一个角度理解协变</h5><p>通过Java的型变分析，泛型型变的出现是为了使得泛型使用更加的灵活，kotlin也是一样；但是同时也需要对型变做一些限制，对于协变来说，规定类中的参数被声明为协变，那么就限制这个参数在该类中的使用：<strong>out关键字声明的泛型参数只能出现在out位置</strong>，out位置如下图：</p>
<p><img src="/posts/6f6a6f9c/ADo6skKv2UOBXWw.png" alt="kotin泛型&quot;out&quot;位置"></p>
<p><code>“out”</code>位置是声明函数返回值类型的位置，其主要是函数运行结束时产生指定的泛型对象，其扮演的是生产者的角色，所以用<code>“out”</code>声明很形象。那么，声明为协变的泛型为什么一定要限制在<code>out</code>位置呢？这是出于泛型安全考虑：假设有垃圾桶，垃圾桶分别用来装可回收垃圾、有害垃圾</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Waste</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">recyclableWaste</span> : <span class="type">Waste</span></span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HarmfulWaste</span> : <span class="type">Waste</span></span>()</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Ashbin</span>&lt;<span class="type">out T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// demo 实现垃圾分类例子 设置为抽象类，抽象方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 倒垃圾</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">pour</span><span class="params">()</span></span> : T</span><br><span class="line">    <span class="comment">// 扔垃圾到垃圾桶 这个方法是错误的 假设成立</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">put</span><span class="params">(t : <span class="type">T</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>RecyclableWaste</code>类是<code>Waste</code>类的子类，由于泛型类<code>Ashbin&lt;out T&gt;</code>用关键字<code>out</code>声明泛型参数为协变，泛型类<code>Ashbin&lt;out T&gt;</code>子类型化得以保留；</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 投放垃圾</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">wast</span><span class="params">(ashbin: <span class="type">Ashbin</span>&lt;<span class="type">Waste</span>&gt;)</span></span>&#123;</span><br><span class="line">     <span class="comment">// 有害垃圾</span></span><br><span class="line">    <span class="keyword">val</span> waste : Waste = HarmfulWaste()</span><br><span class="line">    ashbin.put(waste)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 声明一个可回收垃圾桶</span></span><br><span class="line">    <span class="keyword">val</span> ashbin: Ashbin&lt;RecyclableWaste&gt; = Ashbin&lt;RecyclableWaste&gt;()</span><br><span class="line">    wast(ashbin)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设泛型类<code>Ashbin&lt;out T&gt;</code>中的<code>put(t : T)</code>函数成立，那么根据以上代码，就会出现这样一种情况：<code>main()</code> 函数中声明了一个用来装可回收垃圾的垃圾桶，并将其作为参数传递给<code>wast(ashbin: Ashbin&lt;Waste&gt;)</code>函数，但是却在该函数中投放如有害垃圾；显而易见，在可回收垃圾桶中投放有害垃圾是一种错误的做法，不符合垃圾分类的原则。由此可见，在声明为协变的泛型类中，泛型出现在了函数参数的位置上会导致泛型安全问题，这是限制协变声明的泛型类的泛型参数只能出现在<code>&quot;out&quot;</code>位置原因，这一限制在Java泛型中同样也适用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Waster</span>&#123;&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RecyclableWaste</span> <span class="keyword">extends</span> <span class="title class_">Waster</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Ashbin</span>&lt;T&gt;&#123;</span><br><span class="line">    T t;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T t)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    Ashbin&lt;? <span class="keyword">extends</span> <span class="title class_">Waste</span>&gt; ashbin = <span class="keyword">new</span> <span class="title class_">Ashbin</span>&lt;&gt;();</span><br><span class="line">    <span class="type">RecyclableWaste</span> <span class="variable">recyclableWaste</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecyclableWaste</span>();</span><br><span class="line">    <span class="comment">// 编译报错</span></span><br><span class="line">    ashbin.set(recyclableWaste);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/6f6a6f9c/4PxA1ykdOYwEhgt.png" alt="协变泛型参数消费使用报错(Java).png"></p>
<h5 id="协变总结"><a href="#协变总结" class="headerlink" title="协变总结"></a>协变总结</h5><p>对泛型类泛型参数协变，即用<code>out</code>关键字声明，那么：</p>
<ul>
<li>子类型化会被保留（Family<Son> 是Family<Father>的子类型）</Father></Son></li>
<li>泛型类型（T）必须只能用在<code>&quot;out&quot;</code>位置上</li>
</ul>
<h4 id="逆变"><a href="#逆变" class="headerlink" title="逆变"></a>逆变</h4><p>逆变与协变不同，甚至可以说是相反，主要体现在子类型化关系上。假设有子类<code>Dog</code>和父类<code>Animal</code>，通过逆变，则<code>Zoom&lt;Animal&gt;</code>是<code>Zoom&lt;Dog&gt;</code>的子类型；可以看出不同类型的关系和声明逆变后泛型类之间的关系是截然相反的，这也是逆变的特点。</p>
<p>逆变是通过关键字<code>in</code>来声明的：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> : <span class="type">Animal</span></span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> : <span class="type">Animal</span></span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zoom</span>&lt;<span class="type">in T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">addAnimal</span><span class="params">(animal: <span class="type">Zoom</span>&lt;<span class="type">Dog</span>&gt;)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// in</span></span><br><span class="line">    <span class="keyword">val</span> animal : Zoom&lt;Animal&gt; = Zoom()</span><br><span class="line">    addAnimal(animal)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和协变一样，对于逆变的使用同样也需要限制：<strong>对声明为逆变的泛型类，其泛型类型参数在泛型类内部只能被消费，而不能作为生产者，即泛型参数只能出现在<code>in</code>位置而不能出现在<code>out</code>位置</strong>，如下图：</p>
<p><img src="/posts/6f6a6f9c/lvzUDkunS9wChWK.png" alt="逆变in位置.png"></p>
<p>同样，可以使用垃圾和垃圾桶的关系来解释下为什么逆变的泛型参数只能被放置在<code>&quot;in&quot;</code>位置：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Waste</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecyclableWaste</span> : <span class="type">Waste</span></span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HarmfulWaste</span> : <span class="type">Waste</span></span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefuseBin</span>&lt;<span class="type">in T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 倒垃圾 泛型参数T 不能作为返回类型 编译错误</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pour</span><span class="params">()</span></span> : T&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 扔垃圾到垃圾桶 </span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">put</span><span class="params">(t : <span class="type">T</span>)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">putWaste</span><span class="params">(refuseBin: <span class="type">RefuseBin</span>&lt;<span class="type">RecyclableWaste</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> recyclableWaste : RecyclableWaste = RecyclableWaste()</span><br><span class="line">    refuseBin.put(recyclableWaste)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 逆变调用</span></span><br><span class="line">    <span class="keyword">val</span> refuseBin : RefuseBin&lt;Waste&gt; = RefuseBin()</span><br><span class="line">    putWaste(refuseBin)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于逆变，泛型参数作为消费使用的时候，传入的参数一定是该泛型<code>T</code>的子类，能够保证泛型使用的安全；上述代码中定义了一个函数<code>putWaste</code>，需要传递的参数是<code>RefuseBin&lt;RecyclableWaste&gt;</code>，在函数中声明一个可回收垃圾，然后放入垃圾桶中，从逻辑上看，可回收垃圾桶放入可回收垃圾，没毛病；由于泛型参数被声明逆变，<code>RefuseBin&lt;Waste&gt;</code>是<code> RefuseBin&lt;RecyclableWaste&gt;</code>的子类型，那么在<code>main</code>函数中传递给  <code>putWaste</code>的参数是<code>RefuseBin&lt;Waste&gt;</code>是合理的，<code>RefuseBin&lt;Waste&gt;</code>是一个可以装任意垃圾的垃圾桶，垃圾桶装可回收垃圾，也没有毛病，666。因此泛型参数用在<code>in</code>位置是合法的。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Waste</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecyclableWaste</span> : <span class="type">Waste</span></span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HarmfulWaste</span> : <span class="type">Waste</span></span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefuseBin</span>&lt;<span class="type">in T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 倒垃圾 泛型参数T 不能作为返回类型 编译错误</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pour</span><span class="params">()</span></span> : T&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 扔垃圾到垃圾桶 </span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">put</span><span class="params">(t : <span class="type">T</span>)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 倒出可回收垃圾</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">pourRecyclableWaste</span><span class="params">(refuseBin: <span class="type">RefuseBin</span>&lt;<span class="type">RecyclableWaste</span>&gt;)</span></span> : RecyclableWaste&#123;</span><br><span class="line">    <span class="keyword">val</span> recyclableWaste : RecyclableWaste = refuseBin.pour()</span><br><span class="line">    <span class="keyword">return</span> recyclableWaste</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 逆变调用</span></span><br><span class="line">    <span class="keyword">val</span> pourWaste : RefuseBin&lt;Waste&gt; = RefuseBin()</span><br><span class="line">    pourRecyclableWaste(pourWaste)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设在逆变声明的<code>RefuseBin&lt;in T&gt;</code>中的pour函数是合法的，定义两个函数：<code>pourRecyclableWaste</code>函数中传递的参数是<code>RefuseBin&lt;RecyclableWaste&gt;</code>，在<code>pourRecyclableWaste</code>函数中返回从可回收垃圾桶中获取的可回收垃圾，但是在<code>main</code>函数中传递给<code>pourRecyclableWaste</code>的是可以装任意垃圾的垃圾桶（<code>RefuseBin&lt;Waste&gt;</code>），这样就会导致在<code>pourRecyclableWaste</code>获取到的就有可能不是可回收垃圾，因为普通垃圾桶可能倒出有害垃圾或者其他垃圾，这就出现了泛型类安全问题。所以逆变泛型类中泛型参数不能作为生产者角色出现（即不能出现在<code>out</code>位置）。</p>
<h6 id="逆变总结"><a href="#逆变总结" class="headerlink" title="逆变总结"></a>逆变总结</h6><p>对泛型类泛型参数逆变，即用<code>in</code>关键字声明，那么：</p>
<ul>
<li>子类型化关系会被逆转（Family<Father> 是Family<Son>的子类型）</Son></Father></li>
<li>泛型类型（T）必须只能用在<code>&quot;out&quot;</code>位置上</li>
</ul>
<h4 id="不变和点变形"><a href="#不变和点变形" class="headerlink" title="不变和点变形"></a>不变和点变形</h4><p>不变，顾名思义就是既不协变也不逆变，就是普通的泛型类，因此泛型参数即可以放在<code>in</code>位置也可以用到<code>out</code>位置，比如kotlin自带的<code>MutableList&lt;E&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MutableList</span>&lt;E&gt; : List&lt;E&gt;, MutableCollection&lt;E&gt; &#123;</span><br><span class="line">    override fun <span class="title function_">add</span><span class="params">(element: E)</span>: Boolean</span><br><span class="line">    override fun <span class="title function_">remove</span><span class="params">(element: E)</span>: Boolean</span><br><span class="line">    override fun <span class="title function_">addAll</span><span class="params">(elements: Collection&lt;E&gt;)</span>: Boolean</span><br><span class="line">    <span class="keyword">public</span> fun <span class="title function_">addAll</span><span class="params">(index: Int, elements: Collection&lt;E&gt;)</span>: Boolean</span><br><span class="line">    override fun <span class="title function_">removeAll</span><span class="params">(elements: Collection&lt;E&gt;)</span>: Boolean</span><br><span class="line">    override fun <span class="title function_">retainAll</span><span class="params">(elements: Collection&lt;E&gt;)</span>: Boolean</span><br><span class="line">    override fun <span class="title function_">clear</span><span class="params">()</span>: Unit</span><br><span class="line">    <span class="keyword">public</span> operator fun <span class="title function_">set</span><span class="params">(index: Int, element: E)</span>: E</span><br><span class="line">    <span class="keyword">public</span> fun <span class="title function_">add</span><span class="params">(index: Int, element: E)</span>: Unit</span><br><span class="line">    <span class="keyword">public</span> fun <span class="title function_">removeAt</span><span class="params">(index: Int)</span>: E</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么，问题来了，泛型不变是能够使泛型参数同时出现在<code>in</code>位置也可以出现在<code>out</code>位置，但是却失去了协变和逆变的特性，代码的复用性就很差，这不是一朝回到解放前么；能不能同时保留协变和逆变呢？是可以的，通过点变形来实现，如下代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Waste</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecyclableWaste</span> : <span class="type">Waste</span></span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HarmfulWaste</span> : <span class="type">Waste</span></span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrashCan</span>&lt;<span class="type">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 倒垃圾</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pour</span><span class="params">()</span></span> : T&#123;&#125;</span><br><span class="line">    <span class="comment">// 扔垃圾到垃圾桶</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">put</span><span class="params">(t : <span class="type">T</span>)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">putWasteWithIn</span><span class="params">(trashCan : <span class="type">TrashCan</span>&lt;<span class="type">in</span> <span class="type">RecyclableWaste</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> recyclableWaste : RecyclableWaste = RecyclableWaste()</span><br><span class="line">    trashCan.put(recyclableWaste)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">pourWasteWithOut</span><span class="params">(trashCan : <span class="type">TrashCan</span>&lt;<span class="type">out</span> <span class="type">RecyclableWaste</span>&gt;)</span></span>: RecyclableWaste&#123;</span><br><span class="line">    <span class="keyword">val</span> recyclableWaste : RecyclableWaste = trashCan.pour()</span><br><span class="line">    <span class="keyword">return</span> recyclableWaste</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上所示，我们可以把泛型类声明为不型变的，但是在使用它的时候，加上<code>out</code>或者<code>in</code>，让它在使用的时候产生型变，通过这种方式，代码更加灵活，满足了既需要泛型参数作为函数参数类型又需要泛型参数作为函数返回值类型的类。但是同时也存在限制：如上代码，在<code>pourWasteWithOut</code>函数中不能够调用<code>TrashCan&lt;T&gt;</code>类的<code>put</code>函数；在<code>putWasteWithIn</code>函数中不能够调用<code>TrashCan&lt;T&gt;</code>类中的<code>pour</code>函数；具体原因如同上面的协变逆变分析。</p>
<h3 id="星型投影-和-泛型边界"><a href="#星型投影-和-泛型边界" class="headerlink" title="星型投影 * 和 泛型边界"></a>星型投影 * 和 泛型边界</h3><h4 id="星型投影"><a href="#星型投影" class="headerlink" title="星型投影*"></a>星型投影*</h4><p><strong>星型投影</strong>，其实就是：假如你对于你现在泛型要传入的泛型参数不确定或者是无所谓的时候，为了确保泛型类能够正确的编译运行，可以借助星型投影<code>*</code>，而且该泛型类型的每个具体实例化将是该投影的子类型，<code>kotlin</code>中星型投影<code>*</code>的使用类似于java中<code>？</code>的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="comment">// java通配符？使用</span></span><br><span class="line">    ArrayList&lt;?&gt; array;</span><br><span class="line">    array = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    array = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应kotlin的代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// kotlin星型投影</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list : ArrayList&lt;*&gt;</span><br><span class="line">	list = ArrayList&lt;String&gt;()</span><br><span class="line">	list = ArrayList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Kotlin 可以根据 * 所指代的泛型参数进行相应的映射，下面是官方的说法：</p>
<ul>
<li>对于 <code>Foo &lt;out T : TUpper&gt;</code>，其中 <code>T</code> 是一个具有上界 <code>TUpper</code> 的协变类型参数，<code>Foo &lt;*&gt;</code> 等价于 <code>Foo &lt;out TUpper&gt;</code>。 这意味着当 <code>T</code> 未知时，你可以安全地从 <code>Foo &lt;*&gt;</code> 读取 <code>TUpper</code> 的值。</li>
<li>对于 <code>Foo &lt;in T&gt;</code>，其中 <code>T</code> 是一个逆变类型参数，<code>Foo &lt;*&gt;</code> 等价于 <code>Foo &lt;in Nothing&gt;</code>。 这意味着当 <code>T</code> 未知时，没有什么可以以安全的方式写入 <code>Foo &lt;*&gt;</code>。</li>
<li>对于 <code>Foo &lt;T : TUpper&gt;</code>，其中 <code>T</code> 是一个具有上界 <code>TUpper</code> 的不型变类型参数，<code>Foo&lt;*&gt;</code> 对于读取值时等价于 <code>Foo&lt;out TUpper&gt;</code> 而对于写值时等价于 <code>Foo&lt;in Nothing&gt;</code>。</li>
</ul>
<p><strong>如果泛型类型具有多个类型参数，则每个类型参数都可以单独投影。</strong><br>例如，如果类型被声明为 <code>interface Function &lt;in T, out U&gt;</code>，我们可以想象以下星投影：</p>
<ul>
<li><code>Function&lt;*, String&gt;</code> 表示 <code>Function&lt;in Nothing, String&gt;</code>；</li>
<li><code>Function&lt;Int, *&gt;</code> 表示 <code>Function&lt;Int, out Any?&gt;</code>；</li>
<li><code>Function&lt;*, *&gt;</code> 表示 <code>Function&lt;in Nothing, out Any?&gt;</code>。</li>
</ul>
<h4 id="泛型边界"><a href="#泛型边界" class="headerlink" title="泛型边界"></a>泛型边界</h4><p>在 Java 中，我们可以用 extends 关键字为泛型参数指定上限，如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java </span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Bound</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GenericBound</span>&lt;<span class="type">T extends Bound</span>&gt;</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>而对应的kotlin写法类似：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Bound</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GenericBound</span>&lt;<span class="type">T : Bound</span>&gt;</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>如果同一类型参数需要多个上界，在Java中的写法是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Bound</span>&#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Generic</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenericBound</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Bound</span>, Generic&gt;&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>在kotlin中同一类型参数需要多个上界与Java的写法有很大区别，kotlin的写法中多了关键字<code>where</code>，如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Bound</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Generic</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericBound</span>&lt;<span class="type">T</span>&gt; <span class="title">where</span> <span class="title">T</span> : <span class="type">Bound </span>, <span class="type">T : Generic&#123;&#125;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>kotlin泛型中比较难理解的是协变和逆变，感觉学习起来会比较的抽象，但是协变和逆变在Java中就有所体现，只不过是在kotlin中的使用方式与Java不同，kotlin中使用变得更加的简便；同样对于泛型边界来说，虽然多了一个关键字<code>where</code>，但是内容确实与Java完全一致，没有新增任何东西；总的来说，kotlin泛型的内容是与Java泛型一致的，只是在写法上有区分而已，要学习kotlin的泛型，可以先将Java泛型完全掌握，只要掌握了Java泛型，kotlin泛型学习起来就十分的简单，无非就是换个写法而已。</p>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin类委托和属性委托</title>
    <url>/posts/710c8103/</url>
    <content><![CDATA[<h2 id="Kotlin类委托和属性委托"><a href="#Kotlin类委托和属性委托" class="headerlink" title="Kotlin类委托和属性委托"></a>Kotlin类委托和属性委托</h2><h3 id="kotlin类委托"><a href="#kotlin类委托" class="headerlink" title="kotlin类委托"></a>kotlin类委托</h3><h4 id="使用kotlin类委托"><a href="#使用kotlin类委托" class="headerlink" title="使用kotlin类委托"></a>使用kotlin类委托</h4><p>kotlin的类委托主要是接口代理，类似Java中代理模式。委托机制：类A需要实现的操作委托给类B来实现。举个例子：假设有个人A需要打官司但是不会，于是委托给律师B来打官司，在这个过程中A委托了B，B代理A来打官司，委托代理成对出现，一般先有委托再有代理，这个过程也可以通过代码来实现：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口 打官司</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILawsuit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">lawsuit</span><span class="params">()</span></span>; <span class="comment">// 方法 打官司</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 律师</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lawyer</span> : <span class="type">ILawsuit&#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">lawsuit</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;律师执行打官司&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 平民 通过by 关键字委托给律师类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Civilian</span> : <span class="type">ILawsuit by Lawyer</span></span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> civilian : Civilian = Civilian();</span><br><span class="line">    civilian.lawsuit() <span class="comment">// 平民执行打官司 实际上是委托给律师来执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过kotlin字节码反编译，可以很明显的看出其实现方式就是通过Java的代理模式来实现的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打官司接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILawsuit</span> &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">lawsuit</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 律师</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Lawyer</span> <span class="keyword">implements</span> <span class="title class_">ILawsuit</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lawsuit</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="string">&quot;律师执行打官司&quot;</span>;</span><br><span class="line">      System.out.println(var1);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 平民</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Civilian</span> <span class="keyword">implements</span> <span class="title class_">ILawsuit</span> &#123;</span><br><span class="line">   <span class="comment">// $FF: synthetic field</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lawyer</span> <span class="variable">$$delegate_0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lawyer</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lawsuit</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$$delegate_0.lawsuit();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">Civilian</span> <span class="variable">civilian</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Civilian</span>();</span><br><span class="line">      civilian.lawsuit();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="覆写委托类方法"><a href="#覆写委托类方法" class="headerlink" title="覆写委托类方法"></a>覆写委托类方法</h4><p>有些时候在委托类实现的情况下，又需要自定义方法实现，在这种情况下可以通过覆写委托类方法来实现，具体如以下代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleList</span>&lt;<span class="type">T</span>&gt; </span>(<span class="keyword">val</span> innerList : MutableCollection&lt;T&gt; = mutableListOf()) : MutableCollection&lt;T&gt; <span class="keyword">by</span> innerList&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123; <span class="comment">// 覆写方法，实现自定义方法</span></span><br><span class="line">        count ++;</span><br><span class="line">        <span class="keyword">return</span> innerList.add(element) <span class="comment">// 代理对象只能够在覆写方法中调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123; <span class="comment">// 覆写方法，实现自定义方法</span></span><br><span class="line">        count += elements.size</span><br><span class="line">        <span class="keyword">return</span> innerList.addAll(elements) <span class="comment">// 代理对象只能够在覆写方法中调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> exampleList = ExampleList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    exampleList.addAll(listOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">    println(<span class="string">&quot;已添加<span class="subst">$&#123;exampleList.count&#125;</span>个元素&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="kotlin属性委托"><a href="#kotlin属性委托" class="headerlink" title="kotlin属性委托"></a>kotlin属性委托</h3><h4 id="定义一个被委托的类"><a href="#定义一个被委托的类" class="headerlink" title="定义一个被委托的类"></a>定义一个被委托的类</h4><p>与类委托类似，属性委托也是通过<code>by</code>关键字来定义的，其格式为：<code>var/val 变量 ：Type by 委托类</code>，具体代码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * kotlin 属性代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> example : String <span class="keyword">by</span> Delegate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被委托的类 被委托的类必须有getValue 和 setValue的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Delegate</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef: <span class="type">Any</span>?,property : <span class="type">KProperty</span>&lt;*&gt;)</span></span>:String&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="variable">$thisRef</span>,代理读取 <span class="subst">$&#123;property.name&#125;</span> 的值&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(thisRef: <span class="type">Any</span>?,property: <span class="type">KProperty</span>&lt;*&gt;,value: <span class="type">String</span>)</span></span>&#123;</span><br><span class="line">        print(<span class="string">&quot;<span class="variable">$thisRef</span>,代理写入 <span class="subst">$&#123;property.name&#125;</span> 的值为：<span class="variable">$value</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> proxy  = ProxyExample();</span><br><span class="line">    println(proxy.example)</span><br><span class="line">    proxy.example = <span class="string">&quot;Name&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line">chapter7.yangn.five.<span class="symbol">ProxyExample@</span>76fb509a,代理读取 example 的值</span><br><span class="line">chapter7.yangn.five.<span class="symbol">ProxyExample@</span>76fb509a,代理写入 example 的值为：Name</span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>对于<strong>只读</strong>属性，即<code>val</code>定义的变量，它的委托类<strong>必须提供一个getValue函数</strong>，且<strong>函数用operator关键字修饰</strong>，getValue有两个参数：</p>
<ul>
<li><code>thisRef</code>：根据以上运行结果，thisRef指的是当前调用对象（即<strong>属性所有者</strong>），其类型约束与调用对象一致或者是调用对象的超类型（子类型）</li>
<li><code>property</code>：当前属性所持有者的反射，其类型约束为<code>KProperty&lt;*&gt;</code>或者是<code>KProperty&lt;*&gt;</code>的超类型（子类型）</li>
</ul>
<p>对于<strong>可读写</strong>属性，即<code>var</code>定义的变量，它的委托类<strong>除了提供getValue函数，还需要提供一个setValue函数</strong>，同样的，setValue函数也需要用operator关键字来修饰，setValue函数接收3个参数：</p>
<ul>
<li><code>thisRef</code>：同<code>getValue()</code></li>
<li><code>property</code>：同<code>getValue()</code></li>
<li><code>new value</code>：提供给当前属性用来赋新值的参数，其类型与当前属性一致或其超类型（子类型）</li>
</ul>
<p>通过字节码将其转为Java代码，查看属性委托其原理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ProxyExample</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Delegate</span> <span class="variable">example$delegate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Delegate</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getExample</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.example$delegate.getValue(<span class="built_in">this</span>, $$delegatedProperties[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setExample</span><span class="params">(<span class="meta">@NotNull</span> String var1)</span> &#123;</span><br><span class="line">        Intrinsics.checkParameterIsNotNull(var1, <span class="string">&quot;&lt;set-?&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.example$delegate.setValue(<span class="built_in">this</span>, $$delegatedProperties[<span class="number">0</span>], var1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 委托类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Delegate</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getValue</span><span class="params">(<span class="meta">@Nullable</span> Object thisRef, <span class="meta">@NotNull</span> KProperty property)</span> &#123;</span><br><span class="line">        Intrinsics.checkParameterIsNotNull(property, <span class="string">&quot;property&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> thisRef + <span class="string">&quot;,代理读取 &quot;</span> + property.getName() + <span class="string">&quot; 的值&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(<span class="meta">@Nullable</span> Object thisRef, <span class="meta">@NotNull</span> KProperty property, <span class="meta">@NotNull</span> String value)</span> &#123;</span><br><span class="line">       Intrinsics.checkParameterIsNotNull(property, <span class="string">&quot;property&quot;</span>);</span><br><span class="line">       Intrinsics.checkParameterIsNotNull(value, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">var4</span> <span class="operator">=</span> thisRef + <span class="string">&quot;,代理写入 &quot;</span> + property.getName() + <span class="string">&quot; 的值为：&quot;</span> + value;</span><br><span class="line">       System.out.print(var4);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProxyExample</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyExample</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">var1</span> <span class="operator">=</span> proxy.getExample();</span><br><span class="line">    System.out.println(var1);</span><br><span class="line">    proxy.setExample(<span class="string">&quot;Name&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="标准委托"><a href="#标准委托" class="headerlink" title="标准委托"></a>标准委托</h3><p>在kotlin标准库中也内置了很多工厂方法实现属性的委托。</p>
<h4 id="延迟加载–Lazy-函数"><a href="#延迟加载–Lazy-函数" class="headerlink" title="延迟加载–Lazy()函数"></a>延迟加载–Lazy()函数</h4><p>延迟加载lazy()函数的用法，具体如下代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleByLazy</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> example  <span class="keyword">by</span> lazy&#123;</span><br><span class="line">        println(<span class="string">&quot;lazy action&quot;</span>)</span><br><span class="line">        <span class="string">&quot;lazy&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>val example  by lazy</code>中<code>lazy</code>是标准库中的一个函数，该函数传入的参数是一个<code>lambda</code>表达式，其返回值是<code>lazy&lt;T&gt;</code>，即属性<code>example</code>实际上是委托给了<code>lazy&lt;T&gt;</code>类</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">actual</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">lazy</span><span class="params">(initializer: () -&gt; <span class="type">T</span>)</span></span>: Lazy&lt;T&gt; = SynchronizedLazyImpl(initializer)</span><br></pre></td></tr></table></figure>

<p><code>lazy</code>函数返回的是<code>lazy&lt;T&gt;</code>泛型类，但是实际上返回的是<code>SynchronizedLazyImpl&lt;out T&gt;</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedLazyImpl</span>&lt;<span class="type">out T</span>&gt;</span>(initializer: () -&gt; T, lock: Any? = <span class="literal">null</span>) : Lazy&lt;T&gt;, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> initializer: (() -&gt; T)? = initializer</span><br><span class="line">    <span class="meta">@Volatile</span> <span class="keyword">private</span> <span class="keyword">var</span> _value: Any? = UNINITIALIZED_VALUE</span><br><span class="line">    <span class="comment">// final field is required to enable safe publication of constructed instance</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> lock = lock ?: <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> value: T</span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">val</span> _v1 = _value</span><br><span class="line">            <span class="keyword">if</span> (_v1 !== UNINITIALIZED_VALUE) &#123;</span><br><span class="line">                <span class="meta">@Suppress(<span class="string">&quot;UNCHECKED_CAST&quot;</span>)</span></span><br><span class="line">                <span class="keyword">return</span> _v1 <span class="keyword">as</span> T</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> synchronized(lock) &#123;</span><br><span class="line">                <span class="keyword">val</span> _v2 = _value</span><br><span class="line">                <span class="keyword">if</span> (_v2 !== UNINITIALIZED_VALUE) &#123;</span><br><span class="line">                    <span class="meta">@Suppress(<span class="string">&quot;UNCHECKED_CAST&quot;</span>)</span> (_v2 <span class="keyword">as</span> T)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">val</span> typedValue = initializer!!()</span><br><span class="line">                    _value = typedValue</span><br><span class="line">                    initializer = <span class="literal">null</span></span><br><span class="line">                    typedValue</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@kotlin</span>.<span class="keyword">internal</span>.InlineOnly</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Lazy<span class="type">&lt;T&gt;</span>.<span class="title">getValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: T = value</span><br></pre></td></tr></table></figure>

<p>泛型类<code>lazy&lt;T&gt;</code>实现了一个<code>getValue</code> 的扩展方法，这是被委托类必须要实现的一个方法，<code>getValue</code>函数返回的是<code>lazy&lt;T&gt;</code>中的<code>value</code>属性值，<code>SynchronizedLazyImpl&lt;out T&gt;</code>是<code>lazy&lt;T&gt;</code>的具体实现类，因此实际返回的是<code>SynchronizedLazyImpl&lt;out T&gt;</code>中的<code>value</code>属性值，<code>value</code>属性值最终返回的就是<code>lambda</code>表达式返回的值</p>
<p><strong>注意：</strong></p>
<ul>
<li><strong>泛型类<code>lazy&lt;T&gt;</code>并没有实现<code>setValue</code>的扩展函数，所以委托给<code>lazy&lt;T&gt;</code>的属性只能够使用<code>val</code>来声明而不能够使用<code>var</code>声明</strong></li>
<li><strong><code>lazy</code>函数是懒加载函数，只有第一次调用时能够完整执行<code>lambda</code>函数，之后调用都只是返回值</strong></li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleByLazy</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> example  <span class="keyword">by</span> lazy&#123;</span><br><span class="line">        println(<span class="string">&quot;lazy action&quot;</span>) <span class="comment">// 只有第一次调用时执行</span></span><br><span class="line">        <span class="string">&quot;lazy&quot;</span> <span class="comment">// 每次调用都会返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> exampleByLazy = ExampleByLazy();</span><br><span class="line">    println(exampleByLazy.example); <span class="comment">// 第一次调用</span></span><br><span class="line">    println(exampleByLazy.example) <span class="comment">// 第二次调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">****************运行结果*****************************************</span><br><span class="line">lazy action</span><br><span class="line">lazy</span><br><span class="line">lazy</span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>



<h3 id="可观察属性Observable"><a href="#可观察属性Observable" class="headerlink" title="可观察属性Observable"></a>可观察属性Observable</h3><p>顾名思义，Dalegates.obserable()就是可观察的属性，可以对属性变化进行观察和处理，Delegates.observable传入两个参数：</p>
<ul>
<li>initialValue：提供该属性的初始值</li>
<li>onChange：提供一个含有三个参数的lambda表达式，用于观察属性变化后对属性变化的额外处理，三个参数分别是<code>property: KProperty&lt;*&gt;, oldValue: T, newValue: T</code>，分别代表被赋值的属性，旧值，新值</li>
</ul>
<p>Delegates.observable使用：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Delegates.observable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleObservable</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value <span class="keyword">by</span> Delegates.observable(<span class="string">&quot;initValue&quot;</span>)&#123;</span><br><span class="line">        prop,oldValue,newValue -&gt;</span><br><span class="line">        println(<span class="string">&quot;被赋值的属性:<span class="variable">$prop</span>,旧值:<span class="variable">$oldValue</span>,新值:<span class="variable">$newValue</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// Delegates.observable</span></span><br><span class="line">    <span class="keyword">val</span> observable = ExampleObservable()</span><br><span class="line">    observable.value = <span class="string">&quot;nice&quot;</span></span><br><span class="line">    observable.value = <span class="string">&quot;second&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">*********************************************************</span><br><span class="line">运行结果：</span><br><span class="line">被赋值的属性:<span class="keyword">var</span> chapter7.yangn.five.ExampleObservable.value: kotlin.String,旧值:initValue,新值:nice</span><br><span class="line">被赋值的属性:<span class="keyword">var</span> chapter7.yangn.five.ExampleObservable.value: kotlin.String,旧值:nice,新值:second</span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>跟踪Delegates.observable代码实现，理解其具体实现过程：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">observable</span><span class="params">(initialValue: <span class="type">T</span>, <span class="keyword">crossinline</span> onChange: (<span class="type">property</span>: <span class="type">KProperty</span>&lt;*&gt;, <span class="type">oldValue</span>: <span class="type">T</span>, <span class="type">newValue</span>: <span class="type">T</span>) -&gt; <span class="type">Unit</span>)</span></span>:</span><br><span class="line">            ReadWriteProperty&lt;Any?, T&gt; =</span><br><span class="line">        <span class="keyword">object</span> : ObservableProperty&lt;T&gt;(initialValue) &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">afterChange</span><span class="params">(property: <span class="type">KProperty</span>&lt;*&gt;, oldValue: <span class="type">T</span>, newValue: <span class="type">T</span>)</span></span> = onChange(property, oldValue, newValue)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableProperty</span>&lt;<span class="type">T</span>&gt;</span>(initialValue: T) : ReadWriteProperty&lt;Any?, T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> value = initialValue</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;, value: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> oldValue = <span class="keyword">this</span>.value</span><br><span class="line">        <span class="keyword">if</span> (!beforeChange(property, oldValue, value)) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.value = value</span><br><span class="line">        afterChange(property, oldValue, value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>observable</code>是单例类<code>Delegates中</code>的一个方法，<code>observable</code>方法返回了类<code>ObservableProperty</code>，<code>ObservableProperty</code>是一个抽象类，所以需要覆写<code>afterChange</code>函数，<code>afterChange</code>函数实际上就是传递进来的<code>onChange</code>lambda表达式，因而demo中<code>ExampleObservable</code>中<code>value</code>属性实际上是被委托给了<code>ObservableProperty</code>类，这样整个实现就一目了然了</p>
<h4 id="集合map"><a href="#集合map" class="headerlink" title="集合map"></a>集合map</h4><p>kotlin为<code>Map</code>实现了<code>getValue</code>扩展函数，所以<code>Map</code>可以作为属性委托类，使用如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleMap</span></span>(<span class="keyword">val</span> map: Map&lt;String,Any?&gt;)&#123;</span><br><span class="line">    <span class="keyword">val</span> name <span class="keyword">by</span> map</span><br><span class="line">    <span class="keyword">val</span> age <span class="keyword">by</span> map</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// map</span></span><br><span class="line">    <span class="keyword">val</span> exampleMap = ExampleMap(mapOf(<span class="string">&quot;name&quot;</span> to <span class="string">&quot;kotlin&quot;</span>,<span class="string">&quot;age&quot;</span> to <span class="number">3</span>))</span><br><span class="line">    println(exampleMap.name)</span><br><span class="line">    println(exampleMap.age)</span><br><span class="line">&#125;</span><br><span class="line">***********************************************************</span><br><span class="line">运行结果：</span><br><span class="line">kotlin</span><br><span class="line"><span class="number">3</span></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h4 id="Delegates-NotNull"><a href="#Delegates-NotNull" class="headerlink" title="Delegates.NotNull"></a>Delegates.NotNull</h4><p>与Delegates.observable用法类似，不过Delegates,NotNull适用于那些无法在初始化阶段就确定属性值的场合。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleNotNull</span></span>()&#123;</span><br><span class="line">    <span class="keyword">var</span> notNullValue <span class="keyword">by</span> Delegates.notNull&lt;String&gt;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// not null</span></span><br><span class="line">    <span class="keyword">val</span> exampleNotNull = ExampleNotNull()</span><br><span class="line">    exampleNotNull.notNullValue = <span class="string">&quot;initValue&quot;</span></span><br><span class="line">    println(exampleNotNull.notNullValue)</span><br><span class="line">&#125;</span><br><span class="line">************************************************************</span><br><span class="line">运行结果：</span><br><span class="line">initValue</span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：使用Delegates.NotNull如果属性在赋值前访问会抛出异常</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.lang.IllegalStateException: Property notNullValue should be initialized before <span class="keyword">get</span>.</span><br><span class="line">	at kotlin.properties.NotNullVar.getValue(Delegates.kt:<span class="number">62</span>)</span><br><span class="line">	at chapter7.yangn.five.ExampleNotNull.getNotNullValue(Second.kt)</span><br><span class="line">	at chapter7.yangn.five.SecondKt.main(Second.kt:<span class="number">51</span>)</span><br><span class="line">	at chapter7.yangn.five.SecondKt.main(Second.kt)</span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Ascii码表</title>
    <url>/posts/33380407/</url>
    <content><![CDATA[<h1 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h1><h2 id="控制字符（功能码）"><a href="#控制字符（功能码）" class="headerlink" title="控制字符（功能码）"></a>控制字符（功能码）</h2><table>
<thead>
<tr>
<th>二进制</th>
<th>十进制</th>
<th>十六进制</th>
<th>字符&#x2F;缩写</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>00000000</td>
<td>0</td>
<td>00</td>
<td>NUL (NULL)</td>
<td>空字符</td>
</tr>
<tr>
<td>00000001</td>
<td>1</td>
<td>01</td>
<td>SOH (Start Of Headling)</td>
<td>标题开始</td>
</tr>
<tr>
<td>00000010</td>
<td>2</td>
<td>02</td>
<td>STX (Start Of Text)</td>
<td>正文开始</td>
</tr>
<tr>
<td>00000011</td>
<td>3</td>
<td>03</td>
<td>ETX (End Of Text)</td>
<td>正文结束</td>
</tr>
<tr>
<td>00000100</td>
<td>4</td>
<td>04</td>
<td>EOT (End Of Transmission)</td>
<td>传输结束</td>
</tr>
<tr>
<td>00000101</td>
<td>5</td>
<td>05</td>
<td>ENQ (Enquiry)</td>
<td>请求</td>
</tr>
<tr>
<td>00000110</td>
<td>6</td>
<td>06</td>
<td>ACK (Acknowledge)</td>
<td>回应&#x2F;响应&#x2F;收到通知</td>
</tr>
<tr>
<td>00000111</td>
<td>7</td>
<td>07</td>
<td>BEL (Bell)</td>
<td>响铃</td>
</tr>
<tr>
<td>00001000</td>
<td>8</td>
<td>08</td>
<td>BS (Backspace)</td>
<td>退格</td>
</tr>
<tr>
<td>00001001</td>
<td>9</td>
<td>09</td>
<td>HT (Horizontal Tab)</td>
<td>水平制表符</td>
</tr>
<tr>
<td>00001010</td>
<td>10</td>
<td>0A</td>
<td>LF&#x2F;NL(Line Feed&#x2F;New Line)</td>
<td>换行键</td>
</tr>
<tr>
<td>00001011</td>
<td>11</td>
<td>0B</td>
<td>VT (Vertical Tab)</td>
<td>垂直制表符</td>
</tr>
<tr>
<td>00001100</td>
<td>12</td>
<td>0C</td>
<td>FF&#x2F;NP (Form Feed&#x2F;New Page)</td>
<td>换页键</td>
</tr>
<tr>
<td>00001101</td>
<td>13</td>
<td>0D</td>
<td>CR (Carriage Return)</td>
<td>回车键</td>
</tr>
<tr>
<td>00001110</td>
<td>14</td>
<td>0E</td>
<td>SO (Shift Out)</td>
<td>不用切换</td>
</tr>
<tr>
<td>00001111</td>
<td>15</td>
<td>0F</td>
<td>SI (Shift In)</td>
<td>启用切换</td>
</tr>
<tr>
<td>00010000</td>
<td>16</td>
<td>10</td>
<td>DLE (Data Link Escape)</td>
<td>数据链路转义</td>
</tr>
<tr>
<td>00010001</td>
<td>17</td>
<td>11</td>
<td>DC1&#x2F;XON (Device Control 1&#x2F;Transmission On)</td>
<td>设备控制1&#x2F;传输开始</td>
</tr>
<tr>
<td>00010010</td>
<td>18</td>
<td>12</td>
<td>DC2 (Device Control 2)</td>
<td>设备控制2</td>
</tr>
<tr>
<td>00010011</td>
<td>19</td>
<td>13</td>
<td>DC3&#x2F;XOFF (Device Control 3&#x2F;Transmission Off)</td>
<td>设备控制3&#x2F;传输中断</td>
</tr>
<tr>
<td>00010100</td>
<td>20</td>
<td>14</td>
<td>DC4 (Device Control 4)</td>
<td>设备控制4</td>
</tr>
<tr>
<td>00010101</td>
<td>21</td>
<td>15</td>
<td>NAK (Negative Acknowledge)</td>
<td>无响应&#x2F;非正常响应&#x2F;拒绝接收</td>
</tr>
<tr>
<td>00010110</td>
<td>22</td>
<td>16</td>
<td>SYN (Synchronous Idle)</td>
<td>同步空闲</td>
</tr>
<tr>
<td>00010111</td>
<td>23</td>
<td>17</td>
<td>ETB (End of Transmission Block)</td>
<td>传输块结束&#x2F;块传输终止</td>
</tr>
<tr>
<td>00011000</td>
<td>24</td>
<td>18</td>
<td>CAN (Cancel)</td>
<td>取消</td>
</tr>
<tr>
<td>00011001</td>
<td>25</td>
<td>19</td>
<td>EM (End of Medium)</td>
<td>已到介质末端&#x2F;介质存储已满&#x2F;介质中断</td>
</tr>
<tr>
<td>00011010</td>
<td>26</td>
<td>1A</td>
<td>SUB (Substitute)</td>
<td>替补&#x2F;替换</td>
</tr>
<tr>
<td>00011011</td>
<td>27</td>
<td>1B</td>
<td>ESC (Escape)</td>
<td>逃离&#x2F;取消</td>
</tr>
<tr>
<td>00011100</td>
<td>28</td>
<td>1C</td>
<td>FS (File Separator)</td>
<td>文件分割符</td>
</tr>
<tr>
<td>00011101</td>
<td>29</td>
<td>1D</td>
<td>GS (Group Separator)</td>
<td>组分隔符&#x2F;分组符</td>
</tr>
<tr>
<td>00011110</td>
<td>30</td>
<td>1E</td>
<td>RS (Record Separator)</td>
<td>记录分离符</td>
</tr>
<tr>
<td>00011111</td>
<td>31</td>
<td>1F</td>
<td>US (Unit Separator)</td>
<td>单元分隔符</td>
</tr>
<tr>
<td>01111111</td>
<td>127</td>
<td>7F</td>
<td>DEL (Delete)</td>
<td>删除</td>
</tr>
</tbody></table>
<h2 id="可显示字符"><a href="#可显示字符" class="headerlink" title="可显示字符"></a>可显示字符</h2><table>
<thead>
<tr>
<th>二进制</th>
<th>十进制</th>
<th>十六进制</th>
<th>字符&#x2F;缩写</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>00100000</td>
<td>32</td>
<td>20</td>
<td>(Space)</td>
<td>空格</td>
</tr>
<tr>
<td>00100001</td>
<td>33</td>
<td>21</td>
<td>!</td>
<td></td>
</tr>
<tr>
<td>00100010</td>
<td>34</td>
<td>22</td>
<td>“</td>
<td></td>
</tr>
<tr>
<td>00100011</td>
<td>35</td>
<td>23</td>
<td>#</td>
<td></td>
</tr>
<tr>
<td>00100100</td>
<td>36</td>
<td>24</td>
<td>$</td>
<td></td>
</tr>
<tr>
<td>00100101</td>
<td>37</td>
<td>25</td>
<td>%</td>
<td></td>
</tr>
<tr>
<td>00100110</td>
<td>38</td>
<td>26</td>
<td>&amp;</td>
<td></td>
</tr>
<tr>
<td>00100111</td>
<td>39</td>
<td>27</td>
<td>‘</td>
<td></td>
</tr>
<tr>
<td>00101000</td>
<td>40</td>
<td>28</td>
<td>(</td>
<td></td>
</tr>
<tr>
<td>00101001</td>
<td>41</td>
<td>29</td>
<td>)</td>
<td></td>
</tr>
<tr>
<td>00101010</td>
<td>42</td>
<td>2A</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>00101011</td>
<td>43</td>
<td>2B</td>
<td>+</td>
<td></td>
</tr>
<tr>
<td>00101100</td>
<td>44</td>
<td>2C</td>
<td>,</td>
<td></td>
</tr>
<tr>
<td>00101101</td>
<td>45</td>
<td>2D</td>
<td>-</td>
<td></td>
</tr>
<tr>
<td>00101110</td>
<td>46</td>
<td>2E</td>
<td>.</td>
<td></td>
</tr>
<tr>
<td>00101111</td>
<td>47</td>
<td>2F</td>
<td>&#x2F;</td>
<td></td>
</tr>
<tr>
<td>00110000</td>
<td>48</td>
<td>30</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>00110001</td>
<td>49</td>
<td>31</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>00110010</td>
<td>50</td>
<td>32</td>
<td>2</td>
<td></td>
</tr>
<tr>
<td>00110011</td>
<td>51</td>
<td>33</td>
<td>3</td>
<td></td>
</tr>
<tr>
<td>00110100</td>
<td>52</td>
<td>34</td>
<td>4</td>
<td></td>
</tr>
<tr>
<td>00110101</td>
<td>53</td>
<td>35</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>00110110</td>
<td>54</td>
<td>36</td>
<td>6</td>
<td></td>
</tr>
<tr>
<td>00110111</td>
<td>55</td>
<td>37</td>
<td>7</td>
<td></td>
</tr>
<tr>
<td>00111000</td>
<td>56</td>
<td>38</td>
<td>8</td>
<td></td>
</tr>
<tr>
<td>00111001</td>
<td>57</td>
<td>39</td>
<td>9</td>
<td></td>
</tr>
<tr>
<td>00111010</td>
<td>58</td>
<td>3A</td>
<td>:</td>
<td></td>
</tr>
<tr>
<td>00111011</td>
<td>59</td>
<td>3B</td>
<td>;</td>
<td></td>
</tr>
<tr>
<td>00111100</td>
<td>60</td>
<td>3C</td>
<td>&lt;</td>
<td></td>
</tr>
<tr>
<td>00111101</td>
<td>61</td>
<td>3D</td>
<td>&#x3D;</td>
<td></td>
</tr>
<tr>
<td>00111110</td>
<td>62</td>
<td>3E</td>
<td>&gt;</td>
<td></td>
</tr>
<tr>
<td>00111111</td>
<td>63</td>
<td>3F</td>
<td>?</td>
<td></td>
</tr>
<tr>
<td>01000000</td>
<td>64</td>
<td>40</td>
<td>@</td>
<td></td>
</tr>
<tr>
<td>01000001</td>
<td>65</td>
<td>41</td>
<td>A</td>
<td></td>
</tr>
<tr>
<td>01000010</td>
<td>66</td>
<td>42</td>
<td>B</td>
<td></td>
</tr>
<tr>
<td>01000011</td>
<td>67</td>
<td>43</td>
<td>C</td>
<td></td>
</tr>
<tr>
<td>01000100</td>
<td>68</td>
<td>44</td>
<td>D</td>
<td></td>
</tr>
<tr>
<td>01000101</td>
<td>69</td>
<td>45</td>
<td>E</td>
<td></td>
</tr>
<tr>
<td>01000110</td>
<td>70</td>
<td>46</td>
<td>F</td>
<td></td>
</tr>
<tr>
<td>01000111</td>
<td>71</td>
<td>47</td>
<td>G</td>
<td></td>
</tr>
<tr>
<td>01001000</td>
<td>72</td>
<td>48</td>
<td>H</td>
<td></td>
</tr>
<tr>
<td>01001001</td>
<td>73</td>
<td>49</td>
<td>I</td>
<td></td>
</tr>
<tr>
<td>01001010</td>
<td>74</td>
<td>4A</td>
<td>J</td>
<td></td>
</tr>
<tr>
<td>01001011</td>
<td>75</td>
<td>4B</td>
<td>K</td>
<td></td>
</tr>
<tr>
<td>01001100</td>
<td>76</td>
<td>4C</td>
<td>L</td>
<td></td>
</tr>
<tr>
<td>01001101</td>
<td>77</td>
<td>4D</td>
<td>M</td>
<td></td>
</tr>
<tr>
<td>01001110</td>
<td>78</td>
<td>4E</td>
<td>N</td>
<td></td>
</tr>
<tr>
<td>01001111</td>
<td>79</td>
<td>4F</td>
<td>O</td>
<td></td>
</tr>
<tr>
<td>01010000</td>
<td>80</td>
<td>50</td>
<td>P</td>
<td></td>
</tr>
<tr>
<td>01010001</td>
<td>81</td>
<td>51</td>
<td>Q</td>
<td></td>
</tr>
<tr>
<td>01010010</td>
<td>82</td>
<td>52</td>
<td>R</td>
<td></td>
</tr>
<tr>
<td>01010011</td>
<td>83</td>
<td>53</td>
<td>S</td>
<td></td>
</tr>
<tr>
<td>01010100</td>
<td>84</td>
<td>54</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>01010101</td>
<td>85</td>
<td>55</td>
<td>U</td>
<td></td>
</tr>
<tr>
<td>01010110</td>
<td>86</td>
<td>56</td>
<td>V</td>
<td></td>
</tr>
<tr>
<td>01010111</td>
<td>87</td>
<td>57</td>
<td>W</td>
<td></td>
</tr>
<tr>
<td>01011000</td>
<td>88</td>
<td>58</td>
<td>X</td>
<td></td>
</tr>
<tr>
<td>01011001</td>
<td>89</td>
<td>59</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>01011010</td>
<td>90</td>
<td>5A</td>
<td>Z</td>
<td></td>
</tr>
<tr>
<td>01011011</td>
<td>91</td>
<td>5B</td>
<td>[</td>
<td></td>
</tr>
<tr>
<td>01011100</td>
<td>92</td>
<td>5C</td>
<td>\</td>
<td></td>
</tr>
<tr>
<td>01011101</td>
<td>93</td>
<td>5D</td>
<td>]</td>
<td></td>
</tr>
<tr>
<td>01011110</td>
<td>94</td>
<td>5E</td>
<td>^</td>
<td></td>
</tr>
<tr>
<td>01011111</td>
<td>95</td>
<td>5F</td>
<td>_</td>
<td></td>
</tr>
<tr>
<td>01100000</td>
<td>96</td>
<td>60</td>
<td>&#96;</td>
<td></td>
</tr>
<tr>
<td>01100001</td>
<td>97</td>
<td>61</td>
<td>a</td>
<td></td>
</tr>
<tr>
<td>01100010</td>
<td>98</td>
<td>62</td>
<td>b</td>
<td></td>
</tr>
<tr>
<td>01100011</td>
<td>99</td>
<td>63</td>
<td>c</td>
<td></td>
</tr>
<tr>
<td>01100100</td>
<td>100</td>
<td>64</td>
<td>d</td>
<td></td>
</tr>
<tr>
<td>01100101</td>
<td>101</td>
<td>65</td>
<td>e</td>
<td></td>
</tr>
<tr>
<td>01100110</td>
<td>102</td>
<td>66</td>
<td>f</td>
<td></td>
</tr>
<tr>
<td>01100111</td>
<td>103</td>
<td>67</td>
<td>g</td>
<td></td>
</tr>
<tr>
<td>01101000</td>
<td>104</td>
<td>68</td>
<td>h</td>
<td></td>
</tr>
<tr>
<td>01101001</td>
<td>105</td>
<td>69</td>
<td>i</td>
<td></td>
</tr>
<tr>
<td>01101010</td>
<td>106</td>
<td>6A</td>
<td>j</td>
<td></td>
</tr>
<tr>
<td>01101011</td>
<td>107</td>
<td>6B</td>
<td>k</td>
<td></td>
</tr>
<tr>
<td>01101100</td>
<td>108</td>
<td>6C</td>
<td>l</td>
<td></td>
</tr>
<tr>
<td>01101101</td>
<td>109</td>
<td>6D</td>
<td>m</td>
<td></td>
</tr>
<tr>
<td>01101110</td>
<td>110</td>
<td>6E</td>
<td>n</td>
<td></td>
</tr>
<tr>
<td>01101111</td>
<td>111</td>
<td>6F</td>
<td>o</td>
<td></td>
</tr>
<tr>
<td>01110000</td>
<td>112</td>
<td>70</td>
<td>p</td>
<td></td>
</tr>
<tr>
<td>01110001</td>
<td>113</td>
<td>71</td>
<td>q</td>
<td></td>
</tr>
<tr>
<td>01110010</td>
<td>114</td>
<td>72</td>
<td>r</td>
<td></td>
</tr>
<tr>
<td>01110011</td>
<td>115</td>
<td>73</td>
<td>s</td>
<td></td>
</tr>
<tr>
<td>01110100</td>
<td>116</td>
<td>74</td>
<td>t</td>
<td></td>
</tr>
<tr>
<td>01110101</td>
<td>117</td>
<td>75</td>
<td>u</td>
<td></td>
</tr>
<tr>
<td>01110110</td>
<td>118</td>
<td>76</td>
<td>v</td>
<td></td>
</tr>
<tr>
<td>01110111</td>
<td>119</td>
<td>77</td>
<td>w</td>
<td></td>
</tr>
<tr>
<td>01111000</td>
<td>120</td>
<td>78</td>
<td>x</td>
<td></td>
</tr>
<tr>
<td>01111001</td>
<td>121</td>
<td>79</td>
<td>y</td>
<td></td>
</tr>
<tr>
<td>01111010</td>
<td>122</td>
<td>7A</td>
<td>z</td>
<td></td>
</tr>
<tr>
<td>01111011</td>
<td>123</td>
<td>7B</td>
<td>{</td>
<td></td>
</tr>
<tr>
<td>01111100</td>
<td>124</td>
<td>7C</td>
<td>|</td>
<td></td>
</tr>
<tr>
<td>01111101</td>
<td>125</td>
<td>7D</td>
<td>}</td>
<td></td>
</tr>
<tr>
<td>01111110</td>
<td>126</td>
<td>7E</td>
<td>~</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>其他IT</category>
      </categories>
      <tags>
        <tag>其他IT知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-HashMap</title>
    <url>/posts/1122652386/</url>
    <content><![CDATA[<h1 id="HashMap（jdk1-8）"><a href="#HashMap（jdk1-8）" class="headerlink" title="HashMap（jdk1.8）"></a>HashMap（jdk1.8）</h1><p>![Java7 HashMap结构](.&#x2F;Java-HashMap&#x2F;Java7 HashMap结构.png)</p>
<h2 id="HashMap的工作原理"><a href="#HashMap的工作原理" class="headerlink" title="HashMap的工作原理"></a>HashMap的工作原理</h2><p>HashMap基于hashing原理，我们通过put()和get()方法储存和获取对象。当我们将键值对传递给put()方法时，它调用键对象的hashCode()方法来计算hashcode，让后找到bucket位置来储存Entry对象。当两个对象的hashcode相同时，它们的bucket位置相同，‘碰撞’会发生。因为HashMap使用链表存储对象，这个Entry会存储在链表中，当获取对象时，通过键对象的equals()方法找到正确的键值对，然后返回值对象。</p>
<p><strong>如果HashMap的大小超过了负载因子(load factor)定义的容量，怎么办？</strong><br>默认的负载因子大小为0.75，也就是说，当一个map填满了75%的bucket时候，和其它集合类(如ArrayList等)一样，将会创建原来HashMap大小的两倍的bucket数组，来重新调整map的大小，并将原来的对象放入新的bucket数组中。这个过程叫作rehashing，因为它调用hash方法找到新的bucket位置。</p>
<p><strong>为什么String, Interger这样的wrapper类适合作为键?</strong><br>因为String是不可变的，也是final的，而且已经重写了equals()和hashCode()方法了。其他的wrapper类也有这个特点。不可变性是必要的，因为为了要计算hashCode()，就要防止键值改变，如果键值在放入时和获取时返回不同的hashcode的话，那么就不能从HashMap中找到你想要的对象。不可变性还有其他的优点如线程安全。如果你可以仅仅通过将某个field声明成final就能保证hashCode是不变的，那么请这么做吧。因为获取对象的时候要用到equals()和hashCode()方法，那么键对象正确的重写这两个方法是非常重要的。如果两个不相等的对象返回不同的hashcode的话，那么碰撞的几率就会小些，这样就能提高HashMap的性能。</p>
<p><a href="https://www.toutiao.com/i6943799935875777028/?tt_from=weixin&amp;utm_campaign=client_share&amp;wxshare_count=1&amp;timestamp=1622645658&amp;app=news_article&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;use_new_style=1&amp;req_id=202106022254180102120451032912A0BF&amp;share_token=6da718f5-1008-4f4e-8368-dc6e0a9dc649&amp;group_id=6943799935875777028&amp;wid=1622681903842">https://www.toutiao.com/i6943799935875777028/?tt_from=weixin&amp;utm_campaign=client_share&amp;wxshare_count=1&amp;timestamp=1622645658&amp;app=news_article&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;use_new_style=1&amp;req_id=202106022254180102120451032912A0BF&amp;share_token=6da718f5-1008-4f4e-8368-dc6e0a9dc649&amp;group_id=6943799935875777028&amp;wid=1622681903842</a></p>
<h2 id="自动扩容"><a href="#自动扩容" class="headerlink" title="自动扩容"></a>自动扩容</h2><blockquote>
<p>最小可用原则，容量超过一定阈值便自动进行扩容。</p>
</blockquote>
<p>调用<code>resize()</code>来进行扩容。扩容是发生在<code>putVal()</code>后，即写入元素后才判断大小是否超过阈值<code>threshold</code>，如果超过则进行扩容（扩容1倍，通过<code>&lt;&lt;1</code>来实现）</p>
<p>![Java Map 中那些巧妙的设计](.&#x2F;Java-HashMap&#x2F;Java Map 中那些巧妙的设计.png)</p>
<p>扩容1倍，通过<code>&lt;&lt;1</code>来实现，同时新的阈值<code>newThr</code>也扩容为老阈值的1倍</p>
<p>![Java Map 中那些巧妙的设计](.&#x2F;Java-HashMap&#x2F;Java Map 中那些巧妙的设计2.png)</p>
<p>扩容时，总共存在三种情况：</p>
<ul>
<li>哈希桶数组中某个位置只有1个元素，即不存在哈希冲突时，则直接将该元素copy至新哈希桶数组的对应位置即可。</li>
<li>哈希桶数组中某个位置的节点为树节点时，则执行红黑树的扩容操作。</li>
<li>哈希桶数组中某个位置的节点为普通节点时，则执行链表扩容操作，在JDK1.8中，为了避免之前版本中并发扩容所导致的死链问题，引入了高低位链表辅助进行扩容操作。</li>
</ul>
<p>![Java Map 中那些巧妙的设计](.&#x2F;Java-HashMap&#x2F;Java Map 中那些巧妙的设计3.png)</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-泛型</title>
    <url>/posts/2540559974/</url>
    <content><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="什么是java泛型？"><a href="#什么是java泛型？" class="headerlink" title="什么是java泛型？"></a>什么是java泛型？</h2><p><strong>本质：参数化类型</strong><br> 即所操作的数据类型被指定为一个参数。<br> 分泛型类、泛型接口、泛型方法</p>
<h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h2><p><strong>Java 泛型基本上都是在编译器这个层次来实现的。</strong></p>
<p>在生成 Java 字节代码中（source–&gt;bytecode 过程：编译过程）是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数会被编译器在编译的时候去掉，这就是类型擦除。（但会保证类或方法内部参数类型的一致性。即类名旁边带的 E，其内部方法使用到的 E，类型是一致的）</p>
<p>如 <code>List&lt;Object&gt;</code>和 <code>List&lt;String&gt;</code>等类型，在编译之后都会变成 <code>List</code>（泛型类对象的读取（类型转换）和写入（类型检查）的位置，编译器会自动帮我们添加约束）</p>
<p>缺陷：泛型类型不能显式地运用在运行时类型的操作当中，例如**<code>转型</code>、<code>instanceof</code> 和 <code>new</code>**。（运行时，所有参数的类型信息都丢失了）</p>
<h2 id="擦除的补偿"><a href="#擦除的补偿" class="headerlink" title="擦除的补偿"></a>擦除的补偿</h2><ol>
<li>类型判断问题</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">House</span> <span class="keyword">extends</span> <span class="title class_">Building</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类型判断器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassTypeCapture</span>&#123;</span><br><span class="line">  Class kind;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ClassTypeCapture</span><span class="params">(Class kind)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.kind = kind;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">f</span><span class="params">(Object arg)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> kind.isInstance(arg);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">ClassTypeCapture</span> <span class="variable">ctt1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassTypeCapture</span>(Building.class);</span><br><span class="line">    System.out.println(ctt1.f(<span class="keyword">new</span> <span class="title class_">Building</span>()));</span><br><span class="line">    System.out.println(ctt1.f(<span class="keyword">new</span> <span class="title class_">House</span>()));</span><br><span class="line">    </span><br><span class="line">    <span class="type">ClassTypeCapture</span> <span class="variable">ctt2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassTypeCapture</span>(House.class);</span><br><span class="line">    System.out.println(ctt2.f(<span class="keyword">new</span> <span class="title class_">Building</span>()));</span><br><span class="line">    System.out.println(ctt2.f(<span class="keyword">new</span> <span class="title class_">House</span>()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="comment">//false</span></span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建类的实例</li>
</ol>
<p>不能 &#96;&#96;new T()&#96;原因，不能确定类型，不能确定T 是否包含无参构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用显式地工厂模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IFactory</span>&#123;</span><br><span class="line">  T <span class="title function_">create</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo2</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> T x;</span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; Foo2(F factory)&#123;</span><br><span class="line">    x = factory.create();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntegerFactory</span> <span class="keyword">implements</span> <span class="title class_">IFactory</span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Integer <span class="title function_">create</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Factory</span> <span class="keyword">implements</span> <span class="title class_">IFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Widget <span class="title function_">create</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Widget</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryConstraint</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Foo2</span>(<span class="keyword">new</span> <span class="title class_">IntegerFactory</span>());</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Foo2</span>(<span class="keyword">new</span> <span class="title class_">Widget</span>.Factory());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="为什么需要泛型？"><a href="#为什么需要泛型？" class="headerlink" title="为什么需要泛型？"></a>为什么需要泛型？</h2><p><strong>安全简单。可将运行时错误提前到编译时错误。</strong><br> 泛型之前是用Object的引用来实现参数的“任意化”，这种如果强制转化错误只能在运行时发现。</p>
<p>设计泛型的关键目的是在成员之间<strong>提供有意义的约束</strong>，这些成员可以是：类的实例成员、类的方法、函数参数和函数返回值。</p>
<h2 id="通配符和上下界"><a href="#通配符和上下界" class="headerlink" title="通配符和上下界"></a>通配符和上下界</h2><p>通配符 <code>?</code>（只能用在方法上，不能定义在类上会报错）</p>
<p>上界 <code>? extends T</code>（生产者Producer）只能读，不能写（除了null）;可以接收T及其所有子类类型的数据，这里T可以是类也可以是接口</p>
<p>下界 <code>? super T</code>（消费者Consumer）只能写，不能读；可以接收T及其所有超类类型的数据。</p>
<p>类型擦除将会擦除到它的第一个边界（边界可以有多个）。编译器事实上会把类型参数替换为它的第一个边界的类型。如果没有指明边界，类型将被擦除到 <code>object</code>。</p>
<blockquote>
<p>PECS：Producer extends Consumer super</p>
</blockquote>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">    List&lt;Number&gt; nums = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; integers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//Integer是Number的子类，但是List&lt;Integer&gt;并不是List&lt;Number&gt;的子类，故不能直接赋值</span></span><br><span class="line">    <span class="comment">//nums = integers; //此处编译器会报错</span></span><br><span class="line">    <span class="comment">//但是通过通配符？List&lt;? extends Number&gt;就可以赋值了</span></span><br><span class="line">    List&lt;? <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//? extends Number定义上界为Number，所以变量numbers可以接受Number和Number的所有子类赋值</span></span><br><span class="line">    numbers = integers;</span><br><span class="line">    List&lt;Float&gt; floats = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    numbers = floats;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//在集合中使用泛型通配符，要记得PECS规则，生产者只能读取，不能写入（除了null）</span></span><br><span class="line">    numbers.add(<span class="literal">null</span>); <span class="comment">//编译器不会报错</span></span><br><span class="line">    numbers.add(<span class="number">999</span>); <span class="comment">//编译器会报错</span></span><br><span class="line">    <span class="comment">//上界通配符无法写入，但是可以正常读取</span></span><br><span class="line">    <span class="type">Number</span> <span class="variable">num</span> <span class="operator">=</span> numbers.get(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//如果要获取的类型是Number的子类，则必须使用强制类型转换</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (Integer)numbers.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>null是所有引用类型都有的元素，所以上界（生产者）可以add成功</p>
</blockquote>
<h2 id="引入泛型之后的类型系统增加了两个维度："><a href="#引入泛型之后的类型系统增加了两个维度：" class="headerlink" title="引入泛型之后的类型系统增加了两个维度："></a>引入泛型之后的类型系统增加了两个维度：</h2><ol>
<li><p>类型参数自身的继承体系结构 （如 <code>List&lt;String&gt;</code>和<code>List&lt;Object&gt;</code>）</p>
</li>
<li><p>泛型类或接口自身的继承体系结构（如<code>List</code>接口继承自<code>Collection</code>接口）</p>
</li>
</ol>
<p>**相同类型参数泛型类的关系取决于泛型类自身的继承体系结构 **  （ 即<code>List&lt;String&gt;</code>可以替换<code>Collection&lt;String&gt;</code>（Liskov 替换原则） ）</p>
<p>当泛型类的类型声明中使用了通配符的时候，其子类型可以在两个维度上分别展开。</p>
<p>如对<code>Collection&lt;? extends Number&gt;</code>来说，其子类型可在 <code>Collection</code> 这个维度上展开，即 <code>List&lt;? extends Number&gt;</code> 和 <code>Set&lt;? extends Number&gt;</code>等。也可以在 <code>Number</code>这个维度上展开，即<code>Collection&lt;Double&gt;</code>和 <code>Collection&lt;Integer&gt;</code>等。如此循环下去，<code>ArrayList&lt;Long&gt;</code>和<code>HashSet&lt;Double&gt;</code>等也算是 <code>Collection&lt;? extends Number&gt;</code>的子类型</p>
<h2 id="泛型的命名规范"><a href="#泛型的命名规范" class="headerlink" title="泛型的命名规范"></a>泛型的命名规范</h2><ul>
<li><p>E - Element，常用在 Collection 里，如：<code>List&lt;E&gt;</code>，<code>Iterator&lt;E&gt;</code>，<code>Set&lt;E&gt;</code>等</p>
</li>
<li><p>K,V - Key,Value，代表 Map 的键值对</p>
</li>
<li><p>N - Number，数字 </p>
</li>
<li><p>T - Type，类型</p>
</li>
<li><p>String，Integer 等 - S,U,V etc.</p>
</li>
</ul>
<h2 id="元组（tuple）类库"><a href="#元组（tuple）类库" class="headerlink" title="元组（tuple）类库"></a>元组（tuple）类库</h2><p>同list可用于数据存储，包含多个数据。可同时存储不同类型的数据类型。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TwoTuple</span>&lt;A,B&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> A first;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> B <span class="built_in">second</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TwoTuple</span>(A a, B b)&#123;</span><br><span class="line">        first = a;</span><br><span class="line">        <span class="built_in">second</span> = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="title function_">toString</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + first + <span class="string">&quot;,&quot;</span> + <span class="built_in">second</span> +<span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="协变、逆变、不变"><a href="#协变、逆变、不变" class="headerlink" title="协变、逆变、不变"></a>协变、逆变、不变</h2><p><strong>PECS：<code>Producer-extends</code>、<code>Consumer-super</code></strong></p>
<ol>
<li>对于协变<code>? extends T</code>,只能<code>get()</code>，即作为生产者(Producer)</li>
<li>对于逆变<code>? super T</code>,只能<code>set()</code>，即作为消费者(Consumer)</li>
</ol>
<p>可变性是一种类型安全的方式，将一个对象当做另一个对象来使用。若不能将一个类型替换为另一个类型，那么这个类型称之为：<strong>不变量</strong>。<br> 协变与逆变是相互对立的</p>
<ul>
<li>若某个返回类型可由其派生类替换，则此类型是支持<strong>协变</strong>的。（修饰返回值。把子类指向父类的关系）</li>
<li>若某个参数类型可由其基类替换，则此类型是支持<strong>逆变</strong>的。（修饰传入参数。把父类指向子类的关系）</li>
</ul>
<h2 id="怎么自定义泛型接口、泛型类？"><a href="#怎么自定义泛型接口、泛型类？" class="headerlink" title="怎么自定义泛型接口、泛型类？"></a>怎么自定义泛型接口、泛型类？</h2><p>当声明或者实例化一个泛型的对象时，必须指定类型参数的值：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; <span class="built_in">map</span> = <span class="literal">new</span> HashMap&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;();</span><br></pre></td></tr></table></figure>

<p>数组是协变的<br> <strong>泛型不是协变的</strong><br> 例：<code>List</code>不是<code>List</code>的父类型</p>
<p>泛型若是协变的会违反泛型提供的类型安全。<br> 例：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">List&lt;<span class="type">Integer</span>&gt; intList = <span class="built_in">new</span> ArrayList&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">List&lt;Number&gt; numberList = <span class="built_in">new</span> ArrayList&lt;Number&gt;();//invalid</span><br><span class="line">numberList.<span class="keyword">add</span>(<span class="built_in">new</span> <span class="type">Float</span>(<span class="number">3.14</span>));</span><br><span class="line">上面的代码就会让您把不是<span class="type">Integer</span>的东西放进intList中</span><br></pre></td></tr></table></figure>

<h2 id="怎么定义泛型方法？"><a href="#怎么定义泛型方法？" class="headerlink" title="怎么定义泛型方法？"></a>怎么定义泛型方法？</h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-编程规范</title>
    <url>/posts/3859821522/</url>
    <content><![CDATA[<h1 id="Java编程规范"><a href="#Java编程规范" class="headerlink" title="Java编程规范"></a>Java编程规范</h1><ul>
<li>import中不能有通配符。</li>
<li>重载方法应该放在一起连续出现。</li>
<li>即使代码块中没有内容，或者只有一行代码，也必须使用大括号。</li>
<li>2空格缩进。</li>
<li>列宽是80或100个字符。</li>
<li>不能使用类似C语言的数组变量声明。</li>
<li>switch语句中，必须包含default语句。</li>
<li>修饰符的顺序应按照Java语言规范推荐的顺序。</li>
<li>常量命名应使用CONSTANT_CASE格式（译注：所有字母大写，单词使用下划线分隔）。注意，所有常量都必须是static final成员，但<strong>并不是所有的static final成员都是常量</strong>。<br><a href="https://blog.csdn.net/weixin_30443747/article/details/99585050"><strong>并不是static final 修饰的变量都是编译期常量</strong></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// 情况一  基本数据类型</span></span><br><span class="line">        <span class="comment">//System.out.println(Outer.Inner.n);</span></span><br><span class="line">        <span class="comment">// 输出结果 ： 10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//情况二 </span></span><br><span class="line">        <span class="comment">//Outer outer = Outer.Inner.outer;</span></span><br><span class="line">        <span class="comment">// 输出结果 ： 静态内部类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//情况三</span></span><br><span class="line">        System.out.println(Outer.Inner.str);</span><br><span class="line">        <span class="comment">// 输出结果： 静态内部类  abc</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//情况四</span></span><br><span class="line">        System.out.println(Outer.Inner.str01);</span><br><span class="line">        <span class="comment">// 输出结果： abc</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">str01</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Outer</span> <span class="variable">outer</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;静态内部类&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

String 是一个比较特殊的类(str01: static final 修饰的变量不可变 ， “abc”这个字符串也不可变)</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-基础</title>
    <url>/posts/2037424043/</url>
    <content><![CDATA[<h1 id="Java基础大纲"><a href="#Java基础大纲" class="headerlink" title="Java基础大纲"></a>Java基础大纲</h1><p><img src="/posts/2037424043/%E5%A4%A7%E7%BA%B2-Java%E5%9F%BA%E7%A1%80.png" alt="大纲-Java基础"></p>
<h1 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java-基础"></a>Java-基础</h1><p><a href="https://share.mubu.com/doc/2w2cvfcg5VQ">幕布笔记：Java基础</a></p>
<h2 id="Java特性"><a href="#Java特性" class="headerlink" title="Java特性"></a>Java特性</h2><ul>
<li>简单的</li>
<li>解释的（有解释器也叫<code>java虚拟机</code>）（JVM是内存自动管理）</li>
<li>面向对象的</li>
<li>与平台无关的（跨平台可以运行）</li>
<li>健壮的（强类型的）</li>
<li>多线程的</li>
<li>安全的（内存方面、保护重要文件）</li>
<li>动态的语言</li>
</ul>
<h2 id="内存四大块"><a href="#内存四大块" class="headerlink" title="内存四大块"></a>内存四大块</h2><p>例子：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">arr</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>[] arrs = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><blockquote>
<p>调用一次开辟一个空间</p>
</blockquote>
<p>放10、10、10 。。。</p>
<h3 id="堆栈stack"><a href="#堆栈stack" class="headerlink" title="堆栈stack"></a>堆栈stack</h3><blockquote>
<p>基本类型的数据或对象的 <strong><code>引用</code></strong>  &gt;<br>所有局部变量（形参、方法内部局部变量、代码块中局部变量）、基本类型的变量、引用类型的变量</p>
</blockquote>
<p>放arr、arrs</p>
<h3 id="堆Heap"><a href="#堆Heap" class="headerlink" title="堆Heap"></a>堆Heap</h3><blockquote>
<p>new 产生的数据对象本身（new 修饰的实例本体）<br>引用类型变了所引用的对象（数组、普通Java对象）</p>
</blockquote>
<p>放<code>new int[3]</code></p>
<h3 id="静态域"><a href="#静态域" class="headerlink" title="静态域"></a>静态域</h3><blockquote>
<p>静态变量、静态常量、流对象、持久化对象  </p>
</blockquote>
<p>放a</p>
<h2 id="Java存储"><a href="#Java存储" class="headerlink" title="Java存储"></a>Java存储</h2><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>最快；位于处理器内；数量有限；不能直接控制（在代码中无法感知到它）；（C、C++允许建议寄存器的分配方式）</p>
<h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><p>位于RAM；指针下移分配新内存，上移则释放；存基本数据类型和对象的引用</p>
<h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>常用的内存池，位于RAM；存放所有Java对象；与堆栈比：编译器无需知道 data 在堆里的存活时间，导致存储分配和清理更费时间</p>
<h3 id="常量存储"><a href="#常量存储" class="headerlink" title="常量存储"></a>常量存储</h3><p>存在代码中；是安全的；有时在嵌入式系统中常量本身会和其他部分分割开，此时，可选存放在ROM（只读存储器）中</p>
<h3 id="非RAM存储"><a href="#非RAM存储" class="headerlink" title="非RAM存储"></a>非RAM存储</h3><p>存放于程序之外；不受程序控制，在未运行时亦可存在。<br>例子：流对象、持久化对象</p>
<h2 id="修饰符顺序"><a href="#修饰符顺序" class="headerlink" title="修饰符顺序"></a>修饰符顺序</h2><p>public、protected、private、abstract、static、final、transient、validate、synchronized、native、strictfp</p>
<h2 id="编码集"><a href="#编码集" class="headerlink" title="编码集"></a>编码集</h2><p><code>unicode</code>是用2个字节来表示<br><code>utf-8</code>是用3个字节来表示</p>
<h2 id="Java环境变量配置"><a href="#Java环境变量配置" class="headerlink" title="Java环境变量配置"></a>Java环境变量配置</h2><p>进行<code>java</code>开发，首先要安装<code>jdk</code>，安装了jdk后还要进行环境变量配置：  </p>
<ol>
<li>下载<code>jdk</code>（<a href="http://java.sun.com/javase/downloads/index.jsp%EF%BC%89%EF%BC%8C%E6%88%91%E4%B8%8B%E8%BD%BD%E7%9A%84%E7%89%88%E6%9C%AC%E6%98%AF%EF%BC%9A%60jdk-6u14-windows-i586.exe%60">http://java.sun.com/javase/downloads/index.jsp），我下载的版本是：`jdk-6u14-windows-i586.exe`</a></li>
<li>安装<code>jdk-6u14-windows-i586.exe</code></li>
<li>配置环境变量：右击“我的电脑”–》“高级”–》“环境变量”<ol>
<li>在系统变量里新建<code>JAVA_HOME</code>变量，变量值为：<code>C:\Program Files\Java\jdk1.6.0_14</code>（根据自己的安装路径填写）</li>
<li>新建<code>classpath</code>变量，变量值为<code>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar</code></li>
<li>在<code>path</code>变量（已存在不用新建）提娜几遍了值：<code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</code>（注意变量值之间用“;”隔开）</li>
</ol>
</li>
<li>“开始”–》“运行”–》输入“javac”–》“Enter”，如果能正常打印用法说明配置成功！  <blockquote>
<p><code>JAVA_HOME</code>：<code>jdk</code>的安装路径<br><code>classpath</code>：<code>java</code>加载类路径，只有类在<code>classpath</code>中<code>java</code>命令才能识别，在路径前多加了个“<code>.</code>”表示当前路径<br><code>path</code>：系统在任何路径下都可以识别<code>java</code>，<code>javac</code>命令</p>
</blockquote>
</li>
</ol>
<h2 id="三种结构：顺序、分支、循环"><a href="#三种结构：顺序、分支、循环" class="headerlink" title="三种结构：顺序、分支、循环"></a>三种结构：顺序、分支、循环</h2><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ul>
<li>if对于布尔型或布尔型表达式进行匹配</li>
<li>switch对于整型值或字符串进行匹配<br>if:</li>
</ul>
<ol>
<li>每一种格式都是单条语句</li>
<li>第二种格式和三元运算符的区别：三元运算符一般用于两个数比较大小，必须返回一个值。if可以用于别的语句中<br>switch  关键字： case取值1“：” break； default：（不一定适用类似于else） <strong>switch的执行效率高于if-else</strong></li>
</ol>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ol>
<li>单行注释&#x2F;&#x2F;</li>
<li>多行注释&#x2F;*  *&#x2F;</li>
<li>文档注释：用到javadoc.jexe &#x2F;**   *&#x2F;</li>
</ol>
<h2 id="按值传递、按引用传递"><a href="#按值传递、按引用传递" class="headerlink" title="按值传递、按引用传递"></a><a href="https://blog.csdn.net/zzp_403184692/article/details/8184751">按值传递、按引用传递</a></h2><ol>
<li>“<strong>在Java里面参数传递都是按值传递</strong>”这句话的意思是：按值传递是传递值得拷贝，按引用传递传递的是引用的地址值，所以统称按值传递。</li>
<li>在Java里只有基本类型和按照下面这种定义方式的<code>String</code>（<code>String str = &quot;按值传递&quot;</code>）是按值传递，其他的都是按引用传递。</li>
</ol>
<ul>
<li>按值传递就是当参数类型为基本数据类型是不能对值进行改变</li>
<li>按引用传递就是当参数类型为引用数据类型时可以对值进行改变</li>
</ul>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>英雄攻击怪物<br>一个类传值给另一个类，用方法传参  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">system.exit(<span class="number">0</span>);<span class="comment">//整个程序结束</span></span><br></pre></td></tr></table></figure>
<h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p>变量处在类中，任何方法外部，就是成员变量  </p>
<ul>
<li><code>成员变量==全局变量</code></li>
<li><code>方法变量==局部变量</code><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3>方法调用不到的原因：没有保存、局部变量、访问权限<br>调用出问题：有无返回值、<br>方法调用的时候，因为知道了参数的类型，所以不用在定义类型<br>普通方法需要方法调用，“类名.方法名”  <figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span>：抽象类</span><br><span class="line"><span class="keyword">synchronized</span>：同步（线程中用到）</span><br></pre></td></tr></table></figure>
<h3 id="方法返回值、参数列表"><a href="#方法返回值、参数列表" class="headerlink" title="方法返回值、参数列表"></a>方法返回值、参数列表</h3>方法返回值可以是基本数据类型也可以是引用数据类型（包括对象）<br>方法参数列表可以是基本数据类型也可以是引用数据类型（包括对象），参数可以不止一个<br><code>return</code>返回的是一个确定的值，不是表达式：<code>return hp&gt;=0;</code><br>形参只是占位的作用<br>声明的参数一定要确定类型，要弄个类型  <h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3>（普通）方法重载：方法名可以一样，但是参数列表的数据类型、参数个数不同即可，参数名称可以相同但尽量不要相同<br>java中同一个类中允许定义多个同名但不同参数列表的方法（叫做方法重载）<br>不同参数列表：参数数量个数不同、数据类型不同、参数类型不同<br><strong>方法最好与类名不同，在需要的时候调用【避免跟构造方法混淆了】</strong><h3 id="Class文件字节码结构组织示意图"><a href="#Class文件字节码结构组织示意图" class="headerlink" title="Class文件字节码结构组织示意图"></a>Class文件字节码结构组织示意图</h3>注：被编译器编译成的.class字节码文件的字节流以及其组织结构如下所示：<br><img src="/posts/2037424043/Class%E6%96%87%E4%BB%B6%E5%AD%97%E8%8A%82%E7%A0%81%E7%BB%93%E6%9E%84%E7%BB%84%E7%BB%87%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Class文件字节码结构组织示意图">   </li>
<li><strong>魔数</strong>：确定这个文件是否为一个能被虚拟机接收的<code>Class</code>文件。</li>
<li><strong>Class 文件版本</strong>：Class文件的版本号，保证编译正常执行。</li>
<li><strong>常量池</strong>：常量池主要存放两大常量：字面量核符号引用。</li>
<li><strong>访问标志</strong>：标志用于识别一些类或者接口层次的访问信息，包括：这个 Class 是类还是接口，是否为 public 或者 abstract 类型，如果是类的话是否声明为 final 等等。</li>
<li><strong>当前类索引，父类索引</strong>：类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名，由于Java语言的单继承，所以父类索引只有一个，除了 java.lang.Object 之外，所有 java 类都有父类，因此除了 java.lang.Object 外，所有 Java 类的父类索引<strong>都不为 0</strong>；</li>
<li><strong>接口索引集合</strong>：接口索引集合用来描述这个类实现了哪些接口，这些被实现的接口将按 <code>implement</code>（如果这个类本身是接口的话则是 <code>extends</code>）后的接口顺序<strong>从左到右</strong>排列在接口索引集合中。</li>
<li><strong>字段表集合</strong>：描述接口或类中声明的变量。字段包括类级变量以及实例变量，但不包括在方法内部声明的局部变量。</li>
<li><strong>方法表集合</strong>：类中的方法。</li>
<li><strong>属性表集合</strong>：在 Class ⽂件，字段表，方法表中都可以携带⾃⼰的属性表集合。<h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3>类加载过程：<strong>加载–》连接–》初始化</strong>。连接过程又可以分为三步：<strong>验证–》准备–》解析</strong><br>加载过程，主要完成3件事情：</li>
</ul>
<ol>
<li>通过全类名获取定义此类的二进制字节流</li>
<li>将字节流所代表的静态存储结构转换为⽅法区的运⾏时数据结构</li>
<li>在内存中⽣成⼀个代表该类的 Class 对象，作为⽅法区这些数据的访问⼊⼝</li>
</ol>
<p>虚拟机规范上面这3点并不具体，因此是⾮常灵活的。⽐如：”通过全类名获取定义此类的⼆进制字节流” 并没有指明具体从哪⾥获取、怎样获取。⽐如：比较常⻅的就是从 ZIP 包中读取（⽇后出现的JAR、EAR、WAR格式的基础）、其他⽂件⽣成（典型应⽤就是JSP）等等。<br><strong>⼀个⾮数组类的加载阶段（加载阶段获取类的⼆进制字节流的动作）是可控性最强的阶段，这⼀步我们可以去完成还可以⾃定义类加载器去控制字节流的获取⽅式（重写⼀个类加载器的 loadClass() ⽅法）。数组类型不通过类加载器创建，它由 Java 虚拟机直接创建。</strong><br>类加载器、双亲委派模型也是⾮常重要的知识点，这部分内容会在后⾯的问题中单独介绍到。<br>加载阶段和连接阶段的部分内容是交叉进⾏的，加载阶段尚未结束，连接阶段可能就已经开始了。</p>
<h3 id="有哪些类加载器"><a href="#有哪些类加载器" class="headerlink" title="有哪些类加载器?"></a>有哪些类加载器?</h3><p>JVM 中内置了三个重要的 <code>ClassLoader</code>，除了 BootstrapClassLoader 其他类加载器均由 Java 实现且全部继承⾃ <code>java.lang.ClassLoader</code> ：  </p>
<ol>
<li><code>BootstrapClassLoader</code>(启动类加载器) ：最顶层的加载类，由C++实现，负责加载 <code>%JAVA_HOME%/lib</code> ⽬录下的jar包和类或者或被 <code>-Xbootclasspath</code> 参数指定的路径中的所有类。</li>
<li><code>ExtensionClassLoader</code>(扩展类加载器) ：主要负责加载⽬录 <code>%JRE_HOME%/lib/ext</code> ⽬录下的jar包和类，或被 <code>java.ext.dirs</code> 系统变量所指定的路径下的jar包。</li>
<li><code>AppClassLoader</code>(应⽤程序类加载器) :⾯向我们⽤户的加载器，负责加载当前应⽤classpath下的所有jar包和类。<h3 id="双亲委派模型介绍"><a href="#双亲委派模型介绍" class="headerlink" title="双亲委派模型介绍"></a>双亲委派模型介绍</h3>每⼀个类都有⼀个对应它的类加载器。系统中的 ClassLoder 在协同⼯作的时候会默认使⽤ <strong>双亲委派模型</strong> 。即在类加载的时候，系统会⾸先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。<strong>加载的时候，⾸先会把该请求委派给该⽗类加载器的 loadClass() 处理，因此所有的请求最终都应该传送到顶层的启动类加载器 BootstrapClassLoader 中。当⽗类加载器⽆法处理时，才由⾃⼰来处理</strong>。当⽗类加载器为null时，会使⽤启动类加载器 <strong>BootstrapClassLoader</strong> 作为⽗类加载器。<br><img src="/posts/2037424043/img-20231227084852.png" alt="Img"><br>每个类都有个父类加载器，通过下面的程序验证  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;ClassLodarDemo&#x27;s ClassLoader is &quot;</span> +</span><br><span class="line">                       ClassLoaderDemo.class.getClassLoader());</span><br><span class="line">    System.out.println(<span class="string">&quot;The Parent of ClassLodarDemo&#x27;s ClassLoader is &quot;</span> +</span><br><span class="line">                       ClassLoaderDemo.class.getClassLoader().getParent());</span><br><span class="line">    System.out.println(<span class="string">&quot;The GrandParent of ClassLodarDemo&#x27;s ClassLoader is &quot;</span> +</span><br><span class="line">                       ClassLoaderDemo.class.getClassLoader().getParent().getParent());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出  <figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">ClassLodarDemo<span class="symbol">&#x27;s</span> ClassLoader <span class="keyword">is</span> sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br><span class="line">The Parent <span class="keyword">of</span> ClassLodarDemo<span class="symbol">&#x27;s</span> ClassLoader <span class="keyword">is</span> sun.misc.Launcher$ExtClassLoader@<span class="number">1</span>b6d3586</span><br><span class="line">The GrandParent <span class="keyword">of</span> ClassLodarDemo<span class="symbol">&#x27;s</span> ClassLoader <span class="keyword">is</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<code>AppClassLoader</code> 的⽗类加载器为 <code>ExtClassLoader</code>。 <code>ExtClassLoader</code> 的⽗类加载器为null，<strong>null并不代表 <code>ExtClassLoader</code> 没有⽗类加载器，⽽是 <code>Bootstrap ClassLoader</code></strong> 。<br>其实这个双亲翻译的容易让别⼈误解，我们⼀般理解的双亲都是⽗⺟，这⾥的双亲更多地表达的是“⽗⺟这⼀辈”的⼈⽽已，并不是说真的有⼀个 Mather ClassLoader 和⼀个 Father ClassLoader 。另外，类加载器之间的“⽗⼦”关系也不是通过继承来体现的，是由“优先级”来决定。官⽅API⽂档对这部分的描述如下:  <figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">The Java platform uses a delegation model <span class="keyword">for</span> loading classes. The basic idea <span class="keyword">is</span> <span class="literal">that</span></span><br><span class="line">every <span class="keyword">class</span> <span class="title class_">loader</span> has a <span class="string">&quot;parent&quot;</span> <span class="keyword">class</span> <span class="title class_">loader</span>. When loading a <span class="keyword">class</span>, a <span class="keyword">class</span> <span class="title class_">loader</span></span><br><span class="line">first <span class="string">&quot;delegates&quot;</span> the search <span class="keyword">for</span> the <span class="keyword">class</span> <span class="title class_">to</span> its parent <span class="keyword">class</span> <span class="title class_">loader</span> before attempting</span><br><span class="line"><span class="keyword">to</span> find the <span class="keyword">class</span> <span class="title class_">itself</span>.</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="双亲委派模型实现源码分析"><a href="#双亲委派模型实现源码分析" class="headerlink" title="双亲委派模型实现源码分析"></a>双亲委派模型实现源码分析</h3><p>双亲委派模型的实现代码⾮常简单，逻辑⾮常清晰，都集中在 <code>java.lang.ClassLoader</code> 的 <code>loadClass()</code> 中，相关代码如下所示。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ClassLoader parent;</span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throw</span> ClassNotFoundException&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name))&#123;</span><br><span class="line">        <span class="comment">//首先，检查请求的类是否已经被加载过</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;<span class="comment">//⽗加载器不为空，调⽤⽗加载器loadClass()⽅法处理</span></span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">//⽗加载器为空，使⽤启动类加载器 BootstrapClassLoader 加载</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;  <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">//抛出异常说明⽗类加载器⽆法完成加载请求</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                <span class="comment">//⾃⼰尝试加载</span></span><br><span class="line">                c = findClass(name);</span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双亲委派模型带来了什么好处呢？"><a href="#双亲委派模型带来了什么好处呢？" class="headerlink" title="双亲委派模型带来了什么好处呢？"></a>双亲委派模型带来了什么好处呢？</h3><p>双亲委派模型保证了Java程序的稳定运⾏，可以避免类的重复加载（JVM 区分不同类的⽅式不仅仅根据</p>
<p>类名，相同的类⽂件被不同的类加载器加载产⽣的是两个不同的类），也保证了 Java 的核⼼ API 不</p>
<p>被篡改。如果不⽤没有使⽤双亲委派模型，⽽是每个类加载器加载⾃⼰的话就会出现⼀些问题，⽐如我</p>
<p>们编写⼀个称为 <code>java.lang.Object</code> 类的话，那么程序运⾏的时候，系统就会出现多个不同的 Object</p>
<p>类。</p>
<p><strong>如果我们不想⽤双亲委派模型怎么办？</strong></p>
<p>为了避免双亲委托机制，我们可以⾃⼰定义⼀个类加载器，然后重载 <code>loadClass()</code> 即可。</p>
<h3 id="如何⾃定义类加载器"><a href="#如何⾃定义类加载器" class="headerlink" title="如何⾃定义类加载器?"></a>如何⾃定义类加载器?</h3><p>除了 BootstrapClassLoader 其他类加载器均由 Java 实现且全部继承⾃ <code>java.lang.ClassLoader</code> 。如</p>
<p>果我们要⾃定义⾃⼰的类加载器，很明显需要继承 <code>ClassLoader</code> 。</p>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>构造方法概念：用于初始化对象实例的一组指令集，不是方法。也称构造器、构造函数</p>
<p>构造方法作用：目的是<strong>类对象</strong>初始化，但其不是方法，因为它没有返回值，也不能被继承。</p>
<h3 id="构造方法特点"><a href="#构造方法特点" class="headerlink" title="构造方法特点"></a>构造方法特点</h3><p>一、方法名必须<strong>与类名相同</strong><br>二、构造方法没有返回值，且不用void修饰<br>三、构造方法在实例化对象时，由系统<strong>自动调用</strong>并且强制执行<br>四、构造方法不能被继承<br>五、若当前没有声明任何的构造方法，系统（Java虚拟机JVM）会提供一个默认的构造方法，默认的构造方法，不带任何参数，且没有任何操作</p>
<h3 id="构造方法重载"><a href="#构造方法重载" class="headerlink" title="构造方法重载"></a>构造方法重载</h3><p>名字可以相同，但是调用的时候看调用的是哪一个（参数列表），与普通方法一样不考虑名字，只考虑参数</p>
<blockquote>
<p>判断两个同名的构造方法参数是否相同的时候是根据参数个数以及参数的类型来判断的，不考虑参数的名字</p>
</blockquote>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>构造方法不能被final（终态）、static（静态）、abstract（抽象）、synchronized（同步）修饰</p>
<h3 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4 				magic; <span class="comment">//Class ⽂件的标志</span></span><br><span class="line">    u2 				minor_version;<span class="comment">//Class 的⼩版本号</span></span><br><span class="line">    u2 				major_version;<span class="comment">//Class 的⼤版本号</span></span><br><span class="line">    u2 				constant_pool_count;<span class="comment">//常量池的数量</span></span><br><span class="line">    cp_info 		constant_pool[constant_pool_count-<span class="number">1</span>];<span class="comment">//常量池</span></span><br><span class="line">    u2 				access_flags;<span class="comment">//Class 的访问标记</span></span><br><span class="line">    u2 				this_class;<span class="comment">//当前类</span></span><br><span class="line">    u2 				super_class;<span class="comment">//⽗类</span></span><br><span class="line">    u2 				interfaces_count;<span class="comment">//接⼝</span></span><br><span class="line">    u2 				interfaces[interfaces_count];<span class="comment">//⼀个类可以实现多个接⼝</span></span><br><span class="line">    u2 				fields_count;<span class="comment">//Class ⽂件的字段属性</span></span><br><span class="line">    field_info 		fields[fields_count];<span class="comment">//⼀个类可以有多个字段</span></span><br><span class="line">    u2 				methods_count;<span class="comment">//Class ⽂件的方法数量</span></span><br><span class="line">    method_info 	methods[methods_count];<span class="comment">//⼀个类可以有多个方法</span></span><br><span class="line">    u2 				attributes_count;<span class="comment">//此类的属性表中的属性数</span></span><br><span class="line">    attribute_info 	attributes[attributes_count];<span class="comment">//属性表集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






<h2 id="assert-断言"><a href="#assert-断言" class="headerlink" title="assert 断言"></a>assert 断言</h2><ul>
<li>语法1：<code>assert &lt;boolean表达式&gt;</code></li>
</ul>
<p>如果<code>&lt;boolean表达式&gt;</code>为true，则程序继续执行；</p>
<p>如果<code>&lt;boolean表达式&gt;</code>为false，则程序抛出AssertionError，并终止执行。</p>
<ul>
<li>语法2：<code>assert &lt;boolean表达式&gt; : &lt;错误信息表达式&gt;</code></li>
</ul>
<p>如果<code>&lt;boolean表达式&gt;</code>为true，则程序继续执行；</p>
<p>如果<code>&lt;boolean表达式&gt;</code>为false，则程序抛出AssertionError，并输入<code>&lt;错误信息表达式&gt;</code></p>
<h2 id="的底层计算"><a href="#的底层计算" class="headerlink" title="%的底层计算"></a>%的底层计算</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟取余(向0方向舍入)计算，dividend被除数，divisor除数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">remainder</span><span class="params">(<span class="type">int</span> dividend, <span class="type">int</span> divisor)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dividend - dividend / divisor * divisor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Stream（Java8）"><a href="#Stream（Java8）" class="headerlink" title="Stream（Java8）"></a><a href="https://juejin.im/post/6844904184953700360?utm_source=gold_browser_extension">Stream（Java8）</a></h2><h3 id="lambda（匿名函数；可表示闭包）"><a href="#lambda（匿名函数；可表示闭包）" class="headerlink" title="lambda（匿名函数；可表示闭包）"></a>lambda（匿名函数；可表示闭包）</h3><p>语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(parameters) -&gt; expression</span><br><span class="line">或</span><br><span class="line">(parameters) -&gt; &#123;statements;&#125;    </span><br></pre></td></tr></table></figure>

<blockquote>
<p>lambda表达式的重要特征：</p>
<p><strong>可选类型声明：</strong>不需要声明参数类型，编译器可以统一识别参数值。</p>
<p><strong>可选的参数圆括号：</strong>一个参数无需定义圆括号，但多个参数需要定义圆括号。</p>
<p><strong>可选的大括号：</strong>如果主题包含了一个语句，就不需要使用大括号。</p>
<p><strong>可选的返回关键字：</strong>如果主题只有一个表达式返回值则编译器会自动返回值，大括号需要指定表达式返回了一个数值。</p>
</blockquote>
<h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>方法引用的出现，使得我们可以将一个方法赋值给一个变量或者作为参数传递给另外一个方法。<code>::</code>双冒号作为方法引用符号。</p>
<p><strong>例子1：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数式的接口定义（其内只有一个方法）；其实际方法的定义；</span></span><br><span class="line"><span class="comment">//注意：引用方法的参数个数、类型、返回值类型都要和函数式接口中的方法声明一一对应</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T, R&gt;&#123;</span><br><span class="line">    R <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">parseInt</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException&#123;</span><br><span class="line">    <span class="keyword">return</span> parseInt(s, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Function&lt;String, Integer&gt; s = Integer::parseInt;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> s.apply(<span class="string">&quot;10&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@FuctionalInterface 只能有单个方法</p>
</blockquote>
<p><strong>例子 2：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparator</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">compare</span><span class="params">(T o1, T o2)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt; y) ? -<span class="number">1</span> : ((x == y) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Comparator&lt;Integer&gt; comparator = Integer::compare;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> comparator.compare(<span class="number">100</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p><strong>例子 3：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IntBinaryOperator</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">applyAsInt</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt; y) ? -<span class="number">1</span> : ((x == y) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="type">IntBinaryOperator</span> <span class="variable">intBinaryOperator</span> <span class="operator">=</span> Integer::compare;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> intBinaryOperator.applyAsInt(<span class="number">10</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p><strong>例子 4：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">KiteFunction</span>&lt;T, R, S&gt;&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个双参数的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    R <span class="title function_">run</span><span class="params">(T t, S s)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个与KiteFunction中run对应的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">DateFormat</span><span class="params">(LocalDateTime dateTime, String pattern)</span>&#123;</span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(pattern);</span><br><span class="line">        <span class="keyword">return</span> dateTime.format(dateTimeFormatter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//正常调用</span></span><br><span class="line">KiteFunction&lt;LocalDateTime, String, String&gt; functionDateFormat = FunctionTest::DateFormat;</span><br><span class="line"><span class="type">String</span> <span class="variable">dateString</span> <span class="operator">=</span> functionDateFormat.run(LocalDateTime.now(), <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名内部类调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">dateString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KiteFunction</span>&lt;LocalDateTime, String, String&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">run</span><span class="params">(LocalDateTime localDateTime, String s)</span>&#123;</span><br><span class="line">            <span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPatter(s);</span><br><span class="line">            <span class="keyword">return</span> localDateTime.format(dateTimeFormatter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.run(LocalDateTime.now(), <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    System.out.println(dateString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名内部类用Lambda表达式替换的调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]  args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    KiteFunction&lt;LocalDateTime, String, String&gt; functionDateFormatter = (LocalDateTime dateTime, String pattern) -&gt; &#123;</span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPatter(pattern);</span><br><span class="line">        <span class="keyword">return</span> dateTime.format(dateTimeFormatter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">dateString</span> <span class="operator">=</span> functionDateFormatter.run(LocalDateTime.now(), <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    System.out.println(dateString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="Stream-API（常用）"><a href="#Stream-API（常用）" class="headerlink" title="Stream API（常用）"></a>Stream API（常用）</h3><ol>
<li>链式调用</li>
<li>Stream接口的定义，继承BaseStream，几乎所有的接口声明都是接收方法<strong>引用类型的参数</strong>。</li>
</ol>
<p><strong>of</strong></p>
<p>可接收一个泛型对象或可变泛型集合，构造一个<code>Stream</code>对象</p>
<p><strong>例子：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createStream</span><span class="params">()</span>&#123;</span><br><span class="line">    Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>empty</strong></p>
<p>创建一个空的<code>Stream</code>对象</p>
<p><strong>concat</strong></p>
<p>连接两个<code>Stream</code>，不改变其中任何一个<code>Stream</code>对象，返回一个新的<code>Stream</code>对象</p>
<p><strong>例子：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">concatStream</span><span class="params">()</span>&#123;</span><br><span class="line">    Stream&lt;String&gt; a = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    Stream&lt;String&gt; b = Stream.of(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>);</span><br><span class="line">    Stream&lt;String&gt; c = Stream.contact(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>max</strong></p>
<p>一般用于求数字集合中的最大值，或者实体中数字类型的属性比较，拥有最大值的那个实体。它接收一个<code>Comparator&lt;T&gt;</code></p>
<p><strong>例子：</strong>引用方法是<code>Integer::compareTo</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">max</span><span class="params">()</span>&#123;</span><br><span class="line">    Stream&lt;Integer&gt; integerStream = Stream.of(<span class="number">2</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">max</span> <span class="operator">=</span> integerStream.max(Integer::compareTo).get();</span><br><span class="line">    System.out.println(max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自己定制一个 Comparator</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">max</span><span class="params">()</span>&#123;</span><br><span class="line">    Stream&lt;Integer&gt; integerStream = Stream.of(<span class="number">2</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">5</span>);</span><br><span class="line">    Comparator&lt;Integer&gt; comparator = (x, y) -&gt; (x.intValue() &lt; y.intValue()) ? -<span class="number">1</span> : ((x.intValue() == y.intValue()) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">max</span> <span class="operator">=</span> integerStream.max(comparator).get();</span><br><span class="line">    System.out.println(max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>min</strong></p>
<p>与<code>max</code>用法一样，求的是最小值</p>
<p><strong>findFirst</strong></p>
<p>获取<code>Stream</code>中的第一个元素</p>
<p><strong>findAny</strong></p>
<p>获取<code>Stream</code>中某个元素，如果是串行情况下，一般都会返回第一个元素，并行情况下就不一定了。</p>
<p><strong>count</strong></p>
<p>返回元素的个数</p>
<p><strong>例子：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; a = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">x</span> <span class="operator">=</span> a.count();</span><br></pre></td></tr></table></figure>

<p><strong>peek</strong></p>
<p>建立一个通道，在这个通道中对<code>Stream</code>的每个元素执行对应的操作。对应<code>Comsumer&lt;T&gt;</code>的函数式接口，这是一个消费者函数式接口，用来消费<code>Stream</code>元素的。</p>
<p><strong>例子：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把每个元素转换成对应的大写字母并输出</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">    Stream&lt;String&gt; a = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    List&lt;String&gt; list = a.peek(e -&gt; System.out.println(e.toUpperCase())).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>forEach</strong></p>
<p>和<code>peek</code>方法类似，都接收一个小肥猪函数式接口，对每个元素进行操作。但和<code>peek</code>不同的是，<code>forEach</code>执行之后这个<code>Stream</code>就真的被消费掉了，不可能对它进行后续操作了。</p>
<p><strong>例子：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">()</span>&#123;</span><br><span class="line">    Stream&lt;String&gt; a = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    a.forEach(e -&gt; System.out.println(e.toUpperCase()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>forEachOrdered</strong></p>
<p>功能和<code>forEach</code>一样，不同的是，<code>forEachOrdered</code>是有顺序保证的。对<code>Stream</code>中的元素按插入时的顺序进行消费。（开启并行的时候就有作用了）</p>
<p><strong>例子：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; a = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="comment">//这个的输出顺序没有保证</span></span><br><span class="line">a.parallel().forEach(e -&gt; System.out.println(e.toUpperCase()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个的输出顺序时 A,B,C</span></span><br><span class="line">a.parallel().forEachOrdered(e -&gt; System.out.println(e.toUpperCase()));</span><br></pre></td></tr></table></figure>

<p><strong>limit</strong></p>
<p>获取前n条数据，类似于MySQL的limit，只不过只能接收一个参数，就是数据条数</p>
<p><strong>例子：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">limit</span><span class="params">()</span>&#123;</span><br><span class="line">    Stream&lt;String&gt; a = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    <span class="comment">//打印结果时 a,b</span></span><br><span class="line">    a.limit(<span class="number">2</span>).forEach(e -&gt; System.out.println(e));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>skip</strong></p>
<p>跳过前面n条数据</p>
<p><strong>例子：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">skip</span><span class="params">()</span>&#123;</span><br><span class="line">    Stream&lt;String&gt; a = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    a.skip(<span class="number">2</span>).forEach(e -&gt; System.out.println(e));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>distinct</strong></p>
<p>元素<strong>去重</strong></p>
<p><strong>例子：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">distinct</span><span class="params">()</span>&#123;</span><br><span class="line">    Stream&lt;String&gt; a = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">    a.distinct().forEach(e -&gt; System.out.println(e));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>sorted</strong></p>
<p>有两个重载，一个无参（默认自然<strong>排序</strong>），另一个有个<code>Comparator</code>类型的参数。</p>
<p><strong>例子:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sorted</span><span class="params">()</span>&#123;</span><br><span class="line">    Stream&lt;String&gt; a = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    a.sorted().forEach(e -&gt; System.out.println(e));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sortedWithComparator</span><span class="params">()</span>&#123;</span><br><span class="line">    Stream&lt;String&gt; a = Stream.of(<span class="string">&quot;a1&quot;</span>, <span class="string">&quot;b3&quot;</span>, <span class="string">&quot;c6&quot;</span>);</span><br><span class="line">    a.sorted((x,y) -&gt; Integer.parseInt(x.substring(<span class="number">1</span>)) &gt; Integer.parseInt(y.substring(<span class="number">1</span>)) ? <span class="number">1</span>: -<span class="number">1</span>).forEach(e -&gt; System.out.println(e));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为下面的例子方便，模拟了个数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;User&gt; <span class="title function_">getUserData</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserId(i);</span><br><span class="line">        user.setUserName(String.format(<span class="string">&quot;古时的风筝 %s 号&quot;</span>, i));</span><br><span class="line">        user.setAge(random.nextInt(<span class="number">100</span>));</span><br><span class="line">        user.setGender(i % <span class="number">2</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;18812021111&quot;</span>);</span><br><span class="line">        user.setAddress(<span class="string">&quot;无&quot;</span>);</span><br><span class="line">        users.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>filter</strong></p>
<p>条件过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//过滤年龄大于50的</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">filter</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; users = getUserData();</span><br><span class="line">    Stream&lt;User&gt; stream = users.stream();</span><br><span class="line">    stream.filter(user -&gt; user.getGender().equals(<span class="number">0</span>) &amp;&amp; user.getAge() &gt; <span class="number">50</span>).forEach(e -&gt; System.out.println(e));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//等同于下面这种形式 匿名内部类</span></span><br><span class="line">    stream.filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;User&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(User user)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> user.getGender().equals(<span class="number">0</span>) &amp;&amp; user.getAge() &gt; <span class="number">50</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).forEach(e -&gt; System.out.println(e));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>map操作</strong></p>
<p><strong>map</strong></p>
<p>接受一个<code>Function</code>函数式接口，把它翻译成映射最合适了，通过原始数据元素，<strong>映射</strong>出新的类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口定义</span></span><br><span class="line">&lt;R&gt; Stream&lt;R&gt; <span class="title function_">map</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends R&gt; mapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T, R&gt;&#123;</span><br><span class="line">    R <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>例子:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将DAO实体类型转换成DTO实体类型</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; users = getUserData();</span><br><span class="line">    Stream&lt;User&gt; stream = users.stream();</span><br><span class="line">    List&lt;UserDto&gt; userDtos = stream.map(user -&gt; dao2Dto(user)).collec(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> UserDto <span class="title function_">dao2Dto</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    <span class="type">UserDto</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDto</span>();</span><br><span class="line">    BeanUtils.copyProperties(user, dto);</span><br><span class="line">    <span class="comment">//其他额外处理</span></span><br><span class="line">    <span class="keyword">return</span> dto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>mapToInt</strong></p>
<p>将元素转换成 int 类型，在 <code>map</code>方法的基础上进行封装。</p>
<p><strong>mapToLong</strong></p>
<p>将元素转换成 Long 类型，在 <code>map</code>方法的基础上进行封装。</p>
<p><strong>mapToDouble</strong></p>
<p>将元素转换成 Double 类型，在 <code>map</code>方法的基础上进行封装。</p>
<p><strong>flatMap</strong></p>
<p>用在些特别的场景下，如<code>Stream</code>是以下几种结构时，用于将原有二维结构<strong>扁平化</strong>。</p>
<ol>
<li><code>Stream&lt;String[]&gt;</code></li>
<li><code>Stream&lt;Set&lt;String&gt;&gt;</code></li>
<li><code>Stream&lt;List&lt;String&gt;&gt;</code></li>
</ol>
<p>用<code>flatMap</code>将结果转化为<code>Stream&lt;String&gt;</code>形式</p>
<p><strong>例子:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">flatMap</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; users = getUserData();</span><br><span class="line">    List&lt;User&gt; users1 = getUserData();</span><br><span class="line">    List&lt;List&lt;User&gt;&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    userList.add(users);</span><br><span class="line">    userList.add(users1);</span><br><span class="line">    Stream&lt;List&lt;User&gt;&gt; stream = userList.stream();</span><br><span class="line">    List&lt;UserDto&gt; userDto = stream.flatMap(subUserList -&gt; subUserList.stream()).map(user -&gt; dao2Dto(user)).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>flatMapToInt</strong></p>
<p>用法参考 <code>flatMap</code>，将元素扁平为 int 类型，在 <code>flatMap</code>方法的基础上进行封装。</p>
<p><strong>flatMapToLong</strong></p>
<p>用法参考 <code>flatMap</code>，将元素扁平为 Long 类型，在 <code>flatMap</code>方法的基础上进行封装。</p>
<p><strong>flatMapToDouble</strong></p>
<p>用法参考 <code>flatMap</code>，将元素扁平为 Double 类型，在 <code>flatMap</code>方法的基础上进行封装。</p>
<p><strong>collection</strong></p>
<p>在进行了一系列操作后，我们把<code>Stream</code>类型的结果转换成<code>List</code>、<code>Map</code>这样的常用的数据结构，<code>collection</code>可以实现<strong>转换</strong>的目的。</p>
<p><strong>例子：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义 collection 接口</span></span><br><span class="line">&lt;R, A&gt; R <span class="title function_">collect</span><span class="params">(Collector&lt;? <span class="built_in">super</span> T, A, R&gt; collector)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//过滤 Stream 中大于7的值，并转换成 List&lt;Integer&gt;。使用的是 Collectors.toList() 这个收集器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">collect</span><span class="params">()</span>&#123;</span><br><span class="line">    Stream&lt;Integer&gt; integerStream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">33</span>);</span><br><span class="line">    List&lt;Integer&gt; list = integerStream.filter(s -&gt; s.intValue() &gt; <span class="number">7</span>).collect(Collectors.toList());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//或者改成这样来理解（理解为参数按顺序执行）</span></span><br><span class="line">    <span class="comment">//List&lt;Integer&gt; list = integerStream.filter(s -&gt; s.intValue() &gt; 7).collect(ArrayList::new, ArrayList::add, ArrayList::addAll);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Collectors</code>已提供了很多可拿来即用的收集器</p>
<p><code>Collectors.toList()</code>、<code>Collectors.toSet()</code>、<code>Collectors.toMap()</code>、<code>Collectors.groupingBy()</code>用来分组</p>
<p><strong>例子：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按照 userId 字段分组，返回以userId为key，List为value的Map，或者返回每个key的个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回 userId:List&lt;User&gt;</span></span><br><span class="line">Map&lt;String, List&lt;User&gt;&gt; map = user.stream().collect(Collectors.groupingBy(User::getUserID));</span><br><span class="line"><span class="comment">//返回 userId:每组个数</span></span><br><span class="line">Map&lt;String, Long&gt; map = user.stream().collect(Collectors.groupingBy(User::getUserId, counting()));</span><br></pre></td></tr></table></figure>



<p><strong>toArray</strong></p>
<p><code>collection</code>返回列表、map等，<code>toArray</code>返回数组，有两个重载，一个空参数，返回的是<code>Object[]</code>，另一个接收一个<code>IntFunction&lt;R&gt;</code>类型参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IntFunction</span>&lt;R&gt;&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Applies this function to the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value the function argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the function result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    R <span class="title function_">apply</span><span class="params">(<span class="type">int</span> value)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="comment">//参数是 User[]::new 就是new一个User数组，长度为最后的 Stream 长度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">toArray</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; users = getUserData();</span><br><span class="line">    Stream&lt;User&gt; stream = users.stream();</span><br><span class="line">    User[] userArray = stream.filter(user -&gt; user.getGender().equals(<span class="number">0</span>) &amp;&amp; user.getAge() &gt; <span class="number">50</span>).toArray(User[]::<span class="keyword">new</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>reduce</strong></p>
<p>作用：每次计算都用上一次的计算结果，比如求和</p>
<p><strong>例子:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">()</span>&#123;</span><br><span class="line">    Stream&lt;Integer&gt; integerStream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">33</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> integerStream.reduce(<span class="number">0</span>, (x,y)-&gt; x+y);</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>anyMatch</strong></p>
<h3 id="并行Stream"><a href="#并行Stream" class="headerlink" title="并行Stream"></a>并行Stream</h3><p>通过<code>users.parallelStream()</code>或<code>users.stream().parallel()</code>的方式来创建并行<code>Stream</code>对象。</p>
<p>并行<code>Stream</code>默认使用<code>ForkJoinPool</code>线程池，也支持自定义。</p>
<p><strong>使用并行Stream的场景</strong></p>
<ol>
<li>多核CPU的前提</li>
<li>数据量大的情况</li>
<li>CPU密集型计算的情况。而IO密集型使用并行<code>Stream</code>反而会更慢</li>
<li>并行计算可能更快，但大多数时候需要用<code>collect</code>合并，若合并代价很大，不适合用并行<code>Stream</code></li>
<li>有些操作，如<code>limit</code>，<code>findFirst</code>、<code>forEachOrdered</code>等依赖于元素顺序的操作，不适合用并行<code>Stream</code></li>
</ol>
<h2 id="CopyOnWriteArrayList在多线程的时候用到"><a href="#CopyOnWriteArrayList在多线程的时候用到" class="headerlink" title="CopyOnWriteArrayList在多线程的时候用到"></a><a href="https://www.cnblogs.com/dolphin0520/p/3938914.html">CopyOnWriteArrayList</a>在多线程的时候用到</h2><p>CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。</p>
<p>在添加的时候是需要加锁的，否则多线程写的时候会Copy出N个副本出来。</p>
<p>读的时候不需要加锁，如果读的时候有多个线程正在向CopyOnWriteArrayList添加数据，读还是会读到旧的数据，因为写的时候不会锁住旧的CopyOnWriteArrayList。</p>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ul>
<li>static关键字修饰的方法或者变量不需要依赖于对象来进行访问，只要类被加载了，就可以通过类名去进行访问。</li>
<li>静态变量被所有的对象所共享，在内存中只有一个副本，它当且仅当在类初次加载时会被初始化。</li>
<li>能通过this访问静态成员变量吗?<br>所有的静态方法和静态变量都可以通过对象访问（只要访问权限足够）。</li>
<li>static是不允许用来修饰局部变量</li>
</ul>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ul>
<li>可以声明成员变量、方法、类以及本地变量</li>
<li>final成员变量必须在声明的时候初始化或者在构造器中初始化，否则就会报编译错误</li>
<li>final变量是只读的</li>
<li>final申明的方法不可以被子类的方法重写</li>
<li>final类通常功能是完整的，不能被继承</li>
<li>final变量可以安全的在多线程环境下进行共享，而不需要额外的同步开销</li>
<li>final关键字提高了性能，JVM和Java应用都会缓存final变量，会对方法、变量及类进行优化</li>
<li>方法的内部类访问方法中的局部变量，但必须用final修饰才能访问</li>
</ul>
<h2 id="valatile"><a href="#valatile" class="headerlink" title="valatile"></a>valatile</h2><p>当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，JVM 保证了每次读变量都从内存中读，跳过 CPU cache 这一步，因此在读取volatile类型的变量时总会返回最新写入的值。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/6/23/16b833f4a48b216e?w=550&h=429&f=png&s=21448"></p>
<p>当一个变量定义为 volatile 之后，将具备以下特性：</p>
<ul>
<li>保证此变量对所有的线程的可见性，不能保证它具有原子性（可见性，是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的）</li>
<li>禁止指令重排序优化</li>
<li>volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行</li>
</ul>
<p>AtomicInteger 中主要实现了整型的原子操作，防止并发情况下出现异常结果，其内部主要依靠JDK 中的unsafe 类操作内存中的数据来实现的。volatile 修饰符保证了value在内存中其他线程可以看到其值得改变。CAS操作保证了AtomicInteger 可以安全的修改value 的值。</p>
<h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。</p>
<p>在 Java 中，每个对象都会有一个 monitor 对象，这个对象其实就是 Java 对象的锁，通常会被称为“内置锁”或“对象锁”。类的对象可以有多个，所以每个对象有其独立的对象锁，互不干扰。针对每个类也有一个锁，可以称为“类锁”，类锁实际上是通过对象锁实现的，即类的 Class 对象锁。每个类只有一个 Class 对象，所以每个类只有一个类锁。</p>
<p>Monitor是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。Monitor是依赖于底层的操作系统的Mutex Lock（互斥锁）来实现的线程同步。</p>
<h3 id="根据获取的锁分类"><a href="#根据获取的锁分类" class="headerlink" title="根据获取的锁分类"></a>根据获取的锁分类</h3><p><strong>获取对象锁</strong></p>
<ul>
<li>synchronized(this|object) {}  </li>
<li>修饰非静态方法</li>
</ul>
<p><strong>获取类锁</strong></p>
<ul>
<li>synchronized(类.class) {}  </li>
<li>修饰静态方法</li>
</ul>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><strong>同步代码块：</strong></p>
<ul>
<li>monitorenter和monitorexit指令实现的</li>
</ul>
<p><strong>同步方法</strong></p>
<ul>
<li>方法修饰符上的ACC_SYNCHRONIZED实现</li>
</ul>
<h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><p><img src="https://user-gold-cdn.xitu.io/2019/6/18/16b69b50c9d340a5?w=1372&h=1206&f=png&s=142754"></p>
<h3 id="悲观锁、乐观锁"><a href="#悲观锁、乐观锁" class="headerlink" title="悲观锁、乐观锁"></a>悲观锁、乐观锁</h3><p>悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁。悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。</p>
<p>而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现。乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。</p>
<h3 id="自旋锁、适应性自旋锁"><a href="#自旋锁、适应性自旋锁" class="headerlink" title="自旋锁、适应性自旋锁"></a>自旋锁、适应性自旋锁</h3><p>阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p>
<p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p>
<p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。</p>
<p>自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX:PreBlockSpin来更改）没有成功获得锁，就应当挂起线程。</p>
<p>自旋锁的实现原理同样也是CAS，AtomicInteger中调用unsafe进行自增操作的源码中的do-while循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。</p>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>当前线程拥有其他线程需要的资源，当前线程等待其他线程已拥有的资源，都不放弃自己拥有的资源。</p>
<h2 id="import单类型导入和import-按需类型导入"><a href="#import单类型导入和import-按需类型导入" class="headerlink" title="import单类型导入和import *按需类型导入"></a><code>import</code>单类型导入和<code>import *</code>按需类型导入</h2><p><strong>结论：推荐使用单类型导入</strong></p>
<p><a href="https://blog.csdn.net/ryantaocer/article/details/81739654">分析</a>：</p>
<p>单类型导入（如：<code>import java.io.File;</code>）</p>
<p>按需类型导入（如：<code>import java.io.*</code>）</p>
<p>按需类型导入一整个包下所有类，而仅仅导入当前需要使用的类。</p>
<p>但如果一个有多个按需类型导入的情况下会列出所有可能的情况，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br></pre></td></tr></table></figure>

<p>引用到File类的话，则会列出所有可能的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File			<span class="comment">//File类属于无名包，就是说File类没有package语句，编译器会首先搜索无名包</span></span><br><span class="line">com.File 		<span class="comment">//File类属于当前包</span></span><br><span class="line">java.lang.File	<span class="comment">//编译器会自动导入java.lang包</span></span><br><span class="line">java.io.File</span><br><span class="line">java.util.File</span><br></pre></td></tr></table></figure>

<blockquote>
<p>会查找出所有的可能情况以确定是否有类导入冲突。</p>
<p>假设此时的顶层路径有三个，那么编译器就会进行3*5&#x3D;15次查找</p>
</blockquote>
<ul>
<li><p>如果查找玩编译器发现了两个同名的类，那么就会报<strong>包冲突</strong>的错误。</p>
</li>
<li><p>按需类型导入不会降低Java代码的执行效率，但会影响到Java代码的<strong>编译速度</strong>。</p>
</li>
</ul>
<h1 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h1><ol>
<li>以字母、下划线、美元符开头（不能以数字开头）；</li>
<li>后面跟字母、下划线、美元符或数字；</li>
<li>命名没有长度限制；</li>
<li>对大小写敏感；</li>
<li>不可以用已有的关键字</li>
</ol>
<p>常量：字面常量（6种）和有名常量final</p>
<p>字面常量： 整数常量（包括负数）；小数常量；布尔型常量；字符常量（‘数字字母或符号’）；</p>
<p>字符串常量：将一个或者多个字符用双引号标识；空常量null</p>
<h2 id="Java命名规范"><a href="#Java命名规范" class="headerlink" title="Java命名规范"></a>Java命名规范</h2><p>避免使用下划线（除静态常量）</p>
<h2 id="驼峰命名法："><a href="#驼峰命名法：" class="headerlink" title="驼峰命名法："></a>驼峰命名法：</h2><p>类名、接口名：多单词XxxYyyZxx</p>
<p>常量 Xxx_Yyy_Zzz  ？？？？</p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>大小</th>
<th>值</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>布尔型</td>
<td>1个字节</td>
<td>true和false</td>
<td>true、false是具体值，不是关键字但也不能用作变量名</td>
</tr>
<tr>
<td>byte</td>
<td>字节型</td>
<td>1个字节</td>
<td>-2^7~2^7-1</td>
<td></td>
</tr>
<tr>
<td>char</td>
<td>字符型</td>
<td>2个字节</td>
<td></td>
<td>c语言（1个字符）；</td>
</tr>
<tr>
<td>无符号整数</td>
<td></td>
<td>2个字节</td>
<td>0~2^16</td>
<td></td>
</tr>
<tr>
<td>short</td>
<td>短整型</td>
<td>2个字节</td>
<td>-2^15~2^15-1</td>
<td></td>
</tr>
<tr>
<td>int</td>
<td>整型</td>
<td>4个字节</td>
<td>-2^31~2^31-1</td>
<td></td>
</tr>
<tr>
<td>long</td>
<td>长整型</td>
<td>8个字节</td>
<td>-2^56~2^56-1</td>
<td>long的取值范围比float的小（浮点数用科学计数法表示）</td>
</tr>
<tr>
<td>float</td>
<td>浮点型</td>
<td>4个字节</td>
<td>-2^128~2^127</td>
<td><a href="https://blog.csdn.net/a327369238/article/details/52354811">最高位（31）：0正、1负<br>前两个字节表示整数部分<br>后两个字节表示小数部分<br>符号位(S):1bit；指数位(E):8bit；尾数位(M):23bit</a></td>
</tr>
<tr>
<td>double</td>
<td>双精度</td>
<td>8个字节</td>
<td>-2^1024~2^1023</td>
<td>if(d1 &#x3D;&#x3D; d2) 这种是错误的，因为精度原因不能直接比较</td>
</tr>
</tbody></table>
<blockquote>
<p>String若是放一个UTF-8的常量串，其长度最长是：<strong>65535个字节</strong>(不是字符)。String内部是以char数组的形式存储，数组的长度是int类型，那么String允许的最大长度就是Integer.MAX_VALUE，2147483647。又由于java中的字符是16位存储的，因此大概需要4GB的内存才能存储最大长度的字符串。</p>
</blockquote>
<h3 id="double的值比较"><a href="#double的值比较" class="headerlink" title="double的值比较"></a>double的值比较</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">equal</span><span class="params">(<span class="type">double</span> num1, <span class="type">double</span> num2)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((num1 - num2 &gt; -<span class="number">0.0000001</span>) &amp;&amp; (num1 - num2) &lt; <span class="number">0.0000001</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        System.out.println(i&lt;&lt;<span class="number">5</span>);<span class="comment">//64</span></span><br><span class="line">        System.out.println(i&lt;&lt;<span class="number">35</span>);<span class="comment">//16</span></span><br><span class="line">        System.out.println(i&lt;&lt;<span class="number">3</span>);<span class="comment">//16</span></span><br><span class="line">        <span class="comment">//System.out.println(i&lt;&lt;&lt;35);//非法的表达式开始</span></span><br><span class="line"></span><br><span class="line">        System.out.println(i&gt;&gt;&gt;<span class="number">35</span>);<span class="comment">//0</span></span><br><span class="line">        System.out.println(i&gt;&gt;<span class="number">3</span>);<span class="comment">//0</span></span><br><span class="line">        System.out.println(i&gt;&gt;&gt;<span class="number">3</span>);<span class="comment">//0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ol>
<li>自动类型转换【隐式类型转换】（占位数少的类型赋值给占位数多的，如int赋值给long）<ol>
<li>byte型、short型和char的值将被提升到int型</li>
<li>如果一个操作数是long型，计算结果就是long型；</li>
<li>如果一个操作数是float型，计算结果就是float型；</li>
<li>如果一个操作数是double型，计算结果就是double型</li>
</ol>
</li>
<li>强制类型转换【显式类型转换】（级别高赋值给级别低的，如double赋值给float）</li>
</ol>
<h3 id="Integer缓存区"><a href="#Integer缓存区" class="headerlink" title="Integer缓存区"></a>Integer缓存区</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1000</span>,b = <span class="number">1000</span>;</span><br><span class="line">System.out.println(a == b);<span class="comment">//false</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">100</span>,d = <span class="number">100</span>;</span><br><span class="line">System.out.println(c == d);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>


<p>解析：</p>
<p>观察valueOf()类函数，看到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">	<span class="keyword">final</span> <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">	<span class="keyword">if</span> (i &gt;= -<span class="number">128</span> &amp;&amp; i &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache </span></span><br><span class="line">	    <span class="keyword">return</span> IntegerCache.cache[i + offset];</span><br><span class="line">	&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果值在 -128到127之间，那么就会返回该缓存的实例。<br>因此 Integer c &#x3D; 100,d &#x3D; 100;两者指向同样的对象。</p>
</blockquote>
<h4 id="自定义Integer缓存区的值"><a href="#自定义Integer缓存区的值" class="headerlink" title="自定义Integer缓存区的值"></a>自定义Integer缓存区的值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testCache</span><span class="params">()</span> <span class="keyword">throws</span> SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cache</span> <span class="operator">=</span> Integer.class.getDeclaredClasses()[<span class="number">0</span>];</span><br><span class="line">    <span class="type">Field</span> <span class="variable">myCache</span> <span class="operator">=</span> cache.getDeclaredField(<span class="string">&quot;cache&quot;</span>);</span><br><span class="line">    myCache.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    Integer[] newCache = (Integer[]) myCache.get(cache);</span><br><span class="line">    newCache[<span class="number">132</span>] = newCache[<span class="number">133</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a + a;</span><br><span class="line">    System.out.printf(<span class="string">&quot;%d + %d = %d&quot;</span>,a,a,b);<span class="comment">// 2 + 2 = 5</span></span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(<span class="string">&quot;b = &quot;</span> + b);<span class="comment">//b = 4</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;%d&quot;</span>,b);<span class="comment">//5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>即newCache中把原来newCache[132]的位置的值替换成了newCache[133]就是4所在位置值换成了5。</p>
</blockquote>
<h3 id="BigDecimal：使用它来确保精度"><a href="#BigDecimal：使用它来确保精度" class="headerlink" title="BigDecimal：使用它来确保精度"></a>BigDecimal：使用它来确保精度</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BigDecimal</span>(BaseParser.parseDouble(strEdit) - BaseParser.parseDouble(strEdit) * taxRate);</span><br><span class="line"><span class="type">String</span> <span class="variable">realIncome</span> <span class="operator">=</span> bd.setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP).doubleValue() + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">tips</span> <span class="operator">=</span> String.format(<span class="string">&quot;提现需扣除税率为%s,实际到账金额为%s&quot;</span>,taxRate,realIncome);</span><br></pre></td></tr></table></figure>



<h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p>它使用<code>Unicode</code>字符集作为它的常量，也就是它有<code>65535</code>个常量<code>0~65535</code></p>
<h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><ul>
<li><p>数组（<code>[]</code>）、类（<code>class</code>）和接口（<code>interface</code>）</p>
</li>
<li><p>引用类型还有一种特殊的 <code>null</code> 类型。所谓引用数据类型就是对一个对象的引用，对象包括实例和数组两种。实际上，引用类型变量就是一个指针，只是 Java 语言里不再使用指针这个说法。</p>
</li>
</ul>
<p>空类型（null type）就是 null 值的类型，这种类型没有名称。因为 null 类型没有名称，所以不可能声明一个 null 类型的变量或者转换到 null 类型。<br>空引用（null）是 null 类型变量唯一的值。空引用（null）可以转换为任何引用类型。<br>在实际开发中，程序员可以忽略 null 类型，假定 null 只是引用类型的一个特殊直接量。</p>
<blockquote>
<p>注意：空引用（null）只能被转换成引用类型，不能转换成基本类型，因此不要把一个 null 值赋给基本数据类型的变量。</p>
</blockquote>
<h3 id="对象、父子类互转"><a href="#对象、父子类互转" class="headerlink" title="对象、父子类互转"></a>对象、父子类互转</h3><ul>
<li><p>类、对象、引用<br>类  对象&#x2F;实例&#x2F;对象的引用 &#x3D; new 类();</p>
<blockquote>
<p>对象&#x2F;实例&#x2F;对象的引用：指向“new 类()”的内存地址的首地址<br>new 类()：对象&#x2F;实例，不能叫做对象的引用</p>
</blockquote>
</li>
<li><p>父类转子类：父类的引用必须指向子类的实例，才能强转成子类</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>(<span class="string">&quot;First&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>(<span class="string">&quot;Second&quot;</span>);</span><br><span class="line">        boy.fu();</span><br><span class="line">        boy.show();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(person <span class="keyword">instanceof</span> Boy)&#123;<span class="comment">//直接写，没判断会有强转异常</span></span><br><span class="line">            <span class="type">Boy</span> <span class="variable">boy2</span> <span class="operator">=</span> (Boy) person;</span><br><span class="line">            boy2.fu();</span><br><span class="line">            boy2.show();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (person2 <span class="keyword">instanceof</span> Boy) &#123;<span class="comment">//直接写，没判断会有强转异常</span></span><br><span class="line">            <span class="type">Boy</span> <span class="variable">boy3</span> <span class="operator">=</span> (Boy) person2;</span><br><span class="line">            boy3.fu();</span><br><span class="line">            boy3.show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> (Girl) person;<span class="comment">//Person cannot be cast to Girl因为person是boy实例</span></span><br><span class="line">        <span class="keyword">if</span> (person <span class="keyword">instanceof</span> Girl) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fu</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boy</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String string ;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Boy</span><span class="params">(String string)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.string = string;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(string+<span class="string">&quot;Boy子类特有。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String string;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Girl</span><span class="params">(String string)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.string = string;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(string+<span class="string">&quot;Girl子类特有。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="引用类型强度排序"><a href="#引用类型强度排序" class="headerlink" title="引用类型强度排序"></a>引用类型强度排序</h3><p><strong>强引用 &gt; 软引用 &gt; 弱引用</strong></p>
<table>
<thead>
<tr>
<th>引用类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>StrongReference</code>（强引用）</td>
<td>当一个对象具有强引用，那么垃圾回收器是绝对不会的回收和销毁它的，<strong>非静态内部类会在其整个生命周期中持有对它外部类的强引用</strong></td>
</tr>
<tr>
<td><code>WeakReference</code> （弱引用）</td>
<td>在垃圾回收器运行的时候，如果对一个对象的所有引用都是弱引用的话，该对象会被回收</td>
</tr>
<tr>
<td><code>SoftReference</code>（软引用）</td>
<td>如果一个对象只具有软引用，若内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，才会回收这些对象的内存</td>
</tr>
<tr>
<td><code>PhantomReference</code>（虚引用）</td>
<td>一个只被虚引用持有的对象可能会在任何时候被<code>GC</code>回收。虚引用对对象的生存周期完全没有影响，也无法通过虚引用来获取对象实例，仅仅能在对象被回收时，得到一个系统通知（只能通过是否被加入到<code>ReferenceQueue</code>来判断是否被<code>GC</code>，这也是唯一判断对象是否被<code>GC</code>的途径）。</td>
</tr>
</tbody></table>
<h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><ul>
<li>java中二进制不显示，0开头的是八进制（比如<code>07</code>，范围<code>0~7</code>），0x开头是十六进制（比如<code>0*c</code>，范围：<code>0~9ABCDEF</code>）如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.err.println(<span class="number">101</span> + <span class="number">011</span> + <span class="number">110</span>+<span class="string">&quot;&quot;</span>);<span class="comment">//结果220</span></span><br></pre></td></tr></table></figure>

<ul>
<li>StringBuffer默认的构造器<br>StringBuffer sb&#x3D;new StringBuffer();<br>默认构造器是由系统自动分配容量，而系统容量默认值是16个字符</li>
</ul>
<h2 id="进制互转"><a href="#进制互转" class="headerlink" title="进制互转"></a>进制互转</h2><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><ul>
<li><p><code>break</code>：跳出当前的代码块，在<code>for</code>中直接跳出<code>for</code>循环  </p>
</li>
<li><p><code>continue</code>：在<code>for</code>中结束这一次循环继续下一次</p>
</li>
</ul>
<p>循环语句一般包含4个部分：</p>
<ul>
<li>初始化语句（在while外面）</li>
<li>循环条件</li>
<li>循环体</li>
<li>迭代语句（num++）</li>
</ul>
<p><code>do-while</code> （<code>do&#123;  &#125;while（条件）</code>；） <code>while</code>  <code>for</code> （初始化语句只执行一次）</p>
<p>双层<code>for</code>中（里面的<code>for</code>前面加了<code>标号</code>，<code>break 标号</code>；）那么会直接跳出外面那个for循环</p>
<p>标号的出现可以调到指定的语句 标号</p>
<p>一般能明确循环次数的话就用for，否则用while</p>
<h1 id="面向对象（自顶向下）"><a href="#面向对象（自顶向下）" class="headerlink" title="面向对象（自顶向下）"></a>面向对象（自顶向下）</h1><p><strong>面向过程（Procedure）–&gt; 面向对象（Object） –&gt; 面向组件（Component） –&gt; 面向服务（Service） –&gt; Saas&#x2F;PasS&#x2F;IasS –&gt; 互联网系统</strong></p>
<p><strong>程序&#x3D;算法+数据结构</strong></p>
<p>可以简单重构成：</p>
<p><strong>程序&#x3D;基于对象操作的算法+以对象为最小单位的数据结构</strong></p>
<p>面向对象的本质就是让对象有多态性，把不同对象以同一特性来归组，统一处理。至于所谓继承父类、实现接口等概念，只是多态性的实现细节有不同。</p>
<p><img src="/posts/2037424043/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E7%9A%84%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6.png" alt="面向对象编程的知识框架.png"></p>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>%取余（取模）  取余等于%&#x3D;：i%&#x3D;3相当于i&#x3D;i%3； ！&#x3D;不等于  &gt;&#x3D;大于等于</p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p> ！非  &amp;&amp;与  ||或</p>
<h2 id="位运算符（二进制）"><a href="#位运算符（二进制）" class="headerlink" title="位运算符（二进制）"></a>位运算符（二进制）</h2><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta">&amp;与  </span></span><br><span class="line"><span class="string">|或  </span></span><br><span class="line">^异或  </span><br><span class="line"><span class="symbol">~反</span></span><br><span class="line"><span class="symbol">&gt;&gt;有符号右移【左边的补上符号位，正数补0，负数补1】 </span></span><br><span class="line"><span class="symbol">&lt;&lt;有符号左移  </span></span><br><span class="line"><span class="symbol">&gt;&gt;&gt;无符号右移【右移之后左边都是补上0】</span></span><br><span class="line"><span class="symbol">&amp;&amp;“短路与”：只要前面那个为假，那么后面那个不判断 </span></span><br><span class="line"><span class="symbol">&amp;“非短路与”：即使前面一个为假后面也要参加判断</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">&quot;java 右移&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">5</span>;</span><br><span class="line">        System.out.println(Integer.toBinaryString(a));</span><br><span class="line">        System.out.println(Integer.toBinaryString(a &gt;&gt; <span class="number">2</span>)); <span class="comment">// 有符号右移</span></span><br><span class="line">        System.out.println(Integer.toBinaryString(a &gt;&gt;&gt; <span class="number">2</span>)); <span class="comment">// 无符号右移</span></span><br><span class="line"><span class="comment">//        java 右移</span></span><br><span class="line"><span class="comment">//        11111111111111111111111111111011</span></span><br><span class="line"><span class="comment">//        11111111111111111111111111111110</span></span><br><span class="line"><span class="comment">//        111111111111111111111111111110      注：前边的两个0被省略了</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;java 负数 左移&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">		 System.out.println(Integer.toBinaryString(b));</span><br><span class="line">		 System.out.println(Integer.toBinaryString(b &lt;&lt; <span class="number">2</span>));</span><br><span class="line"><span class="comment">//      java 负数 左移</span></span><br><span class="line"><span class="comment">//      10000000000000000000000000000000</span></span><br><span class="line"><span class="comment">//      0                                  注：不保留符号位，符号位直接移走</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;java 正数 左移&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        System.out.println(Integer.toBinaryString(c));</span><br><span class="line">        System.out.println(Integer.toBinaryString(c &lt;&lt; <span class="number">2</span>));</span><br><span class="line"><span class="comment">//      java 正数 左移</span></span><br><span class="line"><span class="comment">//      101</span></span><br><span class="line"><span class="comment">//      10100</span></span><br></pre></td></tr></table></figure>



<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>（条件表达式）？表达式1：表达式2；</p>
<h2 id="运算符的优先级（从高到低）"><a href="#运算符的优先级（从高到低）" class="headerlink" title="运算符的优先级（从高到低）"></a>运算符的优先级（从高到低）</h2><table>
<thead>
<tr>
<th>优先级</th>
<th>描述</th>
<th>运算符</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>括号</td>
<td>()、[]</td>
</tr>
<tr>
<td>2</td>
<td>正负号</td>
<td>+、-</td>
</tr>
<tr>
<td>3</td>
<td>自增自减，非</td>
<td>++、–、!</td>
</tr>
<tr>
<td>4</td>
<td>乘除，取余</td>
<td><code>*</code>、&#x2F;、%</td>
</tr>
<tr>
<td>5</td>
<td>加减</td>
<td>+、-</td>
</tr>
<tr>
<td>6</td>
<td>移位运算</td>
<td>&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td>
</tr>
<tr>
<td>7</td>
<td>大小关系</td>
<td>&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;</td>
</tr>
<tr>
<td>8</td>
<td>相等关系</td>
<td>&#x3D;&#x3D;、!&#x3D;</td>
</tr>
<tr>
<td>9</td>
<td>按位与</td>
<td>&amp;</td>
</tr>
<tr>
<td>10</td>
<td>按位异或</td>
<td>^</td>
</tr>
<tr>
<td>11</td>
<td>按位或</td>
<td>&#96;</td>
</tr>
<tr>
<td>12</td>
<td>逻辑与</td>
<td>&amp;&amp;</td>
</tr>
<tr>
<td>13</td>
<td>逻辑或</td>
<td>&#96;</td>
</tr>
<tr>
<td>14</td>
<td>条件运算</td>
<td>?:</td>
</tr>
<tr>
<td>15</td>
<td>赋值运算</td>
<td>&#x3D;、+&#x3D;、-&#x3D;、<code>*=</code>、&#x2F;&#x3D;、%&#x3D;</td>
</tr>
<tr>
<td>16</td>
<td>位赋值运算</td>
<td>&amp;&#x3D;、</td>
</tr>
</tbody></table>
<p>如果在程序中，要改变运算顺序，可以使用()。</p>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p><strong>集合：动态的对象数组</strong></p>
<p><img src="/posts/2037424043/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%9B%BE.jpg" alt="Java集合框架图"></p>
<ul>
<li><p>List接口存储一组<strong>不唯一</strong>，<strong>有序</strong>（插入顺序）的对象</p>
<p>Set 接口存储一组<strong>唯一</strong>，<strong>无序</strong>的对象。</p>
</li>
<li><p><code>HashMap</code>是非<code>synchronized</code>的，性能更好，<code>HashMap</code>可以接受**为<code>null</code>的<code>key</code>和<code>value</code>**，</p>
<p><code>Hashtable</code>是线程安全的，比<code>HashMap</code>要慢，<strong>不接受<code>null</code></strong></p>
</li>
</ul>
<h1 id="进制-1"><a href="#进制-1" class="headerlink" title="进制"></a>进制</h1><ul>
<li><p><code>java</code>中二进制不显示，<code>0</code>开头的是八进制，<code>0x</code>开头是十六进制如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.err.println(<span class="number">101</span> + <span class="number">011</span> + <span class="number">110</span>+<span class="string">&quot;&quot;</span>);<span class="comment">//结果220</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>StringBuffer</code>默认的构造器<br><code>StringBuffer sb=new StringBuffer();</code><br>默认构造器是由系统自动分配容量，而系统容量默认值是<code>16</code>个字符</p>
</li>
</ul>
<h2 id="进制互转-1"><a href="#进制互转-1" class="headerlink" title="进制互转"></a>进制互转</h2><h1 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h1><h2 id="静态static"><a href="#静态static" class="headerlink" title="静态static"></a>静态static</h2><p>用来修饰成员变量和成员方法，也可以形成static代码块<br>被静态static修饰的成员变量和成员方法 独立于该类的任何对象<br>static对象可以在它的任何对象创建之前访问，无需引用任何对象<br>静态变量在内存中只有一个拷贝<br>实例变量可以在内存中有多个拷贝，互不影响</p>
<h2 id="static用处："><a href="#static用处：" class="headerlink" title="static用处："></a>static用处：</h2><p>在对象之间共享值时<br>访问与对象无关的变量时</p>
<p>静态方法中无法访问属于实例的实例变量和非静态方法，只可以访问属于类的静态变量和静态方法</p>
<h2 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h2><p>被static修饰的成员变量和成员方法独立于该类的任何对象<br>static对象无需引用任何对象就可以直接被调用</p>
<p>在类成员变量中，被static修饰的变量叫做静态变量或类变量<br>                不被static修饰的变量叫做实例变量</p>
<p>static只用于修饰成员变量，类<br>用到static的地方：在对象之间共享值时、访问与对象无关的变量时</p>
<h2 id="静态常量"><a href="#静态常量" class="headerlink" title="静态常量"></a>静态常量</h2><p>静态常量，有static和final修饰：public static final PI 3.1415926<br>有final修饰的必然是常量，且在定义的时候要进行初始化</p>
<p>静态常量与静态变量一样可以通过类调用，</p>
<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>静态方法中只能直接访问静态变量或静态方法</p>
<p>如果对象只用一次的话，用匿名对象，用过一次就成垃圾等待垃圾回收。如：new Demo().getAge();</p>
<p>静态方法不能操作对象，只能直接访问静态方法和静态变量，不能访问实例</p>
<h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><h1 id="三大特性：封装、继承、多态"><a href="#三大特性：封装、继承、多态" class="headerlink" title="三大特性：封装、继承、多态"></a>三大特性：封装、继承、多态</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>实例化子类对象，如果子类构造方法中没有调用父类的构造方法，那么默认会调用父类的无参构造方法。</p>
<p>子类如果不用父类中的方法那么要重写方法，如果要调用父类的方法，那么可以不用写父类的方法</p>
<h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><ul>
<li><p>共同点</p>
<ul>
<li><p>抽象类和接口都不能生成具体的实例</p>
</li>
<li><p>都是作为上层使用</p>
</li>
</ul>
</li>
<li><p>不同点</p>
<ul>
<li><p>抽象类可以有属性和成员方法，接口不可以</p>
</li>
<li><p>单继承，多实现</p>
</li>
<li><p>抽象类中的变量是普通变量，接口中的变量是静态变量</p>
</li>
<li><p>抽象类表达的是一种is-a的关系，即父类和派生子类在概念上的本质是相同的。</p>
</li>
<li><p>接口表达的是一种like-a的关系，即接口和实现类的关系只是实现了定义行为，并无本质上的联系。</p>
</li>
</ul>
</li>
</ul>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul>
<li><p>多态的定义</p>
<p>“相同操作，不同结果”（相同信息，送给不同类型的对象，会有不同结果）</p>
<p>允许不同类对同一消息做出响应。</p>
</li>
<li><p>多态存在的条件：</p>
<ul>
<li>要有继承</li>
</ul>
</li>
<li><p>要有复写override</p>
</li>
<li><p>父类引用指向子类对象</p>
</li>
<li><p>多态分为</p>
<p>编译时和运行时</p>
</li>
<li><p>Java中多态的实现方式：接口实现，继承父类进行方法重写，同一个类中的方法重载</p>
</li>
<li><p>创建子类对象时，调用的方法为子类重写的方法或者继承的方法</p>
</li>
<li><p>如果我们在子类中编写一个独有的方法，此时就不能通过父类的引用创建的子类对象来调用该方法</p>
</li>
</ul>
<h3 id="多态体现在继承中"><a href="#多态体现在继承中" class="headerlink" title="多态体现在继承中"></a>多态体现在继承中</h3><p>向上转型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassA a=<span class="keyword">new</span> <span class="title class_">ClassB</span>();</span><br><span class="line">a.talk();<span class="comment">//默认a对象是父类的对象，不能调用子类的方法。编译时是父类ClassA，运行时(赋值)是子类ClassB，</span></span><br><span class="line">         <span class="comment">//执行的就是子类的方法。（前提是父类和子类都有talk方法，</span></span><br><span class="line">         <span class="comment">//如果子类没有talk方法那么结果就是走的是父类的talk方法）</span></span><br><span class="line">ClassA a=<span class="keyword">new</span> <span class="title class_">ClassA</span>();<span class="comment">//如果子类中重写了父类的方法，那么走的就是子类中的方法，否则走的就是父类的方法</span></span><br></pre></td></tr></table></figure>



<p>向下转型：(不用的)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编译时，b1是父类型</span></span><br><span class="line">ClassA b1=<span class="keyword">new</span> <span class="title class_">ClassB</span>();</span><br><span class="line">ClassB b2=(ClassB) b1;<span class="comment">//要想可用先要用instance判断是否是父类型</span></span><br></pre></td></tr></table></figure>

<ul>
<li>子类转成父类的规则：自动进行类型转换；父类型 变量名&#x3D;new 子类型（）；</li>
<li>父类转成子类的规则：强制类型转换；强转后才能访问子类特有的方法</li>
</ul>
<h3 id="同名不同参"><a href="#同名不同参" class="headerlink" title="同名不同参"></a>同名不同参</h3><p>参数<strong>个数、类型、顺序</strong>的不同</p>
<p>注意：方法返回类型不一致不行</p>
<h2 id="抽象和接口"><a href="#抽象和接口" class="headerlink" title="抽象和接口"></a>抽象和接口</h2><ul>
<li>抽象类不能有对象（不能用new此关键字来创建抽象类的对象）</li>
<li>抽象类中的抽象方法必须在子类中被重写</li>
<li>接口中的所有属性默认为：<strong>public static final</strong> ；</li>
<li>接口中的所有方法默认为：<strong>public abstract</strong> ；</li>
</ul>
<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="内部类的概念"><a href="#内部类的概念" class="headerlink" title="内部类的概念"></a>内部类的概念</h2><p>匿名内部类要调用方法内的变量，那么此变量为final型的</p>
<p>内部类：定义在其他类内部的类</p>
<h3 id="创建（非静态）内部类对象："><a href="#创建（非静态）内部类对象：" class="headerlink" title="创建（非静态）内部类对象："></a>创建（非静态）内部类对象：</h3><p>通过外部类对象来创建（非静态）内部类对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OuterClass outer=<span class="keyword">new</span>  <span class="title class_">OuterClass</span>();</span><br><span class="line">OuterClass.InnerClass inner= outer.<span class="keyword">new</span> <span class="title class_">InnerClass</span>();</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OuterClass.InnerClass inner= <span class="keyword">new</span> <span class="title class_">OuterClass</span>().<span class="keyword">new</span> <span class="title class_">InnerClass</span>();<span class="comment">//匿名形式。跟对象有关</span></span><br></pre></td></tr></table></figure>



<h3 id="创建（静态）内部类对象"><a href="#创建（静态）内部类对象" class="headerlink" title="创建（静态）内部类对象"></a>创建（静态）内部类对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OuterClass.StaticInnerClass staticinner= <span class="keyword">new</span> <span class="title class_">OuterClass</span>.StaticInnerClass();</span><br></pre></td></tr></table></figure>



<h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ul>
<li><p>内部类不会创建一个外部类一样的空间，只会创建一个内部类空间，</p>
</li>
<li><p>内部类中变量访问遵循“就近原则”</p>
</li>
<li><p>内部类可以实现“多重继承”，即外部类继承，内部类写的时候没写继承但也有继承</p>
</li>
<li><p>内部类分为：成员内部类（分为静态内部类和非静态内部类）、局部内部类</p>
</li>
<li><p>一个类调用另一个类的方法要创建对象，再通过对象调用方法。但是内部类用外部类的东西可以直接用。</p>
</li>
</ul>
<ul>
<li><strong>内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类。</strong></li>
<li><strong>内部类的方法可以直接访问外部类的所有数据，包括私有的数据。</strong></li>
</ul>
<h2 id="内部类种类"><a href="#内部类种类" class="headerlink" title="内部类种类"></a>内部类种类</h2><h3 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类:"></a>非静态内部类:</h3><blockquote>
<p>非静态内部类会持有一个外部类的实例（在非静态内部类断点会看到<code>this$0</code>这个就是外部类的实例）</p>
</blockquote>
<h3 id="静态内部类："><a href="#静态内部类：" class="headerlink" title="静态内部类："></a>静态内部类：</h3><p>也称类内部类。是外部类相关的，属于整个外部类，而不是单纯的属于外部类的某个对象<br>静态方法只能直接访问静态变量或静态方法<br>静态内部类不能直接访问外部类的非静态变量</p>
<h3 id="局部内部类："><a href="#局部内部类：" class="headerlink" title="局部内部类："></a>局部内部类：</h3><p>（作用范围是这个方法内）（没用到）调用方法与调用普通方法一样，要用内部类创建一个对象，再用这个对象调用这个局部内部类</p>
<h3 id="匿名内部类："><a href="#匿名内部类：" class="headerlink" title="匿名内部类："></a>匿名内部类：</h3><p>必须继承一个父类或实现一个接口。适用仅创建使用一次的类。<br>匿名内部类形式：参数式（匿名内部类整体当作参数）；继承式（抽象类中，实现时当子类继承）；接口式（与继承式写法一样）。</p>
<h2 id="可变参数（参数个数不确定包括零个）："><a href="#可变参数（参数个数不确定包括零个）：" class="headerlink" title="可变参数（参数个数不确定包括零个）："></a>可变参数（参数个数不确定包括零个）：</h2><p>类型确定的情况，java把可变参数当作数组来处理<br>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changeParms</span><span class="params">(<span class="type">int</span>... x)</span>&#123;</span><br><span class="line">    system.out.println(<span class="string">&quot;x=&quot;</span>+x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果参数列表中还有其他的参数类型，那么可变参数必须放在最后面</p>
<h2 id="外部类是静态的，要调用内部类的方法："><a href="#外部类是静态的，要调用内部类的方法：" class="headerlink" title="外部类是静态的，要调用内部类的方法："></a>外部类是静态的，要调用内部类的方法：</h2><p>1、如果内部类是静态方法：外部类名.内部类名  对象&#x3D;new 外部类名.内部类名；<br>2、如果内部类是普通方法：外部类名.内部类名  对象&#x3D;new 外部类名（）.new 内部类名；</p>
<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="线程的几个状态"><a href="#线程的几个状态" class="headerlink" title="线程的几个状态"></a>线程的几个状态</h2><p><img src="/posts/2037424043/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%87%A0%E4%B8%AA%E7%8A%B6%E6%80%81.jpg" alt="线程的几个状态"></p>
<h2 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h2><ul>
<li>支持多进程的操作系统不一定支持多线程。因为线程切换率比较高</li>
<li>父进程和子进程有各自独立的数据空间和代码；线程不能独立运行，父线程和子线程共享相同的数据空间并共享系统资源</li>
</ul>
<h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p>线程五个状态:新建状态（被产生时状态）、就绪（start（））、运行、阻塞（I&#x2F;O阻塞或处于挂起）、消亡（代码全部运行完毕、循环进不去、调用stop（）方法）</p>
<h2 id="线程实现方式"><a href="#线程实现方式" class="headerlink" title="线程实现方式"></a>线程实现方式</h2><p>创建新执行线程两种方法：<br>1、继承Thread类，创建该类的子类来实现多线程<br>2、通过实现一个接口，然后实现run方法，再创建Thread</p>
<h2 id="线程基本控制方法"><a href="#线程基本控制方法" class="headerlink" title="线程基本控制方法"></a>线程基本控制方法</h2><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h3><p>休眠状态的时候线程还抓着cpu但是抓的力度会比较弱，cpu容易被抢走</p>
<h3 id="数据共享"><a href="#数据共享" class="headerlink" title="数据共享"></a>数据共享</h3><ul>
<li><p>Runnable中多个线程共同操作一个对象（在内存中只有一个数据），才会出现“数据共享”的情况或者多个对象，但操作同一个static数据</p>
</li>
<li><p>extends继承Thread类不能起到共享资源的效果，而implents Runnable能够起到共享cpu资源的目的</p>
</li>
</ul>
<h3 id="优先级设置"><a href="#优先级设置" class="headerlink" title="优先级设置"></a>优先级设置</h3><p>数值越大说明抓cpu的能力越强，抓到的几率越大</p>
<h3 id="设置守护线程或用户线程（即后台线程）"><a href="#设置守护线程或用户线程（即后台线程）" class="headerlink" title="设置守护线程或用户线程（即后台线程）"></a>设置守护线程或用户线程（即后台线程）</h3><p>（守护主线程）只要主线程一结束，守护线程也马上结束</p>
<p>cpu会为每个进程分配一个端口，这样每个进程就有各自的一个cpu区域。而同一个进程中的线程可以参加抢夺属于这个进程的cpu资源，<br>同时如果加了<code>Thread.sleep(100L);</code>就能让当前运行的线程休眠一段时间，即让剩下的线程继续抢cpu资源。</p>
<p>线程1抢到数据，进入休眠，线程3抢到这个cpu资源（还没变）进入休眠，线程2抢到资源（这个资源可能变化）。<br>输出数据时线程可能抢到资源却没来得及输出就又去抢新的资源，那么可能出现某个资源不输出</p>
<h3 id="join（加入执行）"><a href="#join（加入执行）" class="headerlink" title="join（加入执行）"></a>join（加入执行）</h3><p>强制停止当前运行的线程，直到join方法执行完才会执行。join还可以设置执行时间<br>若join在主线程中调用，那么主线程停止，join子线程继续执行</p>
<p>联网和时间比较长的都放到线程中</p>
<h3 id="休眠与等待的区别"><a href="#休眠与等待的区别" class="headerlink" title="休眠与等待的区别"></a>休眠与等待的区别</h3><p>休眠时线程还抓着cpu，但是抓的力度比较弱；但是等待时则放开cpu</p>
<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>同步代码块:在参数列表中放置锁对象<br>作用：只有同步代码块中的执行完了，才会线程切换。这样就保证了线程的安全</p>
<h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>普通同步方法：锁对象是this<br>静态同步方法：锁对象是类名.class—&gt;字节码对象<br>同步代码块中：锁对象可以是this，也可以是object</p>
<h2 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h2><p>死锁发生时：（同步嵌套同步）<br>   同步代码块中调用同步方法<br>   同步方法中调用同步代码块</p>
<h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><h2 id="system类"><a href="#system类" class="headerlink" title="system类"></a>system类</h2><p>常用数据类型的封装类</p>
<p>system类包含三个成员属性</p>
<ol>
<li>标准输入流（in）</li>
<li>标准输出流（out）</li>
<li>标准错误输出流（err）</li>
</ol>
<p>封装类特点：java可以直接处理基本类型的，但是有些情况下需要将其作为对象来处理，<br>这时需要将其转化为包装类了。</p>
<h2 id="string类"><a href="#string类" class="headerlink" title="string类"></a>string类</h2><p><strong>是被final修饰的类不能被继承</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s=<span class="string">&quot;.....&quot;</span>;<span class="comment">//直接赋值</span></span><br><span class="line">String str=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;....&quot;</span>);<span class="comment">//通过构造方法赋值</span></span><br></pre></td></tr></table></figure>



<h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><ul>
<li><code>a.equals(b)</code>:比较两个字符串内容的大小，返回值boolean型</li>
<li><code>a==b</code>:比较的是两个字符串的对象（地址）是否一致，返回值boolean型。如果是new出来的不同对象，那么他们的地址不一样</li>
</ul>
<h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><ul>
<li><p>“+”或者concat（String str）方法（不过后者会产生垃圾不提倡）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line">String name1=name.concat(<span class="string">&quot;  &quot;</span>);<span class="comment">//括号里必须是String型数据</span></span><br><span class="line">String name2=name1+<span class="number">123</span>;<span class="comment">//“+”号左右只要有一个字符串，那么另一个也会转成字符串类型</span></span><br><span class="line">					  <span class="comment">//“+”加号里面有了append的连接作用，所以final型的name2才可以改变</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name2=<span class="string">&quot;we&quot;</span>+<span class="string">&quot;are&quot;</span>+<span class="string">&quot;pig&quot;</span>;<span class="comment">//旧版本中在内存中是五个对象，新版本中是一个对象</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="append连接"><a href="#append连接" class="headerlink" title="append连接"></a>append连接</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.pringtln(name3.indexOf(<span class="string">&quot;d&quot;</span>));<span class="comment">//找第一次出现的d在连接后的字符串中的索引，括号内容是char型也可以是可以表示字符（ASCL）的数字，若找不到则返回-1；</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.pringtln(name3.lastindexOf(<span class="string">&quot;d&quot;</span>));<span class="comment">//找最后一个d出现的索引</span></span><br></pre></td></tr></table></figure>





<h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">system.out.pringtln(name3.substring（<span class="number">5</span>,<span class="number">7</span>）);<span class="comment">//截取第5到第7个字符，包含了第5个字符，但不包含第7个字符。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">system.out.pringtln(name3.substring（<span class="number">5</span>）)；<span class="comment">//截取从指定位置开始到结束</span></span><br></pre></td></tr></table></figure>



<h3 id="字节数组转化为字符串"><a href="#字节数组转化为字符串" class="headerlink" title="字节数组转化为字符串"></a>字节数组转化为字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] b=<span class="keyword">new</span> <span class="title class_">name3</span>.getString</span><br></pre></td></tr></table></figure>

<p>int型转成字符串</p>
<h3 id="字符串转成int型"><a href="#字符串转成int型" class="headerlink" title="字符串转成int型"></a>字符串转成int型</h3><h3 id="字符串拆分"><a href="#字符串拆分" class="headerlink" title="字符串拆分"></a>字符串拆分</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] split（String regex）;String[] split（String regex，<span class="type">int</span> limit）;<span class="comment">//limit表示拆成两段，如果数字大于本来可拆分的最大段数，那么取最大段数</span></span><br></pre></td></tr></table></figure>



<h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">name3.length();<span class="comment">//字符串长度获取要用方法获取</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">strSplit.length;<span class="comment">//数组通过属性来获取</span></span><br></pre></td></tr></table></figure>





<p>StringBuffer线程安全的可变字符序列。类似于String的字符串缓冲区，但不能修改。</p>
<p>StringBuider与StringBuffer的API共享</p>
<p>输出中如果加了字符串，那么默认是字符串型数据，会把其余数转成字符串型。<br>若想要输出别的类型的那么不加字符串</p>
<h3 id="String的源码实现"><a href="#String的源码实现" class="headerlink" title="String的源码实现"></a>String的源码实现</h3><h3 id="String、StringBuffer、StringBuilder"><a href="#String、StringBuffer、StringBuilder" class="headerlink" title="String、StringBuffer、StringBuilder"></a>String、StringBuffer、StringBuilder</h3><ul>
<li>String是final类，不能被继承。对于已经存在的String对象，修改它的值，就是重新创建一个对象</li>
<li>StringBuffer是一个类似于String的字符串缓冲区，使用append()方法修改Stringbuffer的值，使用toString()方法转换为字符串，是线程安全的</li>
<li>StringBuilder用来替代于StringBuffer，StringBuilder是非线程安全的，速度更快</li>
</ul>
<h3 id="x3D-x3D-问题"><a href="#x3D-x3D-问题" class="headerlink" title="&#x3D;&#x3D;问题"></a>&#x3D;&#x3D;问题</h3><p>字符串常量会被放在方法区</p>
<h3 id="Object的equals与String的equals"><a href="#Object的equals与String的equals" class="headerlink" title="Object的equals与String的equals"></a>Object的equals与String的equals</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">null</span>; System.out.println(a.equals(<span class="string">&quot;ssss&quot;</span>));<span class="comment">//报空指针错误System.out.println(&quot;ssss&quot;.equals(null));//不报错</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>原因：<br>例1的equals是Object的equals，例2的equals是String的equals</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Object的equals源码public boolean equals(Object obj) &#123;return (this == obj);&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//String的equals源码public boolean equals(Object anObject) &#123;if (this == anObject) &#123;  return true;&#125;if (anObject instanceof String) &#123;  String anotherString = (String) anObject;  int n = value.length;  if (n == anotherString.value.length) &#123;      char v1[] = value;      char v2[] = anotherString.value;      int i = 0;      while (n-- != 0) &#123;          if (v1[i] != v2[i])                  return false;          i++;      &#125;      return true;  &#125;&#125;return false;&#125;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>方法：<code>hashcode</code>&#x2F;<code>toString</code>&#x2F;<code>equal</code>&#x2F;<code>clone</code>&#x2F;<code>finalize</code>&#x2F;线程的一些方法</p>
<h3 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals 方法"></a>equals 方法</h3><p>对两个对象的地址值进行的比较（即比较引用是否相同）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);&#125;</span><br></pre></td></tr></table></figure>

<h3 id="equal和-x3D-x3D-区别"><a href="#equal和-x3D-x3D-区别" class="headerlink" title="equal和&#x3D;&#x3D;区别"></a>equal和&#x3D;&#x3D;区别</h3><ul>
<li><p>&#x3D;&#x3D;</p>
<ul>
<li><p>基础类型：值</p>
</li>
<li><p>引用类型：地址</p>
</li>
</ul>
</li>
<li><p>equal</p>
<ul>
<li><p>默认地址</p>
</li>
<li><p>可根据业务修改（如String重写了equal）</p>
</li>
</ul>
</li>
<li><p>equal和<code>hashcode</code>关系</p>
</li>
</ul>
<h3 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode 方法"></a>hashCode 方法</h3><p>hashCode() 方法给对象返回一个hash code值。这个方法被用于 hash tables，例如HashMap。</p>
<p>它的性质是：</p>
<ul>
<li><p>在一个Java应用的执行期间，如果一个对象提供给 equals 做比较的信息没有被修改的话，该对象多次调用hashCode() 方法，该方法必须始终如一返回同一个 integer。</p>
</li>
<li><p>如果两个对象根据 equals(Object) 方法是相等的，那么调用二者各自的 hashCode() 方法必须产生同一个 integer 结果。</p>
</li>
<li><p>并不要求根据 equals(Object) 方法不相等的两个对象，调用二者各自的 hashCode() 方法必须产生不同的 integer 结果。然而，程序员应该意识到对于不同的对象产生不同的 integer 结果，有可能会提高 hash table 的性能。</p>
</li>
</ul>
<p>在 JDK 中，Object 的 hashcode 方法是本地方法，也就是用 c 语言或 c++ 实现的，该方法直接返回对象的 内存地址。在 String 类，重写了 hashCode 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hash;    <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;        <span class="type">char</span> val[] = value;        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; value.length; i++) &#123;            h = <span class="number">31</span> * h + val[i];        &#125;        hash = h;    &#125;    <span class="keyword">return</span> h;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Object-hashCode-方法与System-identityHashCode-object-的区别"><a href="#Object-hashCode-方法与System-identityHashCode-object-的区别" class="headerlink" title="Object.hashCode()方法与System.identityHashCode(object)的区别"></a>Object.hashCode()方法与System.identityHashCode(object)的区别</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hhh&quot;</span>);<span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hhh&quot;</span>);System.out.println(System.identityHashCode(a));System.out.println(System.identityHashCode(b));System.out.println(a.hashCode());System.out.println(b.hashCode());</span><br></pre></td></tr></table></figure>

<blockquote>
<p>打印结果:<br>前两个不同<br>后两个相同</p>
</blockquote>
<p>分析：</p>
<p>这是为什么呢，我们知道目前a和b是两个不同的对象，他们在内存中存放的地址是不同的，System.identityHashCode方法是java根据对象在内存中的地址算出来的一个数值，不同的地址算出来的结果是不一样的。因此这里打印出的结果不一样。<br>doc上如是说：返回给定对象的哈希码，该代码与默认的方法 hashCode() 返回的代码一样，<strong>无论给定对象的类是否重写 hashCode()。</strong><br>但是为什么后两个相同呢？这是因为，String类中已经重新写了hashCode()方法，也就是说，String类中hashcode，已经不是根据对象在内存中的地址计算出来的。（具体怎么算出来的，我还没有研究），就是说即使对象在内存中的地址不一样，String中hashcode也可能一样</p>
<h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><p>Random类<br>冒泡排序</p>
<p>时间类<br>Date类表特定的瞬间，精确到毫秒值示<br>Date()  精确到毫秒值 选择java的util的包 CST：中国标准时间<br>Date(long date)精确到指定的毫秒值 </p>
<p>SimpleDateFormat<br>SimpleDateFormat 是一个以与语言环境有关的方式来格式化和解析日期的具体类。<br>         它允许进行格式化（日期 -&gt; 文本）、解析（文本 -&gt; 日期）和规范化。<br>         按时间模板解析（解析模板要对应时间），放在date类中；格式化（用第二个模板）</p>
<p>Calender类：</p>
<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><ul>
<li>Exception、Error是Throwable类的子类</li>
<li>Error类对象由Java虚拟机生成并抛出，不可捕捉  </li>
<li>不管有没有异常，finally中的代码都会执行</li>
<li>当try、catch中有return时，finally中的代码依然会继续执行</li>
</ul>
<h2 id="常见的Error"><a href="#常见的Error" class="headerlink" title="常见的Error"></a>常见的Error</h2><table>
<thead>
<tr>
<th>常见的Error</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>OutOfMemoryError</td>
<td>StackOverflowError</td>
<td>NoClassDeffoundError</td>
</tr>
</tbody></table>
<h2 id="常见的Exception"><a href="#常见的Exception" class="headerlink" title="常见的Exception"></a>常见的Exception</h2><table>
<thead>
<tr>
<th>常见的Exception</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>常见的非检查性异常</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ArithmeticException</td>
<td>ArrayIndexOutOfBoundsException</td>
<td>ClassCastException</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>IndexOutOfBoundsException</td>
<td>NullPointerException</td>
</tr>
<tr>
<td>NumberFormatException</td>
<td>SecurityException</td>
<td>UnsupportedOperationException</td>
</tr>
<tr>
<td>常见的检查性异常</td>
<td></td>
<td></td>
</tr>
<tr>
<td>IOException</td>
<td>CloneNotSupportedException</td>
<td>IllegalAccessException</td>
</tr>
<tr>
<td>NoSuchFieldException</td>
<td>NoSuchMethodException</td>
<td>FileNotFoundException</td>
</tr>
</tbody></table>
<h2 id="try、catch、finally中的细节分析"><a href="#try、catch、finally中的细节分析" class="headerlink" title="try、catch、finally中的细节分析"></a>try、catch、finally中的细节分析</h2><p>看一个例子（例1），来讲解java里面中try、catch、finally的处理流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryCatchFinally</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;finally&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t = <span class="string">&quot;try&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            t = <span class="string">&quot;catch&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            t = <span class="string">&quot;finally&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.print(TryCatchFinally.test());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先程序执行try语句块，把变量t赋值为try，由于没有发现异常，接下来执行finally语句块，把变量t赋值为finally，然后return t，则t的值是finally，最后t的值就是finally，程序结果应该显示finally，但是实际结果为try。为什么会这样，我们不妨先看看这段代码编译出来的class对应的字节码，看虚拟机内部是如何执行的。</p>
<p>我们用</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">javap -verbose TryCatchFinally</span></span><br></pre></td></tr></table></figure>

<p>来显示目标文件(.class文件)字节码信息</p>
<blockquote>
<p>系统运行环境：mac os lion系统 64bit<br>jdk信息：Java(TM) SE Runtime Environment (build 1.6.0_29-b11-402-11M3527) Java HotSpot(TM) 64-Bit Server VM (build 20.4-b02-402, mixed mode)</p>
</blockquote>
<p>编译出来的字节码部分信息，我们只看test方法，其他的先忽略掉</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">public</span> static final java.lang.String test();</span><br><span class="line"> <span class="attribute">Code</span>:</span><br><span class="line">  <span class="attribute">Stack</span>=<span class="number">1</span>, Locals=<span class="number">4</span>, Args_size=<span class="number">0</span></span><br><span class="line">  <span class="attribute">0</span>:    ldc    #<span class="number">16</span>; //String </span><br><span class="line">  <span class="attribute">2</span>:    astore_0</span><br><span class="line">  <span class="attribute">3</span>:    ldc    #<span class="number">18</span>; //String try</span><br><span class="line">  <span class="attribute">5</span>:    astore_0</span><br><span class="line">  <span class="attribute">6</span>:    aload_0</span><br><span class="line">  <span class="attribute">7</span>:    astore_3</span><br><span class="line">  <span class="attribute">8</span>:    ldc    #<span class="number">20</span>; //String finally</span><br><span class="line">  <span class="attribute">10</span>:    astore_0</span><br><span class="line">  <span class="attribute">11</span>:    aload_3</span><br><span class="line">  <span class="attribute">12</span>:    areturn</span><br><span class="line">  <span class="attribute">13</span>:    astore_1</span><br><span class="line">  <span class="attribute">14</span>:    ldc    #<span class="number">22</span>; //String catch</span><br><span class="line">  <span class="attribute">16</span>:    astore_0</span><br><span class="line">  <span class="attribute">17</span>:    aload_0</span><br><span class="line">  <span class="attribute">18</span>:    astore_3</span><br><span class="line">  <span class="attribute">19</span>:    ldc    #<span class="number">20</span>; //String finally</span><br><span class="line">  <span class="attribute">21</span>:    astore_0</span><br><span class="line">  <span class="attribute">22</span>:    aload_3</span><br><span class="line">  <span class="attribute">23</span>:    areturn</span><br><span class="line">  <span class="attribute">24</span>:    astore_2</span><br><span class="line">  <span class="attribute">25</span>:    ldc    #<span class="number">20</span>; //String finally</span><br><span class="line">  <span class="attribute">27</span>:    astore_0</span><br><span class="line">  <span class="attribute">28</span>:    aload_2</span><br><span class="line">  <span class="attribute">29</span>:    athrow</span><br><span class="line"> <span class="attribute">Exception</span> table:</span><br><span class="line">  <span class="attribute">from</span>   to  target type</span><br><span class="line">    <span class="attribute">3</span>     <span class="number">8</span>    <span class="number">13</span>   Class java/lang/Exception</span><br><span class="line"></span><br><span class="line">    <span class="attribute">3</span>     <span class="number">8</span>    <span class="number">24</span>   any</span><br><span class="line">   <span class="attribute">13</span>    <span class="number">19</span>    <span class="number">24</span>   any</span><br><span class="line"> <span class="attribute">LineNumberTable</span>: </span><br><span class="line">  <span class="attribute">line</span> <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">  <span class="attribute">line</span> <span class="number">8</span>: <span class="number">3</span></span><br><span class="line">  <span class="attribute">line</span> <span class="number">9</span>: <span class="number">6</span></span><br><span class="line">  <span class="attribute">line</span> <span class="number">15</span>: <span class="number">8</span></span><br><span class="line">  <span class="attribute">line</span> <span class="number">9</span>: <span class="number">11</span></span><br><span class="line">  <span class="attribute">line</span> <span class="number">10</span>: <span class="number">13</span></span><br><span class="line">  <span class="attribute">line</span> <span class="number">12</span>: <span class="number">14</span></span><br><span class="line">  <span class="attribute">line</span> <span class="number">13</span>: <span class="number">17</span></span><br><span class="line">  <span class="attribute">line</span> <span class="number">15</span>: <span class="number">19</span></span><br><span class="line">  <span class="attribute">line</span> <span class="number">13</span>: <span class="number">22</span></span><br><span class="line">  <span class="attribute">line</span> <span class="number">14</span>: <span class="number">24</span></span><br><span class="line">  <span class="attribute">line</span> <span class="number">15</span>: <span class="number">25</span></span><br><span class="line">  <span class="attribute">line</span> <span class="number">16</span>: <span class="number">28</span></span><br><span class="line"></span><br><span class="line"> <span class="attribute">LocalVariableTable</span>: </span><br><span class="line">  <span class="attribute">Start</span>  Length  Slot  Name   Signature</span><br><span class="line">  <span class="attribute">3</span>      <span class="number">27</span>      <span class="number">0</span>    t       Ljava/lang/String;</span><br><span class="line">  <span class="attribute">14</span>      <span class="number">10</span>      <span class="number">1</span>    e       Ljava/lang/Exception;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">StackMapTable</span>: number_of_entries = <span class="number">2</span></span><br><span class="line">  <span class="attribute">frame_type</span> = <span class="number">255</span> /* full_frame */</span><br><span class="line">    <span class="attribute">offset_delta</span> = <span class="number">13</span></span><br><span class="line">    <span class="attribute">locals</span> =<span class="meta"> [ class java/lang/String ]</span></span><br><span class="line">    <span class="attribute">stack</span> =<span class="meta"> [ class java/lang/Exception ]</span></span><br><span class="line">  <span class="attribute">frame_type</span> = <span class="number">74</span> /* same_locals_1_stack_item */</span><br><span class="line">    <span class="attribute">stack</span> =<span class="meta"> [ class java/lang/Throwable ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>首先看LocalVariableTable信息，这里面定义了两个变量 一个是t String类型,一个是e Exception 类型接下来看Code部分<br>第[0-2]行，给第0个变量赋值“”，也就是String t&#x3D;””；<br>第[3-6]行，也就是执行try语句块 赋值语句 ，也就是 t &#x3D; “try”;<br>第7行，重点是第7行，把第s对应的值”try”赋给第三个变量，但是这里面第三个变量并没有定义,这个比较奇怪<br>第[8-10] 行，对第0个变量进行赋值操作，也就是t&#x3D;”finally”<br>第[11-12]行，把第三个变量对应的值返回<br>通过字节码，我们发现，在try语句的return块中，return 返回的引用变量（t 是引用类型）并不是try语句外定义的引用变量t，而是系统重新定义了一个局部引用t’，这个引用指向了引用t对应的值，也就是try ，即使在finally语句中把引用t指向了值finally，因为return的返回引用已经不是t ，所以引用t的对应的值和try语句中的返回值无关了。</p>
</blockquote>
<p>下面再看一个例子：（例2）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryCatchFinally</span> &#123;</span><br><span class="line">   <span class="meta">@SuppressWarnings(&quot;finally&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           t = <span class="string">&quot;try&quot;</span>;</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// result = &quot;catch&quot;;</span></span><br><span class="line">            t = <span class="string">&quot;catch&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            t = <span class="string">&quot;finally&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.print(TryCatchFinally.test());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里稍微修改了 第一段代码，只是在finally语句块里面加入了 一个 return t 的表达式。按照第一段代码的解释，先进行try{}语句，然后在return之前把当前的t的值try保存到一个变量t’，然后执行finally语句块，修改了变量t的值，在返回变量t。这里面有两个return语句，但是程序到底返回的是try 还是 finally。接下来我们还是看字节码信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line"> Code:</span><br><span class="line">  Stack=<span class="number">1</span>, Locals=<span class="number">2</span>, Args_size=<span class="number">0</span></span><br><span class="line">  <span class="number">0</span>:    ldc    #<span class="number">16</span>; <span class="comment">//String </span></span><br><span class="line">  <span class="number">2</span>:    astore_0</span><br><span class="line">  <span class="number">3</span>:    ldc    #<span class="number">18</span>; <span class="comment">//String try</span></span><br><span class="line">  <span class="number">5</span>:    astore_0</span><br><span class="line">  <span class="number">6</span>:    goto    <span class="number">17</span></span><br><span class="line">  <span class="number">9</span>:    astore_1</span><br><span class="line">  <span class="number">10</span>:    ldc    #<span class="number">20</span>; <span class="comment">//String catch</span></span><br><span class="line">  <span class="number">12</span>:    astore_0</span><br><span class="line">  <span class="number">13</span>:    goto    <span class="number">17</span></span><br><span class="line">  <span class="number">16</span>:    pop</span><br><span class="line">  <span class="number">17</span>:    ldc    #<span class="number">22</span>; <span class="comment">//String finally</span></span><br><span class="line">  <span class="number">19</span>:    astore_0</span><br><span class="line">  <span class="number">20</span>:    aload_0</span><br><span class="line">  <span class="number">21</span>:    areturn</span><br><span class="line"> Exception table:</span><br><span class="line">  from   to  target type</span><br><span class="line">    <span class="number">3</span>     <span class="number">9</span>     <span class="number">9</span>   Class java/lang/Exception</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>    <span class="number">16</span>    <span class="number">16</span>   any</span><br><span class="line"> LineNumberTable: </span><br><span class="line">  line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">  line <span class="number">8</span>: <span class="number">3</span></span><br><span class="line">  line <span class="number">9</span>: <span class="number">6</span></span><br><span class="line">  line <span class="number">10</span>: <span class="number">9</span></span><br><span class="line">  line <span class="number">12</span>: <span class="number">10</span></span><br><span class="line">  line <span class="number">13</span>: <span class="number">13</span></span><br><span class="line">  line <span class="number">14</span>: <span class="number">16</span></span><br><span class="line">  line <span class="number">15</span>: <span class="number">17</span></span><br><span class="line">  line <span class="number">16</span>: <span class="number">20</span></span><br><span class="line"></span><br><span class="line"> LocalVariableTable: </span><br><span class="line">  Start  Length  Slot  Name   Signature</span><br><span class="line">  <span class="number">3</span>      <span class="number">19</span>      <span class="number">0</span>    t       Ljava/lang/String;</span><br><span class="line">  <span class="number">10</span>      <span class="number">6</span>      <span class="number">1</span>    e       Ljava/lang/Exception;</span><br><span class="line"></span><br><span class="line"> StackMapTable: number_of_entries = <span class="number">3</span></span><br><span class="line">  frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">    offset_delta = <span class="number">9</span></span><br><span class="line">    locals = [ <span class="keyword">class</span> <span class="title class_">java</span>/lang/String ]</span><br><span class="line">    stack = [ <span class="keyword">class</span> <span class="title class_">java</span>/lang/Exception ]</span><br><span class="line">  frame_type = <span class="number">70</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">    stack = [ <span class="keyword">class</span> <span class="title class_">java</span>/lang/Throwable ]</span><br><span class="line">  frame_type = <span class="number">0</span> <span class="comment">/* same */</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这段代码翻译出来的字节码和第一段代码完全不同，还是继续看code属性<br>第[0-2]行、[3-5]行第一段代码逻辑类似，就是初始化t，把try中的t进行赋值try<br>第6行，这里面跳转到第17行，[17-19]就是执行finally里面的赋值语句，把变量t赋值为finally，然后返回t对应的值<br>我们发现try语句中的return语句给忽略。可能jvm认为一个方法里面有两个return语句并没有太大的意义，所以try中的return语句给忽略了，直接起作用的是finally中的return语句，所以这次返回的是finally。</p>
</blockquote>
<p>接下来再看看复杂一点的例子：（例3）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryCatchFinally</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@SuppressWarnings(&quot;finally&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           t = <span class="string">&quot;try&quot;</span>;</span><br><span class="line">           Integer.parseInt(<span class="literal">null</span>);</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           t = <span class="string">&quot;catch&quot;</span>;</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           t = <span class="string">&quot;finally&quot;</span>;</span><br><span class="line">           <span class="comment">// System.out.println(t);</span></span><br><span class="line">           <span class="comment">// return t;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       System.out.print(TryCatchFinally.test());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里面try语句里面会抛出 java.lang.NumberFormatException，所以程序会先执行catch语句中的逻辑，t赋值为catch，在执行return之前，会把返回值保存到一个临时变量里面t ‘，执行finally的逻辑，t赋值为finally，但是返回值和t’，所以变量t的值和返回值已经没有关系了，返回的是catch</p>
<p>例4：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryCatchFinally</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@SuppressWarnings(&quot;finally&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           t = <span class="string">&quot;try&quot;</span>;</span><br><span class="line">           Integer.parseInt(<span class="literal">null</span>);</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           t = <span class="string">&quot;catch&quot;</span>;</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           t = <span class="string">&quot;finally&quot;</span>;</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       System.out.print(TryCatchFinally.test());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个和例2有点类似，由于try语句里面抛出异常，程序转入catch语句块，catch语句在执行return语句之前执行finally，而finally语句有return,则直接执行finally的语句值，返回finally</p>
<p>例5：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryCatchFinally</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@SuppressWarnings(&quot;finally&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           t = <span class="string">&quot;try&quot;</span>;</span><br><span class="line">           Integer.parseInt(<span class="literal">null</span>);</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           t = <span class="string">&quot;catch&quot;</span>;</span><br><span class="line">           Integer.parseInt(<span class="literal">null</span>);</span><br><span class="line">           <span class="keyword">return</span> t;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           t = <span class="string">&quot;finally&quot;</span>;</span><br><span class="line">           <span class="comment">//return t;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       System.out.print(TryCatchFinally.test());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个例子在catch语句块添加了Integer.parser(null)语句，强制抛出了一个异常。然后finally语句块里面没有return语句。继续分析一下，由于try语句抛出异常，程序进入catch语句块，catch语句块又抛出一个异常，说明catch语句要退出，则执行finally语句块，对t进行赋值。然后catch语句块里面抛出异常。结果是抛出java.lang.NumberFormatException异常</p>
<p>例子6：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryCatchFinally</span> &#123;  </span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;finally&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">test</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;      </span><br><span class="line">        <span class="keyword">try</span> &#123;       </span><br><span class="line">            t = <span class="string">&quot;try&quot;</span>;     </span><br><span class="line">            Integer.parseInt(<span class="literal">null</span>);   </span><br><span class="line">            <span class="keyword">return</span> t;       </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;       </span><br><span class="line">            t = <span class="string">&quot;catch&quot;</span>;     </span><br><span class="line">            Integer.parseInt(<span class="literal">null</span>);   </span><br><span class="line">            <span class="keyword">return</span> t;    </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;      </span><br><span class="line">            t = <span class="string">&quot;finally&quot;</span>;  </span><br><span class="line">            <span class="keyword">return</span> t;     </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">        System.out.print(TryCatchFinally.test()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个例子和上面例子中唯一不同的是，这个例子里面finally 语句里面有return语句块。try catch中运行的逻辑和上面例子一样，当catch语句块里面抛出异常之后，进入finally语句快，然后返回t。则程序忽略catch语句块里面抛出的异常信息，直接返回t对应的值 也就是finally。方法不会抛出异常</p>
<p>例子7：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryCatchFinally</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;finally&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t = <span class="string">&quot;try&quot;</span>;</span><br><span class="line">            Integer.parseInt(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            t = <span class="string">&quot;catch&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            t = <span class="string">&quot;finally&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.print(TryCatchFinally.test()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>这个例子里面catch语句里面catch的是NPE异常，而不是java.lang.NumberFormatException异常，所以不会进入catch语句块，直接进入finally语句块，finally对s赋值之后，由try语句抛出java.lang.NumberFormatException异常。</p>
<p>例子8:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryCatchFinally</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;finally&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t = <span class="string">&quot;try&quot;</span>;</span><br><span class="line">            Integer.parseInt(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            t = <span class="string">&quot;catch&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            t = <span class="string">&quot;finally&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.print(TryCatchFinally.test());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和上面的例子中try catch的逻辑相同，try语句执行完成执行finally语句，finally赋值s 并且返回s ，最后程序结果返回finally</p>
<p>例子9：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryCatchFinally</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;finally&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t = <span class="string">&quot;try&quot;</span>;<span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            t = <span class="string">&quot;catch&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            t = <span class="string">&quot;finally&quot;</span>;</span><br><span class="line">            String.valueOf(<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.print(TryCatchFinally.test());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个例子中，对finally语句中添加了String.valueOf(null), 强制抛出NPE异常。首先程序执行try语句，在返回执行，执行finally语句块，finally语句抛出NPE异常，整个结果返回NPE异常。</p>
<h1 id="操作流"><a href="#操作流" class="headerlink" title="操作流"></a>操作流</h1><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><ul>
<li><code>OutputStreamWriter</code>:可以将输出的字符流变为字节流的输出形式</li>
<li><code>InputStreamReader</code>:将输入的字节流变为字符流输入形式</li>
</ul>
<p>写入数据：</p>
<blockquote>
<p>程序–&gt;字符数据–&gt;字符流–&gt;<code>OutputStreamWriter</code>–&gt;字节流–&gt;文件<br>程序–&gt;–&gt;文件</p>
</blockquote>
<p>读取数据：</p>
<blockquote>
<p>程序&lt;–字符数据&lt;–字符流&lt;–<code>InputStreamRreader</code>&lt;–字节流&lt;–文件</p>
</blockquote>
<p>只要用到缓冲区就一定要刷新</p>
<h2 id="内存操作流"><a href="#内存操作流" class="headerlink" title="内存操作流"></a>内存操作流</h2><p>随机访问流RandomAccessFile类<br>数据操作流<br>常用编码集</p>
<p>类中只要有toString若没有写toString方法，那么会默认调用toString方法</p>
<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p>掌握file文件类<br><strong>File类的实例不可变</strong>，一旦创建，表示的路径不可改变</p>
<p>作业：通过递归算法，创建两个文件夹且每个文件夹中都有各自的文件</p>
<h2 id="IO流步骤"><a href="#IO流步骤" class="headerlink" title="IO流步骤"></a>IO流步骤</h2><ol>
<li>找到一个要操作的资源，可能是文件，可能是其他的位置</li>
<li>根据字节流或字符流的子类，决定输入及输出的位置</li>
<li>进行读或写的操作</li>
<li>关闭</li>
</ol>
<ul>
<li>有Bu开头的是有缓冲区的流</li>
<li>以Stram结尾的是字节流</li>
<li>以reader结尾的是字符流</li>
<li><code>InputStreamReader()</code>&#x2F;&#x2F;字符流转成字节流的桥梁</li>
</ul>
<p>字节流：程序–》字节流–》操作文件<br>字符流：程序–》字节流–》缓存–》操作文件</p>
<p>纯文本（本身就是字符）的时候用字符流比较方便<br>图片、音频文件的时候（不能转成字符）用字节流<br>即，都用字节流操作都行</p>
<p>输入输出流的缓冲区默认大小是8K,即8192bite</p>
<h1 id="流的规律"><a href="#流的规律" class="headerlink" title="流的规律"></a>流的规律</h1><h2 id="流操作的基本规律："><a href="#流操作的基本规律：" class="headerlink" title="流操作的基本规律："></a>流操作的基本规律：</h2><p>最痛苦的就是流对象有很多，不知道改用哪一个</p>
<p>通过三个明确来完成</p>
<ol>
<li><p>明确源和目的</p>
<p>源：输入流。<code>InputStream</code>  <code>Reader</code></p>
<p>目的：输出流。<code>OutputTream</code>  <code>Writer</code></p>
</li>
<li><p>操作的数据是否是纯文本</p>
<p>是：字符流</p>
<p>不是：字节流</p>
</li>
<li><p>当体系明确后，再明确要使用哪个具体的对象</p>
<p>通过设备来进行区分：</p>
<p>源设备:内存，硬盘，键盘</p>
<p>目的设备：内存，硬盘，控制台</p>
</li>
</ol>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><strong>需求：将一个文本文件中数据存储到另一个文件中。复制文件。</strong></p>
<p>分析：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">源：因为是源，所以使用读取流。InputStream Reader</span><br><span class="line">是不是操作文本文件</span><br><span class="line">是！这时就可以选择Reader</span><br><span class="line">这样体系就明确了</span><br><span class="line"></span><br><span class="line">接下来明确要使用该体系中哪个对象</span><br><span class="line">明确设备：硬盘。上一个文件</span><br><span class="line">Reader体系中可以操作文件的是FileReader</span><br><span class="line"></span><br><span class="line">是否需要提高效率：是！加入Reader体系中缓冲区BufferReader </span><br><span class="line">FileReader fr=<span class="keyword">new</span> <span class="type">FileReader</span>（<span class="string">&quot;a.txt&quot;</span>）;</span><br><span class="line">BufferReader bufr=<span class="keyword">new</span> <span class="type">BufferReader</span>（fr）；</span><br></pre></td></tr></table></figure>

<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">目的：OutputTream  <span class="built_in">Writer</span></span><br><span class="line">是否是纯文本</span><br><span class="line">是！<span class="built_in">Writer</span></span><br><span class="line">设备：硬盘，一个文件。</span><br><span class="line"><span class="built_in">Writer</span>体系中可以操作的对象是FileWriter</span><br><span class="line"></span><br><span class="line">是否需要提高效率：是！加入<span class="built_in">Writer</span>体系中缓冲区BufferWriter</span><br><span class="line">FileWriter fw=<span class="keyword">new</span> FileWriter（<span class="string">&quot;b.txt&quot;</span>）;</span><br><span class="line">BufferWriter bufw=<span class="keyword">new</span> BufferWriter（fw）；</span><br></pre></td></tr></table></figure>



<p><strong>需求：将键盘录入的数据保存到一个文件中</strong></p>
<p>这个需求中有源和目的都存在</p>
<p>那么分别分析</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">源：InputStream Reader</span><br><span class="line">是不是纯文本？是！Reader</span><br><span class="line">设备：键盘，对应的对象是<span class="built_in">system</span>.<span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">不是选择Reader吗？<span class="built_in">system</span>.<span class="keyword">in</span>对应的不是字节流吗？</span><br><span class="line">为了操作键盘的文本数据方便，转成字符流按照字符串操作是最方便的</span><br><span class="line">所以既然明确了Reader，那么就将<span class="built_in">system</span>.<span class="keyword">in</span>转换成Reader，</span><br><span class="line"></span><br><span class="line">用了Reader体系中转换流，InputStreamReader</span><br><span class="line">InputStreamReader isr=<span class="built_in">new</span> InputStreamReader(<span class="built_in">system</span>.<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">需要提高效率吗？需要！BufferReader</span><br><span class="line">BufferReader bufr=<span class="built_in">new</span> BufferReader（isr）；</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">目的：OutputTream Writer</span><br><span class="line"></span><br><span class="line">是否是纯文本？是！Writer</span><br><span class="line">设备：硬盘，一个文件。使用FileWriter</span><br><span class="line">FileWriter fw=<span class="keyword">new</span> <span class="constructor">FileWriter(“<span class="params">c</span>.<span class="params">txt</span>”)</span>;</span><br><span class="line"></span><br><span class="line">需要提高效率吗？需要！BufferWriter</span><br><span class="line">BufferWriter bufw=<span class="keyword">new</span> BufferWriter（fw）；</span><br></pre></td></tr></table></figure>



<p>扩展一下，想要把录入的数据按照指定的编码表（utf-8）,将数据存到文件中。<br>但是存储时，需要加入指定编码表。而指定的编码表只有转换流可以指定。</p>
<p>所以要使用的对象是<code>OutputStreamWriter</code>而该转换流对象要接收一个字节输出流。而且还可以操作的文件的字节输出流<code>FileOutputStream</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(”d.txt”),”UTF-<span class="number">8</span>”);</span><br></pre></td></tr></table></figure>

<p>需要高效吗？需要。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferWriter bufw=<span class="keyword">new</span> <span class="title class_">BufferWriter</span>(osw);</span><br></pre></td></tr></table></figure>

<p>所以记住，转换流怎么使用，字符和字节之间的桥梁，通常，涉及到字符编码转换时，需要用到转换流。（搞码表用的，父类（<code>InputStreamReader</code>）可以用别的码表，子类（<code>FileReader</code>）的编码写死了，不能变）</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="List-addall-报java-lang-UnsupportedOperationException"><a href="#List-addall-报java-lang-UnsupportedOperationException" class="headerlink" title="List addall 报java.lang.UnsupportedOperationException"></a>List addall 报java.lang.UnsupportedOperationException</h2><p>报错代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] membersArray = request.getParameterValues(<span class="string">&#x27;members&#x27;</span>);</span><br><span class="line">List&lt;String&gt; memberList = Arrays.asList(membersArray);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(String member: membersList)&#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> Dao.findByName(member);</span><br><span class="line">    List&lt;String&gt; seeAlso;</span><br><span class="line">    seeAlso = person.getSeeAlso();</span><br><span class="line">    <span class="keyword">if</span>(!seeAlso.contains(groupDn))&#123;</span><br><span class="line">        seeAlso.add(groupDn);</span><br><span class="line">        person.setSeeAlso(seeAlso);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原因：<a href="https://stackoverflow.com/questions/5755477/java-list-add-unsupportedoperationexception">Not every <code>List</code> implementation supports the <code>add()</code> method.</a></p>
<p>解决：<code>List&lt;String&gt; memberList = new ArrayList&lt;String&gt;(Arrays.asList(membersArray));</code></p>
<h2 id="Long-parseLong-str-、Integer-parseInt-str-、Double-parseDouble-str-的区别"><a href="#Long-parseLong-str-、Integer-parseInt-str-、Double-parseDouble-str-的区别" class="headerlink" title="Long.parseLong(str)、Integer.parseInt(str)、Double.parseDouble(str)的区别"></a>Long.parseLong(str)、Integer.parseInt(str)、Double.parseDouble(str)的区别</h2><p><code>Long.parseLong(str)</code>、<code>Integer.parseInt(str)</code>  <code>catch NumberFormatException</code> 就可以了，<code>str</code> 为 <code>null</code> 也可以 <code>catch</code>住。</p>
<p><code>Double.parseDouble(str)</code> 当 <code>str</code> 为 <code>null</code> 时会抛出 <code>NPE</code>，<code>catch NumberFormatException</code> 不行的。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>原码、反码、补码</title>
    <url>/posts/263413316/</url>
    <content><![CDATA[<h1 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h1><p><code>+0</code>:<code>0000 0000</code></p>
<p><code>-0</code>:<code>1000 0000</code></p>
<p><strong>原码：</strong></p>
<ol>
<li>整数：符号位（1位）+数值位</li>
<li>小数：</li>
</ol>
<p><strong>反码：</strong></p>
<p>由原码求补码or由补码求原码的过渡码。正数的反码是它本身；负数的反码是原码除符号位外的<strong>按位取反</strong>。</p>
<ol>
<li><code>+0</code>反码：<code>0000 0000</code></li>
<li><code>-0</code>反码：<code>1111 1111</code></li>
</ol>
<p><strong>补码：</strong></p>
<ol>
<li>正整数：原码</li>
<li>负整数：反码+1</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-题目</title>
    <url>/posts/486115587/</url>
    <content><![CDATA[<h1 id="可刷题的网站"><a href="#可刷题的网站" class="headerlink" title="可刷题的网站"></a><a href="https://java.ecool.fun/">可刷题的网站</a></h1><h1 id="复习必须掌握"><a href="#复习必须掌握" class="headerlink" title="复习必须掌握"></a>复习必须掌握</h1><h2 id="Java语言8大特性"><a href="#Java语言8大特性" class="headerlink" title="Java语言8大特性"></a>Java语言8大特性</h2><ol>
<li>简单的</li>
<li>解释的（有解释器也叫<code>java</code>虚拟机<code>JVM</code>）</li>
<li>面向对象的</li>
<li>与平台无关的（跨平台可以运行）</li>
<li>健壮的（强类型的）</li>
<li>多线程的</li>
<li>安全的（内存方面、保护重要文件）</li>
<li>动态的语言</li>
</ol>
<h2 id="数据类型分为哪两大类"><a href="#数据类型分为哪两大类" class="headerlink" title="数据类型分为哪两大类?"></a>数据类型分为哪两大类?</h2><p>基本数据类型和引用数据类型</p>
<h2 id="请说说有哪些基本数据类型，它们对应的存储空间分别是多少？"><a href="#请说说有哪些基本数据类型，它们对应的存储空间分别是多少？" class="headerlink" title="请说说有哪些基本数据类型，它们对应的存储空间分别是多少？"></a>请说说有哪些基本数据类型，它们对应的存储空间分别是多少？</h2><ol>
<li><p>数值型</p>
<ul>
<li><p>整数类型</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>占据空间大小</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td><code>byte</code></td>
<td>1个字节</td>
<td>-2^7~2^7-1</td>
</tr>
<tr>
<td><code>short</code></td>
<td>2个字节</td>
<td>-2^15~2^15-1</td>
</tr>
<tr>
<td><code>int</code></td>
<td>4个字节</td>
<td>-2^31~2^31-1</td>
</tr>
<tr>
<td><code>long</code></td>
<td>8个字节</td>
<td>-2^63~2^63-1</td>
</tr>
</tbody></table>
</li>
<li><p>浮点类型</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>占据空间大小</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td><code>float</code></td>
<td>4个字节</td>
<td></td>
</tr>
<tr>
<td><code>double</code></td>
<td>8个字节</td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>字符型</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>占据空间大小</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td><code>char</code>无符号整数</td>
<td>2个字节</td>
<td>0~2^16</td>
</tr>
</tbody></table>
</li>
<li><p>布尔型</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>占据空间大小</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td><code>boolean</code></td>
<td>1个字节</td>
<td>只有true、false两个值</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="引用类型有哪些种类？请举例说明"><a href="#引用类型有哪些种类？请举例说明" class="headerlink" title="引用类型有哪些种类？请举例说明"></a>引用类型有哪些种类？请举例说明</h2><p>类（<code>class</code>）、接口（<code>interface</code>）、数组（<code>[]</code>）</p>
<h2 id="那种数据类型不能进行类型转换？"><a href="#那种数据类型不能进行类型转换？" class="headerlink" title="那种数据类型不能进行类型转换？"></a>那种数据类型不能进行类型转换？</h2><p>布尔型<code>Boolean</code></p>
<h2 id="说说空指针异常如何解决？"><a href="#说说空指针异常如何解决？" class="headerlink" title="说说空指针异常如何解决？"></a>说说空指针异常如何解决？</h2><p>空指针异常问题一般是定义变量没有赋初值造成的，在调用某个对象之前，要进行非空的验证或者赋初值，否则就容易出空指针异常。</p>
<h2 id="do-while和while之间的区别"><a href="#do-while和while之间的区别" class="headerlink" title="do while和while之间的区别"></a><code>do while</code>和<code>while</code>之间的区别</h2><p>前者先执行一次循环体再判断。后者先判断，符合条件再执行循环体。</p>
<h2 id="while和for之间的区别"><a href="#while和for之间的区别" class="headerlink" title="while和for之间的区别"></a><code>while</code>和<code>for</code>之间的区别</h2><p>两者都是循环的作用。但是<code>for</code>要提前知道循环的次数，而<code>while</code>则不需要（当然知道循环次数用<code>while</code>也可以）。</p>
<h2 id="随便写出30个java关键字，并说说Java关键字的特点"><a href="#随便写出30个java关键字，并说说Java关键字的特点" class="headerlink" title="随便写出30个java关键字，并说说Java关键字的特点"></a>随便写出30个<code>java</code>关键字，并说说<code>Java</code>关键字的特点</h2><table>
<thead>
<tr>
<th>用于</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>用于定义数据类型的关键字</td>
<td><code>class</code>    <code>interface</code>    <code>byte</code>    <code>short</code>    <code>int</code>    <code>long</code>    <code>float</code>    <code>double</code>    <code>char</code>    <code>loolean</code>    <code>void</code></td>
</tr>
<tr>
<td>用于定义数据类型值的关键字</td>
<td><code>true</code>    <code>false</code>    <code>null</code></td>
</tr>
<tr>
<td>用于定义流程控制的关键字</td>
<td><code>if</code>    <code>else</code>    <code>switch</code>    <code>case</code>    <code>default</code>    <code>while</code>    <code>do</code>    <code>for</code>    <code>break</code>    <code>continue</code>    <code>return</code></td>
</tr>
<tr>
<td>用于定义访问权限修饰符的关键字</td>
<td><code>private</code>    <code>protected</code>    <code>public</code></td>
</tr>
<tr>
<td>用于定义类，函数，变量修饰符的关键字</td>
<td><code>abstract</code>    <code>final</code>    <code>static</code>    <code>synchronized</code></td>
</tr>
<tr>
<td>用于定义类与类之间关系的关键字</td>
<td><code>extends</code>    <code>implements</code></td>
</tr>
<tr>
<td>用于定义建立实例及引用实例，判断实例的关键字</td>
<td><code>new</code>    <code>this</code>    <code>super</code>    <code>instanceof</code></td>
</tr>
<tr>
<td>用于定义异常处理的关键字</td>
<td><code>try</code>    <code>catch</code>    <code>finally</code>    <code>throw</code>    <code>throws</code></td>
</tr>
<tr>
<td>用于包的关键字</td>
<td><code>package</code>    <code>inport</code></td>
</tr>
<tr>
<td>其他修饰符的关键字</td>
<td><code>native</code>    <code>strictfp</code>    <code>transient</code>    <code>volatile</code>    <code>assert</code></td>
</tr>
</tbody></table>
<ul>
<li>transient：被它修饰的成员属性变量不被序列化。<blockquote>
<p>如密码等信息，不想在网络操作中被传输，用它修饰，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化</p>
</blockquote>
</li>
<li>native：native method是一个java调用非java代码的接口，对应的方法不在当前文件，在其他语言（如C、C++）实现的文件中。可与java的（除abstract外的）其他标识符连用，【abstract指明这些方法无实现体】</li>
<li>strictfp</li>
<li>volatile</li>
<li>assert</li>
</ul>
<h2 id="流程控制中有哪些流程结构"><a href="#流程控制中有哪些流程结构" class="headerlink" title="流程控制中有哪些流程结构"></a>流程控制中有哪些流程结构</h2><p>顺序结构、循环结构、分支结构</p>
<h2 id="int-i-34-int-j-i-这个时候i和j分别说多少？为什么呢得到这个结果？"><a href="#int-i-34-int-j-i-这个时候i和j分别说多少？为什么呢得到这个结果？" class="headerlink" title="int i=34; int j=--i;这个时候i和j分别说多少？为什么呢得到这个结果？"></a><code>int i=34; int j=--i;</code>这个时候<code>i</code>和<code>j</code>分别说多少？为什么呢得到这个结果？</h2><p>i&#x3D;33  j&#x3D;33  其中–i就是在使用i之前先减1</p>
<h2 id="进制有哪些表现形式？"><a href="#进制有哪些表现形式？" class="headerlink" title="进制有哪些表现形式？"></a>进制有哪些表现形式？</h2><p>二进制、八进制、十进制、十六进制</p>
<h2 id="分别说说break、continue以及return的作用"><a href="#分别说说break、continue以及return的作用" class="headerlink" title="分别说说break、continue以及return的作用"></a>分别说说<code>break</code>、<code>continue</code>以及<code>return</code>的作用</h2><ul>
<li><p><code>break</code>跳出结束当前结构的代码块，可用于分支结构和循环结构</p>
</li>
<li><p><code>continue</code>结束当次循环体，不再执行<code>continue</code>后面的循环体代码，直接进行下一次循环，可用于循环结构。</p>
</li>
<li><p><code>return</code>（不一定有参数类表就有返回值，没有参数类表不一定没有返回值）结束方法</p>
<p> (1) <code>return</code> 从当前的方法中退出,返回到该调用的方法的语句处,继续执行</p>
<p> (2) <code>return</code> 返回一个值给调用该方法的语句，返回值的数据类型必须与方法的声明中的返回值的类型一致，可以使用强制类型转换来使数据类型一致<br> (3) <code>return</code> 当方法说明中用<code>void</code>声明返回类型为空时，应使用这种格式，不返回任何值。</p>
</li>
</ul>
<h2 id="amp-amp-与-amp-的区别"><a href="#amp-amp-与-amp-的区别" class="headerlink" title="&amp;&amp;与&amp;的区别"></a><code>&amp;&amp;</code>与<code>&amp;</code>的区别</h2><p>  <code>&amp;</code>和<code>&amp;&amp;</code>都可以用作逻辑的运算符，表示逻辑与（<code>and</code>），只有当运算符两边都为<code>true</code>时整个运算结果才为<code>true</code>，否则为<code>false</code></p>
<ul>
<li><code>&amp;&amp;</code>还具有短路的功能,如果前面有<code>false</code>的话后面的不判断</li>
<li><code>&amp;</code>表示按位与操作，还可以用在位运算符。</li>
<li><code>&amp;</code>的两端无论如何都要执行到</li>
</ul>
<h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="||和|的区别"></a><code>||</code>和<code>|</code>的区别</h2><p><code>|</code>的两端无论如何都要执行到</p>
<h2 id="分别说说5-4，5-4，-5-4和-5-4相对应得到的结果"><a href="#分别说说5-4，5-4，-5-4和-5-4相对应得到的结果" class="headerlink" title="分别说说5%4，5%-4，-5%4和-5%-4相对应得到的结果"></a>分别说说<code>5%4</code>，<code>5%-4</code>，<code>-5%4</code>和<code>-5%-4</code>相对应得到的结果</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>%<span class="number">4</span>=<span class="number">1</span>，<span class="number">5</span>%-<span class="number">4</span>=<span class="number">1</span>，-<span class="number">5</span>%<span class="number">4</span>=-<span class="number">1</span>，-<span class="number">5</span>%-<span class="number">4</span>=-<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="现在有3，4，22，33，1，把他们放到数组中；说说数组如何初始化"><a href="#现在有3，4，22，33，1，把他们放到数组中；说说数组如何初始化" class="headerlink" title="现在有3，4，22，33，1，把他们放到数组中；说说数组如何初始化"></a>现在有3，4，22，33，1，把他们放到数组中；说说数组如何初始化</h2><p>   初始化：静态、动态</p>
<ul>
<li><p>静态：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">22</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="number">33</span>;</span><br><span class="line">arr[<span class="number">4</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="什么是数组？什么是二维数组？"><a href="#什么是数组？什么是二维数组？" class="headerlink" title="什么是数组？什么是二维数组？"></a>什么是数组？什么是二维数组？</h2><p>数组是<strong>同一种数据类型</strong>的集合。数组就是一个装有多个同一种类型数据的容器。<br>二维数组就是以一维数组为元素的一维数组。</p>
<h2 id="如何获取数组的长度，数组的角标由几开始"><a href="#如何获取数组的长度，数组的角标由几开始" class="headerlink" title="如何获取数组的长度，数组的角标由几开始"></a>如何获取数组的长度，数组的角标由几开始</h2><p><code>array.length</code>	角标由<code>0</code>开始</p>
<h2 id="数组的最大脚标是？"><a href="#数组的最大脚标是？" class="headerlink" title="数组的最大脚标是？"></a>数组的最大脚标是？</h2><p><code>array.length-1</code></p>
<h2 id="switch中条件语句可以是哪些数据类型？"><a href="#switch中条件语句可以是哪些数据类型？" class="headerlink" title="switch中条件语句可以是哪些数据类型？"></a><code>switch</code>中条件语句可以是哪些数据类型？</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>，<span class="type">short</span>，<span class="type">int</span>，<span class="type">char</span>，string（JDK1<span class="number">.7</span>新加入）</span><br></pre></td></tr></table></figure>

<h2 id="如何遍历一个二维数组，并且获得二维数组中一维数组的每个元素"><a href="#如何遍历一个二维数组，并且获得二维数组中一维数组的每个元素" class="headerlink" title="如何遍历一个二维数组，并且获得二维数组中一维数组的每个元素"></a>如何遍历一个二维数组，并且获得二维数组中一维数组的每个元素</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=arr.length;i++)&#123;</span><br><span class="line">    <span class="type">int</span>[] a=arr[i];</span><br><span class="line">    system.out.print(“第”+(i+<span class="number">1</span>)+”行的是：”);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;a.length;j++)&#123;</span><br><span class="line">        system.out.print(a[j]+”、”);</span><br><span class="line">    &#125;</span><br><span class="line">    system.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="33，4，22，35，1，6，23通过编程获得它们的最大值"><a href="#33，4，22，35，1，6，23通过编程获得它们的最大值" class="headerlink" title="33，4，22，35，1，6，23通过编程获得它们的最大值"></a>33，4，22，35，1，6，23通过编程获得它们的最大值</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">int</span>[] arr = &#123; <span class="number">23</span>, <span class="number">33</span>, <span class="number">4</span>, <span class="number">22</span>, <span class="number">35</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">23</span> &#125;;</span><br><span class="line">	<span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (max &lt; arr[i]) &#123;</span><br><span class="line">			max = arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	System.out.println(max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手写一个冒泡排序-相邻两个数之间的比较"><a href="#手写一个冒泡排序-相邻两个数之间的比较" class="headerlink" title="手写一个冒泡排序:相邻两个数之间的比较"></a>手写一个冒泡排序:相邻两个数之间的比较</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">32</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手写一个选择排序：第一个数和剩下的所有数进行比较，获取第一个最值；第二个数和…"><a href="#手写一个选择排序：第一个数和剩下的所有数进行比较，获取第一个最值；第二个数和…" class="headerlink" title="手写一个选择排序：第一个数和剩下的所有数进行比较，获取第一个最值；第二个数和…."></a>手写一个选择排序：第一个数和剩下的所有数进行比较，获取第一个最值；第二个数和….</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123; <span class="number">33</span>, <span class="number">4</span>, <span class="number">22</span>, <span class="number">35</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">23</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[j]) &#123;</span><br><span class="line">            <span class="type">int</span> temp;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组常见异常？"><a href="#数组常见异常？" class="headerlink" title="数组常见异常？"></a>数组常见异常？</h2><p>数组脚标越界异常（<code>ArrayIndexOutOfBoundsException</code>）<br>访问到数组中不存在的脚标时发生。<br>空指针异常（<code>NullPointerException</code>）<br>数组引用没有指向实体，却在代码中对数组进行操作时发生。</p>
<h2 id="什么是类？什么是对象？"><a href="#什么是类？什么是对象？" class="headerlink" title="什么是类？什么是对象？"></a>什么是类？什么是对象？</h2><p>类是对某一类事物的描述、是抽象的概念上的定义。<br>对象是实际的个体</p>
<h2 id="如何定义一个类？"><a href="#如何定义一个类？" class="headerlink" title="如何定义一个类？"></a>如何定义一个类？</h2><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">访问控制符 <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">	成员变量；</span><br><span class="line">	成员方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">	....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何定义一个方法？"><a href="#如何定义一个方法？" class="headerlink" title="如何定义一个方法？"></a>如何定义一个方法？</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="string">[访问修饰符]</span> 返回值类型 方法名（参数列表)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何创建对象？"><a href="#如何创建对象？" class="headerlink" title="如何创建对象？"></a>如何创建对象？</h2><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">类名  对象名=<span class="keyword">new</span> <span class="type"></span>类名（）；</span><br></pre></td></tr></table></figure>

<h2 id="如何调用方法（假设对象名为p-方法名为ss且参数列表为-int-age-String-name-）"><a href="#如何调用方法（假设对象名为p-方法名为ss且参数列表为-int-age-String-name-）" class="headerlink" title="如何调用方法（假设对象名为p,方法名为ss且参数列表为(int age,String name)）"></a>如何调用方法（假设对象名为p,方法名为ss且参数列表为(int age,String name)）</h2><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">对象名.方法名<span class="comment">(参数列表)</span>；</span><br></pre></td></tr></table></figure>

<p>例如：<code>p.ss(age,name)</code></p>
<h2 id="什么是方法重写-说出方法重写前提条件以及附加条件-？"><a href="#什么是方法重写-说出方法重写前提条件以及附加条件-？" class="headerlink" title="什么是方法重写(说出方法重写前提条件以及附加条件)？"></a>什么是方法重写(说出方法重写前提条件以及附加条件)？</h2><p>前提条件:继承关系<br>附加条件：</p>
<ul>
<li>方法名必须相同</li>
<li>参数列表必须相同</li>
<li>返回值类型必须相同</li>
</ul>
<h2 id="什么是方法重载-说出方法重载前提条件以及附加条件-？"><a href="#什么是方法重载-说出方法重载前提条件以及附加条件-？" class="headerlink" title="什么是方法重载(说出方法重载前提条件以及附加条件)？"></a>什么是方法重载(说出方法重载前提条件以及附加条件)？</h2><p>前提条件：同一个类<br>附加条件：</p>
<ul>
<li>方法名相同</li>
<li>参数列表必须不同</li>
<li>与返回值类型无关</li>
<li>两个或两个以上</li>
</ul>
<h2 id="构造方法最主要的作用？"><a href="#构造方法最主要的作用？" class="headerlink" title="构造方法最主要的作用？"></a>构造方法最主要的作用？</h2><p>对类进行实例化，或者说是创建对象</p>
<h2 id="哪个类是Java所有类的根？"><a href="#哪个类是Java所有类的根？" class="headerlink" title="哪个类是Java所有类的根？"></a>哪个类是<code>Java</code>所有类的根？</h2><p><code>Object</code></p>
<h2 id="static可以修饰哪些？"><a href="#static可以修饰哪些？" class="headerlink" title="static可以修饰哪些？"></a><code>static</code>可以修饰哪些？</h2><p>常量、变量、方法、类、代码块</p>
<h2 id="final可以修饰哪些？并且说明修饰之后它们分别有什么特点"><a href="#final可以修饰哪些？并且说明修饰之后它们分别有什么特点" class="headerlink" title="final可以修饰哪些？并且说明修饰之后它们分别有什么特点"></a><code>final</code>可以修饰哪些？并且说明修饰之后它们分别有什么特点</h2><p>变量、方法、类</p>
<h2 id="Java中每个类如果没有构造方法，那么系统是否提供一个无参不做任务操作的构造方法？如果有，请写出来（以Person举例）"><a href="#Java中每个类如果没有构造方法，那么系统是否提供一个无参不做任务操作的构造方法？如果有，请写出来（以Person举例）" class="headerlink" title="Java中每个类如果没有构造方法，那么系统是否提供一个无参不做任务操作的构造方法？如果有，请写出来（以Person举例）"></a><code>Java</code>中每个类如果没有构造方法，那么系统是否提供一个无参不做任务操作的构造方法？如果有，请写出来（以<code>Person</code>举例）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="面向对象有哪些特征？"><a href="#面向对象有哪些特征？" class="headerlink" title="面向对象有哪些特征？"></a>面向对象有哪些特征？</h2><p>封装  继承  多态<br>多态：继承关系、重写父类方法、子类有特有方法</p>
<h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p><code>父类型 引用变量名 = new 子类类型（）；</code>&#x2F;&#x2F;调用方法是子类重写或继承父类的方法，无法调用子类特有方法。（子类转成父类，向上转型）</p>
<h2 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h2><p><code>子类型 引用变量名 = （子类类型）new 父类类型（）；</code>&#x2F;&#x2F;（向下转型）要强转。注意可能会有强转异常，要用<code>instanceof</code>来判断</p>
<h2 id="有哪些代码块？"><a href="#有哪些代码块？" class="headerlink" title="有哪些代码块？"></a>有哪些代码块？</h2><p>静态、普通、构造、同步</p>
<h2 id="静态代码块、普通代码块、构造代码块、构造方法的执行顺序"><a href="#静态代码块、普通代码块、构造代码块、构造方法的执行顺序" class="headerlink" title="静态代码块、普通代码块、构造代码块、构造方法的执行顺序"></a>静态代码块、普通代码块、构造代码块、构造方法的执行顺序</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">静态代码块（只执行一次）》构造方法》构造代码块》普通代码块</span><br></pre></td></tr></table></figure>

<h2 id="类的实例化顺序"><a href="#类的实例化顺序" class="headerlink" title="类的实例化顺序"></a>类的实例化顺序</h2><p>问题：比如父类静态数据、构造函数、字段、子类静态数据、构造函数、字段，当new的时候它们的执行顺序？</p>
<blockquote>
<p>答案：类加载器实例化进行的操作步骤（<code>加载--&gt;连接--&gt;初始化</code>）。</p>
<p>父类静态变量–&gt;父类静态代码块–&gt;子类静态变量–&gt;子类静态代码块–&gt;父类非静态变量（父类实例成员变量）–&gt;父类构造函数–&gt;子类非静态变量（子类实例化成员变量）–&gt;子类构造函数</p>
</blockquote>
<h2 id="构造方法有哪些特点？"><a href="#构造方法有哪些特点？" class="headerlink" title="构造方法有哪些特点？"></a>构造方法有哪些特点？</h2><ul>
<li>构造方法的方法名必须与类名相同；</li>
<li>构造方法不需要返回类型修饰符（包括<code>void</code>）；</li>
<li>构造方法的作用是对类对象进行初始化；</li>
<li>构造方法在用户实例化对象时由系统自动调用；</li>
<li>没有定义构造方法时，java默认在每个类中定义一个无任何参数不做任何操作的构造方法；</li>
</ul>
<h2 id="抽象类和接口之间的区别？"><a href="#抽象类和接口之间的区别？" class="headerlink" title="抽象类和接口之间的区别？"></a>抽象类和接口之间的区别？</h2><ul>
<li><p>抽象类和接口都不能直接实例化</p>
</li>
<li><p>抽象类要被子类继承，接口要被类实现</p>
</li>
<li><p>接口里定义的变量默认<code>public static</code>修饰，抽象类中的变量是普通变量</p>
</li>
<li><p>抽象类里的抽象方法必须全部被子类实现，如果子类不能全部实现父类抽象方法，那么该子类只能是抽象类。</p>
<p>同样，一个类实现接口的时候，如果不能全部实现接口的方法，那么该类也只能是抽象类</p>
</li>
<li><p>抽象类里可以没有抽象方法</p>
</li>
<li><p>如果一个类里有抽象方法，那么该类只能是抽象类</p>
</li>
<li><p>抽象方法要被实现，所以不能是静态的，也不能是私有的</p>
</li>
<li><p>接口可以继承接口且可多继承接口。类只能单继承</p>
</li>
</ul>
<h2 id="请创建一个静态内部类对象，以外部类名为P-内部类名为Q举例"><a href="#请创建一个静态内部类对象，以外部类名为P-内部类名为Q举例" class="headerlink" title="请创建一个静态内部类对象，以外部类名为P,内部类名为Q举例"></a>请创建一个静态内部类对象，以外部类名为P,内部类名为Q举例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">P</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Q</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="error和exception有什么区别"><a href="#error和exception有什么区别" class="headerlink" title="error和exception有什么区别"></a><code>error</code>和<code>exception</code>有什么区别</h2><ul>
<li><code>error</code>：通常出现重大问题。（如：运行的类不存在或者内存溢出等，不编写针对代码对其处理）</li>
<li><code>exception</code>：在运行时函数出现的一些情况。可以通过<code>try...catch...finally</code>处理</li>
</ul>
<h2 id="error和exception的父类是什么？"><a href="#error和exception的父类是什么？" class="headerlink" title="error和exception的父类是什么？"></a><code>error</code>和<code>exception</code>的父类是什么？</h2><p><code>Throwable</code>类</p>
<h2 id="在处理异常的过程中，是否可以有多个catch？如果有，请举个例子"><a href="#在处理异常的过程中，是否可以有多个catch？如果有，请举个例子" class="headerlink" title="在处理异常的过程中，是否可以有多个catch？如果有，请举个例子"></a>在处理异常的过程中，是否可以有多个<code>catch</code>？如果有，请举个例子</h2><p>可以有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123; </span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException io)&#123;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="RandomAcessFile的父类是？"><a href="#RandomAcessFile的父类是？" class="headerlink" title="RandomAcessFile的父类是？"></a><code>RandomAcessFile</code>的父类是？</h2><p><code>Object</code>类</p>
<h2 id="RandomAcessFile有哪些特有方法"><a href="#RandomAcessFile有哪些特有方法" class="headerlink" title="RandomAcessFile有哪些特有方法"></a><code>RandomAcessFile</code>有哪些特有方法</h2><p><code>finalize()</code></p>
<h2 id="RandomAcessFile是否可以读？是否可以写？为什么？"><a href="#RandomAcessFile是否可以读？是否可以写？为什么？" class="headerlink" title="RandomAcessFile是否可以读？是否可以写？为什么？"></a><code>RandomAcessFile</code>是否可以读？是否可以写？为什么？</h2><p>可以</p>
<table>
<thead>
<tr>
<th></th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>The file is opened in read-only mode. An IOException is thrown if any of the write methods is called.</td>
</tr>
<tr>
<td>rw</td>
<td>The file is opened for reading and writing. If the file does not  exist, it will be created.</td>
</tr>
<tr>
<td>rws</td>
<td>The file is opened for reading and writing. Every change of the file’s content or metadata must be written synchronously to the target device.</td>
</tr>
<tr>
<td>rwd</td>
<td>The file is opened for reading and writing. Every change of the file’s content must be written synchronously to the target device.</td>
</tr>
</tbody></table>
<h2 id="String、StringBuffer、StrngBuilder之间的区别"><a href="#String、StringBuffer、StrngBuilder之间的区别" class="headerlink" title="String、StringBuffer、StrngBuilder之间的区别"></a><code>String</code>、<code>StringBuffer</code>、<code>StrngBuilder</code>之间的区别</h2><ul>
<li><p><code>StringBuilder</code>和<code>StringBuffre</code>非常类似，均代表可变的字符序列，而且方法也一样</p>
</li>
<li><p><code>String</code>：不可变字符序列（不能被继承）</p>
</li>
<li><p><code>StringBuffer</code>：可变字符序列、效率低、线程安全（同步）</p>
</li>
<li><p><code>StringBuilder</code>（<code>JDK1.5</code>）：可变字符序列、效率高、线程不安全（异步）</p>
</li>
<li><p><code>String</code>使用陷阱：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;<span class="comment">//创建了一个字符串</span></span><br><span class="line">s = s + <span class="string">&quot;b&quot;</span>;<span class="comment">//实际上原来的&quot;a&quot;字符串对象已经丢弃了，现在又产生了一个字符串s+&quot;b&quot;（也就是&quot;ab&quot;）。如果多次执行这些改变串内容的操作，会导致大量副本字符串对象存留在内存中，降低效率。如果这样的操作放到循环中，会极大影响程序的性能。</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="final、finally以及finalize之间的区别"><a href="#final、finally以及finalize之间的区别" class="headerlink" title="final、finally以及finalize之间的区别"></a><code>final</code>、<code>finally</code>以及<code>finalize</code>之间的区别</h2><ul>
<li><p><code>final</code>：</p>
<p>修饰符（关键字），如果一个类被声明为<code>final</code>，意味着它不能再派生出新的子类，不能作为父类被继承。因此一个类不能既被声明为<code>abstract</code>的，又被声明为<code>final</code>的。将变量或方法声明为<code>final</code>，可以保证它们在使用中不被改变。</p>
<p>被声明为<code>final</code>的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。被声明为<code>final</code>的方法也同样只能使用，不能重载。</p>
</li>
<li><p><code>finally</code></p>
<p>在异常处理时提供<code>finally</code>块来执行任何清除操作。如果抛出一个异常，那么相匹配的<code>catch</code>子句就会执行，然后控制就会进入<code>finally</code>块（如果有的话）</p>
</li>
<li><p><code>finalize</code></p>
<p>继承于<code>Object</code>—方法名。</p>
<p>（调用垃圾回收机制的时候才会用到）<code>Java</code>技术允许使用<code>finalize()</code>方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。</p>
</li>
</ul>
<h2 id="说说垃圾回收机制"><a href="#说说垃圾回收机制" class="headerlink" title="说说垃圾回收机制"></a>说说垃圾回收机制</h2><p>调用<code>System.gc()</code>实际上等效于调用<code>Runtime.getRuntime().gc()</code></p>
<h2 id="请阐述Io流处理流程"><a href="#请阐述Io流处理流程" class="headerlink" title="请阐述Io流处理流程"></a>请阐述<code>Io</code>流处理流程</h2><p>在整个IO操作中，输入和输出流是一个重要的概念。不管使用哪种流进行操作，都是采用如下步骤完成：</p>
<ol>
<li>找到一个要操作的资源，可能是文件，可能是其他的位置。</li>
<li>（确定操作对象）根据字节流或字符流的子类，决定输入及输出的位置。</li>
<li>进行读或写的操作。</li>
<li>关闭流。</li>
</ol>
<h2 id="Io流按传输方向分为？按数据单位分为？按功能分为？"><a href="#Io流按传输方向分为？按数据单位分为？按功能分为？" class="headerlink" title="Io流按传输方向分为？按数据单位分为？按功能分为？"></a><code>Io</code>流按传输方向分为？按数据单位分为？按功能分为？</h2><ol>
<li><p>按流向分:</p>
<p>输入流: 程序可以从中读取数据的流。</p>
<p>输出流: 程序能向其中写入数据的流。</p>
</li>
<li><p>按数据传输单位分:</p>
<p>字节流: 以字节为单位传输数据的流 <code>FileInputStream</code> <code>FileOutputStream</code> <code>BufferInputStream</code> <code>BufferOutputStream</code></p>
<p>字符流: 以字符为单位传输数据的流 <code>FileReader</code> <code>FileWriter</code> <code>BufferReader</code> <code>BufferWriter</code>（后缀是父类，前面的是功能）</p>
</li>
<li><p>按功能分:</p>
<p>节点流: 用于直接操作目标设备的流（低级流）</p>
<p>过滤流: 是对一个已存在的流的链接和封装，通过对数据进行处理为程序提供功能强大、灵活的读写功能。（高级流，放文件或对象）</p>
</li>
</ol>
<h2 id="amp-amp-与-的优先级"><a href="#amp-amp-与-的优先级" class="headerlink" title="&amp;&amp;与|| 的优先级"></a>&amp;&amp;与|| 的优先级</h2><ul>
<li><p><code>java</code>的 &amp;&amp; 优先级高于 ||，而不是同级</p>
</li>
<li><p>“逻辑与”、“逻辑或”，都有短路作用</p>
</li>
</ul>
<h2 id="String类能被继承吗，为什么"><a href="#String类能被继承吗，为什么" class="headerlink" title="String类能被继承吗，为什么"></a><code>String</code>类能被继承吗，为什么</h2><p>不能。在<code>Java</code>中，只要是被定义为<code>final</code>的类，也可以说是被<code>final</code>修饰的类，就是不能被继承的。</p>
<h2 id="ArrayList和LinkedList的区别"><a href="#ArrayList和LinkedList的区别" class="headerlink" title="ArrayList和LinkedList的区别"></a><code>ArrayList</code>和<code>LinkedList</code>的区别</h2><p>简单的区别： </p>
<ol>
<li><code>ArrayList</code>是实现了基于动态数组的数据结构，<code>LinkedList</code>基于链表的数据结构。 （<code>LinkedList</code>是双向链表，有<code>next</code>也有<code>previous</code>） </li>
<li>对于随机访问<code>get</code>和<code>set</code>，<code>ArrayList</code>觉得优于<code>LinkedList</code>，因为<code>LinkedList</code>要移动指针。 </li>
<li>对于新增和删除操作<code>add</code>和<code>remove</code>，<code>LinedList</code>比较占优势，因为<code>ArrayList</code>要移动数据。</li>
</ol>
<p>深度的区别： </p>
<ol>
<li>对<code>ArrayList</code>和<code>LinkedList</code>而言，在列表末尾增加一个元素所花的开销都是固定的。对<code>ArrayList</code>而言，主要是在内部数组中增加一项，指向所添加的元素，偶尔可能会导致对数组重新进行分配；而对<code>LinkedList</code>而言，这个开销是统一的，分配一个内部<code>Entry</code>对象。</li>
<li>在<code>ArrayList</code>的中间插入或删除一个元素意味着这个列表中剩余的元素都会被移动；而在<code>LinkedList</code>的中间插入或删除一个元素的开销是固定的。</li>
<li><code>LinkedList</code>不支持高效的随机元素访问。</li>
<li><code>ArrayList</code>的空间浪费主要体现在在<code>list</code>列表的结尾预留一定的容量空间，而<code>LinkedList</code>的空间花费则体现在它的每一个元素都需要消耗相当的空间</li>
</ol>
<h2 id="用过哪些Map类，都有什么区别。"><a href="#用过哪些Map类，都有什么区别。" class="headerlink" title="用过哪些Map类，都有什么区别。"></a>用过哪些<code>Map</code>类，都有什么区别。</h2><p>问题：比如<code>HashMap</code>是线程安全的吗,并发下使用的<code>Map</code>是什么，他们 内部原理分别是什么，比如存储方式，<code>hashcode</code>，扩容，默认容量等。 </p>
<blockquote>
<p>答案： 不安全，并发下使用<code>ConcurrentHashMap</code>。</p>
</blockquote>
<h2 id="JAVA8的ConcurrentHashMap为什么放弃了分段锁？"><a href="#JAVA8的ConcurrentHashMap为什么放弃了分段锁？" class="headerlink" title="JAVA8的ConcurrentHashMap为什么放弃了分段锁？"></a><code>JAVA8</code>的<code>ConcurrentHashMap</code>为什么放弃了分段锁？</h2><p>原因：通过 <code>JDK</code> 的源码和官方文档看来， 他们认为的弃用分段锁的原因由以下几点： </p>
<ol>
<li>加入多个分段锁浪费内存空间。</li>
<li>生产环境中， <code>map</code> 在放入时竞争同一个锁的概率非常小，分段锁反而会造成更新等操作的长时间等待。</li>
<li>为了提高 <code>GC</code> 的效率</li>
</ol>
<p>既然弃用了分段锁， 那么一定有新的线程安全方案， 我们来看看源码是怎么解决线程安全的呢？<code>CAS</code></p>
<p>首先通过 <code>hash</code> 找到对应链表过后， 查看是否是第一个<code>object</code>， 如果是， 直接用<code>cas</code>原则插入，无需加锁，然后如果不是链表第一个<code>object</code>， 则直接用链表第一个<code>object</code>加锁，这里加的锁是<code>synchronized</code>，虽然效率不如 <code>ReentrantLock</code>， 但节约了空间，这里会一直用第一个<code>object</code>为锁， 直到重新计算<code>map</code>大小， 比如扩容或者操作了第一个<code>object</code>为止。</p>
<h1 id="集合赋值的坑"><a href="#集合赋值的坑" class="headerlink" title="集合赋值的坑"></a>集合赋值的坑</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">list1.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">list1.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">list1.add(<span class="string">&quot;3&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>问题来了：<br>此时如果是赋值的话</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list2 = list1;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>那么<code>list2</code>的地址就指向了<code>list1</code>，即<code>list2</code>和<code>list1</code>为同一个“引用”（指向了<code>list1</code>的对象，<strong>同一个对象</strong>）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list2.addAll(list1);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>就会把<code>list1</code>的数据添加到<code>list2</code>中，而<code>list2</code>和<code>list1</code>指向<strong>各自的对象</strong></p>
</blockquote>
<h1 id="Java-单例与类实例初始化相关的一个陷阱题"><a href="#Java-单例与类实例初始化相关的一个陷阱题" class="headerlink" title="Java 单例与类实例初始化相关的一个陷阱题"></a>Java 单例与类实例初始化相关的一个陷阱题</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingleTon</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SingleTon</span> <span class="variable">singleTon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleTon</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> count1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleTon</span> <span class="params">()</span> &#123;</span><br><span class="line">        count1++;</span><br><span class="line">        count2++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singleTon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SingleTon</span> <span class="variable">singleTon</span> <span class="operator">=</span> SingleTon.getInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;count1=&quot;</span> + singleTon.count1);<span class="comment">//结果：count1=1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;count2=&quot;</span> + singleTon.count2);<span class="comment">//结果：count2=0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原因为 <code>SingleTon singleTon = SingleTon.getInstance();</code> 调用了类的静态方法，所以触发类的初始化，类加载的时候在准备过程中为类的静态变量分配内存并初始化默认值 <code>singleton=null</code>，<code>count1=0</code>，<code>count2=0</code>，类初始化时为类的静态变量赋值和执行静态代码块，<code>singleton</code> 赋值为 <code>new SingleTon()</code> 调用类的构造方法，调用类的构造方法后 <code>count1=1</code> 且 <code>count2=1</code>，继续为 <code>count1</code> 与 <code>count2</code> 赋值，此时 <code>count1</code> 没有赋值操作，所以 <code>count1</code> 为 1，但是 <code>count2</code> 执行赋值操作就变为 0。</p>
<p>执行顺序：类加载时为类的静态变量分配内存并初始化默认值–类初始化时为类的静态变量赋值和执行静态代码块（用构造方法赋值则也会执行中的代码）–再执行静态变量赋值表达式</p>
<h1 id="Java-类加载初始化构造与继承相关的一个陷阱题"><a href="#Java-类加载初始化构造与继承相关的一个陷阱题" class="headerlink" title="Java 类加载初始化构造与继承相关的一个陷阱题"></a>Java 类加载初始化构造与继承相关的一个陷阱题</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">()</span>&#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Child</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">    c.test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>结果：</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>





<h1 id="3个加号运算：i-j（贪心规则）"><a href="#3个加号运算：i-j（贪心规则）" class="headerlink" title="3个加号运算：i+++j（贪心规则）"></a>3个加号运算：<code>i+++j</code>（贪心规则）</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlusPlus</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i +++ j;</span><br><span class="line">        System.out.println(<span class="string">&quot;k= &quot;</span> + k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">//结果为：</span><br><span class="line"><span class="attribute">k</span><span class="operator">=</span><span class="number">30</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>即 <code>i+++j</code> 相当于 <code>(i++) + j</code></p>
</blockquote>
<p>编译器：<strong>贪心规则</strong></p>
<p>扩展：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i--j <span class="comment">//语法报错，当成了`i-- j`而不是 `i-(-j)`</span></span><br></pre></td></tr></table></figure>

<p><strong>例子2</strong>贪心的解释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter2;</span><br><span class="line">pub1ic <span class="keyword">class</span> <span class="title class_">Greedy</span> &#123; </span><br><span class="line">    pub1ic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;\17&quot;</span>;</span><br><span class="line">        System out. print1n(s);</span><br><span class="line">        System. out. print1n(<span class="string">&quot;长度&quot;</span>+ s. 1ength0);</span><br><span class="line">        s =“\<span class="number">171</span>”;   </span><br><span class="line">        System out. print1n(s);</span><br><span class="line">        System. out. print1n(<span class="string">&quot;长度&quot;</span>+ s. 1ength0);                 </span><br><span class="line">        s =“\<span class="number">1717</span>”;        </span><br><span class="line">        System out. print1n(s);</span><br><span class="line">        System. out. print1n(<span class="string">&quot;长度&quot;</span>+ s. 1ength0);       </span><br><span class="line"></span><br><span class="line">        s =“\<span class="number">43</span>”;</span><br><span class="line">        System out. print1n(s);</span><br><span class="line">        System. out. print1n(<span class="string">&quot;长度&quot;</span>+ s. 1ength0);</span><br><span class="line">        s =“\<span class="number">431</span>”;</span><br><span class="line">        System out. print1n(s);</span><br><span class="line">        System. out. print1n(<span class="string">&quot;长度&quot;</span>+ s. 1ength0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>结果：</span><br><span class="line">☀</span><br><span class="line">长度<span class="number">1</span></span><br><span class="line">y</span><br><span class="line">长度<span class="number">1</span></span><br><span class="line">y7</span><br><span class="line">长度<span class="number">2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">长度<span class="number">1</span></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line">长度<span class="number">2</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为八进制（0~377），因此””\1717”会解析成”171”和”1”，”431”会解析成”43”和”1”</p>
</blockquote>
<h1 id="i与i-仅是“先加”与“后加”的差别吗？"><a href="#i与i-仅是“先加”与“后加”的差别吗？" class="headerlink" title="++i与i++仅是“先加”与“后加”的差别吗？"></a><code>++i</code>与<code>i++</code>仅是“先加”与“后加”的差别吗？</h1><p><code>++i</code>和<code>i++</code>都是先将变量的值加1。前置++是用增值后的变量进行运算；后置++是先将变量赋值给临时变量，用临时变量去运算。</p>
<p>用javap反编译命令解析程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeepPlus</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">post</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pre</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> ++i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保存并编译文件，打开控制台，进入class文件的目录（chapter2的上级目录）</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">javap -<span class="keyword">c</span> chapter<span class="number">2</span>.DeepPlus</span><br></pre></td></tr></table></figure>

<blockquote>
<p>javap是反编译命令，-c为显示为代码反编译后的伪指令</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Compiled from <span class="string">&quot;DeepPlus.java&quot;</span></span><br><span class="line">public class chapter2.DeepPlus&#123;</span><br><span class="line">   public chapter2.DeepPlus();</span><br><span class="line">      ......</span><br><span class="line">      void post();</span><br><span class="line">		Code:</span><br><span class="line">		<span class="regexp">//</span>将int类型常量<span class="number">0</span>压入栈，即当前栈顶值为int类型<span class="number">0</span>。</span><br><span class="line">		<span class="number">0</span>: iconst_0</span><br><span class="line">		<span class="regexp">//</span>从栈顶弹出一个int类型值，然后将该值存储在局部变量<span class="number">1</span>中。这里局部变量<span class="number">1</span>就是</span><br><span class="line">		<span class="regexp">//</span>程序中的变量i，也就是将刚才压入栈的<span class="number">0</span>弹出，赋值给变量i。这两条指令相当于执</span><br><span class="line">		<span class="regexp">//</span>行(int i = <span class="number">0</span>;)</span><br><span class="line">		<span class="number">1</span>: istore_1</span><br><span class="line">		<span class="regexp">//</span>将局部变量<span class="number">1</span>中存储的int类型值压入栈，即将i的值<span class="number">0</span>压入栈。这在程序中就相当</span><br><span class="line">		<span class="regexp">//</span>于将i的值赋值给一个临时变量temp,此时，temp的值为<span class="number">0</span>。</span><br><span class="line">		<span class="number">2</span>: iload_1</span><br><span class="line">		<span class="regexp">//</span>将局部变量<span class="number">1</span>的值加<span class="number">1</span>。也就是将i的值加<span class="number">1</span>。在程序中，这就相当于(i += <span class="number">1</span>;)。</span><br><span class="line">		<span class="regexp">//</span>此时，i的值为<span class="number">1</span>。</span><br><span class="line">		<span class="number">3</span>: iinc  <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">		<span class="regexp">//</span>从栈顶弹出一个int类型值，然后将该值存储在局部变量<span class="number">2</span>中。这里局部变量<span class="number">2</span>就是</span><br><span class="line">		<span class="regexp">//</span>程序中的变量j，也就是将刚才压入栈的i值<span class="number">0</span>弹出(i压栈时值还没有加<span class="number">1</span>)，赋值</span><br><span class="line">		<span class="regexp">//</span>给变量j。在程序中就相当于(j = temp;)。</span><br><span class="line">		<span class="number">6</span>: istore_2</span><br><span class="line">		<span class="regexp">//</span>返回。</span><br><span class="line">		<span class="number">7</span>: return</span><br><span class="line">		......</span><br><span class="line">		</span><br><span class="line">      void pre();</span><br><span class="line">		Code:</span><br><span class="line">		<span class="regexp">//</span>将int类型常量<span class="number">0</span>压入栈，即当前栈顶值为int类型<span class="number">0</span>。</span><br><span class="line">		<span class="number">0</span>: iconst_0</span><br><span class="line">		<span class="regexp">//</span>从栈顶弹出一个int类型值，然后将该值存储在局部变量<span class="number">1</span>中。这里局部变量<span class="number">1</span>就是</span><br><span class="line">		<span class="regexp">//</span>程序中的变量i，也就是将刚才压入栈的<span class="number">0</span>弹出，赋值给变量i。这两条指令相当于执</span><br><span class="line">		<span class="regexp">//</span>行(inti=<span class="number">0</span>;)。</span><br><span class="line">		<span class="number">1</span>: istore_1</span><br><span class="line">		<span class="regexp">//</span>将局部变量<span class="number">1</span>的值加<span class="number">1</span>。也就是将i的值加<span class="number">1</span>。在程序中，这就相当于(i += <span class="number">1</span>;)。</span><br><span class="line">		<span class="regexp">//</span>此时，i的值为<span class="number">1</span>。注意，前置++在执行<span class="number">1</span>inc指令的时候并没有将i的值压入栈，</span><br><span class="line">		<span class="regexp">//</span>也就是并没有赋值给一个临时变量 。</span><br><span class="line">		<span class="number">2</span>: iinc  <span class="number">1</span>，<span class="number">1</span></span><br><span class="line">		<span class="regexp">//</span>将局部变量<span class="number">1</span>中存储的int类型值压入栈，即将i的值<span class="number">1</span>压入栈。</span><br><span class="line">		<span class="number">5</span>: iload_1 </span><br><span class="line">		<span class="regexp">//</span>从栈顶弹出一个int类型值，然后将该值存储在局部变量<span class="number">2</span>中。这里的局部变量<span class="number">2</span>就是</span><br><span class="line">		<span class="regexp">//</span>程序中的变量j,也就是将刚才压入栈的i值<span class="number">1</span>弹出(i压栈时值已经加<span class="number">1</span>)，赋值</span><br><span class="line">		<span class="regexp">//</span>给变量j。在程序中就相当于(j= i;)。</span><br><span class="line">		<span class="number">6</span>: istore_2</span><br><span class="line">		<span class="regexp">//</span>返回。</span><br><span class="line">		<span class="number">7</span>: return</span><br><span class="line">      	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从指令上说，后置 ++ 在执行增值指令（iinc）前，先将变量的值压入栈，执行增值指令后，使用的是之前压入栈的值。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>UI相关</title>
    <url>/posts/823782403/</url>
    <content><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><ul>
<li><p><code>new View()</code>，它的<code>layoutParam</code>默认是<code>wrap_content</code></p>
</li>
<li><p>wrap_content看的是 子view 的大小，match_parent看的是 父view 的大小。</p>
<p>父view 是wrap_content，子view1 有个是具体值 则父view 大小就是子view1的大小（其他子view 是match_parent最大也是 子view1 的大小）（子view1的位置也可以不在第一个位置）【即<strong>具体值优先</strong>】</p>
</li>
<li></li>
</ul>
<h1 id="SurfaceView"><a href="#SurfaceView" class="headerlink" title="SurfaceView"></a>SurfaceView</h1><h2 id="SurfaceView使用步骤"><a href="#SurfaceView使用步骤" class="headerlink" title="SurfaceView使用步骤"></a>SurfaceView使用步骤</h2><ol>
<li>继承SurfaceView实现 SurfaceHolder.Callback 重写三方法</li>
<li>在构造方法中获得SurfaceHolder对象：getHolder</li>
<li>在构造方法中SurfaceHolder对象通过调用addCallback获得回调函数</li>
<li>在surfaceCreated中进行SurfaceHolder对象通过调用lockCanvas锁定画布，获得Canvas对象</li>
<li>Canvas进行绘制操作</li>
<li>SurfaceHolder对象通过调用unlockCanvasAndPost解锁画布</li>
</ol>
<h2 id="SurfaceView双缓冲应用"><a href="#SurfaceView双缓冲应用" class="headerlink" title="SurfaceView双缓冲应用"></a>SurfaceView双缓冲应用</h2><p>双缓冲是为了防止动画闪烁而实现的一种多线程应用，基于SurfaceView的双缓冲实现很简单，开一条线程并在其中绘图即可。本文介绍基于SurfaceView的双缓冲实现，以及介绍类似的更高效的实现方法。 </p>
<p>SurfaceView每次绘图都会锁定Canvas,也就是说同一片区域这次没画完下次就不能画，因此要提高双缓冲的效率，就得开一条线程专门画图，开另外一条线程做预处理的工作。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span> <span class="attr">android:layout_height</span>=<span class="string">&quot;fill_parent&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/LinearLayout01&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span> <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/Button01&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> <span class="attr">android:text</span>=<span class="string">&quot;单个独立线程&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/Button02&quot;</span> <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span> <span class="attr">android:text</span>=<span class="string">&quot;两个独立线程&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">SurfaceView</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/SurfaceView01&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:layout_width</span>=<span class="string">&quot;fill_parent&quot;</span> <span class="attr">android:layout_height</span>=<span class="string">&quot;fill_parent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SurfaceView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.testSurfaceView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Rect;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.SurfaceHolder;</span><br><span class="line"><span class="keyword">import</span> android.view.SurfaceView;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSurfaceView</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line">    <span class="comment">/** Called when the activity is first created. */</span></span><br><span class="line">    Button btnSingleThread, btnDoubleThread;</span><br><span class="line">    SurfaceView sfv;</span><br><span class="line">    SurfaceHolder sfh;</span><br><span class="line">    ArrayList&lt;Integer&gt; imgList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="type">int</span> imgWidth, imgHeight;</span><br><span class="line">    Bitmap bitmap;<span class="comment">//独立线程读取，独立线程绘图</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.main);</span><br><span class="line"></span><br><span class="line">        btnSingleThread = (Button) <span class="built_in">this</span>.findViewById(R.id.Button01);</span><br><span class="line">        btnDoubleThread = (Button) <span class="built_in">this</span>.findViewById(R.id.Button02);</span><br><span class="line">        btnSingleThread.setOnClickListener(<span class="keyword">new</span> <span class="title class_">ClickEvent</span>());</span><br><span class="line">        btnDoubleThread.setOnClickListener(<span class="keyword">new</span> <span class="title class_">ClickEvent</span>());</span><br><span class="line">        sfv = (SurfaceView) <span class="built_in">this</span>.findViewById(R.id.SurfaceView01);</span><br><span class="line">        sfh = sfv.getHolder();</span><br><span class="line">        sfh.addCallback(<span class="keyword">new</span> <span class="title class_">MyCallBack</span>());<span class="comment">// 自动运行surfaceCreated以及surfaceChanged</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ClickEvent</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (v == btnSingleThread) &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Load_DrawImage</span>(<span class="number">0</span>, <span class="number">0</span>).start();<span class="comment">//开一条线程读取并绘图</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v == btnDoubleThread) &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LoadImage</span>().start();<span class="comment">//开一条线程读取</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DrawImage</span>(imgWidth + <span class="number">10</span>, <span class="number">0</span>).start();<span class="comment">//开一条线程绘图</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyCallBack</span> <span class="keyword">implements</span> <span class="title class_">SurfaceHolder</span>.Callback &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">surfaceChanged</span><span class="params">(SurfaceHolder holder, <span class="type">int</span> format, <span class="type">int</span> width,</span></span><br><span class="line"><span class="params">                                   <span class="type">int</span> height)</span> &#123;</span><br><span class="line">            Log.i(<span class="string">&quot;Surface:&quot;</span>, <span class="string">&quot;Change&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">surfaceCreated</span><span class="params">(SurfaceHolder holder)</span> &#123;</span><br><span class="line">            Log.i(<span class="string">&quot;Surface:&quot;</span>, <span class="string">&quot;Create&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 用反射机制来获取资源中的图片ID和尺寸</span></span><br><span class="line">            Field[] fields = R.drawable.class.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;icon&quot;</span>.equals(field.getName()))<span class="comment">// 除了icon之外的图片</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        index = field.getInt(R.drawable.class);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 保存图片ID</span></span><br><span class="line">                    imgList.add(index);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 取得图像大小</span></span><br><span class="line">            <span class="type">Bitmap</span> <span class="variable">bmImg</span> <span class="operator">=</span> BitmapFactory.decodeResource(getResources(),</span><br><span class="line">                                                        imgList.get(<span class="number">0</span>));</span><br><span class="line">            imgWidth = bmImg.getWidth();</span><br><span class="line">            imgHeight = bmImg.getHeight();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">surfaceDestroyed</span><span class="params">(SurfaceHolder holder)</span> &#123;</span><br><span class="line">            Log.i(<span class="string">&quot;Surface:&quot;</span>, <span class="string">&quot;Destroy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 读取并显示图片的线程</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Load_DrawImage</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="type">int</span> <span class="variable">imgIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Load_DrawImage</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = x;</span><br><span class="line">            <span class="built_in">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Canvas</span> <span class="variable">c</span> <span class="operator">=</span> sfh.lockCanvas(<span class="keyword">new</span> <span class="title class_">Rect</span>(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.x</span><br><span class="line">                                                   + imgWidth, <span class="built_in">this</span>.y + imgHeight));</span><br><span class="line">                <span class="type">Bitmap</span> <span class="variable">bmImg</span> <span class="operator">=</span> BitmapFactory.decodeResource(getResources(),</span><br><span class="line">                                                            imgList.get(imgIndex));</span><br><span class="line">                c.drawBitmap(bmImg, <span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="keyword">new</span> <span class="title class_">Paint</span>());</span><br><span class="line">                imgIndex++;</span><br><span class="line">                <span class="keyword">if</span> (imgIndex == imgList.size())</span><br><span class="line">                    imgIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                sfh.unlockCanvasAndPost(c);<span class="comment">// 更新屏幕显示内容</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 只负责绘图的线程</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">DrawImage</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DrawImage</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = x;</span><br><span class="line">            <span class="built_in">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bitmap != <span class="literal">null</span>) &#123;<span class="comment">//如果图像有效</span></span><br><span class="line">                    <span class="type">Canvas</span> <span class="variable">c</span> <span class="operator">=</span> sfh.lockCanvas(<span class="keyword">new</span> <span class="title class_">Rect</span>(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.x</span><br><span class="line">                                                       + imgWidth, <span class="built_in">this</span>.y + imgHeight));</span><br><span class="line"></span><br><span class="line">                    c.drawBitmap(bitmap, <span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="keyword">new</span> <span class="title class_">Paint</span>());</span><br><span class="line"></span><br><span class="line">                    sfh.unlockCanvasAndPost(c);<span class="comment">// 更新屏幕显示内容</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 只负责读取图片的线程</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">LoadImage</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">imgIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                bitmap = BitmapFactory.decodeResource(getResources(),</span><br><span class="line">                                                      imgList.get(imgIndex));</span><br><span class="line">                imgIndex++;</span><br><span class="line">                <span class="keyword">if</span> (imgIndex == imgList.size())<span class="comment">//如果到尽头则重新读取</span></span><br><span class="line">                    imgIndex = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h1 id="安卓自带的几个颜色"><a href="#安卓自带的几个颜色" class="headerlink" title="安卓自带的几个颜色"></a>安卓自带的几个颜色</h1><p><img src="/posts/823782403/%E5%AE%89%E5%8D%93%E8%87%AA%E5%B8%A6%E7%9A%84%E5%87%A0%E4%B8%AA%E9%A2%9C%E8%89%B2.jpg" alt="安卓自带的几个颜色.jpg"></p>
<ul>
<li><code>colorPrimaryDark</code>：状态栏颜色</li>
<li><code>colorPrimary</code>：appbar颜色</li>
<li><code>textColorPrimary</code>：appbar左侧字体颜色</li>
<li><code>windowBackground</code>：屏幕颜色</li>
<li><code>navigationBarColor</code>：导航栏颜色</li>
</ul>
<h1 id="让整个App变灰色"><a href="#让整个App变灰色" class="headerlink" title="让整个App变灰色"></a>让整个App变灰色</h1><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a><a href="https://juejin.cn/post/6844904117110833165">方法一：</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(<span class="meta">@Nullable</span> View parent, <span class="meta">@NonNull</span> String name, <span class="meta">@NonNull</span> Context context, <span class="meta">@NonNull</span> AttributeSet attrs)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;FrameLayout&quot;</span>.equalss(name))&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> attrs.getAtrributeCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">attributeName</span> <span class="operator">=</span> attrs.getAttributeName(i);</span><br><span class="line">            <span class="type">String</span> <span class="variable">attributeValue</span> <span class="operator">=</span> attrs.getAttributeValue(i);</span><br><span class="line">            <span class="keyword">if</span> (attributeName.equals(<span class="string">&quot;id&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> Integer.parseInt(attributeValue.substring(<span class="number">1</span>));</span><br><span class="line">                <span class="type">String</span> <span class="variable">idVal</span> <span class="operator">=</span> getResources().getResourceName(id);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;android:id/content&quot;</span>.equals(idVal)) &#123;</span><br><span class="line">                    <span class="type">GrayFrameLayout</span> <span class="variable">grayFrameLayout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GrayFrameLayout</span>(context, attrs);</span><br><span class="line">                    <span class="keyword">return</span> grayFrameLayout;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.onCreateView(parent, name, context, attrs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">setContentView(R.layout.activity_scrolling) </span><br><span class="line"><span class="keyword">val</span> paint = Paint()</span><br><span class="line"><span class="keyword">val</span> cm = ColorMatrix() </span><br><span class="line">cm.setSaturation(<span class="number">0f</span>) </span><br><span class="line">paint.colorFilter = ColorMatrixColorFilter(cm) window.decorView.setLayerType(View.LAYER_TYPE_HARDWARE, paint)</span><br></pre></td></tr></table></figure>









<h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="LinearLayout线性布局"><a href="#LinearLayout线性布局" class="headerlink" title="LinearLayout线性布局"></a>LinearLayout线性布局</h2><p>有权重layout_weight来设置各自布局大小比例</p>
<h2 id="百分比布局"><a href="#百分比布局" class="headerlink" title="百分比布局"></a>百分比布局</h2><h3 id="PercentRelativeLayout百分比布局"><a href="#PercentRelativeLayout百分比布局" class="headerlink" title="PercentRelativeLayout百分比布局"></a>PercentRelativeLayout百分比布局</h3><h3 id="PercentFrameLayout百分比布局"><a href="#PercentFrameLayout百分比布局" class="headerlink" title="PercentFrameLayout百分比布局"></a>PercentFrameLayout百分比布局</h3><p>是新增的布局</p>
<p>具体使用：</p>
<ol>
<li><p>在<code>app/build.gradle</code>的dependences闭包中添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line">    compile <span class="string">&#x27;com.android.support:percent:24.2.1&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在布局中使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.percent.PercentFrameLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/button1&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;Button 1&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_gravity</span>=<span class="string">&quot;left|top&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">app:layout_widthPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">app:layout_heightPercent</span>=<span class="string">&quot;50%&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;Button 2&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_gravity</span>=<span class="string">&quot;right|top&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">app:layout_widthPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">app:layout_heightPercent</span>=<span class="string">&quot;50%&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/button3&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;Button 3&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_gravity</span>=<span class="string">&quot;left|bottom&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">app:layout_widthPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">app:layout_heightPercent</span>=<span class="string">&quot;50%&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/button4&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;Button 4&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_gravity</span>=<span class="string">&quot;right|bottom&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">app:layout_widthPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">app:layout_heightPercent</span>=<span class="string">&quot;50%&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.percent.PercentFrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PercentFrameLayout还有FrameLayout的属性，所以加了layout_gravity属性使得上面的布局就是左上、右上、左下、右下四个按钮均分的。</p>
</li>
</ol>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><h2 id="补间动画"><a href="#补间动画" class="headerlink" title="补间动画"></a>补间动画</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&quot;-100%：屏幕不可见&quot;；“0%：屏幕中间”--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXDelta</span>=<span class="string">&quot;-100%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toXDelta</span>=<span class="string">&quot;0%&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;300&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--pivot指定缩放的中心点，不指定默认是从左上角；scale=0.0不可见，1.0完全可见--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scale</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXScale</span>=<span class="string">&quot;0.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYScale</span>=<span class="string">&quot;0.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toXScale</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYScale</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotX</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;300&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h1 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h1><p><img src="/posts/823782403/Bitmap%E7%B1%BB%E5%9B%BE.jpg" alt="安卓/Bitmap类图"></p>
<h2 id="配置信息与压缩方式"><a href="#配置信息与压缩方式" class="headerlink" title="配置信息与压缩方式"></a>配置信息与压缩方式</h2><p><strong>Bitmap中有两个内部枚举类：</strong></p>
<ul>
<li>Config是用来设置颜色配置信息</li>
<li>CompressFormat是用来设置压缩方式</li>
</ul>
<table>
<thead>
<tr>
<th>Config</th>
<th>单位像素所占字节数</th>
<th>解析</th>
</tr>
</thead>
<tbody><tr>
<td>Bitmap.Config.ALPHA_8</td>
<td>1</td>
<td>颜色信息只由透明度组成，占8位</td>
</tr>
<tr>
<td>Bitmap.Config.ARGB_4444</td>
<td>2</td>
<td>颜色信息由rgba四部分组成，每个部分都占4位，总共占16位</td>
</tr>
<tr>
<td>Bitmap.Config.ARGB_8888</td>
<td>4</td>
<td>颜色信息由rgba四部分组成，每个部分都占8位，总共占32位。是Bitmap默认的颜色配置信息，也是最占空间的一种配置</td>
</tr>
<tr>
<td>Bitmap.Config.RGB_565</td>
<td>2</td>
<td>颜色信息由rgb三部分组成，R占5位，G占6位，B占5位，总共占16位</td>
</tr>
<tr>
<td>RGBA_F16</td>
<td>8</td>
<td>Android 8.0 新增（更丰富的色彩表现HDR）</td>
</tr>
<tr>
<td>HARDWARE</td>
<td>Special</td>
<td>Android 8.0 新增 （Bitmap直接存储在graphic memory）</td>
</tr>
</tbody></table>
<blockquote>
<p>通常我们优化Bitmap时，当需要做性能优化或者防止OOM，我们通常会使用Bitmap.Config.RGB_565这个配置，因为Bitmap.Config.ALPHA_8只有透明度，显示一般图片没有意义，Bitmap.Config.ARGB_4444显示图片不清楚，Bitmap.Config.ARGB_8888占用内存最多。</p>
</blockquote>
<table>
<thead>
<tr>
<th>CompressFormat</th>
<th>解析</th>
</tr>
</thead>
<tbody><tr>
<td>Bitmap.CompressFormat.JPEG</td>
<td>表示以JPEG压缩算法进行图像压缩，压缩后的格式可以是”.jpg”或者”.jpeg”，是一种有损压缩</td>
</tr>
<tr>
<td>Bitmap.CompressFormat.PNG</td>
<td>颜色信息由rgba四部分组成，每个部分都占4位，总共占16位</td>
</tr>
<tr>
<td>Bitmap.Config.ARGB_8888</td>
<td>颜色信息由rgba四部分组成，每个部分都占8位，总共占32位。是Bitmap默认的颜色配置信息，也是最占空间的一种配置</td>
</tr>
<tr>
<td>Bitmap.Config.RGB_565</td>
<td>颜色信息由rgb三部分组成，R占5位，G占6位，B占5位，总共占16位</td>
</tr>
</tbody></table>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="裁剪、缩放、旋转、移动"><a href="#裁剪、缩放、旋转、移动" class="headerlink" title="裁剪、缩放、旋转、移动"></a>裁剪、缩放、旋转、移动</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Matrix</span> <span class="variable">matrix</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();  </span><br><span class="line"><span class="comment">// 缩放 </span></span><br><span class="line">matrix.postScale(<span class="number">0.8f</span>, <span class="number">0.9f</span>);  </span><br><span class="line"><span class="comment">// 左旋，参数为正则向右旋</span></span><br><span class="line">matrix.postRotate(-<span class="number">45</span>);  </span><br><span class="line"><span class="comment">// 平移, 在上一次修改的基础上进行再次修改 set 每次操作都是最新的 会覆盖上次的操作</span></span><br><span class="line">matrix.postTranslate(<span class="number">100</span>, <span class="number">80</span>);</span><br><span class="line"><span class="comment">// 裁剪并执行以上操作</span></span><br><span class="line"><span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> Bitmap.createBitmap(source, <span class="number">0</span>, <span class="number">0</span>, source.getWidth(), source.getHeight(), matrix, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>虽然Matrix还可以调用postSkew方法进行倾斜操作，但是却不可以在此时创建Bitmap时使用。</p>
</blockquote>
<h3 id="Bitmap与Drawable转换"><a href="#Bitmap与Drawable转换" class="headerlink" title="Bitmap与Drawable转换"></a>Bitmap与Drawable转换</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Drawable -&gt; Bitmap</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title function_">drawableToBitmap</span><span class="params">(Drawable drawable)</span> &#123;</span><br><span class="line">    <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);</span><br><span class="line">    <span class="type">Canvas</span> <span class="variable">canvas</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Canvas</span>(bitmap);</span><br><span class="line">    drawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight();</span><br><span class="line">    drawable.draw(canvas);</span><br><span class="line">    <span class="keyword">return</span> bitmap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bitmap -&gt; Drawable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Drawable <span class="title function_">bitmapToDrawable</span><span class="params">(Resources resources, Bitmap bm)</span> &#123;</span><br><span class="line">    <span class="type">Drawable</span> <span class="variable">drawable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BitmapDrawable</span>(resources, bm);</span><br><span class="line">    <span class="keyword">return</span> drawable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="保存与释放"><a href="#保存与释放" class="headerlink" title="保存与释放"></a>保存与释放</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> BitmapFactory.decodeResource(getResources(), R.drawable.test);</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(getFilesDir(),<span class="string">&quot;test.jpg&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">    file.delete();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    FileOutputStream outputStream=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">    bitmap.compress(Bitmap.CompressFormat.JPEG,<span class="number">90</span>,outputStream);</span><br><span class="line">    outputStream.flush();</span><br><span class="line">    outputStream.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放bitmap的资源，这是一个不可逆转的操作</span></span><br><span class="line">bitmap.recycle();</span><br></pre></td></tr></table></figure>

<h3 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title function_">compressImage</span><span class="params">(Bitmap image)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (image == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        baos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        image.compress(Bitmap.CompressFormat.JPEG, <span class="number">100</span>, baos);</span><br><span class="line">        <span class="type">byte</span>[] bytes = baos.toByteArray();</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">isBm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> BitmapFactory.decodeStream(isBm);</span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (OutOfMemoryError e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (baos != <span class="literal">null</span>) &#123;</span><br><span class="line">                baos.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BitmapFactory"><a href="#BitmapFactory" class="headerlink" title="BitmapFactory"></a>BitmapFactory</h2><h3 id="Bitmap创建流程"><a href="#Bitmap创建流程" class="headerlink" title="Bitmap创建流程"></a>Bitmap创建流程</h3><p><img src="/posts/823782403/Bitmap%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B.jpg" alt="安卓/Bitmap创建流程"></p>
<h3 id="Option类"><a href="#Option类" class="headerlink" title="Option类"></a>Option类</h3><table>
<thead>
<tr>
<th>常用方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>boolean inJustDecodeBounds</td>
<td>如果设置为true，不获取图片，不分配内存，但会返回图片的高度宽度信息</td>
</tr>
<tr>
<td>int inSampleSize</td>
<td>图片缩放的倍数</td>
</tr>
<tr>
<td>int outWidth</td>
<td>获取图片的宽度值</td>
</tr>
<tr>
<td>int outHeight</td>
<td>获取图片的高度值</td>
</tr>
<tr>
<td>int inDensity</td>
<td>用于位图的像素压缩比</td>
</tr>
<tr>
<td>int inTargetDensity</td>
<td>用于目标位图的像素压缩比（要生成的位图）</td>
</tr>
<tr>
<td>byte[] inTempStorage</td>
<td>创建临时文件，将图片存储</td>
</tr>
<tr>
<td>boolean inScaled</td>
<td>设置为true时进行图片压缩，从inDensity到inTargetDensity</td>
</tr>
<tr>
<td>boolean inDither</td>
<td>如果为true,解码器尝试抖动解码</td>
</tr>
<tr>
<td>Bitmap.Config inPreferredConfig</td>
<td>设置解码器这个值是设置色彩模式，默认值是ARGB_8888，在这个模式下，一个像素点占用4bytes空间，一般对透明度不做要求的话，一般采用RGB_565模式，这个模式下一个像素点占用2bytes</td>
</tr>
<tr>
<td>String outMimeType</td>
<td>设置解码图像</td>
</tr>
<tr>
<td>boolean inPurgeable</td>
<td>当存储Pixel的内存空间在系统内存不足时是否可以被回收</td>
</tr>
<tr>
<td>boolean inInputShareable</td>
<td>inPurgeable为true情况下才生效，是否可以共享一个InputStream</td>
</tr>
<tr>
<td>boolean inPreferQualityOverSpeed</td>
<td>为true则优先保证Bitmap质量其次是解码速度</td>
</tr>
<tr>
<td>boolean inMutable</td>
<td>配置Bitmap是否可以更改，比如：在Bitmap上隔几个像素加一条线段</td>
</tr>
<tr>
<td>int inScreenDensity</td>
<td>当前屏幕的像素密度</td>
</tr>
</tbody></table>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">    BitmapFactory.<span class="type">Options</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BitmapFactory</span>.Options();</span><br><span class="line">    options.inJustDecodeBounds = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 设置inJustDecodeBounds为true后，再使用decodeFile()等方法，并不会真正的分配空间，即解码出来的Bitmap为null，但是可计算出原始图片的宽度和高度，即options.outWidth和options.outHeight</span></span><br><span class="line">    BitmapFactory.decodeFileDescriptor(fis.getFD(), <span class="literal">null</span>, options);</span><br><span class="line">    <span class="type">float</span> <span class="variable">srcWidth</span> <span class="operator">=</span> options.outWidth;</span><br><span class="line">    <span class="type">float</span> <span class="variable">srcHeight</span> <span class="operator">=</span> options.outHeight;</span><br><span class="line">    <span class="type">int</span> <span class="variable">inSampleSize</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (srcHeight &gt; height || srcWidth &gt; width) &#123;</span><br><span class="line">        <span class="keyword">if</span> (srcWidth &gt; srcHeight) &#123;</span><br><span class="line">            inSampleSize = Math.round(srcHeight / height);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            inSampleSize = Math.round(srcWidth / width);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    options.inJustDecodeBounds = <span class="literal">false</span>;</span><br><span class="line">    options.inSampleSize = inSampleSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> BitmapFactory.decodeFileDescriptor(fis.getFD(), <span class="literal">null</span>, options);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(bitmap != <span class="literal">null</span> &amp;&amp; !bitmap.isRecycled())&#123; </span><br><span class="line">    <span class="comment">// 回收并且置为null</span></span><br><span class="line">    bitmap.recycle(); </span><br><span class="line">    bitmap = <span class="literal">null</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>Bitmap类的构造方法都是私有的，所以开发者不能直接new出一个Bitmap对象，只能通过BitmapFactory类的各种静态方法来实例化一个Bitmap。仔细查看BitmapFactory的源代码可以看到，生成Bitmap对象最终都是通过JNI调用方式实现的。所以，加载Bitmap到内存里以后，是包含两部分内存区域的。简单的说，一部分是Java部分的，一部分是C部分的。这个Bitmap对象是由Java部分分配的，不用的时候系统就会自动回收了，但是那个对应的C可用的内存区域，虚拟机是不能直接回收的，这个只能调用底层的功能释放。所以需要调用recycle()方法来释放C部分的内存。从Bitmap类的源代码也可以看到，recycle()方法里也的确是调用了JNI方法了的。</p>
<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="http://www.gcssloop.com/customview/Canvas_PictureText">安卓自定义View进阶-Canvas之图片文字</a></p>
<h1 id="防重复点击"><a href="#防重复点击" class="headerlink" title="防重复点击"></a><code>防重复点击</code></h1><ul>
<li><p>法1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastClickAvoider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> lastClickTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">timeSpace</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FastClickAvoider</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FastClickAvoider</span><span class="params">(<span class="type">long</span> timeSpace)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.timeSpace = timeSpace;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">isFastClick</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span> (time - lastClickTime &lt; timeSpace) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lastClickTime = time;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> FastClickAvoider fastClickAvoider;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义控件的构造函数或者BaseActivity的onCreate中实例化</span></span><br><span class="line"><span class="keyword">if</span> (fastClickAvoider == <span class="literal">null</span>) &#123;</span><br><span class="line">    fastClickAvoider = <span class="keyword">new</span> <span class="title class_">FastClickAvoider</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在点击事件中调用</span></span><br><span class="line"><span class="keyword">if</span> (fastClickAvoider != <span class="literal">null</span> &amp;&amp; !fastClickAvoider.isFastClick()) &#123;</span><br><span class="line">    <span class="comment">//do Something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="制作vector"><a href="#制作vector" class="headerlink" title="制作vector"></a>制作vector</h1><ol>
<li>下载软件Vector Magic 。如<a href="https://www.zdfans.com/html/20989.html#new_xzdz">破解版</a></li>
<li>解压它，然后根据步骤进行破解</li>
<li>使用：<ol>
<li>用上面的软件保存“svg”类型的文件</li>
<li>打开 <a href="http://inloop.github.io/svg2android/">http://inloop.github.io/svg2android/</a> 把上一步生成好的一个或多个svg文件拖入，然后下载下来</li>
<li>将下载好的xml文件放入安卓项目的 <code>res/drawable</code> 里</li>
</ol>
</li>
</ol>
<h1 id="inflate"><a href="#inflate" class="headerlink" title="inflate"></a>inflate</h1><h2 id="Android-inflate的三种用法"><a href="#Android-inflate的三种用法" class="headerlink" title="Android inflate的三种用法"></a>Android inflate的三种用法</h2><p>inflate是用来把XML定义好的布局找出来，inflate之后并没有直接显示，需要再加入到其他布局当中才能显示，以下是inflate的三种使用方式：</p>
<ol>
<li>使用<code>LayoutInflater.inflate</code>方法</li>
<li>使用<code>context.getSystemService</code>方法</li>
<li>使用<code>View.inflate</code>方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法3：使用View.inflate方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inflate3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">LinearLayout</span> <span class="variable">sub</span> <span class="operator">=</span> (LinearLayout) View.inflate(<span class="built_in">this</span>, R.layout.my_layout, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">LinearLayout</span> <span class="variable">layout</span> <span class="operator">=</span> (LinearLayout) findViewById(R.id.activity_main);</span><br><span class="line">    layout.addView(sub);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2：使用context.getSystemService方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inflate2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">LayoutInflater</span> <span class="variable">inflater</span> <span class="operator">=</span> (LayoutInflater) <span class="built_in">this</span>.getSystemServe(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">    <span class="type">LinearLayout</span> <span class="variable">sub</span> <span class="operator">=</span> (Sub) inflater.inflate(R.layout.my_layout, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">LinearLayout</span> <span class="variable">layout</span> <span class="operator">=</span> (LinearLayout) findViewById(R.id.activity_main);</span><br><span class="line">    layout.addView(sub);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法1：使用LayoutInflater.inflater方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inflate1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">LayoutInflater</span> <span class="variable">inflater</span> <span class="operator">=</span> LayoutInflater.from(<span class="built_in">this</span>);</span><br><span class="line">    <span class="type">LinearLayout</span> <span class="variable">sub</span> <span class="operator">=</span> (LinearLayout) inflater.inflate(R.layout.my_layout, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">LinearLayout</span> <span class="variable">layout</span> <span class="operator">=</span> (LinearLayout) findViewById(R.id.activity_main);</span><br><span class="line">    layout.addView(sub);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="LayoutInflater-inflate-详解"><a href="#LayoutInflater-inflate-详解" class="headerlink" title="LayoutInflater.inflate()详解"></a><a href="https://blog.csdn.net/HardWorkingAnt/article/details/77937298">LayoutInflater.inflate()详解</a></h2><blockquote>
<p>结论：推荐使用<br>inflater.inflate(R.layout.item, parent, false);</p>
</blockquote>
<p>构造方法可转成四个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">inflater.inflate(R.layout.item, <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">inflater.inflate(R.layout.item, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">inflater.inflate(R.layout.item, parent, <span class="literal">true</span>);</span><br><span class="line">inflater.inflate(R.layout.item, parent, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>第一个参数：想要添加的布局</p>
</li>
<li><p>第二个参数：想要添加到哪个布局上面</p>
<p><strong>为null则第三个参数无效</strong>，第一个参数中最外层的布局大小无效</p>
</li>
<li><p>第三个参数：是否直接添加到第二个参数布局上面</p>
<p>为true：layout文件会默认调addView添加到parent中；</p>
<p>为false：以其他方式添加进parent中。</p>
</li>
</ul>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>Activity布局（parent）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/rl&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>要添加的布局<code>layout.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;150dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;150dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#ff0000&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;开开心心每一天&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    <span class="type">RelativeLayout</span> <span class="variable">rl</span> <span class="operator">=</span> (RelativeLayout) findViewById(R.id.rl);</span><br><span class="line">    <span class="type">LayoutInflater</span> <span class="variable">inflater</span> <span class="operator">=</span> LayoutInflater.from(<span class="built_in">this</span>);</span><br><span class="line">    <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> inflater.inflate(R.layout.layout, rl, <span class="literal">false</span>);</span><br><span class="line">    rl.addView(view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中的<code>inflater.inflate(R.layout.layout, rl, false);</code>改成四种情况是：</p>
<ol>
<li><p><code>inflater.inflate(R.layout.layout, null, true);</code></p>
<p><img src="/posts/823782403/inflate%E6%97%A0parentview%E4%B8%94true.png" alt="img"></p>
</li>
<li><p><code>inflater.inflate(R.layout.layout, null, false);</code></p>
<p><img src="/posts/823782403/inflate%E6%97%A0parentview%E4%B8%94false.png" alt="img"></p>
</li>
<li><p><code>inflater.inflate(R.layout.layout, rl, true);</code></p>
<blockquote>
<p>这种情况不能再调用 addView 会报错（<code>java.lang.IllegalStateException:The specified child already has a parent.Yout must call removeView() on the child&#39;s parent first.</code>）</p>
</blockquote>
<p><img src="/posts/823782403/inflate%E6%9C%89parentview%E4%B8%94true.png" alt="img"></p>
</li>
<li><p><code>inflater.inflate(R.layout.layout, rl, false);</code></p>
<p><img src="/posts/823782403/inflate%E6%9C%89parentview%E4%B8%94false.png" alt="img"></p>
</li>
</ol>
<h1 id="tablayout"><a href="#tablayout" class="headerlink" title="tablayout"></a>tablayout</h1><p>它有默认宽高：如果想要这个默认宽高不起效，加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">app:tabMaxWidth=&quot;0dp&quot;</span><br><span class="line">app:tabMinWidth=&quot;0dp&quot;</span><br><span class="line">app:tabMode=&quot;auto&quot;</span><br></pre></td></tr></table></figure>


<h1 id="performClick-与-onCallClick"><a href="#performClick-与-onCallClick" class="headerlink" title="performClick 与 onCallClick"></a><a href="https://blog.csdn.net/u013531824/article/details/54910809">performClick 与 onCallClick</a></h1><ol>
<li><p>API等级<br>performClick是在API 1中加入<br>callOnClick是在API 15 中加入</p>
</li>
<li><p>代码实现层面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Directly call any attached OnClickListener.  Unlike &#123;<span class="doctag">@link</span> #performClick()&#125;,</span></span><br><span class="line"><span class="comment"> * this only calls the listener, and does not do any associated clicking</span></span><br><span class="line"><span class="comment"> * actions like reporting an accessibility event.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> True there was an assigned OnClickListener that was called, false</span></span><br><span class="line"><span class="comment"> *         otherwise is returned.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">callOnClick</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ListenerInfo</span> <span class="variable">li</span> <span class="operator">=</span> mListenerInfo;</span><br><span class="line">    <span class="keyword">if</span> (li != <span class="literal">null</span> &amp;&amp; li.mOnClickListener != <span class="literal">null</span>) &#123;</span><br><span class="line">        li.mOnClickListener.onClick(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Call this view&#x27;s OnClickListener, if it is defined.  Performs all normal</span></span><br><span class="line"><span class="comment"> * actions associated with clicking: reporting accessibility event, playing</span></span><br><span class="line"><span class="comment"> * a sound, etc.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> True there was an assigned OnClickListener that was called, false</span></span><br><span class="line"><span class="comment"> *         otherwise is returned.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">performClick</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> result;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ListenerInfo</span> <span class="variable">li</span> <span class="operator">=</span> mListenerInfo;</span><br><span class="line">    <span class="keyword">if</span> (li != <span class="literal">null</span> &amp;&amp; li.mOnClickListener != <span class="literal">null</span>) &#123;</span><br><span class="line">        playSoundEffect(SoundEffectConstants.CLICK);</span><br><span class="line">        li.mOnClickListener.onClick(<span class="built_in">this</span>);</span><br><span class="line">        result = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>从代码中可以看出，callOnClick是performClick的简化版，不包含点击播放声音，不具有辅助功能，那么什么是辅助功能，给出官方介绍如下：</p>
<blockquote>
<p>  许多Android用户有不同的能力（限制），这要求他们以不同的方式使用他们的Android设备。这些限制包括视力，肢体或与年龄有关，这些限制阻碍了他们看到或充分使用触摸屏，而用户的听力丧失，让他们可能无法感知声音信息和警报。<br>  Android提供了辅助功能的特性和服务帮助这些用户更容易的使用他们的设备，这些功能包括语音合成、触觉反馈、手势导航、轨迹球和方向键导航。Android应用程序开发人员可以利用这些服务，使他们的应用程序更贴近用户。</p>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓UI</tag>
      </tags>
  </entry>
  <entry>
    <title>EditText相关</title>
    <url>/posts/781614210/</url>
    <content><![CDATA[<h1 id="EditText属性"><a href="#EditText属性" class="headerlink" title="EditText属性"></a>EditText属性</h1><p>EditText继承关系：View–&gt;TextView–&gt;EditText</p>
<p>EditText部分属性介绍：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">android:hint=<span class="string">&quot;请输入数字！&quot;</span><span class="regexp">//</span>设置显示在空间上的提示信息</span><br><span class="line">android:numeric=<span class="string">&quot;integer&quot;</span><span class="regexp">//</span>设置只能输入整数，如果是小数则是：decimal</span><br><span class="line">android:singleLine=<span class="string">&quot;true&quot;</span><span class="regexp">//</span>设置单行输入，一旦设置为true，则文字不会自动换行。</span><br><span class="line">android:password=<span class="string">&quot;true&quot;</span><span class="regexp">//</span>设置只能输入密码</span><br><span class="line">android:textColor = <span class="string">&quot;#ff8c00&quot;</span><span class="regexp">//</span>字体颜色</span><br><span class="line">android:textStyle=<span class="string">&quot;bold&quot;</span><span class="regexp">//</span>字体，bold, italic, bolditalic</span><br><span class="line">android:textSize=<span class="string">&quot;20dip&quot;</span><span class="regexp">//</span>大小</span><br><span class="line">android:capitalize = <span class="string">&quot;characters&quot;</span><span class="regexp">//</span>以大写字母写</span><br><span class="line">android:textAlign=<span class="string">&quot;center&quot;</span><span class="regexp">//</span>EditText没有这个属性，但TextView有，居中</span><br><span class="line">android:textColorHighlight=<span class="string">&quot;#cccccc&quot;</span><span class="regexp">//</span>被选中文字的底色，默认为蓝色</span><br><span class="line">android:textColorHint=<span class="string">&quot;#ffff00&quot;</span><span class="regexp">//</span>设置提示信息文字的颜色，默认为灰色android:textScaleX=<span class="string">&quot;1.5&quot;</span><span class="regexp">//</span>控制字与字之间的间距</span><br><span class="line">android:typeface=<span class="string">&quot;monospace&quot;</span><span class="regexp">//</span>字型，normal, sans, serif, monospace</span><br><span class="line">android:background=<span class="string">&quot;@null&quot;</span><span class="regexp">//</span>背景，这里没有，指透明</span><br><span class="line">android:layout_weight=<span class="string">&quot;1&quot;</span><span class="regexp">//</span>权重，控制控件之间的地位,在控制控件显示的大小时蛮有用的。</span><br><span class="line">android:textAppearance=<span class="string">&quot;?android:attr/textAppearanceLargeInverse&quot;</span><span class="regexp">//</span>文字外观</span><br><span class="line">android:layout_gravity=<span class="string">&quot;center_vertical&quot;</span><span class="regexp">//</span>设置控件显示的位置：默认top，这里居中显示，还有bottom</span><br><span class="line"></span><br><span class="line">android:gravity=<span class="string">&quot;top&quot;</span> <span class="regexp">//</span>多行中指针在第一行第一位置</span><br><span class="line">et.setSelection(et.length());<span class="regexp">//</span>调整光标到最后一行</span><br><span class="line">android:autoText <span class="regexp">//</span>自动拼写帮助</span><br><span class="line">android:capitalize <span class="regexp">//</span>首字母大写</span><br><span class="line">android:digits <span class="regexp">//</span>自己设置规则android:digits=<span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">Android：singleLine<span class="regexp">//</span>是否单行或者多行，回车是离开文本框还是文本框增加新行</span><br><span class="line">android：numeric <span class="regexp">//</span>只接受数字</span><br><span class="line">android：phoneNumber <span class="regexp">//</span>输入电话号码</span><br><span class="line">android：editable <span class="regexp">//</span>是否可编辑</span><br><span class="line">android:autoLink=”all” <span class="regexp">//</span>设置文本超链接样式当点击网址时，跳向该网址 </span><br><span class="line">android:textAppearance=<span class="string">&quot;?android:attr/textAppearanceLargeInverse&quot;</span><span class="regexp">//</span>文字外观，这里引用的是系统自带的一个外观，？表示系统是否有这种外观，否则使用默认的外观。不知道这样理解对不对？ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">android:fastScrollEnabled=<span class="string">&quot;true&quot;</span> <span class="regexp">//</span>滑块</span><br><span class="line">android:choiceMode=<span class="string">&quot;multipleChoice&quot;</span> <span class="regexp">//</span>设置选择模式，他包括几个选择 CHOICE_MODE_MULTIPLE（多选）， CHOICE_MODE_NONE（默认），CHOICE_MODE_SINGLE（单选）</span><br></pre></td></tr></table></figure>



<h2 id="代码中限制输入字数"><a href="#代码中限制输入字数" class="headerlink" title="代码中限制输入字数"></a>代码中限制输入字数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">edt.setFilters(<span class="keyword">new</span> <span class="title class_">InputFilter</span>[]&#123;<span class="keyword">new</span> <span class="title class_">InputFilter</span>.LengthFilter(length)&#125;);</span><br></pre></td></tr></table></figure>







<h1 id="限制Edt内容"><a href="#限制Edt内容" class="headerlink" title="限制Edt内容"></a>限制Edt内容</h1><h2 id="限制Edt输入内容的类型"><a href="#限制Edt输入内容的类型" class="headerlink" title="限制Edt输入内容的类型"></a>限制Edt输入内容的类型</h2><p><strong>自定义TextWatcher类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LimitInputTextWatcher</span> <span class="keyword">implements</span> <span class="title class_">TextWatcher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">EditText</span> <span class="variable">et</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 筛选条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String regex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的筛选条件(正则:只能输入中文)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">DEFAULT_REGEX</span> <span class="operator">=</span> <span class="string">&quot;[^\u4E00-\u9FA5]&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LimitInputTextWatcher</span><span class="params">(EditText et)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.et = et;</span><br><span class="line">        <span class="built_in">this</span>.regex = DEFAULT_REGEX;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LimitInputTextWatcher</span><span class="params">(EditText et, String regex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.et = et;</span><br><span class="line">        <span class="built_in">this</span>.regex = regex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeTextChanged</span><span class="params">(CharSequence charSequence, <span class="type">int</span> start, <span class="type">int</span> count, <span class="type">int</span> after)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTextChanged</span><span class="params">(CharSequence charSequence, <span class="type">int</span> start, <span class="type">int</span> before, <span class="type">int</span> count)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterTextChanged</span><span class="params">(Editable editable)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> editable.toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputStr</span> <span class="operator">=</span> clearLimitStr(regex, str);</span><br><span class="line">        et.removeTextChangedListener(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//et.setText方法可能会引起键盘变化，所以用editable.replace来显示内容</span></span><br><span class="line">        editable.replace(<span class="number">0</span>, editable.length(), inputStr.trim());</span><br><span class="line">        et.addTextChangedListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除不符合条件的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> regex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">clearLimitStr</span><span class="params">(String regex, String str)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.replaceAll(regex, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只允许字母、汉字</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regEx</span> <span class="operator">=</span> <span class="string">&quot;[^a-zA-Z\u4E00-\u9FA5]&quot;</span>;<span class="comment">//正则表达式</span></span><br><span class="line"><span class="comment">//String regEx = &quot;[^a-zA-Z0-9\u4E00-\u9FA5]&quot;;//只允许字母、数字、汉字</span></span><br><span class="line">et.addTextChangedListener(<span class="keyword">new</span> <span class="title class_">LimitInputTextWatcher</span>(et, regEx));</span><br></pre></td></tr></table></figure>



<h2 id="限制Edt只能输入整数或者最多两位小数，且整数不能以0开头"><a href="#限制Edt只能输入整数或者最多两位小数，且整数不能以0开头" class="headerlink" title="限制Edt只能输入整数或者最多两位小数，且整数不能以0开头"></a>限制Edt只能输入整数或者最多两位小数，且整数不能以0开头</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">edt.addTextChangedListener(<span class="keyword">new</span> <span class="title class_">TextWatcher</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeTextChanged</span><span class="params">(CharSequence s, <span class="type">int</span> start, <span class="type">int</span> count, <span class="type">int</span> after)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTextChanged</span><span class="params">(CharSequence s, <span class="type">int</span> start, <span class="type">int</span> before, <span class="type">int</span> count)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterTextChanged</span><span class="params">(Editable editable)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!StringUtils.isEmpty(editable.toString().trim())) &#123;</span><br><span class="line">                        edt.removeTextChangedListener(<span class="built_in">this</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">matchRet</span> <span class="operator">=</span> match(editable.toString().trim());</span><br><span class="line">                        <span class="comment">//et.setText方法可能会引起键盘变化，所以用editable.replace来显示内容</span></span><br><span class="line">                        editable.replace(<span class="number">0</span>, editable.length(), matchRet);</span><br><span class="line">                        edt.addTextChangedListener(<span class="built_in">this</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回整数、两位小数、0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">match</span><span class="params">(String text)</span>&#123;</span><br><span class="line">	<span class="comment">//增加判空，防止删除最后一位数字后依旧会返回“0”</span></span><br><span class="line">	<span class="keyword">if</span> (TextUtils.isEmpty(text))&#123;</span><br><span class="line">    	<span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//匹配整数、两位小数、0</span></span><br><span class="line">	<span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^[1-9]\\d*(\\.\\d&#123;0,2&#125;)?|0\\.\\d&#123;0,2&#125;|0$&quot;</span>);</span><br><span class="line">	<span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(text);</span><br><span class="line">	<span class="keyword">if</span>(matcher.find())&#123;</span><br><span class="line">		<span class="keyword">return</span> matcher.group(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="限制首位不能是空格"><a href="#限制首位不能是空格" class="headerlink" title="限制首位不能是空格"></a>限制首位不能是空格</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">edt.addTextChangedListener(<span class="keyword">new</span> <span class="title class_">TextWatcher</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeTextChanged</span><span class="params">(CharSequence s, <span class="type">int</span> start, <span class="type">int</span> count, <span class="type">int</span> after)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTextChanged</span><span class="params">(CharSequence s, <span class="type">int</span> start, <span class="type">int</span> before, <span class="type">int</span> count)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterTextChanged</span><span class="params">(Editable editable)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (editable.toString().length() == <span class="number">1</span> &amp;&amp; TextUtils.equals(editable.toString(), <span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">                        mBinding.searchBar.removeTextChangedListener(<span class="built_in">this</span>);</span><br><span class="line">                        <span class="comment">//et.setText方法可能会引起键盘变化，所以用editable.replace来显示内容</span></span><br><span class="line">                        editable.replace(<span class="number">0</span>, editable.length(), <span class="string">&quot;&quot;</span>);</span><br><span class="line">                        mBinding.searchBar.addTextChangedListener(<span class="built_in">this</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>



<h2 id="限制Edt不能输入表情符号"><a href="#限制Edt不能输入表情符号" class="headerlink" title="限制Edt不能输入表情符号"></a><a href="https://www.jianshu.com/p/a2b4eec5ed16">限制Edt不能输入表情符号</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InputFilter</span> <span class="variable">inputFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputFilter</span>() &#123;</span><br><span class="line">    <span class="type">Pattern</span> <span class="variable">emoji</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;[\ud83c\udc00-\ud83c\udfff]|[\ud83d\udc00-\ud83d\udfff]|[\u2600-\u27ff]&quot;</span>,Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE);</span><br><span class="line">    <span class="comment">//Pattern pattern = Pattern.compile(&quot;[^a-zA-Z0-9\\u4E00-\\u9FA5_]&quot;);//汉字,英文，数字</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CharSequence <span class="title function_">filter</span><span class="params">(CharSequence charSequence, <span class="type">int</span> i, <span class="type">int</span> i1, Spanned spanned, <span class="type">int</span> i2, <span class="type">int</span> i3)</span> &#123;</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> emoji.matcher(charSequence);</span><br><span class="line">        <span class="keyword">if</span> (matcher.find()) &#123;</span><br><span class="line">            ToastUtil.showToast(ApplyShowTaskActivity.<span class="built_in">this</span>, <span class="string">&quot;不支持输入表情&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一参数屏蔽表情；第二个参数限制输入的字数（20个字）</span></span><br><span class="line">edtTest.setFilters(<span class="keyword">new</span> <span class="title class_">InputFilter</span>[]&#123;inputFilter, <span class="keyword">new</span> <span class="title class_">InputFilter</span>.LengthFilter(<span class="number">20</span>)&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面限制的表情会有少部分没法限制</p>
</blockquote>
<h2 id="限制输入类型，且首位是下划线或字母开头"><a href="#限制输入类型，且首位是下划线或字母开头" class="headerlink" title="限制输入类型，且首位是下划线或字母开头"></a>限制输入类型，且首位是下划线或字母开头</h2><p>微信号规则：微信号必须以字母或者下划线开头，可以使用6-20位数字、字母、下划线、减号或它们的组合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">digits</span> <span class="operator">=</span> <span class="string">&quot;_-0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&quot;</span>;</span><br><span class="line">mBinding.etChangeUserName.setDigits(digits);</span><br><span class="line">mBinding.etChangeUserName.addBETextChangedListener(<span class="keyword">new</span> <span class="title class_">KButtonEditText</span>.kBetCenterEditTextWatcher() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeKBetCenterEditTextChanged</span><span class="params">(CharSequence s, <span class="type">int</span> start, <span class="type">int</span> count, <span class="type">int</span> after)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onKBetCenterEditTextChanged</span><span class="params">(CharSequence s, <span class="type">int</span> start, <span class="type">int</span> before, <span class="type">int</span> count)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterKBetCenterEditTextChanged</span><span class="params">(Editable editable)</span> &#123;</span><br><span class="line">        <span class="comment">//限制输入内容的类型</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> editable.toString();</span><br><span class="line">        <span class="keyword">if</span> (str.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//限制首位是下划线或字母</span></span><br><span class="line">            <span class="keyword">if</span> (!isStartMatcher(str)) &#123;</span><br><span class="line">                ToastUtils.showCenter(getResources().getString(R.string.wx_no_limit));</span><br><span class="line">                <span class="keyword">if</span> (str.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                    mBinding.etChangeUserName.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                mBinding.btnNextChangePass.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mBinding.etChangeUserName.removeBETextChangedListener();</span><br><span class="line">        <span class="comment">//et.setText方法可能会引起键盘变化，所以用editable.replace来显示内容</span></span><br><span class="line">        editable.replace(<span class="number">0</span>, editable.length(), str.trim());</span><br><span class="line">        mBinding.etChangeUserName.addBETextChangedListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//do something...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首位是下划线或字母</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isStartMatcher</span><span class="params">(String string)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">digits</span> <span class="operator">=</span> <span class="string">&quot;_qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; digits.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> digits.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (string.startsWith(String.valueOf(c))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





<h1 id="过滤Edt内容"><a href="#过滤Edt内容" class="headerlink" title="过滤Edt内容"></a><a href="https://blog.csdn.net/HMYANG314/article/details/49996701">过滤Edt内容</a></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setProhibitEmoji</span><span class="params">(EditText et)</span> &#123;</span><br><span class="line">    InputFilter[] filters = &#123; getInputFilterProhibitEmoji() &#125;;</span><br><span class="line">    et.setFilters(filters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> InputFilter <span class="title function_">getInputFilterProhibitEmoji</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">InputFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputFilter</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> CharSequence <span class="title function_">filter</span><span class="params">(CharSequence source, <span class="type">int</span> start, <span class="type">int</span> end,</span></span><br><span class="line"><span class="params">                                   Spanned dest, <span class="type">int</span> dstart, <span class="type">int</span> dend)</span> &#123;</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">codePoint</span> <span class="operator">=</span> source.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (!getIsEmoji(codePoint)) &#123;</span><br><span class="line">                    buffer.append(codePoint);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (source <span class="keyword">instanceof</span> Spanned) &#123;</span><br><span class="line">                <span class="type">SpannableString</span> <span class="variable">sp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpannableString</span>(buffer);</span><br><span class="line">                TextUtils.copySpansFrom((Spanned) source, start, end, <span class="literal">null</span>,</span><br><span class="line">                                        sp, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span> sp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> buffer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">getIsEmoji</span><span class="params">(<span class="type">char</span> codePoint)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((codePoint == <span class="number">0x0</span>) || (codePoint == <span class="number">0x9</span>) || (codePoint == <span class="number">0xA</span>)</span><br><span class="line">        || (codePoint == <span class="number">0xD</span>)</span><br><span class="line">        || ((codePoint &gt;= <span class="number">0x20</span>) &amp;&amp; (codePoint &lt;= <span class="number">0xD7FF</span>))</span><br><span class="line">        || ((codePoint &gt;= <span class="number">0xE000</span>) &amp;&amp; (codePoint &lt;= <span class="number">0xFFFD</span>))</span><br><span class="line">        || ((codePoint &gt;= <span class="number">0x10000</span>) &amp;&amp; (codePoint &lt;= <span class="number">0x10FFFF</span>)))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面这种限制的表情更不全（比上面《限制Edt不能输入表情符号》更不全）</p>
</blockquote>
<h1 id="保证点击editText时光标总在最后"><a href="#保证点击editText时光标总在最后" class="headerlink" title="保证点击editText时光标总在最后"></a>保证点击editText时光标总在最后</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.landi.sqsm.cashier.widget;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressLint(&quot;AppCompatCustomView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LastInputEditText</span> <span class="keyword">extends</span> <span class="title class_">EditText</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;LastInputEditText&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LastInputEditText</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyle)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LastInputEditText</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LastInputEditText</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSelection</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> stop)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setSelection(start, stop);</span><br><span class="line">        Log.i(TAG,<span class="string">&quot;执行了setSelection1: &quot;</span> + <span class="string">&quot;start：&quot;</span> + start + <span class="string">&quot; stop：&quot;</span> +stop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSelection</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setSelection(index);</span><br><span class="line">        Log.i(TAG,<span class="string">&quot;执行了setSelection2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSelectionChanged</span><span class="params">(<span class="type">int</span> selStart, <span class="type">int</span> selEnd)</span> &#123;</span><br><span class="line">        <span class="comment">//super.onSelectionChanged(selStart, selEnd);</span></span><br><span class="line">        Log.i(TAG,<span class="string">&quot;执行了onSelectionChanged&quot;</span> + <span class="string">&quot;selStart：&quot;</span> + selStart  + <span class="string">&quot;selEnd：&quot;</span> +  selEnd);</span><br><span class="line">        <span class="comment">//保证光标始终在最后面</span></span><br><span class="line">        <span class="keyword">if</span>(selStart==selEnd)&#123;<span class="comment">//防止不能多选</span></span><br><span class="line">            setSelection(getText().length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//setSelection(getText().length());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="光标显示在最后一位且弹出键盘"><a href="#光标显示在最后一位且弹出键盘" class="headerlink" title="光标显示在最后一位且弹出键盘"></a>光标显示在最后一位且弹出键盘</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用控件.post确保控件已经渲染完毕</span></span><br><span class="line">edt.post(()-&gt;&#123;</span><br><span class="line">    edt.setFocusable(<span class="literal">true</span>);</span><br><span class="line">    edt.setFocusableInTouchMode(<span class="literal">true</span>);</span><br><span class="line">    edt.requestFocus();</span><br><span class="line">    <span class="comment">//这句是关键</span></span><br><span class="line">    AttachmentRenameActivity.<span class="built_in">this</span>.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);</span><br><span class="line">    edt.setSelection(edt.getText().length());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>代码中设置了setSoftInputMode，AndroidManifest中可以不用设置 android:windowSoftInputMode&#x3D;”stateVisible”</p>
</blockquote>
<h1 id="光标透明"><a href="#光标透明" class="headerlink" title="光标透明"></a><a href="https://blog.csdn.net/zcn596785154/article/details/78019263">光标透明</a></h1><p>在drawable下新建<code>edittext_cursor.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="attr">android:shape</span>=<span class="string">&quot;rectangle&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:width</span>=<span class="string">&quot;1dp&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">&quot;#00000000&quot;</span>  /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在xml的<code>&lt;EditText&gt;</code>上使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:textCursorDrawable=&quot;@drawable/edittext_cursor&quot;</span><br></pre></td></tr></table></figure>





<h1 id="验证码框效果"><a href="#验证码框效果" class="headerlink" title="验证码框效果"></a><a href="https://www.zhangshengrong.com/p/zD1yQz7p1r/">验证码框效果</a></h1><p>实现：4个TextView，上面覆盖一个EditText。EditText接收输入、黏贴等，再把内容截取设置到对应的Tv上。另外，要让光标透明（因为EditText上的光标位置并没有对应上tv）</p>
<blockquote>
<p>注意：EditText的cursorVisible得是true，否则长按黏贴功能使用不了</p>
</blockquote>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a>自定义控件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerificationCodeEditText</span> <span class="keyword">extends</span> <span class="title class_">KDataBindingCustomView</span>&lt;VerificationCodeEditTextBinding&gt; &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> mHightLightColor;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> mDefaultColor;</span><br><span class="line">	<span class="keyword">private</span> OnTextChangeListener mListener;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">VerificationCodeEditText</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>(context, <span class="literal">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">VerificationCodeEditText</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">VerificationCodeEditText</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">		mHightLightColor = ResourcesCompat.getColor(getResources(), R.color.colorAppTheme, <span class="literal">null</span>);</span><br><span class="line">		mDefaultColor = ResourcesCompat.getColor(getResources(), R.color.color999999, <span class="literal">null</span>);</span><br><span class="line">		initViews();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">setLayoutRes</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> R.layout.layout_verification_code_edit_text;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initViews</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">//验证码输入</span></span><br><span class="line">		mBinding.etVerificationCodeEditText.addTextChangedListener(<span class="keyword">new</span> <span class="title class_">TextWatcher</span>() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeTextChanged</span><span class="params">(CharSequence charSequence, <span class="type">int</span> i, <span class="type">int</span> i1, <span class="type">int</span> i2)</span> &#123;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTextChanged</span><span class="params">(CharSequence charSequence, <span class="type">int</span> i, <span class="type">int</span> i1, <span class="type">int</span> i2)</span> &#123;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterTextChanged</span><span class="params">(Editable editable)</span> &#123;</span><br><span class="line">				<span class="type">String</span> <span class="variable">trim</span> <span class="operator">=</span> mBinding.etVerificationCodeEditText.getText().toString().trim();</span><br><span class="line">				<span class="keyword">if</span> (AppStringUtils.isEmpty(trim)) &#123;</span><br><span class="line">					mBinding.tvVerificationCodeEditText1.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">					mBinding.tvVerificationCodeEditText2.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">					mBinding.tvVerificationCodeEditText3.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">					mBinding.tvVerificationCodeEditText4.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">					mBinding.div1VerificationCodeEditText.setBackgroundColor(mHightLightColor);</span><br><span class="line">					mBinding.div2VerificationCodeEditText.setBackgroundColor(mDefaultColor);</span><br><span class="line">					mBinding.div3VerificationCodeEditText.setBackgroundColor(mDefaultColor);</span><br><span class="line">					mBinding.div4VerificationCodeEditText.setBackgroundColor(mDefaultColor);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (trim.length() == <span class="number">1</span>) &#123;</span><br><span class="line">					mBinding.tvVerificationCodeEditText1.setText(trim);</span><br><span class="line">					mBinding.tvVerificationCodeEditText2.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">					mBinding.tvVerificationCodeEditText3.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">					mBinding.tvVerificationCodeEditText4.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">					mBinding.div1VerificationCodeEditText.setBackgroundColor(mDefaultColor);</span><br><span class="line">					mBinding.div2VerificationCodeEditText.setBackgroundColor(mHightLightColor);</span><br><span class="line">					mBinding.div3VerificationCodeEditText.setBackgroundColor(mDefaultColor);</span><br><span class="line">					mBinding.div4VerificationCodeEditText.setBackgroundColor(mDefaultColor);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (trim.length() == <span class="number">2</span>) &#123;</span><br><span class="line">					mBinding.tvVerificationCodeEditText1.setText(trim.substring(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">					mBinding.tvVerificationCodeEditText2.setText(trim.substring(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">					mBinding.tvVerificationCodeEditText3.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">					mBinding.tvVerificationCodeEditText4.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">					mBinding.div1VerificationCodeEditText.setBackgroundColor(mDefaultColor);</span><br><span class="line">					mBinding.div2VerificationCodeEditText.setBackgroundColor(mDefaultColor);</span><br><span class="line">					mBinding.div3VerificationCodeEditText.setBackgroundColor(mHightLightColor);</span><br><span class="line">					mBinding.div4VerificationCodeEditText.setBackgroundColor(mDefaultColor);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (trim.length() == <span class="number">3</span>) &#123;</span><br><span class="line">					mBinding.tvVerificationCodeEditText1.setText(trim.substring(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">					mBinding.tvVerificationCodeEditText2.setText(trim.substring(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">					mBinding.tvVerificationCodeEditText3.setText(trim.substring(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">					mBinding.tvVerificationCodeEditText4.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">					mBinding.div1VerificationCodeEditText.setBackgroundColor(mDefaultColor);</span><br><span class="line">					mBinding.div2VerificationCodeEditText.setBackgroundColor(mDefaultColor);</span><br><span class="line">					mBinding.div3VerificationCodeEditText.setBackgroundColor(mDefaultColor);</span><br><span class="line">					mBinding.div4VerificationCodeEditText.setBackgroundColor(mHightLightColor);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (trim.length() == <span class="number">4</span>) &#123;</span><br><span class="line">					mBinding.tvVerificationCodeEditText1.setText(trim.substring(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">					mBinding.tvVerificationCodeEditText2.setText(trim.substring(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">					mBinding.tvVerificationCodeEditText3.setText(trim.substring(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">					mBinding.tvVerificationCodeEditText4.setText(trim.substring(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (mListener != <span class="literal">null</span>) &#123;</span><br><span class="line">					mListener.afterTextChanged(editable.toString());</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearText</span><span class="params">()</span> &#123;</span><br><span class="line">		mBinding.etVerificationCodeEditText.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTextChangeListener</span><span class="params">(OnTextChangeListener listener)</span> &#123;</span><br><span class="line">		mListener = listener;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OnTextChangeListener</span> &#123;</span><br><span class="line">		<span class="keyword">void</span> <span class="title function_">afterTextChanged</span><span class="params">(String s)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getText</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> mBinding.etVerificationCodeEditText.getText().toString().trim();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> EditText <span class="title function_">getInputEt</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mBinding.etVerificationCodeEditText;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中的KDataBindingCustomView</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：自定义DataBinding的控件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">KDataBindingCustomView</span>&lt;VD <span class="keyword">extends</span> <span class="title class_">ViewDataBinding</span>&gt; <span class="keyword">extends</span> <span class="title class_">FrameLayout</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> VD mBinding;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">KDataBindingCustomView</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>(context, <span class="literal">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">KDataBindingCustomView</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">KDataBindingCustomView</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">		mBinding = DataBindingUtil.inflate(LayoutInflater.from(context), setLayoutRes(), <span class="built_in">this</span>, <span class="literal">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">setLayoutRes</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>布局文件<code>layout_verification_code_edit_text.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">class</span>=<span class="string">&quot;VerificationCodeEditTextBinding&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/ll_verification_code_edit_text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginEnd</span>=<span class="string">&quot;@dimen/viewSize8&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_verification_code_edit_text_1&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:background</span>=<span class="string">&quot;@null&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorAppMainText&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/viewSize40&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/div1_verification_code_edit_text&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/viewSize1&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:background</span>=<span class="string">&quot;@color/colorAppTheme&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginEnd</span>=<span class="string">&quot;@dimen/viewSize8&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_verification_code_edit_text_2&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:background</span>=<span class="string">&quot;@null&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorAppMainText&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/viewSize40&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/div2_verification_code_edit_text&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/viewSize1&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:background</span>=<span class="string">&quot;@color/color999999&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginEnd</span>=<span class="string">&quot;@dimen/viewSize8&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_verification_code_edit_text_3&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:background</span>=<span class="string">&quot;@null&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorAppMainText&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/viewSize40&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/div3_verification_code_edit_text&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/viewSize1&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:background</span>=<span class="string">&quot;@color/color999999&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginEnd</span>=<span class="string">&quot;@dimen/viewSize8&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_verification_code_edit_text_4&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:background</span>=<span class="string">&quot;@null&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorAppMainText&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/viewSize40&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">&quot;@+id/div4_verification_code_edit_text&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/viewSize1&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:background</span>=<span class="string">&quot;@color/color999999&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/et_verification_code_edit_text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_alignTop</span>=<span class="string">&quot;@+id/ll_verification_code_edit_text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_alignBottom</span>=<span class="string">&quot;@+id/ll_verification_code_edit_text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@color/colorTranslucent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:cursorVisible</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:inputType</span>=<span class="string">&quot;number&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:maxLength</span>=<span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textCursorDrawable</span>=<span class="string">&quot;@drawable/edittext_cursor&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;@color/colorTranslucent&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xxx.widget.verifycode.VerificationCodeEditText</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/et_auth_code_v1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginHorizontal</span>=<span class="string">&quot;@dimen/viewSize24&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/viewSize16&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@id/tv_tip_auth_code_v1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="问题：无法一进入页面就弹出键盘"><a href="#问题：无法一进入页面就弹出键盘" class="headerlink" title="问题：无法一进入页面就弹出键盘"></a>问题：无法一进入页面就弹出键盘</h3><p>解决：给对应editText设置个延迟的展示键盘（用延迟的获取焦点可能还无法唤起键盘）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mBinding.etAuthCodeV1.getInputEt().postDelayed(() -&gt; com.blankj.utilcode.util.KeyboardUtils.showSoftInput(mBinding.etAuthCodeV1.getInputEt()), <span class="number">200</span>);</span><br></pre></td></tr></table></figure>





<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><h2 id="可清空的edittext"><a href="#可清空的edittext" class="headerlink" title="可清空的edittext"></a>可清空的edittext</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Rect;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.widget.AppCompatEditText;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * desc   : 可清空的edittext</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClearableEditText</span> <span class="keyword">extends</span> <span class="title class_">AppCompatEditText</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DRAWABLE_LEFT</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DRAWABLE_TOP</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DRAWABLE_RIGHT</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DRAWABLE_BOTTOM</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> Drawable mClearDrawable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClearableEditText</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClearableEditText</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClearableEditText</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        mClearDrawable = getResources().getDrawable(R.drawable.icon_x_1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onTextChanged</span><span class="params">(CharSequence text, <span class="type">int</span> start, <span class="type">int</span> lengthBefore, <span class="type">int</span> lengthAfter)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onTextChanged(text, start, lengthBefore, lengthAfter);</span><br><span class="line">        setClearIconVisible(hasFocus() &amp;&amp; text.length() &gt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onFocusChanged</span><span class="params">(<span class="type">boolean</span> focused, <span class="type">int</span> direction, Rect previouslyFocusedRect)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onFocusChanged(focused, direction, previouslyFocusedRect);</span><br><span class="line">        setClearIconVisible(focused &amp;&amp; length() &gt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                <span class="type">Drawable</span> <span class="variable">drawable</span> <span class="operator">=</span> getCompoundDrawables()[DRAWABLE_RIGHT];</span><br><span class="line">                <span class="keyword">if</span> (drawable != <span class="literal">null</span> &amp;&amp; event.getX() &lt;= (getWidth() - getPaddingRight())</span><br><span class="line">                        &amp;&amp; event.getX() &gt;= (getWidth() - getPaddingRight() - drawable.getBounds().width())) &#123;</span><br><span class="line">                    setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setClearIconVisible</span><span class="params">(<span class="type">boolean</span> visible)</span> &#123;</span><br><span class="line">        setCompoundDrawablesWithIntrinsicBounds(getCompoundDrawables()[DRAWABLE_LEFT], getCompoundDrawables()[DRAWABLE_TOP],</span><br><span class="line">                visible ? mClearDrawable : <span class="literal">null</span>, getCompoundDrawables()[DRAWABLE_BOTTOM]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="EditText全选效果无效"><a href="#EditText全选效果无效" class="headerlink" title="EditText全选效果无效"></a>EditText全选效果无效</h2><p>现象：点击之后，先出现全选，然后会失去全选的效果</p>
<p>解决：思路是借助外部新建的一个EditText控件，在onTouch时先把焦点给其他的EditText，然后再设置全选</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(motionEvent.getAction() == MotionEvent.ACTION_UP)&#123;</span><br><span class="line">    fragmentScanPlatepayNo.requestFocus();<span class="comment">//这个时另外一个edittext获取焦点</span></span><br><span class="line">    <span class="keyword">if</span>(StringUtil.isNotEmpty(fragmentScanPlatepayAcctMoney.getText().toString()))&#123;</span><br><span class="line">        fragmentScanPlatepayAcctMoney.selectAll();</span><br><span class="line">        fragmentScanPlatepayAcctMoney.setSelectAllOnFocus(<span class="literal">true</span>);</span><br><span class="line">        keyBoardNumLayout.setSelect(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml布局中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:focusable=&quot;true&quot;</span><br><span class="line">android:selectAllOnFocus=&quot;true&quot;</span><br></pre></td></tr></table></figure>

<p><strong>全部代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fragmentScanPlatepayAcctMoney.setOnTouchListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnTouchListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouch</span><span class="params">(View view, MotionEvent motionEvent)</span> &#123;</span><br><span class="line">        <span class="comment">// 此处为得到焦点时的处理内容</span></span><br><span class="line">        fragmentScanPlatepayNo.requestFocus();<span class="comment">//这里的作用是每次点击的时候  还可以全选</span></span><br><span class="line">        <span class="keyword">if</span> (fragmentScanPlatepayAcctMoney != <span class="literal">null</span>) &#123;</span><br><span class="line">            keyBoardNumLayout.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(motionEvent.getAction() == MotionEvent.ACTION_UP)&#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtil.isNotEmpty(fragmentScanPlatepayAcctMoney.getText().toString())) &#123;</span><br><span class="line">                fragmentScanPlatepayAcctMoney.selectAll();</span><br><span class="line">                fragmentScanPlatepayAcctMoney.setSelectAllOnFocus(<span class="literal">true</span>);</span><br><span class="line">                keyBoardNumLayout.setSelect(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:id</span>=<span class="string">&quot;@+id/fragment_scan_platepay_acct_money&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:background</span>=<span class="string">&quot;@null&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:cursorVisible</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:digits</span>=<span class="string">&quot;0123456789.&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:focusable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:selectAllOnFocus</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:gravity</span>=<span class="string">&quot;center|center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:hint</span>=<span class="string">&quot;请输入金额&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:imeOptions</span>=<span class="string">&quot;actionNext&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:inputType</span>=<span class="string">&quot;none&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:maxLength</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:paddingStart</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:paddingEnd</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:privateImeOptions</span>=<span class="string">&quot;inputmode=number|disable=chinese,eng_upper,eng_lower,interpunction,space&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:singleLine</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:textCursorDrawable</span>=<span class="string">&quot;@drawable/cursor_color&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="edittext和Scrollview滑动条冲突问题"><a href="#edittext和Scrollview滑动条冲突问题" class="headerlink" title="edittext和Scrollview滑动条冲突问题"></a>edittext和Scrollview滑动条冲突问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解决edittext和Scrollview滑动条冲突问题</span></span><br><span class="line">edt.setOnTouchListener(<span class="keyword">new</span> <span class="title class_">OnTouchListener</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouch</span><span class="params">(View v, MotionEvent event)</span> &#123;</span><br><span class="line">        v.getParent().requestDisallowInterceptTouchEvent(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction() &amp; MotionEvent.ACTION_MASK) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                v.getParent().requestDisallowInterceptTouchEvent(<span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="EditText不自动换行"><a href="#EditText不自动换行" class="headerlink" title="EditText不自动换行"></a>EditText不自动换行</h2><p>添加属性<code>android:inputType=&quot;textMultiLine&quot;</code></p>
<h2 id="EditText添加addTextChangedListener后手写时无法正常使用"><a href="#EditText添加addTextChangedListener后手写时无法正常使用" class="headerlink" title="EditText添加addTextChangedListener后手写时无法正常使用"></a>EditText添加addTextChangedListener后手写时无法正常使用</h2>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓代码片段UI</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/posts/4049607742/</url>
    <content><![CDATA[<h1 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">mLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CustomManager mInstance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CustomManager <span class="title function_">getInstance</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">                mInstance = <span class="keyword">new</span> <span class="title class_">CustomManager</span>(context);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> mInstance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">CustomManager</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mContext = context.getApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="饿汉式（静态变量）"><a href="#饿汉式（静态变量）" class="headerlink" title="饿汉式（静态变量）"></a>饿汉式（静态变量）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉式单例类。在类初始化时，已经自行实例化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">	<span class="comment">//静态工厂方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="饿汉式（静态常量）"><a href="#饿汉式（静态常量）" class="headerlink" title="饿汉式（静态常量）"></a>饿汉式（静态常量）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="饿汉式（静态代码块）"><a href="#饿汉式（静态代码块）" class="headerlink" title="饿汉式（静态代码块）"></a>饿汉式（静态代码块）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以天生是线程安全的。</p>
<blockquote>
<p>上面三种写法本质上是一样。但使用静态final的实例对象或者静态代码块依旧不能解决在反序列化、反射、克隆时重新生成实例对象的问题。</p>
<p>优点：写法比较简单，在类装载的时候就完成实例化。避免了线程同步问题。</p>
<p>缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。</p>
</blockquote>
<blockquote>
<p>序列化：一是可将一单例的实例对象写到磁盘，实现数据的持久化；二是可实现对象数据的远程传输。当单例对象有必要实现Serializable接口时，即使将其构造函数设为私有，在它反序列化时依然会通过特殊的途径再创建类的一个新实例，相当于调用了该类的构造函数有效地获得了一个新实例！</p>
<p>反射：可通过setAccessible(true)来绕过private限制，从而调用到类的私有构造函数创建对象</p>
<p>克隆：clone()是Object的方法，每一个对象都是Object的子类，都有clone()方法。clone()方法并不是调用构造函数来创建对象，而是直接拷贝内存区域。因此当我们的单例对象实现了Cloneable接口时，尽管其构造函数时私有的，仍可以通过克隆来创建一个新对象，单例模式也相应失效了。</p>
</blockquote>
<h1 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式单例类。在第一次调用的时候实例化自己</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="comment">//静态工厂方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">			instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>优点：懒加载，只有使用的时候才会加载。</p>
<p>缺点：但是只能在单线程下使用。如果在多线程下，instacnce对象还是空，这时候两个线程同时访问getInstance()方法，因为对象还是空，所以两个线程同时通过了判断，开始执行new的操作。所以在多线程环境下不可使用这种方式。</p>
</blockquote>
<p>解决懒汉式单例模式<strong>线程安全</strong>问题，采用了以下三种解决方案：</p>
<h2 id="在getInstance方法上加同步（线程安全，存在同步开销）"><a href="#在getInstance方法上加同步（线程安全，存在同步开销）" class="headerlink" title="在getInstance方法上加同步（线程安全，存在同步开销）"></a>在getInstance方法上加同步（线程安全，存在同步开销）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//为方法添加同步锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>优点：懒加载，只有使用的时候才会加载，获取单例方法加了同步锁，保正了线程安全。</p>
<p>缺点：效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程假装安全，同步代码块</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">				instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>优点：改进了效率低的问题。</p>
<p>缺点：但实际上这个写法还不能保证线程安全，和第四种写法类似，只要两个线程同时进入了 if (singleton &#x3D;&#x3D; null) { 这句判断，照样会进行两次new操作</p>
</blockquote>
<h2 id="双重检查锁定（DCL）（假）"><a href="#双重检查锁定（DCL）（假）" class="headerlink" title="双重检查锁定（DCL）（假）"></a>双重检查锁定（DCL）（假）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的new Singleton()不是原子操作，大致做了3件事：</p>
<ol>
<li>给Singleton的实例分配内存</li>
<li>调用Singleton()的构造函数，初始化成员字段</li>
<li>将instance对象指向分配的内存空间（此时instance就不是null了）</li>
</ol>
<blockquote>
<p>但是由于Java编译器运行处理器乱序执行，上面的2、3步骤的顺序无法保证。所以有存在DCL失效问题</p>
<p>优点：线程安全；延迟加载；效率较高。</p>
<p>缺点：JVM编译器的指令重排导致单例出现漏洞。</p>
</blockquote>
<h2 id="双重检测锁定（真，推荐使用）"><a href="#双重检测锁定（真，推荐使用）" class="headerlink" title="双重检测锁定（真，推荐使用）"></a>双重检测锁定（真，推荐使用）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">				<span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">					instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在jdk1.5之后，具体化了<strong>volatile</strong>关键字，可以保证instance对象每次都是从主内存中读取，就可以使用DCL的写法来完成单例模式。当然volatile多少会影响到性能。</p>
<p>优点：线程安全；延迟加载；效率较高。</p>
<p>缺点：由于volatile关键字会屏蔽Java虚拟机所做的一些代码优化，略微的性能降低，但除非你的代码在并发场景比较复杂或者低于JDK6版本下使用，否则，这种方式一般是能够满足需求的。</p>
</blockquote>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> CustomManager mInstance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CustomManager <span class="title function_">getInstance</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="comment">// 避免非必要加锁</span></span><br><span class="line">        <span class="keyword">if</span> (mInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (CustomManger.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    mInstacne = <span class="keyword">new</span> <span class="title class_">CustomManager</span>(context);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mInstacne;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">CustomManager</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mContext = context.getApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="静态内部类（推荐使用这种）"><a href="#静态内部类（推荐使用这种）" class="headerlink" title="静态内部类（推荐使用这种）"></a>静态内部类（<strong>推荐使用这种</strong>）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LazyHolder</span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Single</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> LazyHolder.INSTANCE;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>优点：避免了线程不安全，延迟加载，效率高。</p>
<p>缺点：依旧不能解决在反序列化、反射、克隆时重新生成实例对象的问题。</p>
</blockquote>
<p>静态内部类的原理是：</p>
<ul>
<li><p>当<code>SingleTon</code>第一次被加载时，并不需要去加载<code>LazyHolder</code>，只有当<code>getInstance()</code>方法第一次被调用时，才会去初始化<code>INSTANCE</code>，这种方法不仅能确保线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。<code>getInstance()</code>方法并没有多次去<code>new</code>对象，取的都是同一个<code>INSTANCE</code>对象。</p>
</li>
<li><p>虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<code>&lt;clinit&gt;()</code>方法，其他线程都需要阻塞等待，直到活动线程执行<code>&lt;clinit&gt;()</code>方法完毕</p>
</li>
<li><p><strong>缺点</strong>在于无法传递参数，如<code>Context</code>等</p>
</li>
</ul>
<h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><p>枚举类型是所有单例实现中唯一一种不会被破坏的单例实现模式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">	INSTANCE;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">businessMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个单例！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainClass</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">s1</span> <span class="operator">=</span> Singleton.INSTANCE;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">s2</span> <span class="operator">=</span> Singleton.INSTANCE;</span><br><span class="line">        s1.businessMethod();</span><br><span class="line">        System.out.println(s1 == s2);<span class="comment">//输出true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li><p>枚举类型是final的（不可被继承）</p>
</li>
<li><p>构造方法是私有的（也只能是私有，不允许被外部实例化，符合单例）</p>
</li>
<li><p>类变量是静态的</p>
</li>
<li><p>没有延时初始化，随着类的初始化就初始化了（从上面静态代码块中可以看出）</p>
</li>
<li><p>由4知道枚举是线程安全的</p>
</li>
</ol>
<p>优点：写法简单，不仅能避免多线程同步问题，而且还能防止反序列化、反射，克隆重新创建新的对象</p>
<p>缺点：JDK1.5之后才能使用</p>
</blockquote>
<h1 id="登记式单例-使用Map容器来管理单例模式（可忽略）"><a href="#登记式单例-使用Map容器来管理单例模式（可忽略）" class="headerlink" title="登记式单例-使用Map容器来管理单例模式（可忽略）"></a>登记式单例-使用Map容器来管理单例模式（可忽略）</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类似Spring里面的方法，将类名注册，下次从里面直接获取</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Singleton&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Singleton&gt;();</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		<span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">		map.put(instance.getClass().getName(), instance);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//保护默认构造子</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">	<span class="comment">//静态工厂方法，返还此类唯一的实例</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">(String name)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(name == <span class="literal">null</span>)&#123;</span><br><span class="line">			name = Singleton.class.getName();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(map.get(name) == <span class="literal">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				map.put(name, (Singleton) Class.forName(name).newInstance());</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InstantiationException e)&#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IllegalAccessException e)&#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> map.get(name);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//一个示意性的商业方法</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">about</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Hello, I am RegSingleton.&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">Singleton</span> <span class="variable">single</span> <span class="operator">=</span> Singleton.getInstance(<span class="literal">null</span>);</span><br><span class="line">		System.out.println(single.about());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>优点：在程序的初始，将多种单例类型注入到一个统一的管理类中，在使用时根据key获取对象对应类型的对象。这种方式使得我们可以管理多种类型的单例，并且在使用时可以通过统一的接口进行获取操作， 降低了用户的使用成本，也对用户隐藏了具体实现，降低了耦合度。</p>
<p>缺点：不常用，有些麻烦</p>
</blockquote>
<p><img src="/posts/4049607742/981009fdgy1gcgtlkpxh3j20qc0dwn7d.jpg" alt="单例模式四种需求的满足情况图"></p>
<h1 id="Application注意点："><a href="#Application注意点：" class="headerlink" title="Application注意点："></a>Application注意点：</h1><p>Application并没有采用单例模式来实现，但是由于它的生命周期由框架来控制，和整个应用的保持一致，且确保了只有一个，所以可被看作是一个单例。但若直接用它来存取数据将会有NullPointerException，因为Application不会永驻在内存里，会随进程杀死而被销毁。它再次创建的时候之前所保存的状态都会重置。</p>
<p>为避免这个问题：</p>
<ol>
<li>通过传统的intent来显式传递数据（将Parcelable或Serializable对象放入Intent&#x2F;Bundle。Parcelable性能比Serializable快一个量级，但是代码实现更复杂点）</li>
<li>重写onSaveInstanceState()和onRestoreInstanceState()，确保进程被杀死时保存必要的状态，在重新打开时可以正确恢复现场。</li>
<li>使用合适的方式将数据保存到数据库或硬盘</li>
<li>总是做判空保护和处理</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>命令相关-ADB</title>
    <url>/posts/172981137/</url>
    <content><![CDATA[<p><a href="https://developer.android.google.cn/studio/command-line/adb?hl=zh-cn">adb官方链接</a></p>
<h1 id="调试相关"><a href="#调试相关" class="headerlink" title="调试相关"></a>调试相关</h1><h2 id="adb服务"><a href="#adb服务" class="headerlink" title="adb服务"></a>adb服务</h2><h3 id="开启adb服务"><a href="#开启adb服务" class="headerlink" title="开启adb服务"></a>开启adb服务</h3><p><code>adb start-server</code></p>
<h3 id="关闭adb服务"><a href="#关闭adb服务" class="headerlink" title="关闭adb服务"></a>关闭adb服务</h3><p><code>adb kill-server</code></p>
<h2 id="adb连接"><a href="#adb连接" class="headerlink" title="adb连接"></a>adb连接</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adb</span> connect <span class="number">127.0.0.1:5037</span></span><br><span class="line">adb connect <span class="number">127.0.0.1:5554</span></span><br><span class="line">adb connect <span class="number">127.0.0.1:5555</span></span><br><span class="line">adb connect <span class="number">127.0.0.1:5556</span></span><br></pre></td></tr></table></figure>



<h2 id="发布端口"><a href="#发布端口" class="headerlink" title="发布端口"></a>发布端口</h2><p>可以设置任意的端口号，做为主机向模拟器或设备的请求端口。如：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adb</span> forward tcp:<span class="number">5555</span> tcp:<span class="number">8000</span></span><br></pre></td></tr></table></figure>





<h2 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h2><h3 id="查看当前设备-cpuInfo"><a href="#查看当前设备-cpuInfo" class="headerlink" title="查看当前设备 cpuInfo"></a>查看当前设备 cpuInfo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell</span><br><span class="line"><span class="built_in">cd</span> /proc</span><br><span class="line"><span class="built_in">cat</span> cpuinfo</span><br></pre></td></tr></table></figure>

<h3 id="打印出内核的调试信息"><a href="#打印出内核的调试信息" class="headerlink" title="打印出内核的调试信息"></a>打印出内核的调试信息</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> dmesg</span></span><br></pre></td></tr></table></figure>

<h3 id="列出设备-验证手机是否连上adb"><a href="#列出设备-验证手机是否连上adb" class="headerlink" title="列出设备(验证手机是否连上adb)"></a>列出设备(验证手机是否连上adb)</h3><ul>
<li>列出设备及其id<br><code>adb devices</code></li>
<li>使用特定设备操作<br><code>adb -s device_id</code><br>例如：<code>adb -s 47db0de20304 shell</code></li>
</ul>
<h3 id="获取设备的ID和序列号"><a href="#获取设备的ID和序列号" class="headerlink" title="获取设备的ID和序列号"></a>获取设备的ID和序列号</h3><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">adb</span> <span class="built_in">get-product</span></span><br><span class="line"><span class="comment">#与adb devices获取的值一样</span></span><br><span class="line"><span class="string">adb</span> <span class="built_in">get-serialno</span></span><br></pre></td></tr></table></figure>

<h3 id="查看安卓版本"><a href="#查看安卓版本" class="headerlink" title="查看安卓版本"></a>查看安卓版本</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取系统版本</span></span><br><span class="line">adb <span class="built_in">shell</span> getprop ro.build.<span class="built_in">version</span>.release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取系统api版本</span></span><br><span class="line">adb <span class="built_in">shell</span> getprop ro.build.<span class="built_in">version</span>.sdk</span><br></pre></td></tr></table></figure>









<h2 id="重启设备"><a href="#重启设备" class="headerlink" title="重启设备"></a>重启设备</h2><h3 id="正常重启"><a href="#正常重启" class="headerlink" title="正常重启"></a>正常重启</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adb reboot</span></span><br></pre></td></tr></table></figure>

<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">指定某台机器进行重启</span><br><span class="line">adb -s 真机序列号 <span class="keyword">reboot</span></span><br></pre></td></tr></table></figure>



<h3 id="重启到-bootloader-刷机模式"><a href="#重启到-bootloader-刷机模式" class="headerlink" title="重启到 bootloader (刷机模式)"></a>重启到 bootloader (刷机模式)</h3><p><code>adb reboot bootloader</code></p>
<h3 id="重启到-recovery-恢复模式"><a href="#重启到-recovery-恢复模式" class="headerlink" title="重启到 recovery (恢复模式)"></a>重启到 recovery (恢复模式)</h3><p>进入Recovery 模式可以使用组合键，也可以使用adb 命令 adb 命令进入recovery 模式如下</p>
<p><code>adb reboot recovery</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adb</span> -s 真机序列号 reboot</span><br></pre></td></tr></table></figure>

<h3 id="跳过Google-开机向导的命令"><a href="#跳过Google-开机向导的命令" class="headerlink" title="跳过Google 开机向导的命令"></a>跳过Google 开机向导的命令</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span> pm disable <span class="keyword">com</span>.google.android.setupwizard</span><br><span class="line">adb <span class="keyword">shell</span> settings <span class="keyword">put</span> <span class="keyword">global</span> device_provisioned <span class="number">1</span></span><br><span class="line">adb <span class="keyword">shell</span> settings <span class="keyword">put</span> secure user_setup_complete <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="启动开机向导命令"><a href="#启动开机向导命令" class="headerlink" title="启动开机向导命令"></a>启动开机向导命令</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;adb shell am start  com<span class="selector-class">.google</span><span class="selector-class">.android</span>.setupwizard/<span class="selector-class">.user</span><span class="selector-class">.WelcomeActivity</span></span><br><span class="line">Starting: Intent &#123; act=android<span class="selector-class">.intent</span><span class="selector-class">.action</span><span class="selector-class">.MAIN</span> cat=<span class="selector-attr">[android.intent.category.LAUNCHER]</span> cmp=com<span class="selector-class">.google</span><span class="selector-class">.android</span>.setupwizard/<span class="selector-class">.user</span><span class="selector-class">.WelcomeActivity</span> &#125;</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;</span><br></pre></td></tr></table></figure>









<h2 id="查看手机系统进程"><a href="#查看手机系统进程" class="headerlink" title="查看手机系统进程"></a>查看手机系统进程</h2><h3 id="列出进程列表及其pid（使用-ps-命令查看系统进程）"><a href="#列出进程列表及其pid（使用-ps-命令查看系统进程）" class="headerlink" title="列出进程列表及其pid（使用 ps 命令查看系统进程）"></a>列出进程列表及其pid（使用 <strong>ps</strong> 命令查看系统进程）</h3><p><code>adb shell ps</code></p>
<h3 id="杀死指定pid的进程"><a href="#杀死指定pid的进程" class="headerlink" title="杀死指定pid的进程"></a>杀死指定pid的进程</h3><p><code>adb shell kill pid</code></p>
<h3 id="查看指定进程信息"><a href="#查看指定进程信息" class="headerlink" title="查看指定进程信息"></a>查看指定进程信息</h3><p><code>adb shell ps -x pid</code></p>
<h3 id="使用Top命令查看系统进程"><a href="#使用Top命令查看系统进程" class="headerlink" title="使用Top命令查看系统进程"></a>使用Top命令查看系统进程</h3><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">adb shell <span class="built_in">top</span></span><br></pre></td></tr></table></figure>

<h3 id="结合findstr-命令-过滤多余的信息"><a href="#结合findstr-命令-过滤多余的信息" class="headerlink" title="结合findstr 命令 过滤多余的信息"></a>结合findstr 命令 过滤多余的信息</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span> <span class="keyword">ps</span> | findstr qq</span><br></pre></td></tr></table></figure>



<h2 id="查看-service"><a href="#查看-service" class="headerlink" title="查看 service"></a>查看 service</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> service list</span></span><br></pre></td></tr></table></figure>



<h2 id="查看系统当前内存使用情况"><a href="#查看系统当前内存使用情况" class="headerlink" title="查看系统当前内存使用情况"></a>查看系统当前内存使用情况</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> <span class="built_in">cat</span> /proc/meminfo</span></span><br></pre></td></tr></table></figure>

<h3 id="查看指定包名应用内存使用情况"><a href="#查看指定包名应用内存使用情况" class="headerlink" title="查看指定包名应用内存使用情况"></a>查看指定包名应用内存使用情况</h3><p><code>adb shell dumpsys meminfo package</code></p>
<h3 id="内存top10【3秒刷新一次】"><a href="#内存top10【3秒刷新一次】" class="headerlink" title="内存top10【3秒刷新一次】"></a>内存top10【3秒刷新一次】</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adb</span> shell</span><br><span class="line"><span class="attribute">top</span> -m <span class="number">10</span> -d <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="查看某个进程的使用情况"><a href="#查看某个进程的使用情况" class="headerlink" title="查看某个进程的使用情况"></a>查看某个进程的使用情况</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adb</span> shell</span><br><span class="line"><span class="attribute">top</span> -d <span class="number">0</span>.<span class="number">5</span> | grep <span class="number">13588</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>-m num Maximum number of processes to display. &#x2F;&#x2F; 最多显示多少个进程<br>-n num Updates to show before exiting. &#x2F;&#x2F; 刷新次数<br>-d num Seconds to wait between updates. &#x2F;&#x2F; 刷新间隔时间（默认5秒）<br>-s col Column to sort by (cpu,vss,rss,thr). &#x2F;&#x2F; 按哪列排序<br>-t Show threads instead of processes. &#x2F;&#x2F; 显示线程信息而不是进程<br>-h Display this help screen. &#x2F;&#x2F; 显示帮助文档</p>
</blockquote>
<h2 id="Activity-调试"><a href="#Activity-调试" class="headerlink" title="Activity 调试"></a>Activity 调试</h2><h3 id="启动应用（adb启动Activity）"><a href="#启动应用（adb启动Activity）" class="headerlink" title="启动应用（adb启动Activity）"></a>启动应用（adb启动Activity）</h3><p><code>adb shell am start -n 包名/类名</code></p>
<p><code>adb shell am start -n your.package.name/your.package.name-activity</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">如：启动浏览器</span><br><span class="line">am start -n </span><br><span class="line">com<span class="selector-class">.android</span>.browser/com<span class="selector-class">.android</span><span class="selector-class">.browser</span>.BrowserActivity</span><br></pre></td></tr></table></figure>

<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">如：找到并启动正在运行的某个activity</span><br><span class="line">adb <span class="keyword">shell</span> dumpsys activity|findstr Run</span><br><span class="line"></span><br><span class="line">adb <span class="keyword">shell</span> <span class="keyword">am</span> start -n <span class="keyword">com</span>.tencent.mobileqq/.activity.SplashActivity</span><br></pre></td></tr></table></figure>

<h4 id="启动-amp-耗时"><a href="#启动-amp-耗时" class="headerlink" title="启动&amp;耗时"></a>启动&amp;耗时</h4><p><code>adb shell am start -S -W 包名/类名</code></p>
<blockquote>
<p>-S 表示重启当前应用</p>
</blockquote>
<blockquote>
<p>展示内容解析：</p>
<ul>
<li><p>ThisTime：最后一个Activity的启动耗时（例如从LaunchActivity-&gt;MainActivity【adb命令输入的Activity】，只统计MainActivity的启动耗时）</p>
</li>
<li><p>TotalTime：启动一连串的Activity的总耗时（有几个Activity就统计几个）</p>
</li>
<li><p>WaitTime：应用进程的创建过程+TotalTime</p>
</li>
</ul>
</blockquote>
<h3 id="强行停止应用"><a href="#强行停止应用" class="headerlink" title="强行停止应用"></a>强行停止应用</h3><p><code>adb shell am force-stop package</code></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">例子：</span><br><span class="line">找到某个正在运行的activity</span><br><span class="line">adb <span class="keyword">shell</span> dumpsys activity|findstr Run</span><br><span class="line"></span><br><span class="line">查看正在运行的应用情况</span><br><span class="line">adb <span class="keyword">shell</span> <span class="keyword">ps</span>|findstr mobileqq</span><br><span class="line"></span><br><span class="line">强行停止这个应用</span><br><span class="line">adb <span class="keyword">shell</span> <span class="keyword">am</span> force-<span class="keyword">stop</span> <span class="keyword">com</span>.tencent.mobileqq</span><br><span class="line"></span><br><span class="line">再次查看这个正在运行的应用情况</span><br><span class="line">adb <span class="keyword">shell</span> <span class="keyword">ps</span>|findstr mobileqq</span><br><span class="line">adb <span class="keyword">shell</span> dumpsys activity|findstr Run</span><br></pre></td></tr></table></figure>



<h3 id="查看当前所有栈列表和栈内activity"><a href="#查看当前所有栈列表和栈内activity" class="headerlink" title="查看当前所有栈列表和栈内activity"></a>查看当前所有栈列表和栈内activity</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> dumpsys activity activities</span></span><br></pre></td></tr></table></figure>

<h3 id="查看当前-Activity-名称（查看当前最上层activity）"><a href="#查看当前-Activity-名称（查看当前最上层activity）" class="headerlink" title="查看当前 Activity 名称（查看当前最上层activity）"></a>查看当前 Activity 名称（查看当前最上层activity）</h3><p><code>adb shell dumpsys activity | findstr “mFocusedActivity”</code></p>
<h3 id="获取当前运行的Activity"><a href="#获取当前运行的Activity" class="headerlink" title="获取当前运行的Activity"></a>获取当前运行的Activity</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span> dumpsys activity | findstr <span class="keyword">Run</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当前运行的Activity</span><br><span class="line">adb <span class="keyword">shell</span> <span class="string">&quot;dumpsys activity top | grep ACTIVITY | tail -n 1&quot;</span></span><br><span class="line">当前运行的Fragment</span><br><span class="line">adb <span class="keyword">shell</span> <span class="string">&quot;dumpsys activity top | grep &#x27;#0: &#x27; | tail -n 1&quot;</span></span><br><span class="line">查看Activity任务栈（仅适用android11及以上）</span><br><span class="line">adb <span class="keyword">shell</span> <span class="string">&quot;dumpsys activity activities | grep &#x27;* ActivityRecord&#123;&#x27;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="获取当前运行的Activity-bat"><a href="#获取当前运行的Activity-bat" class="headerlink" title="获取当前运行的Activity.bat"></a>获取当前运行的Activity.bat</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off &amp;PUSHD %~DP0 &amp;TITLE Settings Tool</span><br><span class="line">color 0a</span><br><span class="line"></span><br><span class="line">:menu</span><br><span class="line">cls</span><br><span class="line"><span class="built_in">echo</span> Notes: Please connect device with adb, it<span class="string">&#x27;s only adapter for Android 11.</span></span><br><span class="line"><span class="string">echo === Menu ===</span></span><br><span class="line"><span class="string">echo [1] view top activity</span></span><br><span class="line"><span class="string">echo [2] view top fragment</span></span><br><span class="line"><span class="string">echo [3] view activity stack</span></span><br><span class="line"><span class="string">echo ============</span></span><br><span class="line"><span class="string">set /p user_input=Please choose menu:</span></span><br><span class="line"><span class="string">if %user_input%==1 goto topActivity</span></span><br><span class="line"><span class="string">if %user_input%==2 goto topFragment</span></span><br><span class="line"><span class="string">if %user_input%==3 goto activityStack</span></span><br><span class="line"><span class="string">if not %user_input%==&quot;&quot; goto menu</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:topActivity</span></span><br><span class="line"><span class="string">adb wait-for-device</span></span><br><span class="line"><span class="string">adb shell &quot;dumpsys activity top | grep ACTIVITY | tail -n 1&quot;</span></span><br><span class="line"><span class="string">echo. &amp; pause</span></span><br><span class="line"><span class="string">goto menu</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:topFragment</span></span><br><span class="line"><span class="string">adb wait-for-device</span></span><br><span class="line"><span class="string">adb shell &quot;dumpsys activity top | grep &#x27;</span><span class="comment">#0: &#x27; | tail -n 1&quot;</span></span><br><span class="line"><span class="built_in">echo</span>. &amp; pause</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:activityStack</span><br><span class="line">adb wait-for-device</span><br><span class="line">adb shell <span class="string">&quot;dumpsys activity activities | grep &#x27;* ActivityRecord&#123;&#x27;&quot;</span></span><br><span class="line"><span class="built_in">echo</span>. &amp; pause</span><br><span class="line">goto menu</span><br></pre></td></tr></table></figure>



<p>在 mac 中 findstr 要换成 grep</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">adb <span class="built_in">shell</span> dumpsys activity | grep <span class="keyword">Run</span></span><br></pre></td></tr></table></figure>

<h3 id="获取当前指定包名的Activity栈"><a href="#获取当前指定包名的Activity栈" class="headerlink" title="获取当前指定包名的Activity栈"></a>获取当前指定包名的Activity栈</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> <span class="string">&quot;dumpsys activity|grep&quot;</span> 包名</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>‘grep’不是内部或外部命令，也不是可运行的程序 或批处理文件。所以加双引号</p>
</blockquote>
<h3 id="获取apk-版本号，权限等信息的方法"><a href="#获取apk-版本号，权限等信息的方法" class="headerlink" title="获取apk 版本号，权限等信息的方法"></a>获取apk 版本号，权限等信息的方法</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys <span class="keyword">package</span> <span class="title">com.xxx.xxx(包名)</span></span><br></pre></td></tr></table></figure>



<h3 id="在低电耗模式下测试您的应用"><a href="#在低电耗模式下测试您的应用" class="headerlink" title="在低电耗模式下测试您的应用"></a><a href="https://developer.android.google.cn/training/monitoring-device-state/doze-standby?hl=zh-cn#testing_doze_and_app_standby">在低电耗模式下测试您的应用</a></h3><p>您可以按以下步骤在低电耗模式下测试您的应用：</p>
<ol>
<li><p>使用 Android 6.0（API 级别 23）或更高版本的系统映像配置硬件设备或虚拟设备。</p>
</li>
<li><p>将设备连接到开发计算机并安装您的应用。</p>
</li>
<li><p>运行您的应用并使其保持活动状态。</p>
</li>
<li><p>运行以下命令，强制系统进入闲置模式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> dumpsys deviceidle force-idle</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>准备就绪后，运行以下命令，使系统退出闲置模式：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> dumpsys deviceidle unforce</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行以下命令，重新激活设备：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell </span>dumpsys <span class="keyword">battery </span>reset   </span><br></pre></td></tr></table></figure>
</li>
<li><p>在重新激活设备后观察应用的行为。确保应用在设备退出低电耗模式时正常恢复。</p>
</li>
</ol>
<h3 id="在应用待机模式下测试您的应用"><a href="#在应用待机模式下测试您的应用" class="headerlink" title="在应用待机模式下测试您的应用"></a><a href="https://developer.android.google.cn/training/monitoring-device-state/doze-standby?hl=zh-cn#whitelisting-cases">在应用待机模式下测试您的应用</a></h3><p>如需在应用待机模式下测试您的应用，请执行以下操作：</p>
<ol>
<li><p>使用 Android 6.0（API 级别 23）或更高版本的系统映像配置硬件设备或虚拟设备。</p>
</li>
<li><p>将设备连接到开发计算机并安装您的应用。</p>
</li>
<li><p>运行您的应用并使其保持活动状态。</p>
</li>
<li><p>运行以下命令，强制应用进入应用待机模式：</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">adb</span> <span class="string">shell</span> <span class="string">dumpsys</span> <span class="string">battery</span> <span class="string">unplug</span></span><br><span class="line"><span class="string">adb</span> <span class="string">shell</span> <span class="string">am</span> <span class="built_in">set-inactive</span> &lt;<span class="string">packageName</span>&gt; <span class="string">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用以下命令模拟唤醒您的应用：</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">adb</span> <span class="string">shell</span> <span class="string">am</span> <span class="built_in">set-inactive</span> &lt;<span class="string">packageName</span>&gt; <span class="string">false</span></span><br><span class="line"><span class="string">adb</span> <span class="string">shell</span> <span class="string">am</span> <span class="built_in">get-inactive</span> &lt;<span class="string">packageName</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在唤醒应用后观察它的行为。确保应用从待机模式正常恢复。您应特别检查应用的通知和后台作业是否继续按预期运行。</p>
</li>
</ol>
<h2 id="adb启动service"><a href="#adb启动service" class="headerlink" title="adb启动service"></a>adb启动service</h2><p><code>adb shell am startservice -n 包名/类名</code></p>
<p><code>adb shell am startservice -n ｛包(package)名｝/｛包名｝.&#123;服务(service)名称&#125;</code></p>
<p>如：启动自己应用中一个service</p>
<p><code>adb shell am startservice -n com.android.traffic/com.android.traffic.maniservice</code></p>
<p><code>adb shell am startservice -n com.programandroid/.Service.BindServiceMethod</code></p>
<h2 id="adb发送broadcast"><a href="#adb发送broadcast" class="headerlink" title="adb发送broadcast"></a>adb发送broadcast</h2><p><code>adb shell am broadcast -a &lt;广播动作&gt;</code></p>
<p><code>adb shell am broadcast -a 广播Action</code></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">如：发送一个网络变化的广播</span><br><span class="line">adb <span class="keyword">shell </span>am <span class="keyword">broadcast </span>-a <span class="keyword">android.net.conn.CONNECTIVITY_CHANGE</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">如：发送一个启动成功的广播</span><br><span class="line">adb <span class="keyword">shell </span>am <span class="keyword">broadcast </span>-a <span class="string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="发送-intent"><a href="#发送-intent" class="headerlink" title="发送 intent"></a>发送 intent</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">adb <span class="built_in">shell</span> am <span class="built_in">start</span> -<span class="keyword">a</span> android.intent.action.VIEW</span><br></pre></td></tr></table></figure>







<h1 id="设备应用管理"><a href="#设备应用管理" class="headerlink" title="设备应用管理"></a>设备应用管理</h1><h2 id="安装apk"><a href="#安装apk" class="headerlink" title="安装apk"></a>安装apk</h2><ul>
<li>安装<br><code>adb install xxx.apk</code></li>
<li>覆盖安装(保留缓存和数据)<br><code>adb install -r xxx.apk</code></li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adb</span> -s 真机序列号 install *<span class="regexp">*.apk</span></span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>如</span><br><span class="line">adb -s <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6555</span> install -r **.apk</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中 -s SD卡；-r 覆盖安装</p>
<p>如果只有一台真机，那么直接<code>adb -s install **.apk</code></p>
</blockquote>
<h2 id="卸载apk"><a href="#卸载apk" class="headerlink" title="卸载apk"></a>卸载apk</h2><ul>
<li>卸载<br><code>adb uninstall package</code></li>
<li>卸载时保留数据和缓存目录<br><code>adb uninstall -k package</code></li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> pm uninstall 包名</span></span><br></pre></td></tr></table></figure>



<h2 id="查看设备应用"><a href="#查看设备应用" class="headerlink" title="查看设备应用"></a>查看设备应用</h2><ul>
<li>查看设备所有应用包名（查看手机中所有apk 包名）<br><code>adb shell pm list packages</code></li>
<li>列出指定包名对应的apk路径<br><code>adb shell pm path your.package.name</code></li>
<li>清空指定包名对应的应用的数据和缓存文件（清除app 数据）<br><code>adb shell pm clear your.package.name</code></li>
</ul>
<ul>
<li><p>查看已知权限组</p>
<p><code>adb shell pm list permission-groups</code></p>
</li>
<li><p>查看手机Feature 支持</p>
</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> pm list features</span></span><br></pre></td></tr></table></figure>

<ul>
<li>根据包名，查看apk 安装路径</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> pm path 包名</span></span><br></pre></td></tr></table></figure>



<h2 id="多用户相关"><a href="#多用户相关" class="headerlink" title="多用户相关"></a>多用户相关</h2><ul>
<li><p>查看支持最多用户数</p>
<p><code>adb shell pm get-max-users</code></p>
</li>
<li><p>查询系统所有用户</p>
<p><code>adb shell pm list users</code></p>
</li>
<li><p>创建新用户</p>
<p><code>adb shell pm create-user user_name</code></p>
</li>
<li><p>移除指定id用户</p>
<p><code>adb shell pm remove-user user_id</code></p>
</li>
</ul>
<h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb -s 真机序列号 <span class="keyword">shell</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="built_in">cd</span>到文件目录下，<span class="built_in">ls</span> </span></span><br></pre></td></tr></table></figure>



<h2 id="将电脑文件复制到设备sd卡上"><a href="#将电脑文件复制到设备sd卡上" class="headerlink" title="将电脑文件复制到设备sd卡上"></a>将电脑文件复制到设备sd卡上</h2><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">adb <span class="built_in">push</span> 电脑文件路径 /sdcard</span><br></pre></td></tr></table></figure>

<p>如：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adb</span> push D:\Desktop\安装包\保意\<span class="number">20200302</span>正式线替换图标\laiDianYi-release.apk sdcard</span><br></pre></td></tr></table></figure>



<h2 id="设备文件复制到电脑上"><a href="#设备文件复制到电脑上" class="headerlink" title="设备文件复制到电脑上"></a>设备文件复制到电脑上</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">adb pull <span class="regexp">/sdcard/</span>text.txt 电脑文件路径</span><br></pre></td></tr></table></figure>





<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p><code>adb shell rm /sdcard/text.txt</code><br>-f 强制删除文件不需要确认<br>-r 递归删除文件夹内文件<br>-i 删除文件前需要确认</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>例子（%<span class="number">1</span>替换为具体imei）</span><br><span class="line">adb -s %<span class="number">1</span> shell rm -rf <span class="regexp">/sdcard/</span>jcap.png</span><br></pre></td></tr></table></figure>





<h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><p><code>adb shell mkdir -p /sdcard/temp/test/</code><br>指定 -p 递归创建目录</p>
<h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p><code>adb shell touch /sdcard/text.txt</code></p>
<h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><p><code>adb shell cp /sdcard/text.txt /sdcard/test/</code></p>
<h2 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h2><p><code>adb shell mv /sdcard/1.txt /sdcard/2.text</code><br>移动同一目录下文件相当于重命名文件</p>
<h1 id="常用-ADB-命令"><a href="#常用-ADB-命令" class="headerlink" title="常用 ADB 命令"></a>常用 ADB 命令</h1><h2 id="adb连接模拟器"><a href="#adb连接模拟器" class="headerlink" title="adb连接模拟器"></a>adb连接模拟器</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adb</span> connect <span class="number">127.0.0.1:5037</span></span><br><span class="line">adb connect <span class="number">127.0.0.1:5554</span></span><br><span class="line">adb connect <span class="number">127.0.0.1:5555</span></span><br><span class="line">adb connect <span class="number">127.0.0.1:5556</span></span><br></pre></td></tr></table></figure>



<h2 id="导出bug日志（anr也可以查看）"><a href="#导出bug日志（anr也可以查看）" class="headerlink" title="导出bug日志（anr也可以查看）"></a>导出bug日志（anr也可以查看）</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span><span class="number">1</span>. 生成bug日志</span><br><span class="line">adb bugreport</span><br><span class="line"><span class="regexp">//</span><span class="number">2</span>. cd到d盘下。拉取上一步生成的bugreport</span><br><span class="line">adb pull <span class="regexp">/data/u</span>ser_de<span class="regexp">/0/</span>com.android.shell</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>找到d:&#x2F;com.android.shell&#x2F;files&#x2F;bugreports，解压zip文件，其中anr日志在zip内的FS&#x2F;data&#x2F;anr内</li>
</ol>
<blockquote>
<p>我在windows桌面新建个bat，内容是<code>adb bugreport</code>，居然直接在桌面生成了个zip文件（前提是usb连接好手机）</p>
</blockquote>
<h2 id="记录无线通讯日志"><a href="#记录无线通讯日志" class="headerlink" title="记录无线通讯日志"></a>记录无线通讯日志</h2><p>一般来说，无线通讯的日志非常多，在运行时没必要去记录，但我们还是可以通过命令，设置记录：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span></span><br><span class="line"><span class="keyword"></span>logcat -<span class="keyword">b </span>radio</span><br></pre></td></tr></table></figure>





<h2 id="查看安卓包名"><a href="#查看安卓包名" class="headerlink" title="查看安卓包名"></a>查看安卓包名</h2><p>法一：<code>adb shell am monitor</code></p>
<p>然后启动需要获取包名的应用</p>
<p>法二：<code>adb shell pm list packages -3</code></p>
<p>查看自己安装的 app 包名</p>
<p>法三：安卓系统中：设置–应用–正在运行  查看</p>
<p>法四：安卓系统：文件管理器访问目录&#x2F;data&#x2F;data 下，文件夹即为包名</p>
<p>法五：将 apk 反编译，查看 AndroidManifest.xml 中的 package</p>
<h2 id="列出所有包名"><a href="#列出所有包名" class="headerlink" title="列出所有包名"></a>列出所有包名</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> pm list packages</span></span><br></pre></td></tr></table></figure>

<p>另外可以加上 grep 查询词</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span> pm <span class="keyword">list</span> packages | <span class="keyword">grep</span> <span class="string">&#x27;miui&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="查看手机上所有包名"><a href="#查看手机上所有包名" class="headerlink" title="查看手机上所有包名"></a>查看手机上所有包名</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="built_in">cd</span> data/data ; <span class="built_in">ls</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Linux多个命令一起执行可以用“;” 或者 “&amp;&amp;”进行分割</p>
</blockquote>
<h2 id="ADB-命令截屏"><a href="#ADB-命令截屏" class="headerlink" title="ADB 命令截屏"></a>ADB 命令截屏</h2><p>截屏 <strong>screencap</strong></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell </span><span class="keyword">screencap </span>文件保存路径</span><br></pre></td></tr></table></figure>



<h2 id="ADB-命令录像"><a href="#ADB-命令录像" class="headerlink" title="ADB 命令录像"></a>ADB 命令录像</h2><p>录像 <strong>screenrecord</strong></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell </span><span class="keyword">screenrecord </span>文件保存路径</span><br></pre></td></tr></table></figure>

<p>按 <strong>Control + C</strong> 停止屏幕录制，否则，到三分钟或 <code>--time-limit</code> 设置的时间限制时，录制将自动停止。</p>
<p><strong>screenrecord 部分参数</strong></p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">–size width x height</td>
<td align="left">设置分辨率 eg：1280x720</td>
</tr>
<tr>
<td align="left">–bit-rate rate</td>
<td align="left">视频比特率,默认值为 4Mbps,可以设6Mbps，这样质量更好 eg:<code>adb shell screenrecord --bit-rate 6000000 /sdcard/demo.mp4</code></td>
</tr>
<tr>
<td align="left">–time-limit time</td>
<td align="left">设置最大录制时长（以秒为单位）。默认值和最大值均为 180（3 分钟）。</td>
</tr>
</tbody></table>
<h2 id="申请Root权限"><a href="#申请Root权限" class="headerlink" title="申请Root权限"></a>申请Root权限</h2><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span> <span class="keyword">su</span></span><br></pre></td></tr></table></figure>

<h2 id="非root设备通过adb命令授权应用为超级管理员"><a href="#非root设备通过adb命令授权应用为超级管理员" class="headerlink" title="非root设备通过adb命令授权应用为超级管理员"></a>非root设备通过adb命令授权应用为超级管理员</h2><p>如应用“冰箱”</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">adb</span> <span class="string">shell</span> <span class="string">dpm</span> <span class="built_in">set-device-owner</span> <span class="string">com</span>.<span class="string">catchingnow</span>.<span class="string">icebox</span>/.<span class="string">receiver</span>.<span class="string">DPMReceiver</span></span><br></pre></td></tr></table></figure>





<h2 id="adb-shell查看完毕退出"><a href="#adb-shell查看完毕退出" class="headerlink" title="adb shell查看完毕退出"></a>adb shell查看完毕退出</h2><p><code>exit</code> 或者 Ctrl + D</p>
<h2 id="查看所有程序包名"><a href="#查看所有程序包名" class="headerlink" title="查看所有程序包名"></a>查看所有程序包名</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> pm list packages</span></span><br></pre></td></tr></table></figure>

<p>加上grep查询词</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span> pm <span class="keyword">list</span> packages | <span class="keyword">grep</span> <span class="string">&#x27;miui&#x27;</span></span><br></pre></td></tr></table></figure>





<h2 id="查看当前图层的合成方式"><a href="#查看当前图层的合成方式" class="headerlink" title="查看当前图层的合成方式"></a>查看当前图层的合成方式</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> dumpsys SurfaceFlinger</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>DEVICE：HWC合成（最多合成4个图层，多的就会标记为GPC合成。如弹多个弹窗就会多层，耗能）</p>
<p>CLIENT：GPU合成</p>
</blockquote>
<h1 id="使用logcat抓-log信息"><a href="#使用logcat抓-log信息" class="headerlink" title="使用logcat抓 log信息"></a>使用logcat抓 log信息</h1><h2 id="在cmd窗口输出logcat信息"><a href="#在cmd窗口输出logcat信息" class="headerlink" title="在cmd窗口输出logcat信息"></a>在cmd窗口输出logcat信息</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adb logcat</span></span><br></pre></td></tr></table></figure>

<h2 id="把logcat输出到文件中"><a href="#把logcat输出到文件中" class="headerlink" title="把logcat输出到文件中"></a>把logcat输出到文件中</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adb</span> logcat &gt; D:\<span class="number">1</span>.txt</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">#adb</span>  logcat -d -<span class="selector-tag">b</span> system -v <span class="selector-tag">time</span> &gt;本地文件<span class="selector-class">.txt</span></span><br><span class="line"></span><br><span class="line">adb  logcat -d -<span class="selector-tag">b</span> system -v <span class="selector-tag">time</span> &gt;C:\Users\Administrator\Desktop\temp\悦以国际\logcat<span class="selector-class">.txt</span></span><br><span class="line">adb  logcat -d -<span class="selector-tag">b</span> system -v <span class="selector-tag">time</span> &gt;C:\Users\Administrator\Desktop\temp\星球秀场\logcat<span class="selector-class">.txt</span></span><br><span class="line">adb  logcat -d -<span class="selector-tag">b</span> system -v <span class="selector-tag">time</span> &gt;C:\Users\Administrator\Desktop\temp\SBC2.<span class="number">0</span>\logcat.txt</span><br></pre></td></tr></table></figure>



<h2 id="使用-s-过滤log标签"><a href="#使用-s-过滤log标签" class="headerlink" title="使用 -s 过滤log标签"></a>使用 <strong>-s</strong> 过滤log标签</h2><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">adb logcat -s 关注<span class="built_in">log</span>标签</span><br></pre></td></tr></table></figure>

<p>e.g</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adb logcat -s AndroidRuntime</span></span><br></pre></td></tr></table></figure>

<h2 id="使用-c-清除缓存log"><a href="#使用-c-清除缓存log" class="headerlink" title="使用 -c 清除缓存log"></a>使用 <strong>-c</strong> 清除缓存log</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adb logcat -c</span></span><br></pre></td></tr></table></figure>





<h1 id="电量管理相关命令"><a href="#电量管理相关命令" class="headerlink" title="电量管理相关命令"></a>电量管理相关命令</h1><h2 id="模拟拔下设备电源"><a href="#模拟拔下设备电源" class="headerlink" title="模拟拔下设备电源"></a>模拟拔下设备电源</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell </span>dumpsys <span class="keyword">battery </span>unplug</span><br></pre></td></tr></table></figure>

<h2 id="低电量条件下的行为"><a href="#低电量条件下的行为" class="headerlink" title="低电量条件下的行为"></a>低电量条件下的行为</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">adb <span class="built_in">shell</span> settings <span class="built_in">put</span> <span class="built_in">global</span> low_power <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="恢复电源修改"><a href="#恢复电源修改" class="headerlink" title="恢复电源修改"></a>恢复电源修改</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">shell </span>dumpsys <span class="keyword">battery </span>reset</span><br></pre></td></tr></table></figure>









<h1 id="ADB相关问题"><a href="#ADB相关问题" class="headerlink" title="ADB相关问题"></a>ADB相关问题</h1><h2 id="adb-识别不出的问题"><a href="#adb-识别不出的问题" class="headerlink" title="adb 识别不出的问题"></a>adb 识别不出的问题</h2><p>问题：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">adb devices</span><br><span class="line">adb <span class="keyword">server</span> <span class="keyword">is</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="type">date</span></span><br></pre></td></tr></table></figure>

<p>方法一： </p>
<ol>
<li><p>关闭eclipse</p>
</li>
<li><p><code>cmd--&gt;adb nodaemon server</code>找出adb端口（软件默认5037）</p>
<p><code>cmd--&gt;netstat -ano|findstr 5037</code>列出所有端口为5037的记录。找到本地的记录的pid</p>
</li>
<li><p>任务管理器中：结束掉该pid的进程，关闭adb.exe</p>
</li>
<li><p>重启eclipse</p>
</li>
</ol>
<p>or 命令行关闭占用端口的进程</p>
<ol>
<li><p>找出adb端口（软件默认5037）<br>adb nodaemon server</p>
</li>
<li><p>列出所有端口为5037的记录。找到本地的记录的pid<br>netstat -ano|findstr 5037</p>
</li>
<li><p>结束进程<br>taskkill -f -im pid</p>
</li>
</ol>
<p>方法二：</p>
<ol>
<li><p>停止ADB服务</p>
<p><code>./adb kill-server</code></p>
</li>
<li><p>开启ADB 服务</p>
<p><code>./adb start-server</code></p>
</li>
</ol>
<p>方法三：</p>
<ol>
<li><p>插拔USB重试</p>
</li>
<li><p>手机关机重启</p>
</li>
<li><p>插上USB后，重新装一下驱动，ADB驱动</p>
</li>
<li><p>关掉电脑上360手机助手，安全卫士之类的</p>
</li>
<li><p>windows进程下关掉adb.exe； 关掉eclipse重试</p>
</li>
<li><p>输入命令：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">adb <span class="built_in">kill</span>-service</span><br><span class="line"></span><br><span class="line">adb <span class="built_in">start</span>-server</span><br><span class="line"></span><br><span class="line">adb root adb devices</span><br></pre></td></tr></table></figure>
</li>
<li><p>找到.android文件夹，在该文件夹下添加一个adb_usb.ini文件（若已存在，则直接打开修改），里面内容为0xVID号</p>
<p>VID号获取方法：</p>
<p>计算机管理 -〉设备管理 -〉android phone -&gt; Android Composite ADB Interface -&gt;右键属性-〉详细信息 -〉找到VID_后面的四位数字即可</p>
</li>
</ol>
<h2 id="设备android-5以下不能识别到的问题"><a href="#设备android-5以下不能识别到的问题" class="headerlink" title="设备android 5以下不能识别到的问题"></a>设备android 5以下不能识别到的问题</h2><ul>
<li>查看开发者是否开启USB调试</li>
<li>查看是否选择了传输方式（不会主动弹出，需要去设置里找）</li>
</ul>
<h2 id="adb-devices设备名称相同的问题"><a href="#adb-devices设备名称相同的问题" class="headerlink" title="adb devices设备名称相同的问题"></a>adb devices设备名称相同的问题</h2><p>解决：</p>
<ol>
<li><p>只留下一个设备</p>
</li>
<li><p><code>adb shell</code></p>
</li>
<li><p><code>echo 123321234 &gt;/sys/class/android_usb/android0/iSerial</code></p>
</li>
<li><p>exit 推出shell模式</p>
</li>
<li><p><code>adb kill-server</code></p>
</li>
<li><p><code>adb start-server</code></p>
</li>
<li><p><code>adb devices</code></p>
</li>
</ol>
<h2 id="adb-server-is-out-of-date"><a href="#adb-server-is-out-of-date" class="headerlink" title="adb server is out of date"></a>adb server is out of date</h2><p>解决：</p>
<ol>
<li>关闭eclipse</li>
<li>cmd–&gt;adb nodaemon server照出adb端口（软件默认5037）</li>
<li>cmd–&gt;netstat -ano|findstr 5037列出所有端口为5037的记录。找到本地的记录的pid</li>
<li>任务管理器中：结束掉该pid的进程，关闭adb.exe</li>
<li>重启eclipse</li>
</ol>
<h2 id="vivo手机连不上"><a href="#vivo手机连不上" class="headerlink" title="vivo手机连不上"></a>vivo手机连不上</h2><ol>
<li><p>确认开启开发者模式，开启其中的USB调试</p>
</li>
<li><p>如果没有看到有“MTP、传输照片、管理文件”的选项，windows得更新驱动</p>
<p>windows版本MTP驱动下载地址：<code>http://zs.vivo.com.cn/download.php?sel_type=2</code></p>
</li>
</ol>
<h2 id="Android-Studio运行后选用了AS自带的签名文件"><a href="#Android-Studio运行后选用了AS自带的签名文件" class="headerlink" title="Android Studio运行后选用了AS自带的签名文件"></a>Android Studio运行后选用了AS自带的签名文件</h2><p>检查AS的<code>Build Variants</code>对应渠道的<code>Active Build Variant</code>（如果两个不同版本打开同一份代码会导致这个变量变掉）</p>
<p>改成对应渠道就是正常的签名文件了（与AS右侧<code>Gradle--ZCZG4.0--daogou--Tasks--build--assembeZcZg</code>打出来的包是一样的）</p>
<p><img src="/posts/172981137/AS%E7%82%B9%E9%80%89%E9%A1%B9%E6%89%93%E5%8C%85%E5%92%8C%E7%9B%B4%E6%8E%A5%E8%BF%90%E8%A1%8C%E7%9A%84%E7%AD%BE%E5%90%8D%E5%8C%BA%E5%88%AB.jpg" alt="AS点选项打包和直接运行的签名区别.png"></p>
<h2 id="grep不是内部或外部命令，也不是可运行的程序-或批处理文件。"><a href="#grep不是内部或外部命令，也不是可运行的程序-或批处理文件。" class="headerlink" title="grep不是内部或外部命令，也不是可运行的程序 或批处理文件。"></a><a href="https://blog.csdn.net/mazaiting/article/details/72673214"><code>grep</code>不是内部或外部命令，也不是可运行的程序 或批处理文件。</a></h2><p>所以给命令加双引号</p>
<p>如：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>获取指定包名当前的activity栈</span><br><span class="line">adb shell <span class="string">&quot;dumpsys activity|grep&quot;</span> 包名</span><br></pre></td></tr></table></figure>



<h2 id="安装APK时报错：Failure-INSTALL-FAILED-TEST-ONLY-installPackageLI"><a href="#安装APK时报错：Failure-INSTALL-FAILED-TEST-ONLY-installPackageLI" class="headerlink" title="安装APK时报错：Failure [INSTALL_FAILED_TEST_ONLY: installPackageLI]"></a>安装APK时报错：Failure [INSTALL_FAILED_TEST_ONLY: installPackageLI]</h2><p>安装APK时报错：Failure [INSTALL_FAILED_TEST_ONLY: installPackageLI]<br>可以使用adb install -t 解决<br>对于已经在手机的文件可以使用pm install -t解决。</p>
<p>其他adb命令</p>
<blockquote>
<p>adb install 一共有lrtsdg六个选项</p>
<p>-l　锁定该应用程序<br>-r　替换已存在的应用程序，也就是说强制安装<br>-t　允许测试包<br>-s　把应用程序安装到sd卡上<br>-d　允许进行将见状，也就是安装的比手机上带的版本低<br>-g　为应用程序授予所有运行时的权限</p>
</blockquote>
<h3 id="命令行启动另一个程序失败"><a href="#命令行启动另一个程序失败" class="headerlink" title="命令行启动另一个程序失败"></a>命令行启动另一个程序失败</h3><p>程序中启动另一个程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">run</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">run.exec(<span class="string">&quot;am instrument --user 0  -w com.newland.cloudtest/com.newland.cloudtest.webapp.InstrumentationTestRunners&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>cmd启动另一个程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">run</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">run.exec(<span class="string">&quot;am instrument -e class  com.newland.cloudtest.webapp.TestDemo1Apk#testcase001  -w  com.newland.cloudtest/com.newland.cloudtest.webapp.InstrumentationTestRunners&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>CloudTest用命令行启动CloudTestWeb，启动失败</p>
<p>原因：类包中gson包不能export出去，一export出去那么就不能启动另一个程序CloudTestWeb</p>
<p>CloudTest的类包导出情况截图如下：</p>
<p><img src="http://ww1.sinaimg.cn/large/981009fdly1gi4ctbalxtj20kt0ki77w.jpg" alt="程序中用命令行启动另一个程序失败.png"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓命令相关</tag>
      </tags>
  </entry>
  <entry>
    <title>命令相关-Aapt</title>
    <url>/posts/5934b6dd/</url>
    <content><![CDATA[<h1 id="aapt相关"><a href="#aapt相关" class="headerlink" title="aapt相关"></a>aapt相关</h1><p>要使用aapt命令前提是要把它加入到环境变量中</p>
<p>如：<code>%SDK_HOME%\build-tools\33.0.0\</code></p>
<h2 id="查看apk有哪些权限"><a href="#查看apk有哪些权限" class="headerlink" title="查看apk有哪些权限"></a>查看apk有哪些权限</h2> <figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">aapt d permissions app-release.apk</span><br></pre></td></tr></table></figure>







<h1 id="lint相关"><a href="#lint相关" class="headerlink" title="lint相关"></a>lint相关</h1><h2 id="从命令行运行lint"><a href="#从命令行运行lint" class="headerlink" title="从命令行运行lint"></a><a href="https://developer.android.google.cn/studio/write/lint?hl=zh-cn">从命令行运行lint</a></h2><ul>
<li><p>在Windows上</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gradlew lint</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在Linux或Mac上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gradlew lint</span><br></pre></td></tr></table></figure></li>
</ul>
<p>如果项目包含“<a href="https://developer.android.google.cn/studio/build/build-variants?hl=zh-cn">构建变体</a>”，而您只想对某个特定的构建变体运行 <code>lint</code> 任务，您必须大写变体名称并在其前面加上 <code>lint</code> 前缀。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gradlew lintDebug</span></span><br></pre></td></tr></table></figure>





<h2 id="检查无用资源"><a href="#检查无用资源" class="headerlink" title="检查无用资源"></a>检查无用资源</h2><ul>
<li><p>AS 上 【推荐使用】</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">A<span class="function"><span class="title">nalyze</span> -&gt;</span> R<span class="function"><span class="title">un</span> Inspection <span class="keyword">by</span> Name -&gt;</span> 输入：U<span class="function"><span class="title">nused</span> resources -&gt;</span> 跳出弹框选择范围即可</span><br></pre></td></tr></table></figure>
</li>
<li><p>命令方式</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">lint <span class="comment">--check UnusedResources &lt;project dir&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="keytool-相关"><a href="#keytool-相关" class="headerlink" title="keytool 相关"></a>keytool 相关</h1><h2 id="查看apk的签名"><a href="#查看apk的签名" class="headerlink" title="查看apk的签名"></a>查看apk的签名</h2><p>首先用解压软件解压出META-INF目录下的CERT.RSA文件</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">keytool -printcert -<span class="built_in">file</span> D:\Desktop\CERT.RSA</span><br></pre></td></tr></table></figure>


<h2 id="查看keystore的签名"><a href="#查看keystore的签名" class="headerlink" title="查看keystore的签名"></a>查看keystore的签名</h2><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">keytool -<span class="keyword">list</span> -keystore D:<span class="string">\Desktop\app_key</span></span><br></pre></td></tr></table></figure>

<h2 id="查看keystore的签名-1"><a href="#查看keystore的签名-1" class="headerlink" title="查看keystore的签名"></a>查看keystore的签名</h2><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">keytool</span> -<span class="variable">list</span> -<span class="variable">v</span> -<span class="variable">keystore</span> <span class="variable">e</span>:\<span class="variable">debug.keystore</span> -<span class="variable">storepass</span> <span class="function"><span class="title">xxx</span>(密匙)</span></span><br></pre></td></tr></table></figure>

<p><img src="/posts/5934b6dd/keytool%E5%BE%97%E5%88%B0%E7%9A%84%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D%E5%92%8C%E5%AE%89%E5%85%A8%E7%A0%81.jpg" alt="keytool得到的应用签名和安全码.png"></p>
<blockquote>
<p>其中的MD5去掉冒号就是”微信签名工具“得到的那串32位数（第三方参数文档中的”应用签名”)</p>
<p>SHA1（对应第三方参数文档中”安全码“）</p>
<p>去掉冒号的js代码：”CD:B0:3E:73:53:2B:C2:A2:54:5D:2E:75:67:74:BB:92”.replace(&#x2F;:&#x2F;g,””)</p>
</blockquote>
<h3 id="查看AS自带签名文件"><a href="#查看AS自带签名文件" class="headerlink" title="查看AS自带签名文件"></a>查看AS自带签名文件</h3><p><strong>Android Studio自带签名文件路径：（密码：android）</strong></p>
<p><code>C:\Users\Administrator\.android\debug.keystore</code></p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">keytool -list -v -keystore <span class="name">C</span>:\Users\Administrator\.android\debug.keystore</span><br></pre></td></tr></table></figure>







<h1 id="MonkeyRunner"><a href="#MonkeyRunner" class="headerlink" title="MonkeyRunner"></a>MonkeyRunner</h1><h2 id="执行键盘录制"><a href="#执行键盘录制" class="headerlink" title="执行键盘录制"></a>执行键盘录制</h2><h3 id="配置bat脚本，设置jdk环境"><a href="#配置bat脚本，设置jdk环境" class="headerlink" title="配置bat脚本，设置jdk环境"></a>配置bat脚本，设置jdk环境</h3><p>把 <a href="https://gist.github.com/LieutenantChips/ac05405324e40bb37da17a2d15408920">monkeyrunner.bat</a> 设置到环境变量中：把<code>D:\Android\SDK\tools\bin</code>添加到环境变量中；同时更改环境变量为jdk8</p>
<h3 id="配置python脚本"><a href="#配置python脚本" class="headerlink" title="配置python脚本"></a>配置python脚本</h3><p><code>record.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env monkeyrunner</span></span><br><span class="line"><span class="comment"># Copyright 2010, The Android Open Source Project#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at#</span></span><br><span class="line"><span class="comment"># http://www.apache.org/licenses/LICENSE-2.0#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"><span class="keyword">from</span> com.android.monkeyrunner <span class="keyword">import</span> MonkeyRunner <span class="keyword">as</span> mr</span><br><span class="line"><span class="keyword">from</span> com.android.monkeyrunner.recorder <span class="keyword">import</span> MonkeyRecorder <span class="keyword">as</span> recorder</span><br><span class="line">device = mr.waitForConnection()</span><br><span class="line">recorder.start(device)</span><br></pre></td></tr></table></figure>

<p><code>playback.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env monkeyrunner  </span></span><br><span class="line"><span class="comment"># Copyright 2010, The Android Open Source Project  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);  </span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.  </span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># http://www.apache.org/licenses/LICENSE-2.0  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software  </span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,  </span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  </span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and  </span></span><br><span class="line"><span class="comment"># limitations under the License.   </span></span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line"><span class="keyword">from</span> com.android.monkeyrunner <span class="keyword">import</span> MonkeyRunner   </span><br><span class="line"><span class="comment"># The format of the file we are parsing is very carfeully constructed.  </span></span><br><span class="line"><span class="comment"># Each line corresponds to a single command. The line is split into 2  </span></span><br><span class="line"><span class="comment"># parts with a | character. Text to the left of the pipe denotes  </span></span><br><span class="line"><span class="comment"># which command to run. The text to the right of the pipe is a python  </span></span><br><span class="line"><span class="comment"># dictionary (it can be evaled into existence) that specifies the  </span></span><br><span class="line"><span class="comment"># arguments for the command. In most cases, this directly maps to the  </span></span><br><span class="line"><span class="comment"># keyword argument dictionary that could be passed to the underlying  </span></span><br><span class="line"><span class="comment"># command.   </span></span><br><span class="line"><span class="comment"># Lookup table to map command strings to functions that implement that  </span></span><br><span class="line"><span class="comment"># command.  </span></span><br><span class="line">CMD_MAP = &#123;  </span><br><span class="line">    <span class="string">&#x27;TOUCH&#x27;</span>: <span class="keyword">lambda</span> dev, arg: dev.touch(**arg),  </span><br><span class="line">    <span class="string">&#x27;DRAG&#x27;</span>: <span class="keyword">lambda</span> dev, arg: dev.drag(**arg),  </span><br><span class="line">    <span class="string">&#x27;PRESS&#x27;</span>: <span class="keyword">lambda</span> dev, arg: dev.press(**arg),  </span><br><span class="line">    <span class="string">&#x27;TYPE&#x27;</span>: <span class="keyword">lambda</span> dev, arg: dev.<span class="built_in">type</span>(**arg),  </span><br><span class="line">    <span class="string">&#x27;WAIT&#x27;</span>: <span class="keyword">lambda</span> dev, arg: MonkeyRunner.sleep(**arg)  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="comment"># Process a single file for the specified device.  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_file</span>(<span class="params">fp, device</span>):  </span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fp:  </span><br><span class="line">        (cmd, rest) = line.split(<span class="string">&#x27;|&#x27;</span>)  </span><br><span class="line">        <span class="keyword">try</span>:  </span><br><span class="line">            <span class="comment"># Parse the pydict  </span></span><br><span class="line">            rest = <span class="built_in">eval</span>(rest)  </span><br><span class="line">        <span class="keyword">except</span>:  </span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;unable to parse options&#x27;</span>  </span><br><span class="line">            <span class="keyword">continue</span>   </span><br><span class="line">        <span class="keyword">if</span> cmd <span class="keyword">not</span> <span class="keyword">in</span> CMD_MAP:  </span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;unknown command: &#x27;</span> + cmd  </span><br><span class="line">            <span class="keyword">continue</span>   </span><br><span class="line">        CMD_MAP[cmd](device, rest)  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():  </span><br><span class="line">    file = sys.argv[<span class="number">1</span>]  </span><br><span class="line">    fp = <span class="built_in">open</span>(file, <span class="string">&#x27;r&#x27;</span>)   </span><br><span class="line">    device = MonkeyRunner.waitForConnection()     </span><br><span class="line">    process_file(fp, device)  </span><br><span class="line">    fp.close();     </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="执行录制脚本"><a href="#执行录制脚本" class="headerlink" title="执行录制脚本"></a>执行录制脚本</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">monkeyrunner d:\replay\<span class="keyword">record</span>.py</span><br></pre></td></tr></table></figure>

<blockquote>
<p>wait： 用来插入下一次操作的时间间隔，点击后即可设置时间，单位是秒</p>
<p>Press a Button：用来确定需要点击的按钮，包括menu、home、search，以及对按钮的press、down、up属性</p>
<p>Type Something：用来输入内容到输入框</p>
<p>Fling：用来进行拖动操作，可以向上、下、左、右，以及操作的范围</p>
<p>Export Actions：用来导出脚本，不需要后缀名，也可以添加后缀名</p>
<p>Refresh Display：用来刷新手机界面，估计只有在断开手机后，重新连接时才会用到</p>
</blockquote>
<p>点击“export actions”保存录制脚本到 <code>d:\replay\r</code></p>
<h3 id="执行回放脚本"><a href="#执行回放脚本" class="headerlink" title="执行回放脚本"></a>执行回放脚本</h3><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">monkeyrunner d:<span class="string">\replay\playback.py</span> d:<span class="string">\replay\r</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中r是上面录制的脚本文件</p>
</blockquote>
<h1 id="MonkeyRunner相关问题"><a href="#MonkeyRunner相关问题" class="headerlink" title="MonkeyRunner相关问题"></a>MonkeyRunner相关问题</h1><h2 id="如果录制脚本的时候报SWT-folder-39-framework-x86-64-39-does-not-exist-错误："><a href="#如果录制脚本的时候报SWT-folder-39-framework-x86-64-39-does-not-exist-错误：" class="headerlink" title="如果录制脚本的时候报SWT folder &#39;..\framework\x86_64&#39; does not exist.错误："></a><a href="https://www.jianshu.com/p/744324ac6ce8">如果录制脚本的时候报<code>SWT folder &#39;..\framework\x86_64&#39; does not exist.</code>错误：</a></h2><p>那么打开 <a href="https://gist.github.com/LieutenantChips/ac05405324e40bb37da17a2d15408920">monkeyrunner.bat</a> 更改：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">.<span class="built_in">set</span> <span class="attribute">frameworkdir</span>=lib （纠正）==》<span class="built_in">set</span> <span class="attribute">frameworkdir</span>=..\lib </span><br><span class="line"></span><br><span class="line">.Dcom.android.monkeyrunner.<span class="attribute">bindir</span>=..\framework -jar %jarpath% %* （纠正）==》Dcom.android.monkeyrunner.<span class="attribute">bindir</span>=..\..\platform-tools -jar %jarpath% %*</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓命令相关</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序笔记</title>
    <url>/posts/3213253024/</url>
    <content><![CDATA[<h1 id="微信小程序前期准备材料"><a href="#微信小程序前期准备材料" class="headerlink" title="微信小程序前期准备材料"></a>微信小程序前期准备材料</h1><ol>
<li><p>部署线上接口环境，微信小程序要求 <code>https</code> </p>
</li>
<li><p>接口文档，有道&#x2F;语雀在线文档编辑工具或者部署<code>doclevel</code></p>
</li>
<li><p>申请微信小程序并提供微信小程序 <code>appid</code> （接口还会用到<code>secret</code>）</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/cgi-bin/loginpage?t=wxm2-login&lang=zh_CN">登录微信小程序后台管理</a>配置服务器域名；把我们加到项目成员（开发者权限）</p>
</li>
<li><p>申请微信商户号（与微信小程序同主体），并和微信小程序关联。</p>
</li>
</ol>
<h1 id="相关API、资源"><a href="#相关API、资源" class="headerlink" title="相关API、资源"></a>相关API、资源</h1><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信官方文档·小程序</a></p>
<p>微信内小程序</p>
<ul>
<li>“小程序助手”（可以管理自己参与的项目）</li>
<li><a href="https://github.com/wechat-miniprogram/miniprogram-demo">“小程序示例”</a></li>
<li><a href="https://github.com/weilanwl/ColorUI">“ColorUI组件库”</a></li>
<li><a href="https://github.com/Tencent/weui-wxss/">“WeUI库”</a></li>
</ul>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="微信开发工具"><a href="#微信开发工具" class="headerlink" title="微信开发工具"></a>微信开发工具</h2><p><code>app.json</code>中配置页面路由</p>
<ul>
<li><p>普通编译改成“添加编译模式”，可以改变启动的页面和其他的扫码进入等等方式</p>
</li>
<li><p>“预览”：会在编译器左侧展示</p>
</li>
<li><p>“上传”：上传测试版or正式版，填写相应的版本号和备注信息</p>
</li>
<li><p>“测试”：微信会发一份测试报告过来</p>
</li>
<li><p>“详情”：不校验域名不要勾选上（否则可能在正式线上会有问题）</p>
</li>
</ul>
<h2 id="视图层与逻辑层关系"><a href="#视图层与逻辑层关系" class="headerlink" title="视图层与逻辑层关系"></a>视图层与逻辑层关系</h2><p><img src="/posts/3213253024/981009fdgy1gcb1y0oummj20wt0hswfq.jpg" alt="微信小程序视图层和逻辑层交互图"></p>
<p>程序的每个页面都会维护一份数据源，所以在<code>wxml</code>中用<code>data-字段名称</code> 除了需要在对应的（<code>js</code>中）<code>this.setData</code>或<code>that.setData</code>中声明这个<em><strong>字段名称</strong></em>，最好还需要在data数据源中加上。</p>
<p><code>that.setData(&#123; toastHidden: false &#125;)</code>&#x2F;&#x2F;这里使用了that，这样就可以获取<code>Page(&#123;&#125;)</code>对象。在<code>wxml</code>中可以直接通过<code>&#123;&#123;toastHidden&#125;&#125;</code>获取这个值</p>
<p>另外：</p>
<h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><p>没有操作<code>dom</code>结点，通过数据去渲染，更像<code>vue</code>、<code>react</code></p>
<p>Page的生命周期配置：<code>https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/page.html</code></p>
<ul>
<li><code>app.js</code>：程序启动先访问它，全局配置（可以设置数据共享<code>Storage</code>、全局数据）</li>
<li><code>app.json</code>：<code>pages</code>配置页面路由（在<code>app.js</code>的<code>pages</code>中添加，根目录下<code>pages</code>代码会自动生成），<code>windows</code>：写导航栏的样式（<code>navigationBarTextStyle</code>提供了<code>black</code>和<code>white</code>两种）<ul>
<li>pages中新建Page的时候会自动添加，但是删除却需要手动删除<code>app.json</code>里面的page配置</li>
<li>windows中全局配置导航栏中间的文字：navigationBarTitleText</li>
<li>windows中navigationBarBackgroundColor：导航栏的背景颜色</li>
<li>tabbar中：底部切换页签（当设置position为top时，将不会显示icon）</li>
</ul>
</li>
<li><code>app.wxss</code>：全局的样式（<code>@import &quot;colorui/main.wxss&quot;;</code>导入别的样式）</li>
<li><code>project.config.json</code>：我们写自定义编译等的配置都会在这里面</li>
</ul>
<h2 id="单位：rpx"><a href="#单位：rpx" class="headerlink" title="单位：rpx"></a>单位：<code>rpx</code></h2><p><code>rpx</code>单位是微信小程序中<code>css</code>的尺寸单位，<code>rpx</code>可以根据屏幕宽度进行自适应。规定屏幕宽为<code>750rpx</code>。如在 iPhone6（750x1334） 上，屏幕宽度为<code>375px</code>，共有750个物理像素，则<code>750rpx = 375px = 750物理像素</code>，<code>1rpx = 0.5px = 1物理像素</code>。</p>
<table>
<thead>
<tr>
<th>设备</th>
<th>rpx换算px (屏幕宽度&#x2F;750)</th>
<th>px换算rpx (750&#x2F;屏幕宽度)</th>
</tr>
</thead>
<tbody><tr>
<td>iPhone5</td>
<td>1rpx &#x3D; 0.42px</td>
<td>1px &#x3D; 2.34rpx</td>
</tr>
<tr>
<td>iPhone6</td>
<td>1rpx &#x3D; 0.5px</td>
<td>1px &#x3D; 2rpx</td>
</tr>
<tr>
<td>iPhone6s</td>
<td>1rpx &#x3D; 0.552px</td>
<td>1px &#x3D; 1.81rpx</td>
</tr>
</tbody></table>
<p>微信小程序也支持<code>rem</code>尺寸单位，<code>rem</code>和<code>rpx</code>的换算关系：<code>rem: 规定屏幕宽度为20rem</code>；<code>1rem = (750/20)rpx </code><br>注：开发微信小程序时设计师可以用 iPhone6 作为视觉稿的标准。<br>建议：设计稿使用设备宽度<code>750px</code>比较容易计算<code>750px</code>的话<code>1rpx=1px</code>，这样的话，设计图上量出来的尺寸是多少<code>px</code>就是多少<code>rpx</code>，至于在不同的设备上实际上要换算成多少个<code>rem</code>就交给小程序自己换算</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><code>wx:for=&quot;&#123;&#123;在index.js的data数据源中的数据对象&#125;&#125;&quot;</code></p>
<p>在<code>index.js</code>的data数据源中定义上面for的数据对象的数组</p>
<h2 id="text标签才支持-n-的换行效果"><a href="#text标签才支持-n-的换行效果" class="headerlink" title="text标签才支持 \n 的换行效果"></a>text标签才支持 <code>\n</code> 的换行效果</h2><h2 id="“双花括号”去js中取变量的意思"><a href="#“双花括号”去js中取变量的意思" class="headerlink" title="“双花括号”去js中取变量的意思"></a>“双花括号”去js中取变量的意思</h2><p>数据绑定</p>
<p>小程序中，几乎所有和数据相关的操作都只能使用数据绑定来完成。</p>
<h2 id="动态加载的js文件，调试问题"><a href="#动态加载的js文件，调试问题" class="headerlink" title="动态加载的js文件，调试问题"></a>动态加载的js文件，调试问题</h2><p>动态加载的js文件（比如是跳转到公共页面后才有的js），调试时控制台那边的Sources里不会列出这个js文件。</p>
<p>具体需要在跳转的地方断点，然后等待一段时间会自动加载这些js文件（加载时间比较久）</p>
<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h2><p>Flex：弹性布局，主要作用于容器上</p>
<p><img src="/posts/3213253024/981009fdly1glhdycrllwj209405jmx6.jpg" alt="微信小程序-flex1.png"></p>
<p><img src="/posts/3213253024/981009fdly1glhdyo0eb5j20cc056wej.jpg" alt="微信小程序-flex2.png"></p>
<p><img src="/posts/3213253024/981009fdly1glhdyt7r93j20ba0feaaf.jpg" alt="微信小程序-flex3.png"></p>
<p><img src="/posts/3213253024/981009fdly1glhdz1fu2wj20d50faq3d.jpg" alt="微信小程序-flex4.png"></p>
<h2 id="Swiper组件"><a href="#Swiper组件" class="headerlink" title="Swiper组件"></a>Swiper组件</h2><p>滑动视图容器–swiper组件</p>
<p>swiper组件的直接子元素只可以是swiper-item，可以放其他组件但会被自动删除。</p>
<p>swiper实现轮播效果，要添加一些属性：</p>
<ul>
<li><p>indicator-dots</p>
<p>指示点。Boolean类型，默认是false</p>
</li>
<li><p>autoplay</p>
<p>是否自动播放。Boolean类型，默认是false</p>
</li>
<li><p>interval</p>
<p>切换时间间隔。Number类型，默认5000毫秒</p>
</li>
</ul>
<h2 id="Boolean陷阱"><a href="#Boolean陷阱" class="headerlink" title="Boolean陷阱"></a>Boolean陷阱</h2><p>属性<code>vertical=&quot;true&quot;</code>、<code>vertical=&quot;aaa&quot;</code>等都表示“真”。其中的内容是字符串。</p>
<p>要表示“假”，有两种方式：</p>
<ol>
<li><p><code>vertical=&quot;&quot;</code>   放空字符串</p>
</li>
<li><p><code>vertical=&quot;&#123;&#123;false&#125;&#125;&quot;</code>  放数据绑定</p>
false里的false被认为是一个Boolean类型的变量，而不是个字符串，从而实现false即是假，true是真的效果。</li>
</ol>
<h2 id="image组件的4种缩放模式和9种裁剪模式"><a href="#image组件的4种缩放模式和9种裁剪模式" class="headerlink" title="image组件的4种缩放模式和9种裁剪模式"></a>image组件的4种缩放模式和9种裁剪模式</h2><h3 id="4种缩放模式"><a href="#4种缩放模式" class="headerlink" title="4种缩放模式"></a>4种缩放模式</h3><ul>
<li><p>scaleToFill</p>
<p>不保持纵横比缩放图片，使图片的宽高完全拉伸至填满image元素</p>
</li>
<li><p>aspectFit</p>
<p>保持纵横比缩放图片，使图片的长边能完全显示出来。即可以完整显示图片</p>
</li>
<li><p>aspectFill</p>
<p>保持纵横比缩放图片，只保证短边能完全显示出来。即长边那部分会发生截取</p>
</li>
<li><p>wiidthFix</p>
<p>宽度不变，高度自动变换，保持原图宽高比不变（0.11.122100版本新增）</p>
</li>
</ul>
<h3 id="9种裁剪模式"><a href="#9种裁剪模式" class="headerlink" title="9种裁剪模式"></a>9种裁剪模式</h3><ul>
<li><p>top</p>
<p>不缩放图片，只显示图片的顶部区域</p>
</li>
<li><p>bottom</p>
<p>不缩放图片，只显示图片的底部区域</p>
</li>
<li><p>center</p>
<p>不缩放图片，只显示图片的中间区域</p>
</li>
<li><p>left</p>
<p>不缩放图片，只显示图片的左边区域</p>
</li>
<li><p>right</p>
<p>不缩放图片，只显示图片的右边区域</p>
</li>
<li><p>top left</p>
<p>不缩放图片，只显示图片的左上边区域</p>
</li>
<li><p>top right</p>
<p>不缩放图片，只显示图片的右上边区域</p>
</li>
<li><p>bottom left</p>
<p>不缩放图片，只显示图片的左下边区域</p>
</li>
<li><p>bottom right</p>
<p>不缩放图片，只显示图片的右下边区域</p>
</li>
</ul>
<p>例子：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;image <span class="attribute">class</span>=<span class="string">&quot;post-image&quot;</span> <span class="attribute">src</span>=<span class="string">&quot;/images/post/post-4.jpg&quot;</span> <span class="attribute">mode</span>=<span class="string">&quot;scaleToFill&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>





<h2 id="每个page都有个属于自己的js"><a href="#每个page都有个属于自己的js" class="headerlink" title="每个page都有个属于自己的js"></a>每个page都有个属于自己的js</h2><p>页面js文件默认包含了我们可能使用到的代码结构</p>
<ul>
<li>有一个<code>Page(&#123;&#125;)</code>方法，</li>
<li>参数是一个<code>Object</code>对象，</li>
<li>页面初始数据<code>data</code>，</li>
<li>生命周期<code>on开头的函数</code></li>
<li>事件处理函数等</li>
</ul>
<h3 id="5个生命周期"><a href="#5个生命周期" class="headerlink" title="5个生命周期"></a>5个生命周期</h3><ul>
<li><p>加载 onLoad</p>
<p>监听页面加载，一个页面只会调用一次</p>
</li>
<li><p>显示 onShow</p>
<p>监听页面显示，每次打开页面都会调用</p>
</li>
<li><p>渲染 onReady</p>
<p>监听页面渲染完成，一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互（仅用来监听“第一次渲染”完成）</p>
</li>
<li><p>隐藏 onHide</p>
<p>监听页面隐藏</p>
</li>
<li><p>卸载 onUnload</p>
<p>监听页面卸载</p>
</li>
</ul>
<h3 id="3个小程序特定事件处理函数"><a href="#3个小程序特定事件处理函数" class="headerlink" title="3个小程序特定事件处理函数"></a>3个小程序特定事件处理函数</h3><ul>
<li><p>onPullDownRefresh</p>
<p>监听用户下拉动作的事件处理函数</p>
</li>
<li><p>onReachBottom</p>
<p>页面上拉触底事件的处理函数</p>
</li>
<li><p>onShareAppMessage</p>
<p>用户点击右上角分享</p>
</li>
</ul>
<p>小程序页面生命周期图解</p>
<p><img src="/posts/3213253024/981009fdly1glitgmgmorj20hh0q7gpg.jpg" alt="小程序页面生命周期图解.png"></p>
<h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><ul>
<li>小程序完全抛弃了<code>DOM</code>结构（<code>AngularJS</code>中还有个内置的<code>jQLite</code>用来支持获取<code>DOM</code>）</li>
<li>小程序的脚本逻辑运行在<code>JSCore</code>中（<code>JSCore</code>是个没有<code>DOM</code>的环境），只能用数据绑定来做数据的相关操作</li>
<li>小程序<strong>单向</strong>数据绑定，从逻辑层传递到渲染层的数据绑定，反之不行。（<code>AngularJS</code>是个双向数据绑定）</li>
<li><code>&quot;双花括号&quot;</code>中的变量名与<code>js</code>文件中<code>data</code>对象的属性名称相同</li>
</ul>
<p>数据绑定有两种：</p>
<ul>
<li>初始化数据的数据绑定，通常写在<code>Page</code>方法内<code>data</code>对象内</li>
<li>使用<code>setData</code>做数据更新的数据绑定。会引起页面的<code>Rerender</code>（重新渲染）（可看上图《小程序页面生命周期图解》）</li>
</ul>
<p>例子：</p>
<p><code>saleTop.js</code>中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">first</span>:<span class="literal">null</span>,</span><br><span class="line">        <span class="attr">total</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">avatar</span>:<span class="string">&quot;https://qiniuimage.dolphin-free.com/ldy/miniapp/sale_ic_two.png?v=70&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onLoad</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> iceCreamData = &#123;</span><br><span class="line">            <span class="attr">object</span>: &#123;</span><br><span class="line">                <span class="attr">date</span>: <span class="string">&quot;Jan 28 2020&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;标题&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">postData</span>: iceCreamData</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>saleTop.wxml</code>中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- first是个对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">	&#123;&#123;first.storeName&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">	&#123;&#123;total&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;avatar&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 因为setData中的key变成postData，所以取数据改变 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;postData.title&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="wx-for"><a href="#wx-for" class="headerlink" title="wx:for"></a><code>wx:for</code></h2><p>wx:for不止可以作用于block标签上，也可以作用于view组件上（但不推荐用在view上，因为view组件通常当做<strong>容器</strong>或者<strong>区域分隔</strong>）。</p>
<p>我们希望标签或组件元素是语义明确的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;postList&#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;idx&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span>  <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;item.avatars&#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;avatarItem&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> &gt;</span>&#123;&#123;avatarItem.text&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">image</span> <span class="attr">style</span>=<span class="string">&quot;width: 200rpx; height: 200rpx; background-color: #eeeeee;&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;&#123;&#123;avatarItem.mode&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;item.avatar&#125;&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.object.date&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;font50&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;navigateToDetail&quot;</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#ee0000; width: fit-content;&quot;</span> <span class="attr">catchtap</span>=<span class="string">&#x27;switchToMineTab&#x27;</span>&gt;</span>&#123;&#123;item.collectionNum.array[0]+&quot;\n&quot;&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中数据源：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> postList = [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">object</span>:&#123;</span><br><span class="line">          <span class="attr">date</span>:<span class="string">&quot;Jan 28 2017&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;点击跳转到详情页&quot;</span>,</span><br><span class="line">        <span class="attr">avatar</span>: <span class="string">&quot;https://res.wx.qq.com/wxdoc/dist/assets/img/0.4cb08bb4.jpg&quot;</span>,</span><br><span class="line">        <span class="attr">avatars</span>:[</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">collectionNum</span>:&#123;</span><br><span class="line">          <span class="attr">array</span>:[<span class="number">107</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">object</span>:&#123;</span><br><span class="line">          <span class="attr">date</span>:<span class="string">&quot;Jan 28 2017&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;点击跳转到详情页&quot;</span>,</span><br><span class="line">        <span class="attr">avatar</span>: <span class="string">&quot;https://res.wx.qq.com/wxdoc/dist/assets/img/0.4cb08bb4.jpg&quot;</span>,</span><br><span class="line">        <span class="attr">avatars</span>:[</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;scaleToFill&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;scaleToFill：不保持纵横比缩放图片，使图片完全适应&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;aspectFit&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;aspectFit：保持纵横比缩放图片，使图片的长边能完全显示出来&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;aspectFill&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;aspectFill：保持纵横比缩放图片，只保证图片的短边能完全显示出来&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;top：不缩放图片，只显示图片的顶部区域&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;bottom&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;bottom：不缩放图片，只显示图片的底部区域&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;center：不缩放图片，只显示图片的中间区域&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;left：不缩放图片，只显示图片的左边区域&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;right：不缩放图片，只显示图片的右边边区域&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;top left&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;top left：不缩放图片，只显示图片的左上边区域&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;top right&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;top right：不缩放图片，只显示图片的右上边区域&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;bottom left&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;bottom left：不缩放图片，只显示图片的左下边区域&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;bottom right&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;bottom right：不缩放图片，只显示图片的右下边区域&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">collectionNum</span>:&#123;</span><br><span class="line">          <span class="attr">array</span>:[<span class="number">108</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">postList</span>: postList</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





<h2 id="wx-if"><a href="#wx-if" class="headerlink" title="wx:if"></a><code>wx:if</code></h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;isRangeTypeOpen&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;isRangeTypeOpen == true&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;isRangeTypeOpen == false&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;rangeType == 0&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="this与that"><a href="#this与that" class="headerlink" title="this与that"></a>this与that</h2><ol>
<li>在<code>Page(&#123;&#125;)</code>里面，<code>this</code>关键字指代<code>Page(&#123;&#125;)</code>整个对象</li>
<li>因此可以通过<code>this</code>关键字访问或者重新设置<code>Page(&#123;&#125;)</code>里<code>data</code>的变量</li>
<li>然而在<code>loadData</code>函数中使用了<code>wx.request(&#123;&#125;)</code>API这个方法导致在<code>wx.request(&#123;&#125;)</code>里没办法使用<code>this</code>来获取<code>Page(&#123;&#125;)</code>对象</li>
<li>虽然在<code>wx.request(&#123;&#125;)</code>里没法使用<code>this</code>获取<code>Page(&#123;&#125;)</code>对象，但是可以在<code>wx.request(&#123;&#125;)</code>外面先把<code>this</code>存在某个变量中，所以就有了<code>var that = this</code>这个声明。此时<code>that</code>指代<code>Page(&#123;&#125;)</code>整个对象，这样子就可以在<code>wx.request(&#123;&#125;)</code>里面使用<code>that</code>访问或者重新设置<code>Page(&#123;&#125;)</code>里<code>data</code>的变量</li>
</ol>
<p>在<code>javascript</code>中<code>this</code>代表着当前对象，会随着程序的执行过程中的上下文改变。</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="catchtap-quot-methodName-quot-与bindtap-quot-methodName-quot"><a href="#catchtap-quot-methodName-quot-与bindtap-quot-methodName-quot" class="headerlink" title="catchtap=&quot;methodName&quot;与bindtap=&quot;methodName&quot;"></a><a href="https://www.cnblogs.com/eline2018/p/10394974.html"><code>catchtap=&quot;methodName&quot;</code>与<code>bindtap=&quot;methodName&quot;</code></a></h3><p>两者的区别：</p>
<ul>
<li>相同点：都是点击函数，点击时触发。</li>
<li>不同点：bindtap是冒泡的，catchtap是非冒泡的【冒泡：对应android中的事件向上传递的意思】</li>
</ul>
<h3 id="小程序中事件分冒泡事件和非冒泡事件"><a href="#小程序中事件分冒泡事件和非冒泡事件" class="headerlink" title="小程序中事件分冒泡事件和非冒泡事件"></a>小程序中事件分冒泡事件和非冒泡事件</h3><p><img src="/posts/3213253024/981009fdly1gln61pmusxj20ab06la9y.jpg" alt="微信小程序点击事件是否冒泡.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">&quot;outer&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;out&quot;</span>&gt;</span></span><br><span class="line">    outer view</span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span><br><span class="line">        middle view</span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">&quot;innder&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">        	inner view</span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">out</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;--out bindtap click&quot;</span>)</span><br><span class="line">&#125;, <span class="attr">middle</span>: <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;--middle bindtap click&quot;</span>)</span><br><span class="line">&#125;, <span class="attr">inner</span>: <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;--inner bindtap click&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>bindtap执行结果</p>
<p>点击out view 打印：out bindtap click</p>
<p>点击middle view 打印：middle bindtap click – out bindtap click</p>
<p>点击inner view 打印：inner bindtap click – middle bindtap click – out bindtap click</p>
</li>
<li><p>修改middle view的bindtap为catchtap</p>
<p>点击out view 打印：out bindtap click（因为没有上层元素故而无法向上冒泡）</p>
<p>点击middle view 打印：middle bindtap click（catchtap阻止向上冒泡）</p>
<p>点击inner view 打印：inner bindtap click – middle bindtap click（catchtap阻止向上冒泡）</p>
</li>
</ol>
<h4 id="常见冒泡事件类型"><a href="#常见冒泡事件类型" class="headerlink" title="常见冒泡事件类型"></a>常见冒泡事件类型</h4><ul>
<li>touchstart 手指触摸动作开始</li>
<li>touchmove 手指触摸后移动</li>
<li>touchcancel 手指触摸动作被打断，如来电提醒、弹窗</li>
<li>touchend 手指触摸动作结束</li>
<li>tap 手指触摸后马上离开（使用时有两种bindtap、catchtap）</li>
<li>longtap 手指触摸后，超过350ms再离开</li>
</ul>
<blockquote>
<p>除以上事件，如无特殊申明都是非冒泡事件。</p>
<p>非冒泡事件大多为非通用事件，是某些组件特有的事件。如<code>&lt;form/&gt;</code>的submit事件，<code>&lt;input/&gt;</code>的input事件，<code>&lt;scroll-view/&gt;</code>的scroll事件等。</p>
</blockquote>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><p><code>wx.setStorageSync(&quot;key&quot;, value);</code>设置数据存储，</p>
<h3 id="取出数据"><a href="#取出数据" class="headerlink" title="取出数据"></a>取出数据</h3><p><code>wx.getStorageSync(&quot;key&quot;)</code>取出存储的数据</p>
<h2 id="页面传值"><a href="#页面传值" class="headerlink" title="页面传值"></a>页面传值</h2><ol>
<li><p>通过url带过去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;../../package-item/item/itemDetail/itemDetail?itemId=&#x27;</span> + itemId + <span class="string">&#x27;&amp;storeId=&#x27;</span> + wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;storeId&#x27;</span>) + <span class="string">&quot;&amp;isFromNewPrice=1&quot;</span>;</span><br><span class="line">wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: url</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>接收（目标页面的js文件中）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">getItemSkuInfo</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">getItemSkuInfo</span>(<span class="params">that</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> skuInfo = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      ...</span><br><span class="line">      wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: supportRequest + <span class="string">&quot;miniApp/wxItemSkuInfo&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">          ...,</span><br><span class="line">          <span class="title class_">IsFromNewPrice</span>: that.<span class="property">data</span>.<span class="property">isFromNewPrice</span><span class="comment">//此处直接取到值，并</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="app-js的生命周期"><a href="#app-js的生命周期" class="headerlink" title="app.js的生命周期"></a>app.js的生命周期</h1><p>（整个小程序的生命周期）在app.js中：onLaunch启动的一些工作（比如登录等状态校验、权限请求、获取位置信息等、获取用户信息（是否隐式登录）、数据存储）</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Option</span> &#123;</span><br><span class="line">    <span class="comment">/** 生命周期回调—监听小程序初始化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 小程序初始化完成时触发，全局只触发一次。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">onLaunch</span>(<span class="attr">options</span>: <span class="title class_">LaunchShowOption</span>): <span class="built_in">void</span></span><br><span class="line">    <span class="comment">/** 生命周期回调—监听小程序显示</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 小程序启动，或从后台进入前台显示时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">onShow</span>(<span class="attr">options</span>: <span class="title class_">LaunchShowOption</span>): <span class="built_in">void</span></span><br><span class="line">    <span class="comment">/** 生命周期回调—监听小程序隐藏</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 小程序从前台进入后台时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">onHide</span>(): <span class="built_in">void</span></span><br><span class="line">    <span class="comment">/** 错误监听函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 小程序发生脚本错误，或者 api</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">onError</span>(<span class="comment">/** 错误信息，包含堆栈 */</span> <span class="attr">error</span>: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">    <span class="comment">/** 页面不存在监听函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 小程序要打开的页面不存在时触发，会带上页面信息回调该函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * **注意：**</span></span><br><span class="line"><span class="comment">     * 1. 如果开发者没有添加 `onPageNotFound` 监听，当跳转页面不存在时，将推入微信客户端原生的页面不存在提示页面。</span></span><br><span class="line"><span class="comment">     * 2. 如果 `onPageNotFound` 回调中又重定向到另一个不存在的页面，将推入微信客户端原生的页面不存在提示页面，并且不再回调 `onPageNotFound`。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 最低基础库： 1.9.90</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">onPageNotFound</span>(<span class="attr">options</span>: <span class="title class_">PageNotFoundOption</span>): <span class="built_in">void</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小程序有未处理的 Promise 拒绝时触发。也可以使用 [wx.onUnhandledRejection](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onUnhandledRejection.html) 绑定监听。注意事项请参考 [wx.onUnhandledRejection](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onUnhandledRejection.html)。</span></span><br><span class="line"><span class="comment">     * **参数**：与 [wx.onUnhandledRejection](https://developers.weixin.qq.com/miniprogram/dev/api/base/app/app-event/wx.onUnhandledRejection.html) 一致</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">onUnhandledRejection</span>: <span class="title class_">OnUnhandledRejectionCallback</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（某个页面的生命周期）pages下各自js&#x2F;Page({})中</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ILifetime</span> &#123;</span><br><span class="line">    <span class="comment">/** 生命周期回调—监听页面加载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 页面加载时触发。一个页面只会调用一次，可以在 onLoad 的参数中获取打开当前页面路径中的参数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">onLoad</span>(</span><br><span class="line">    <span class="comment">/** 打开当前页面路径中的参数 */</span></span><br><span class="line">    	<span class="attr">query</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span> | <span class="literal">undefined</span>&gt;</span><br><span class="line">    ): <span class="built_in">void</span></span><br><span class="line">    <span class="comment">/** 生命周期回调—监听页面显示</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 页面显示/切入前台时触发。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">onShow</span>(): <span class="built_in">void</span></span><br><span class="line">    <span class="comment">/** 生命周期回调—监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注意：对界面内容进行设置的 API 如`wx.setNavigationBarTitle`，请在`onReady`之后进行。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">onReady</span>(): <span class="built_in">void</span></span><br><span class="line">    <span class="comment">/** 生命周期回调—监听页面隐藏</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 页面隐藏/切入后台时触发。 如 `navigateTo` 或底部 `tab` 切换到其他页面，小程序切入后台等。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">onHide</span>(): <span class="built_in">void</span></span><br><span class="line">    <span class="comment">/** 生命周期回调—监听页面卸载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 页面卸载时触发。如`redirectTo`或`navigateBack`到其他页面时。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">onUnload</span>(): <span class="built_in">void</span></span><br><span class="line">    <span class="comment">/** 监听用户下拉动作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 监听用户下拉刷新事件。</span></span><br><span class="line"><span class="comment">     * - 需要在`app.json`的`window`选项中或页面配置中开启`enablePullDownRefresh`。</span></span><br><span class="line"><span class="comment">     * - 可以通过`wx.startPullDownRefresh`触发下拉刷新，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致。</span></span><br><span class="line"><span class="comment">     * - 当处理完数据刷新后，`wx.stopPullDownRefresh`可以停止当前页面的下拉刷新。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">onPullDownRefresh</span>(): <span class="built_in">void</span></span><br><span class="line">    <span class="comment">/** 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 监听用户上拉触底事件。</span></span><br><span class="line"><span class="comment">     * - 可以在`app.json`的`window`选项中或页面配置中设置触发距离`onReachBottomDistance`。</span></span><br><span class="line"><span class="comment">     * - 在触发距离内滑动期间，本事件只会被触发一次。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">onReachBottom</span>(): <span class="built_in">void</span></span><br><span class="line">    <span class="comment">/** 用户点击右上角转发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 监听用户点击页面内转发按钮（`&lt;button&gt;` 组件 `open-type=&quot;share&quot;`）或右上角菜单“转发”按钮的行为，并自定义转发内容。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * **注意：只有定义了此事件处理函数，右上角菜单才会显示“转发”按钮**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 此事件需要 return 一个 Object，用于自定义转发内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">onShareAppMessage</span>(</span><br><span class="line">        <span class="comment">/** 分享发起来源参数 */</span></span><br><span class="line">        <span class="attr">options</span>: <span class="title class_">IShareAppMessageOption</span></span><br><span class="line">    ): <span class="title class_">ICustomShareContent</span></span><br><span class="line">    <span class="comment">/** 页面滚动触发事件的处理函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 监听用户滑动页面事件。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">onPageScroll</span>(</span><br><span class="line">        <span class="comment">/** 页面滚动参数 */</span></span><br><span class="line">        <span class="attr">options</span>: <span class="title class_">IPageScrollOption</span></span><br><span class="line">    ): <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 当前是 tab 页时，点击 tab 时触发，最低基础库： `1.9.0` */</span></span><br><span class="line">    <span class="title function_">onTabItemTap</span>(</span><br><span class="line">        <span class="comment">/** tab 点击参数 */</span></span><br><span class="line">        <span class="attr">options</span>: <span class="title class_">ITabItemTapOption</span></span><br><span class="line">    ): <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 窗口尺寸改变时触发，最低基础库：`2.4.0` */</span></span><br><span class="line">    <span class="title function_">onResize</span>(</span><br><span class="line">        <span class="comment">/** 窗口尺寸参数 */</span></span><br><span class="line">        <span class="attr">options</span>: <span class="title class_">IResizeOption</span></span><br><span class="line">    ): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h1 id="空判断"><a href="#空判断" class="headerlink" title="空判断"></a>空判断</h1><h2 id="判断undefined"><a href="#判断undefined" class="headerlink" title="判断undefined"></a>判断undefined</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_">typeof</span>(tmp) == <span class="string">&quot;undefined&quot;</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;undefined&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>typeof返回的是字符串，有六种可能：”number”、”string“、”boolean“、”object“、”function“、”undefined“</p>
</blockquote>
<h2 id="判断null"><a href="#判断null" class="headerlink" title="判断null"></a>判断null</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!tmp &amp;&amp; <span class="title function_">typeof</span>(tmp) != <span class="string">&quot;undefined&quot;</span> &amp;&amp; tmp != <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="判断NaN"><a href="#判断NaN" class="headerlink" title="判断NaN"></a>判断NaN</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">0</span>/<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_">isNan</span>(tmp))&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;NaN&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>NaN表示非法，如果把NaN与任何值（包括其自身）相比得到的结果均是false，所以判断某个值是否是NaN，不能使用 <code>==</code> 或<code>===</code>运算符。</p>
</blockquote>
<blockquote>
<p>isNaN()通常用于检测<code>parseFloat()</code>和<code>parseInt()</code>的结果，判断结果是否是合法的数字。</p>
</blockquote>
<h2 id="判断undefined和null"><a href="#判断undefined和null" class="headerlink" title="判断undefined和null"></a>判断undefined和null</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp == <span class="literal">undefined</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;null or undefined&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> tmp = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;null or undefined&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：null &#x3D;&#x3D; undefined</p>
</blockquote>
<h2 id="判断undefied、null与NaN"><a href="#判断undefied、null与NaN" class="headerlink" title="判断undefied、null与NaN"></a>判断undefied、null与NaN</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!tmp)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;null or undefined or NaN&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一般不那么区分就使用这个足够</p>
</blockquote>
<h2 id="判断空对象"><a href="#判断空对象" class="headerlink" title="判断空对象"></a>判断空对象</h2><p>让一个对象一开始设为null，通过判断是否为null即可判断</p>
<h2 id="判断options是否存在"><a href="#判断options是否存在" class="headerlink" title="判断options是否存在"></a>判断<code>options</code>是否存在</h2><p><code>if(options)&#123;//存在&#125; else &#123;//不存在 &#125;</code>即可</p>
<h1 id="项目配置文件"><a href="#项目配置文件" class="headerlink" title="项目配置文件"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html">项目配置文件</a></h1><p>可以在项目根目录使用 <code>project.config.json</code> 文件对项目进行配置。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="微信小程序的Js中调用同一个Js中的另一个函数会报“函数”-is-not-defined"><a href="#微信小程序的Js中调用同一个Js中的另一个函数会报“函数”-is-not-defined" class="headerlink" title="微信小程序的Js中调用同一个Js中的另一个函数会报“函数” is not defined"></a>微信小程序的Js中调用同一个Js中的另一个函数会报“函数” is not defined</h2><p>解决：需要在调用的时候加前缀<code>this.</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">fun_a</span>: <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">fun_b</span>(i)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">fun_b</span>: <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在javaScript中不用加<code>this.</code>，直接调用不报错</p>
</blockquote>
<h2 id="微信小程序dataset-时属性要为小写"><a href="#微信小程序dataset-时属性要为小写" class="headerlink" title="微信小程序dataset 时属性要为小写"></a><a href="https://blog.csdn.net/u014520797/article/details/92235804">微信小程序dataset 时属性要为小写</a></h2><p>赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">data-myid</span>=<span class="string">&quot;&#123;&#123;item.id&#125;&#125;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;gotoDetails&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>取值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">gotoDetails</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> id =  e.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">myid</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>切记data-myid为小写，包含大写会得到 undefined</p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行运行Java程序</title>
    <url>/posts/1403770599/</url>
    <content><![CDATA[<blockquote>
<p>前提：配置好Java环境变量</p>
</blockquote>
<h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><ol>
<li><p>在D盘下新建个文件夹Test</p>
</li>
<li><p>在Test中新建个<code>start.bat</code></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">D</span>:</span><br><span class="line"><span class="keyword">cd</span> <span class="keyword">Test</span></span><br><span class="line">javac <span class="keyword">Test</span>.java</span><br><span class="line">java <span class="keyword">Test</span></span><br><span class="line"><span class="keyword">pause</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在Test中新建个<code>Test.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><p>双击<code>start.bat</code>即可执行</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓-四大组件-ContentProvider</title>
    <url>/posts/4192894623/</url>
    <content><![CDATA[<h1 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a><code>ContentProvider</code></h1><p><code>android</code>平台提供了<code>Content Provider</code>使一个应用程序的指定数据集提供给其他应用程序。这些数据可以存储在文件系统中、在一个<code>SQLite</code>数据库、或以任何其他合理的方式,其他应用可以通过<code>ContentResolver</code>类(见<code>ContentProviderAccessApp</code>例子)从该内容提供者中获取或存入数据.(相当于在应用外包了一层壳),只有需要在<strong>多个应用程序间共享数据</strong>是才需要内容提供者。例如，通讯录数据被多个应用程序使用，且必须存储在一个内容提供者中</p>
<p>它的好处:<strong>统一数据访问方式</strong>。</p>
<p>android系统自带的内容提供者(顶级的表示数据库名,非顶级的都是表名)这些内容提供者在SDK文档的android.provider Java包中都有介绍。见：<a href="http://developer.android.com/reference/android/provider/package-summary.html">http://developer.android.com/reference/android/provider/package-summary.html</a></p>
<p>├────Browser<br>├────CallLog<br>├────Contacts<br>│ ├────Groups<br>│ ├────People<br>│ ├────Phones<br>│ └────Photos<br>├────Images<br>│ └────Thumbnails<br>├────MediaStore<br>│ ├────Albums<br>│ ├────Artists<br>│ ├────Audio<br>│ ├────Genres<br>│ └────Playlists<br>├────Settings<br>└────Video</p>
<blockquote>
<p>CallLog：地址和接收到的电话信息</p>
<p>Contact.People.Phones：存储电话号码</p>
<p>Setting.System：系统设置和偏好设置</p>
</blockquote>
<h2 id="使用Content-Provider对外共享数据的步骤"><a href="#使用Content-Provider对外共享数据的步骤" class="headerlink" title="使用Content Provider对外共享数据的步骤"></a>使用Content Provider对外共享数据的步骤</h2><ol>
<li><p>继承ContentProvider类并根据需求重写以下方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理初始化操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onCreate</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**        </span></span><br><span class="line"><span class="comment"> * 插入数据到内容提供者(允许其他应用向你的应用中插入数据时重写)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uri</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> initialValues 插入的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Uri <span class="title function_">insert</span><span class="params">(Uri uri, ContentValues initialValues)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**   </span></span><br><span class="line"><span class="comment"> * 从内容提供者中删除数据(允许其他应用删除你应用的数据时重写)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uri</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> selection 条件语句</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> selectionArgs 参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(Uri uri, String selection, String[] selectionArgs)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**       </span></span><br><span class="line"><span class="comment"> * 更新内容提供者已存在的数据(允许其他应用更新你应用的数据时重写)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uri</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> values 更新的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> selection 条件语句</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> selectionArgs 参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Uri uri, ContentValues values, String selection, String[] selectionArgs)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**      </span></span><br><span class="line"><span class="comment"> * 返回数据给调用者(允许其他应用从你的应用中获取数据时重写)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uri</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> projection 列名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> selection 条件语句</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> selectionArgs 参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sortOrder 排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Cursor <span class="title function_">query</span><span class="params">(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)</span> ;         </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于返回当前Uri所代表数据的MIME类型</span></span><br><span class="line"><span class="comment"> * 如果操作的数据为集合类型(多条数据),那么返回的类型字符串应该为vnd.android.cursor.dir/开头</span></span><br><span class="line"><span class="comment"> * 例如要得到所有person记录的Uri为content://com.bravestarr.provider.personprovider/person,</span></span><br><span class="line"><span class="comment"> * 		那么返回的MIME类型字符串应该为&quot;vnd.android.cursor.dir/person&quot;</span></span><br><span class="line"><span class="comment"> * 如果操作的数据为单一数据,那么返回的类型字符串应该为vnd.android.cursor.item/开头</span></span><br><span class="line"><span class="comment"> * 例如要得到id为10的person记录的Uri为content://com.bravestarr.provider.personprovider/person/10,</span></span><br><span class="line"><span class="comment"> *　　　那么返回的MIME类型字符串应该为&quot;vnd.android.cursor.item/person&quot;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uri</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">(Uri uri)</span></span><br></pre></td></tr></table></figure>

<p>这些方法中的Uri参数,得到后需要进行解析然后做对应处理,Uri表示要操作的数据,包含两部分信息:</p>
<ol>
<li><p>需要操作的<code>contentprovider</code></p>
</li>
<li><p>对<code>contentprovider</code>中的什么数据进行操作,一个Uri格式:<code>结构头://authorities(域名)/路径(要操作的数据,根据业务而定)</code></p>
<p><code>content://com.bravestarr.provider.personprovider/person/10</code></p>
<p>说明:<code>contentprovider</code>的结构头已经由<code>android</code>规定为<code>content://authorities</code>用于唯一标识这个<code>contentprovider</code>程序,外部调用者可以根据这个找到他路径表示我们要操作的数据,路径的构建根据业务而定.路径格式如下:</p>
<p>要操作<code>person</code>表行号为<code>10</code>的记录,可以这样构建<code>/person/10</code></p>
<p>要操作<code>person</code>表的所有记录,可以这样构建<code>/person</code></p>
</li>
</ol>
</li>
<li><p>在<code>AndroidManifest.xml</code>中使用<code>&lt;provider&gt;</code>对<code>ContentProvider</code>进行配置注册(内容提供者注册它自己就像网站注册域名),<code>ContentProvider</code>采用<code>authoritie</code>(原意授权,可理解为域名)作为唯一标识,方便其他应用能找到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_launcher&quot;</span>        </span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- authorities属性命名建议:公司名.provider.SomeProvider--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:name</span>=<span class="string">&quot;.PersonProvider&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">ndroid:authorities</span>=<span class="string">&quot;com.bravestarr.provider.personprovider&quot;</span>/&gt;</span></span><br><span class="line">        ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><code>ContentProvider</code> 管理对结构化数据集的访问。它们封装数据，并提供用于定义数据安全性的机制。 内容提供程序是连接一个进程中的数据与另一个进程中运行的代码的标准界面。</p>
<p><code>ContentProvider</code> 无法被用户感知，对于一个 <code>ContentProvider</code> 组件来说，它的内部需要实现增删该查这四种操作，它的内部维持着一份数据集合，这个数据集合既可以是数据库实现，也可以是其他任何类型，如 <code>List</code> 和 <code>Map</code>，内部的 <code>insert</code>、<code>delete</code>、<code>update</code>、<code>query</code> 方法需要处理好线程同步，因为这几个方法是在 <code>Binder</code> 线程池中被调用的。</p>
<p><code>ContentProvider</code> 通过 <code>Binder</code> 向其他<strong>组件</strong>乃至其他<strong>应用</strong>提供数据。当 <code>ContentProvider</code> 所在的进程启动时，<code>ContentProvider</code> 会同时启动并发布到 AMS 中，需要注意的是，这个时候 <code>ContentProvider</code> 的 <code>onCreate</code> 要先于 <code>Application</code> 的 <code>onCreate</code> 而执行。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Queries the user dictionary and returns results</span></span><br><span class="line">mCursor = getContentResolver().query(</span><br><span class="line">    UserDictionary.Words.CONTENT_URI,   <span class="comment">// The content URI of the words table</span></span><br><span class="line">    mProjection,                        <span class="comment">// The columns to return for each row</span></span><br><span class="line">    mSelectionClause                    <span class="comment">// Selection criteria</span></span><br><span class="line">    mSelectionArgs,                     <span class="comment">// Selection criteria</span></span><br><span class="line">    mSortOrder);                        <span class="comment">// The sort order for the returned rows</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Installer</span> <span class="keyword">extends</span> <span class="title class_">ContentProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Cursor <span class="title function_">query</span><span class="params">(<span class="meta">@NonNull</span> Uri uri, <span class="meta">@Nullable</span> String[] projection, <span class="meta">@Nullable</span> String selection, <span class="meta">@Nullable</span> String[] selectionArgs, <span class="meta">@Nullable</span> String sortOrder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">(<span class="meta">@NonNull</span> Uri uri)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Uri <span class="title function_">insert</span><span class="params">(<span class="meta">@NonNull</span> Uri uri, <span class="meta">@Nullable</span> ContentValues values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@NonNull</span> Uri uri, <span class="meta">@Nullable</span> String selection, <span class="meta">@Nullable</span> String[] selectionArgs)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(<span class="meta">@NonNull</span> Uri uri, <span class="meta">@Nullable</span> ContentValues values, <span class="meta">@Nullable</span> String selection, <span class="meta">@Nullable</span> String[] selectionArgs)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>自己创建一个<code>ContentProvider</code>或往已存在的<code>Provider</code>中写数据，供其他应用访问。</li>
<li>访问<code>ContentProvider</code>时，可通过<code>Activity</code>或<code>Context</code>的方法<code>getContentResolver</code>来访问</li>
<li>每个<code>ContentProvider</code>都有个唯一的URI来识别</li>
<li><code>ContentProvider</code>的生命周期不可人为控制，在进程创建时创建，随进程消亡而消亡。</li>
</ol>
<h1 id="四大基本组件的总结"><a href="#四大基本组件的总结" class="headerlink" title="四大基本组件的总结"></a>四大基本组件的总结</h1><h2 id="四大组件的注册"><a href="#四大组件的注册" class="headerlink" title="四大组件的注册"></a>四大组件的注册</h2><ul>
<li><p>四大基本组件都需要注册才能使用,每个<code>Activity</code>、<code>service</code>、<code>Content Provider</code>内容提供者都需要在<code>AndroidManifest</code>文件中进行配置。</p>
</li>
<li><p><code>AndroidManifest</code>文件中未进行声明的<code>activity</code>、<code>服务</code>以及<code>内容提供者</code>将不为系统所见，从而也就不可用，而<code>BroadcastReceive</code>广播接收者的注册分静态注册（在<code>AndroidManifest</code>文件中进行配置）和通过代码动态创建并以调用<code>Context.registerReceiver()</code>的方式注册至系统。需要注意的是在<code>AndroidManifest</code>文件中进行配置的广播接收者会<strong>随系统的启动而一直处于活跃状态</strong>,只要接收到感兴趣的广播就会触发（即使程序未运行）</p>
</li>
<li><p><code>AndroidManifest</code>文件中进行注册格式如下：</p>
<ul>
<li><code>&lt;activity&gt;</code>元素的<code>name</code> 属性指定了实现了这个<code>activity</code> 的<code>Activity</code> 的子类。<code>icon</code> 和<code>label</code> 属性指向了包含展示给用户的此<code>activity</code> 的图标和标签的资源文件。</li>
<li><code>&lt;service&gt;</code> 元素用于声明服务</li>
<li><code>&lt;receiver&gt;</code> 元素用于声明广播接收器</li>
<li><code>&lt;provider&gt;</code> 元素用于声明内容提供者</li>
</ul>
</li>
</ul>
<h2 id="四大组件的激活"><a href="#四大组件的激活" class="headerlink" title="四大组件的激活"></a>四大组件的激活</h2><ul>
<li><p>容提供者的激活：当接收到<code>ContentResolver</code> 发出的请求后，内容提供者被激活。而其它三种组件──<code>activity</code>、<code>服务</code>和<code>广播接收器</code>被一种叫做<code>intent</code> 的异步消息所激活</p>
</li>
<li><p><code>Activity</code>的激活通过传递一个<code>Intent</code> 对象至<code>Context.startActivity()</code>或<code>Activity.startActivityForResult()</code>以载入（或指定新工作给）一个<code>activity</code>。相应的<code>activity</code> 可以通过调用<code>getIntent()</code> 方法来查看激活它的<code>intent</code>。如果它期望它所启动的那个<code>activity</code> 返回一个结果，它会以调用<code>startActivityForResult()</code>来取代<code>startActivity()</code>。比如说，如果它启动了另外一个<code>Activity</code> 以使用户挑选一张照片，它也许想知道哪张照片被选中了。结果将会被封装在一个<code>Intent</code> 对象中，并传递给发出调用的<code>activity</code> 的<code>onActivityResult()</code> 方法。</p>
</li>
<li><p><code>服务</code>的激活可以通过传递一个<code>Intent</code> 对象至<code>Context.startService()</code>或<code>Context.bindService()</code>前者<code>Android</code> 调用服务的<code>onStart()</code>方法并将<code>Intent</code> 对象传递给它，后者<code>Android</code> 调用服务的<code>onBind()</code>方法将这个<code>Intent</code> 对象传递给它</p>
</li>
<li><p>发送广播可以通过传递一个<code>Intent</code> 对象至给<code>Context.sendBroadcast()</code> 、<code>Context.sendOrderedBroadcast()</code>或<code>Context.sendStickyBroadcast()</code> <code>Android</code> 会调用所有对此广播有兴趣的广播接收器的<code>onReceive()</code>方法，将<code>intent</code> 传递给它们</p>
</li>
</ul>
<h2 id="四大组件的关闭"><a href="#四大组件的关闭" class="headerlink" title="四大组件的关闭"></a>四大组件的关闭</h2><ul>
<li><p>内容提供者仅在响应<code>ContentResolver</code> 提出请求的时候激活。</p>
</li>
<li><p>而一个广播接收器仅在响应广播信息的时候激活。所以，没有必要去显式的关闭这些组件。</p>
</li>
<li><p><code>Activity</code>关闭：可以通过调用它的<code>finish()</code>方法来关闭一个<code>activity</code></p>
</li>
<li><p>服务关闭：对于通过<code>startService()</code>方法启动的服务要调用<code>Context.stopService()</code>方法关闭服务，使用<code>bindService()</code>方法启动的服务要调用<code>Contex.unbindService()</code>方法关闭服务</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>建站-个人博客</title>
    <url>/posts/594975625/</url>
    <content><![CDATA[<p>创建个人博客</p>
<span id="more"></span>



<h1 id="使用hexo创建博客"><a href="#使用hexo创建博客" class="headerlink" title="使用hexo创建博客"></a>使用hexo创建博客</h1><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/60578464#:~:text=%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%EF%BC%88%E5%B0%8F%E7%99%BD%E5%90%91%EF%BC%89%201%20%E5%87%86%E5%A4%87%202%20%E8%BF%9E%E6%8E%A5%20Github....,Hexo%20%E5%88%B0%20GitHub%20Pages%206%20%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89....%207%20%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8">hexo+github搭建教程</a></p>
<p><a href="https://www.jianshu.com/p/343934573342">windows安装hexo</a>（记得<code>Add to Path</code>这步要勾选<code>install local...</code>）</p>
<p><a href="https://zhuanlan.zhihu.com/p/340760172?utm_source=wechat_session&utm_medium=social&utm_oi=38387742408704">typora+picgo上传图片到gitee</a></p>
<h2 id="给自己用的："><a href="#给自己用的：" class="headerlink" title="给自己用的："></a>给自己用的：</h2><p>（要换个新的电脑搭建，我自己的站点配置和主题配置已经改好）</p>
<blockquote>
<ol>
<li>运行以下命令</li>
</ol>
<p>npm install hexo-cli -g<br>hexo -v<br>npm update hexo -g<br>hexo init<br>npm install –save hexo-deployer-git<br>npm install hexo-abbrlink –save<br>npm install hexo-excerpt –save<br>npm install crypto-js<br>npm install hexo-hide-posts –save<br>npm install hexo-wordcount<br>npm install hexo-generator-searchdb –save<br>npm uninstall hexo-generator-index –save<br>npm install hexo-generator-index-pin-top –save<br>npm install hexo-asset-image –save<br>npm i hexo-renderer-swig<br>npm install hexo-generator-index –save<br>npm install hexo-generator-archive –save<br>npm install hexo-generator-tag –save<br>npm install hexo-generator-category –save</p>
<p>npm install –save hexo-helper-live2d</p>
<ol start="2">
<li><p>再把.git、source、themes、_config.yml、.gitignore覆盖过来</p>
</li>
<li><p>hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</p>
</li>
</ol>
</blockquote>
<h2 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h2><h3 id="安装、升级、初始化"><a href="#安装、升级、初始化" class="headerlink" title="安装、升级、初始化"></a>安装、升级、初始化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#升级npm【可选】</span></span><br><span class="line">npm install -g npm </span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">npm install hexo-cli -g </span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line">hexo -v </span><br><span class="line"><span class="comment">#升级【可选】</span></span><br><span class="line">npm update hexo -g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="comment">#克隆最新的next主题</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next </span><br><span class="line"><span class="comment">#安装hexo d插件</span></span><br><span class="line">npm install --save hexo-deployer-git</span><br><span class="line"><span class="comment">#修改文章永久链接为随机编号。可以提升访问速度</span></span><br><span class="line">npm install hexo-abbrlink --save </span><br><span class="line"></span><br><span class="line"><span class="comment">#首页自动收缩</span></span><br><span class="line">npm install hexo-excerpt --save</span><br><span class="line"><span class="comment">#指定文章加密</span></span><br><span class="line">npm install crypto-js</span><br><span class="line"><span class="comment">#指定文章隐藏</span></span><br><span class="line">npm install hexo-hide-posts --save</span><br><span class="line"></span><br><span class="line"><span class="comment">#新版hexo需要手动安装以下插件</span></span><br><span class="line"><span class="comment">#网页显示不出的问题</span></span><br><span class="line"><span class="comment">#不统计字数的问题</span></span><br><span class="line">npm install hexo-wordcount </span><br><span class="line"><span class="comment">#本地搜索功能用不了的问题</span></span><br><span class="line">npm install hexo-generator-searchdb --save </span><br><span class="line"></span><br><span class="line"><span class="comment">#让文章能置顶</span></span><br><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br><span class="line"></span><br><span class="line"><span class="comment">#可加载本地图片</span></span><br><span class="line">npm install hexo-asset-image --save</span><br><span class="line"></span><br><span class="line"><span class="comment">#可选</span></span><br><span class="line"><span class="comment">#让网站能被百度搜索</span></span><br><span class="line">npm install hexo-generator-sitemap --save     </span><br><span class="line"><span class="comment">#让网站能被百度搜索</span></span><br><span class="line">npm install hexo-generator-baidu-sitemap --save </span><br><span class="line"><span class="comment">#主动推送死链到百度</span></span><br><span class="line">npm install hexo-baidu-url-submit --save </span><br></pre></td></tr></table></figure>

<p><img src="/posts/594975625/%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="博客的目录结构"></p>
<blockquote>
<p>npm查看安装了哪些包 <code>npm list --depth=0</code></p>
<p>npm查看全局安装了哪些工具 <code>npm list --depth --global</code></p>
<p>npm查看某个模块是否安装了 <code>npm list &lt;packagename&gt;</code></p>
</blockquote>
<h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建新文件（在-source-x2F-posts-下生成“文件名-md”文件）"><a href="#创建新文件（在-source-x2F-posts-下生成“文件名-md”文件）" class="headerlink" title="创建新文件（在 source&#x2F;_posts 下生成“文件名.md”文件）"></a>创建新文件（在 source&#x2F;_posts 下生成“文件名.md”文件）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n [layout] <span class="string">&quot;文件名&quot;</span> <span class="comment">#新建文章（也会创建文件夹）</span></span><br></pre></td></tr></table></figure>
<h3 id="Run-server（本地直接查看）（是建议步骤）"><a href="#Run-server（本地直接查看）（是建议步骤）" class="headerlink" title="Run server（本地直接查看）（是建议步骤）"></a>Run server（本地直接查看）（是建议步骤）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h3 id="本地生成静态网页"><a href="#本地生成静态网页" class="headerlink" title="本地生成静态网页"></a>本地生成静态网页</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<h3 id="发布到博客"><a href="#发布到博客" class="headerlink" title="发布到博客"></a>发布到博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server <span class="comment">#Hexo 会监视文件变动并自动更新，您无须重启服务器。</span></span><br><span class="line">hexo server -s <span class="comment">#静态模式</span></span><br><span class="line">hexo server -p 5000 <span class="comment">#更改端口</span></span><br><span class="line">hexo server -i 192.168.1.1 <span class="comment">#自定义 IP</span></span><br><span class="line"></span><br><span class="line">hexo clean <span class="comment">#清除缓存 网页正常情况下可以忽略此条命令</span></span><br><span class="line">hexo g <span class="comment">#生成静态网页</span></span><br><span class="line">hexo d <span class="comment">#开始部署</span></span><br></pre></td></tr></table></figure>

<h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate <span class="comment">#使用 Hexo 生成静态文件快速而且简单</span></span><br><span class="line">hexo generate --watch <span class="comment">#监视文件变动</span></span><br></pre></td></tr></table></figure>

<h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">两个命令的作用是相同的</span><br><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy -g`</span><br><span class="line">`hexo server -g</span><br></pre></td></tr></table></figure>

<h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">hexo publish <span class="selector-attr">[layout]</span> </span><br></pre></td></tr></table></figure>









<h2 id="hexo设置"><a href="#hexo设置" class="headerlink" title="hexo设置"></a>hexo设置</h2><blockquote>
<p>以下设置仅供参考，因为使用的next主题的版本有升级过（有些设置不一样了）</p>
</blockquote>
<p><a href="http://www.mamicode.com/info-detail-2716342.html">参考链接</a>、<a href="http://theme-next.iissnan.com/">参考链接2</a>、<a href="https://www.jianshu.com/p/3ff20be8574c">参考链接3</a></p>
<h3 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a>添加本地搜索</h3><p><code>next/_config.yml</code>中打开搜索开关</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="打开文章的资源文件夹功能"><a href="#打开文章的资源文件夹功能" class="headerlink" title="打开文章的资源文件夹功能"></a>打开文章的资源文件夹功能</h3><p>站点配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span> <span class="comment"># 默认值false，关闭文章资源文件夹功能</span></span><br></pre></td></tr></table></figure>

<p>直接在markdown文章中写入：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=<span class="string">&quot;&#123;asset_path full-image.jpg %&#125;/&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="增加支付宝和微信打赏功能"><a href="#增加支付宝和微信打赏功能" class="headerlink" title="增加支付宝和微信打赏功能"></a>增加支付宝和微信打赏功能</h3><p>主题配置文件<code>next/_config.yml</code></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">reward_comment:</span> 坚持原创，您的支持将鼓励我继续创作 </span><br><span class="line"><span class="symbol">wechatpay:</span> <span class="keyword">/images/</span>wechat_money.jpg </span><br><span class="line"><span class="symbol">alipay:</span> <span class="keyword">/images/</span>alipay_money.jpg</span><br></pre></td></tr></table></figure>

<p>打开<code>themes\next\layout\_macro\reward.swig</code>文件，修改打赏按钮和图片下方的文字</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"># 改动1：把下方的Donate改为赏,对应打赏按钮</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Donate<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># 改动2  把p标签内的WetChar Pay改为微信打赏</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.wechatpay %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wechat&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;wechat_qr&quot;</span> <span class="attr">src</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; theme.wechatpay &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; theme.author &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string"> WeChat Pay&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>WetChar Pay<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"># 改动3： 把p标签内的Alipay pay改为支付宝打赏</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.alipay %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;alipay&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;alipay_qr&quot;</span> <span class="attr">src</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; theme.alipay &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; theme.author &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string"> Alipay&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Alipay pay<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="修正打赏说明文字闪动问题"><a href="#修正打赏说明文字闪动问题" class="headerlink" title="修正打赏说明文字闪动问题"></a>修正打赏说明文字闪动问题</h3><p>打开<code>themes\next\source\css\_common\components\post\post-reward.styl</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span><span class="comment">#wechat:hover p&#123;</span></span><br><span class="line"><span class="regexp">//</span>    animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line"><span class="regexp">//</span>    -webkit-animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line"><span class="regexp">//</span>    -moz-animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line"><span class="regexp">//</span>&#125;</span><br><span class="line"><span class="regexp">//</span><span class="comment">#alipay:hover p&#123;</span></span><br><span class="line"><span class="regexp">//</span>    animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line"><span class="regexp">//</span>    -webkit-animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line"><span class="regexp">//</span>    -moz-animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line"><span class="regexp">//</span>&#125;</span><br><span class="line"><span class="regexp">//</span><span class="comment">#bitcoin:hover p &#123;</span></span><br><span class="line"><span class="regexp">//</span>    animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line"><span class="regexp">//</span>    -webkit-animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line"><span class="regexp">//</span>    -moz-animation: roll <span class="number">0.1</span>s infinite linear;</span><br><span class="line"><span class="regexp">//</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设置网站博客肖像"><a href="#设置网站博客肖像" class="headerlink" title="设置网站博客肖像"></a>设置网站博客肖像</h3><p>主题配置文件<code>next/_config.yml</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line">avatar: <span class="regexp">/images/</span>header.jpg <span class="comment">#也可以设置成网络url</span></span><br></pre></td></tr></table></figure>

<h3 id="添加点击头像跳转到指定网址"><a href="#添加点击头像跳转到指定网址" class="headerlink" title="添加点击头像跳转到指定网址"></a>添加点击头像跳转到指定网址</h3><p><code>themes/hexo-theme-next/source/js/src/motion.js</code>的文章头部添加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 点击头像，添加跳转的链接 */</span></span><br><span class="line">$(<span class="string">&#x27;.site-author-image&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;https://gitee.com/shen_bh&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="头像边框改为圆形框"><a href="#头像边框改为圆形框" class="headerlink" title="头像边框改为圆形框"></a>头像边框改为圆形框</h3><p>打开位于<code>themes/next/source/css/_common/components/sidebar/</code>下的<code>sidebar-author.syl</code>文件,修改如下</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">.site-author-<span class="built_in">image</span> &#123;</span><br><span class="line">  <span class="built_in">display</span>: <span class="built_in">block</span>;</span><br><span class="line">  margin: <span class="number">0</span> auto;</span><br><span class="line">  padding: $site-author-<span class="built_in">image</span>-padding;</span><br><span class="line">  <span class="built_in">max</span>-<span class="built_in">width</span>: $site-author-<span class="built_in">image</span>-<span class="built_in">width</span>;</span><br><span class="line">  <span class="built_in">height</span>: $site-author-<span class="built_in">image</span>-<span class="built_in">height</span>;</span><br><span class="line">  <span class="built_in">border</span>: $site-author-<span class="built_in">image</span>-<span class="built_in">border</span>-<span class="built_in">width</span> solid $site-author-<span class="built_in">image</span>-<span class="built_in">border</span>-<span class="built_in">color</span>;</span><br><span class="line"> // 修改头像边框</span><br><span class="line">  <span class="built_in">border</span>-<span class="built_in">radius</span>: <span class="number">50</span><span class="symbol">%</span>;</span><br><span class="line">  -webkit-<span class="built_in">border</span>-<span class="built_in">radius</span>: <span class="number">50</span><span class="symbol">%</span>;</span><br><span class="line">  -moz-<span class="built_in">border</span>-<span class="built_in">radius</span>: <span class="number">50</span><span class="symbol">%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="鼠标放置头像上旋转"><a href="#鼠标放置头像上旋转" class="headerlink" title="鼠标放置头像上旋转"></a>鼠标放置头像上旋转</h3><p>打开位于<code>themes/next/source/css/_common/components/sidebar/</code>下的<code>sidebar-author.syl</code>文件,修改如下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"> // 修改头像边框</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  // 设置旋转</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1.4s</span> all;</span><br><span class="line">&#125;</span><br><span class="line">// 可旋转的圆形头像,`hover`动作</span><br><span class="line"><span class="selector-class">.site-author-image</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    -<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设置页面动态背景"><a href="#设置页面动态背景" class="headerlink" title="设置页面动态背景"></a>设置页面动态背景</h3><p>主题配置文件<code>next/_config.yml</code></p>
<p>动态特效：该特效打开的是3条线段追踪鼠标</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>3D特效：该特效由三维js库提供的三维动态背景</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>线条特效：该开关的打开，在背景上显示较长线条及小球。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>球状特效：该开关在背景上显示一个球状图案。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>特别注意，上述四种特效，可以独立设置，也可以叠加</p>
<h3 id="设置网站缩略图标"><a href="#设置网站缩略图标" class="headerlink" title="设置网站缩略图标"></a>设置网站缩略图标</h3><p>主题配置文件<code>next/_config.yml</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: <span class="regexp">/images/</span>favicon-<span class="number">16</span>x16-<span class="keyword">next</span>.png</span><br><span class="line">  medium: /favicon.ico</span><br><span class="line">  apple_touch_icon: <span class="regexp">/images/</span>apple-touch-icon-<span class="keyword">next</span>.png</span><br><span class="line">  safari_pinned_tab: <span class="regexp">/images/</span>logo.svg</span><br></pre></td></tr></table></figure>
<p>建议采用ico格式的缩略图，其他图可能存在兼容性问题</p>
<h3 id="去掉文章目录标题的自动编号"><a href="#去掉文章目录标题的自动编号" class="headerlink" title="去掉文章目录标题的自动编号"></a>去掉文章目录标题的自动编号</h3><p>主题配置文件<code>next/_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span>  <span class="comment">#false去掉文章目录标题的自动编号，默认true</span></span><br></pre></td></tr></table></figure>



<h3 id="自定义头部区域背景图"><a href="#自定义头部区域背景图" class="headerlink" title="自定义头部区域背景图"></a>自定义头部区域背景图</h3><p>在Prisse Theme中，是不是清一色的黑色让你非常不爽啊，我也不爽。 我想要一个不一样的的效果，比如在加一个背景图片。我的副标题是“面朝大海，春乱花开”，我想来一张应景的图片。 找到如下<code>themes\next\source\css\_custom\custom.styl</code> 文件，添加 </p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-meta</span> &#123;</span><br><span class="line">	<span class="attribute">background-image</span>: url(<span class="string">/images/log-big.jpg</span>);</span><br><span class="line">	<span class="keyword">@media</span>(<span class="attribute">min-width</span>: <span class="number">992px</span>)&#123;</span><br><span class="line">		<span class="attribute">background-image</span>: url(<span class="string">/images/log-small.jpg</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="hexo-next去掉上方的黑线or改掉颜色"><a href="#hexo-next去掉上方的黑线or改掉颜色" class="headerlink" title="hexo next去掉上方的黑线or改掉颜色"></a>hexo next去掉上方的黑线or改掉颜色</h3><ul>
<li><p>方法一：去掉黑线div<br>修改文件知“themes\next\layout_layout.swig”，道删除“<div class="headband"></div>”<br>修改黑线高度为0</p>
</li>
<li><p>方法二：修改黑线高度为0<br>修改文件“themes\next\source\css_variables\base.styl”，找到“$headband-height”，把3px改成0px；</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$headband</span>-height                = 0px</span><br><span class="line"><span class="variable">$headband</span>-<span class="built_in">bg</span>                    = <span class="variable">$black</span>-deep</span><br></pre></td></tr></table></figure>

<h3 id="代码上增加“复制”功能"><a href="#代码上增加“复制”功能" class="headerlink" title="代码上增加“复制”功能"></a>代码上增加“复制”功能</h3><p><a href="https://qiming.info/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8A%A0%E5%85%A5%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/">参考文章</a></p>
<ol>
<li>在<code>themes\hexo-theme-next\layout\_third-party\</code>下新建<code>copy-code.swig</code></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.codeblock.copy_button.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.copy-btn</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">13px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">#fcfcfc</span>, <span class="number">#eee</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d5d5d5</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">      user-select: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">outline</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.highlight-wrap</span> <span class="selector-class">.copy-btn</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: opacity .<span class="number">3s</span> ease-in-out;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.highlight-wrap</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.copy-btn</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.highlight-wrap</span> <span class="selector-class">.copy-btn</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.highlight-wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;.highlight&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">i, e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> $wrap = $(<span class="string">&#x27;&lt;div&gt;&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;highlight-wrap&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      $(e).<span class="title function_">after</span>($wrap)</span></span><br><span class="line"><span class="language-javascript">      $wrap.<span class="title function_">append</span>($(<span class="string">&#x27;&lt;button&gt;&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;copy-btn&#x27;</span>).<span class="title function_">append</span>(<span class="string">&#x27;&#123;&#123;__(&quot;post.copy_button&quot;)&#125;&#125;&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> code = $(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">find</span>(<span class="string">&#x27;.code&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.line&#x27;</span>).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">i, e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> $(e).<span class="title function_">text</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">toArray</span>().<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ta = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;textarea&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(ta)</span></span><br><span class="line"><span class="language-javascript">        ta.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        ta.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;0px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        ta.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&#x27;0px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        ta.<span class="property">value</span> = code</span></span><br><span class="line"><span class="language-javascript">        ta.<span class="title function_">select</span>()</span></span><br><span class="line"><span class="language-javascript">        ta.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> result = <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(<span class="params">ta</span>)</span></span><br><span class="line"><span class="language-javascript">        &#123;% <span class="keyword">if</span> theme.<span class="property">codeblock</span>.<span class="property">copy_button</span>.<span class="property">show_result</span> %&#125;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span>(result)$(<span class="variable language_">this</span>).<span class="title function_">text</span>(<span class="string">&#x27;&#123;&#123;__(&quot;post.copy_success&quot;)&#125;&#125;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">else</span> $(<span class="variable language_">this</span>).<span class="title function_">text</span>(<span class="params"><span class="string">&#x27;&#123;&#123;__(&quot;post.copy_failure&quot;)&#125;&#125;&#x27;</span></span>)</span></span><br><span class="line"><span class="language-javascript">        &#123;% endif %&#125;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="variable language_">this</span>).<span class="title function_">blur</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;)).<span class="title function_">on</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> $b = $(<span class="variable language_">this</span>).<span class="title function_">find</span>(<span class="string">&#x27;.copy-btn&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          $b.<span class="title function_">text</span>(<span class="string">&#x27;&#123;&#123;__(&quot;post.copy_button&quot;)&#125;&#125;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">300</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">append</span>(e)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在<code>themes\hexo-theme-next\layout\_layout.swig</code>的<code>&lt;/body&gt;</code>上一行添加</li>
</ol>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> &#x27;_third-party/copy-code.swig&#x27; %&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在<code>themes\hexo-theme-next\languages\zh-Hans.yml</code>的<code>post:</code>下增加</li>
</ol>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">copy_button:</span> 复制</span><br><span class="line"><span class="symbol">copy_success:</span> 复制成功</span><br><span class="line"><span class="symbol">copy_failure:</span> 复制失败</span><br></pre></td></tr></table></figure>

<p>在<code>themes\hexo-theme-next\languages\en.yml</code>的<code>post:</code>下增加</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">copy_button:</span> Copy</span><br><span class="line"><span class="symbol">copy_success:</span> Copied</span><br><span class="line"><span class="symbol">copy_failure:</span> Copy failed</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在<code>themes\hexo-theme-next\_config.yml</code>的<code>font:</code>跟<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ------</span></span><br><span class="line"><span class="comment"># Third Party Services Settings</span></span><br><span class="line"><span class="comment"># ------</span></span><br></pre></td></tr></table></figure>
之间增加</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Manual define the border radius in codeblock</span></span><br><span class="line"><span class="comment"># Leave if empty for the default 1</span></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">    <span class="attr">border radius:</span></span><br><span class="line">    <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">    <span class="attr">copy_button:</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># Show text copy result</span></span><br><span class="line">        <span class="attr">show_result:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h3 id="添加live2d卡通人物"><a href="#添加live2d卡通人物" class="headerlink" title="添加live2d卡通人物"></a><a href="https://blog.csdn.net/mqdxiaoxiao/article/details/93793530">添加live2d卡通人物</a></h3><ol>
<li>安装<code>hexo-helper-live2d</code></li>
</ol>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install <span class="comment">--save hexo-helper-live2d</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装<code>live2d</code></li>
</ol>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> live2d-widget-model-wanko</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置</li>
</ol>
<p><code>next/_config.yml</code>中添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span>          <span class="comment"># 插件在站点上的根目录(相对路径)</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span>                <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span>          <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  <span class="comment"># scriptFrom: jsdelivr            # jsdelivr CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: unpkg               # unpkg CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span>                    <span class="comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span></span><br><span class="line">  <span class="attr">log:</span> <span class="literal">false</span>                        <span class="comment"># 调试, 是否在控制台输出日志</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span>  <span class="comment"># npm-module package name</span></span><br><span class="line">    <span class="comment"># use: wanko                    # 博客根目录/live2d_models/ 下的目录名</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko            # 相对于博客根目录的路径</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span>                      <span class="comment"># 手机中是否展示</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br></pre></td></tr></table></figure>

<p>重新<code>hexo d -g</code>即可看效果</p>
<h3 id="给指定标签的文章加密"><a href="#给指定标签的文章加密" class="headerlink" title="给指定标签的文章加密"></a><a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md">给指定标签的文章加密</a></h3><h3 id="给文章加密，需要密码才能观看"><a href="#给文章加密，需要密码才能观看" class="headerlink" title="给文章加密，需要密码才能观看"></a>给文章加密，需要密码才能观看</h3><p><code>next/layout/_partials/head.swing</code>的<code>&lt;script&gt;&lt;/script&gt;</code>标签种添加方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&#x27;&#123;&#123; page.password &#125;&#125;&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">prompt</span>(<span class="string">&#x27;请输入文章密码&#x27;</span>) !== <span class="string">&#x27;&#123;&#123; page.password &#125;&#125;&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;密码错误！&#x27;</span>);</span><br><span class="line">            history.<span class="title function_">back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h3 id="代码块主题更改"><a href="#代码块主题更改" class="headerlink" title="代码块主题更改"></a>代码块主题更改</h3><p>站点<code>_config.yml</code>打开代码高亮和自动识别语言的开关</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span>            <span class="comment">#代码块的设置，Hexo自带的代码高亮插件</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>			 <span class="comment">#是否开启代码高亮</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span>		 <span class="comment">#是否增加代码行号</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span>		 <span class="comment">#自动判断代码语言</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>主题配置文件<code>_config.yml</code>选择个主题</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">#可选主题normal | <span class="type">night</span> | <span class="type">night</span> eighties | <span class="type">night</span> blue | <span class="type">night</span> bright</span><br><span class="line">highlight_theme: night bright</span><br></pre></td></tr></table></figure>

<h3 id="优化文章（代码块）字体"><a href="#优化文章（代码块）字体" class="headerlink" title="优化文章（代码块）字体"></a>优化文章（代码块）字体</h3><p><code>themes/next/source/css/_variables/custom.styl</code>添加内容</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 标题，修改成你期望的字体族</span><br><span class="line"><span class="variable">$font</span>-family-headings = Georgia, sans</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 修改成你期望的字体族</span><br><span class="line"><span class="variable">$font</span>-family-base = <span class="string">&quot;Microsoft YaHei&quot;</span>, Verdana, sans-serif</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 代码字体</span><br><span class="line"><span class="variable">$code</span>-font-family = <span class="string">&quot;Input Mono&quot;</span>, <span class="string">&quot;PT Mono&quot;</span>, Consolas, Monaco, Menlo, monospace</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 正文字体的大小</span><br><span class="line"><span class="variable">$font</span>-size-base = <span class="number">16</span>px</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 代码字体的大小</span><br><span class="line"><span class="variable">$code</span>-font-size = <span class="number">13</span>px</span><br></pre></td></tr></table></figure>

<h3 id="设置社交网址和图标"><a href="#设置社交网址和图标" class="headerlink" title="设置社交网址和图标"></a>设置社交网址和图标</h3><p><code>themes/next/_config.yml</code></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">social:</span></span><br><span class="line"><span class="symbol">  GitHub:</span> https:<span class="comment">//github.com/shenbh || github</span></span><br><span class="line">  <span class="meta">#E-Mail: mailto:shenbh@qq.com || envelope</span></span><br><span class="line">  <span class="meta">#Google: https:<span class="comment">//plus.google.com/yourname || google</span></span></span><br><span class="line">  <span class="meta">#Twitter: https:<span class="comment">//twitter.com/yourname || twitter</span></span></span><br><span class="line">  <span class="meta">#FB Page: https:<span class="comment">//www.facebook.com/yourname || facebook</span></span></span><br><span class="line">  <span class="meta">#VK Group: https:<span class="comment">//vk.com/yourname || vk</span></span></span><br><span class="line">  <span class="meta">#StackOverflow: https:<span class="comment">//stackoverflow.com/yourname || stack-overflow</span></span></span><br><span class="line">  <span class="meta">#YouTube: https:<span class="comment">//youtube.com/yourname || youtube</span></span></span><br><span class="line">  <span class="meta">#Instagram: https:<span class="comment">//instagram.com/yourname || instagram</span></span></span><br><span class="line">  <span class="meta">#Skype: skype:yourname?call|chat || skype</span></span><br><span class="line">  微博: http:<span class="comment">//weibo.com/2551187965/profile?topnav=1&amp;wvr=6 || weibo</span></span><br><span class="line"><span class="symbol">  Coding:</span> https:<span class="comment">//sbh.coding.net/user || monkey</span></span><br><span class="line"><span class="symbol">  Gitee:</span> https:<span class="comment">//gitee.com/shen_bh || alien-monster</span></span><br><span class="line">  掘金: https:<span class="comment">//juejin.im/user/57ea31a1a22b9d0061656f52 || angle-double-down</span></span><br><span class="line">  知乎: https:<span class="comment">//www.zhihu.com/people/shenbh || snapchat</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">social_icons:</span></span><br><span class="line"><span class="symbol">  enable:</span> true</span><br><span class="line"><span class="symbol">  icons_only:</span> false <span class="meta">#只显示图标，不显示文字</span></span><br><span class="line"><span class="symbol">  transition:</span> false <span class="meta">#动画效果</span></span><br><span class="line">  <span class="meta"># Icon Mappings.</span></span><br><span class="line">  <span class="meta"># KeyMapsToSocialItemKey: NameOfTheIconFromFontAwesome</span></span><br><span class="line"><span class="symbol">  GitHub:</span> github</span><br><span class="line">  E-Mail: envelope</span><br><span class="line"><span class="symbol">  Google:</span> google</span><br><span class="line"><span class="symbol">  Twitter:</span> twitter</span><br><span class="line">  FB Page: facebook</span><br><span class="line">  VK Group: vk</span><br><span class="line"><span class="symbol">  Skype:</span> skype</span><br><span class="line"><span class="symbol">  YouTube:</span> youtube</span><br><span class="line"><span class="symbol">  Instagram:</span> instagram</span><br><span class="line"><span class="symbol">  StackOverflow:</span> stack-overflow</span><br><span class="line">  微博: weibo</span><br><span class="line"><span class="symbol">  Coding:</span> monkey</span><br><span class="line"><span class="symbol">  Gitee:</span> alien-monster</span><br><span class="line">  掘金: angle-double-down</span><br><span class="line">  知乎: snapchat</span><br></pre></td></tr></table></figure>



<h3 id="去除底部-powerby"><a href="#去除底部-powerby" class="headerlink" title="去除底部 powerby"></a>去除底部 powerby</h3><p><code>Next/_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup.</span></span><br><span class="line">  <span class="comment"># If not defined, current year will be used.</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2019</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">user</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, will be used `author` from Hexo main config.</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="string">大力出奇迹</span></span><br><span class="line">  <span class="comment"># -------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>





<h3 id="修改copyright"><a href="#修改copyright" class="headerlink" title="修改copyright"></a><a href="https://hoxis.github.io/hexo-next-copyright.html">修改copyright</a></h3><p>感觉底部版权信息不够丰富，打算新增一些内容。</p>
<p>设置前的效果：</p>
<p><a href="https://blog-1254259578.cos.ap-shanghai.myqcloud.com/picgo/20180906142638.png"><img src="/posts/594975625/20180906142638.png" alt="设置前的效果"></a></p>
<p>修改文件：<code>themes/next/layout/_macro/post-copyright.swig</code></p>
<p>修改前：</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;post-copyright&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;post-copyright-author&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">__</span>(<span class="name">&#x27;post.copyright.author&#x27;</span>) + __(<span class="name">&#x27;symbol.colon&#x27;</span>) &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; <span class="name">post.author</span> | default(<span class="name">config.author</span>) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;post-copyright-link&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">__</span>(<span class="name">&#x27;post.copyright.link&#x27;</span>) + __(<span class="name">&#x27;symbol.colon&#x27;</span>) &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">post.url</span> | default(<span class="name">post.permalink</span>) &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">title</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">post.title</span> &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">post.url</span> | default(<span class="name">post.permalink</span>) &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;post-copyright-license&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">__</span>(<span class="name">&#x27;post.copyright.license_title&#x27;</span>) + __(<span class="name">&#x27;symbol.colon&#x27;</span>) &#125;&#125;</span><span class="language-xml"> <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; <span class="name">__</span>(<span class="name">&#x27;post.copyright.license_content&#x27;</span>, theme.post_copyright.license_url, theme.post_copyright.license) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>修改后：</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;post-copyright&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;post-copyright-author&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">__</span>(<span class="name">&#x27;post.copyright.author&#x27;</span>) + __(<span class="name">&#x27;symbol.colon&#x27;</span>) &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; <span class="name">post.author</span> | default(<span class="name">config.author</span>) &#125;&#125;</span><span class="language-xml">  |  微信公众号【不正经程序员】</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;post-copyright-link&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">__</span>(<span class="name">&#x27;post.copyright.link&#x27;</span>) + __(<span class="name">&#x27;symbol.colon&#x27;</span>) &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">post.url</span> | default(<span class="name">post.permalink</span>) &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">title</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">post.title</span> &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">post.url</span> | default(<span class="name">post.permalink</span>) &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;post-copyright-license&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">__</span>(<span class="name">&#x27;post.copyright.license_title&#x27;</span>) + __(<span class="name">&#x27;symbol.colon&#x27;</span>) &#125;&#125;</span><span class="language-xml"> <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123; <span class="name">__</span>(<span class="name">&#x27;post.copyright.license_content&#x27;</span>, theme.post_copyright.license_url, theme.post_copyright.license) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;post-copyright-license&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    并保留本声明和上方二维码。感谢您的阅读和支持！</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>主要是新增了一些文字描述。</p>
<p>设置后的效果：</p>
<p><a href="https://blog-1254259578.cos.ap-shanghai.myqcloud.com/picgo/20180906142650.png"><img src="/posts/594975625/20180906142650.png" alt="设置后的效果"></a></p>
<h3 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a><a href="https://www.jianshu.com/p/505f84b06deb">添加评论系统</a></h3><p>leancloud网站：</p>
<ol>
<li>创建个应用，名字随便起个，如：blog</li>
<li>存储–结构化数据–创建 Class：名字 Counter</li>
<li>设置–应用 Keys–这里面的 AppID 和 AppKey 要复制出来用</li>
<li>设置–安全中心：Web 安全域名填入<code>https://shenbh.top</code>（coding 那也强制成 https）</li>
</ol>
<p>打开 <code>next/config.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine.</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># more info please open https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span>  <span class="string">填上leancloud</span> <span class="string">上复制的</span> <span class="string">AppID</span> <span class="comment"># your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span>  <span class="string">填上leancloud</span> <span class="string">上复制的</span> <span class="string">AppKey</span> <span class="comment"># your leancloud application appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br></pre></td></tr></table></figure>





<h3 id="添加leancloud统计"><a href="#添加leancloud统计" class="headerlink" title="添加leancloud统计"></a><a href="https://www.jianshu.com/p/702a7aec4d00">添加leancloud统计</a></h3><p><code>Next /config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#值改成 true，打开 leancloud 统计</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">填上leancloud</span> <span class="string">上复制的</span> <span class="string">AppID</span> <span class="comment">#&lt;app_id&gt;</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="string">填上leancloud</span> <span class="string">上复制的</span> <span class="string">AppKey</span> <span class="comment">#&lt;app_key&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="鼠标点击有心"><a href="#鼠标点击有心" class="headerlink" title="鼠标点击有心"></a>鼠标点击有心</h3><ol>
<li>添加文件<code>next/source/js/src/clicklove.js</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">! <span class="keyword">function</span>(<span class="params">e, t, a</span>) &#123;</span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">n</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="title function_">c</span>(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>), <span class="title function_">o</span>(), <span class="title function_">r</span>()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">r</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; d.<span class="property">length</span>; e++) d[e].<span class="property">alpha</span> &lt;= <span class="number">0</span> ? (t.<span class="property">body</span>.<span class="title function_">removeChild</span>(d[e].<span class="property">el</span>), d.<span class="title function_">splice</span>(e, <span class="number">1</span>)) : (d[e].<span class="property">y</span>--, d[e].<span class="property">scale</span> += <span class="number">.004</span>, d[e].<span class="property">alpha</span> -= <span class="number">.013</span>, d[e].<span class="property">el</span>.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&quot;left:&quot;</span> + d[e].<span class="property">x</span> + <span class="string">&quot;px;top:&quot;</span> + d[e].<span class="property">y</span> + <span class="string">&quot;px;opacity:&quot;</span> + d[e].<span class="property">alpha</span> + <span class="string">&quot;;transform:scale(&quot;</span> + d[e].<span class="property">scale</span> + <span class="string">&quot;,&quot;</span> + d[e].<span class="property">scale</span> + <span class="string">&quot;) rotate(45deg);background:&quot;</span> + d[e].<span class="property">color</span> + <span class="string">&quot;;z-index:99999&quot;</span>);</span><br><span class="line">		<span class="title function_">requestAnimationFrame</span>(r)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> t = <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> e.<span class="property">onclick</span> &amp;&amp; e.<span class="property">onclick</span>;</span><br><span class="line">		e.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">			t &amp;&amp; <span class="title function_">t</span>(), <span class="title function_">i</span>(e)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">i</span>(<span class="params">e</span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> a = t.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">		a.<span class="property">className</span> = <span class="string">&quot;heart&quot;</span>, d.<span class="title function_">push</span>(&#123;</span><br><span class="line">			<span class="attr">el</span>: a,</span><br><span class="line">			<span class="attr">x</span>: e.<span class="property">clientX</span> - <span class="number">5</span>,</span><br><span class="line">			<span class="attr">y</span>: e.<span class="property">clientY</span> - <span class="number">5</span>,</span><br><span class="line">			<span class="attr">scale</span>: <span class="number">1</span>,</span><br><span class="line">			<span class="attr">alpha</span>: <span class="number">1</span>,</span><br><span class="line">			<span class="attr">color</span>: <span class="title function_">s</span>()</span><br><span class="line">		&#125;), t.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">c</span>(<span class="params">e</span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> a = t.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">		a.<span class="property">type</span> = <span class="string">&quot;text/css&quot;</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			a.<span class="title function_">appendChild</span>(t.<span class="title function_">createTextNode</span>(e))</span><br><span class="line">		&#125; <span class="keyword">catch</span> (t) &#123;</span><br><span class="line">			a.<span class="property">styleSheet</span>.<span class="property">cssText</span> = e</span><br><span class="line">		&#125;</span><br><span class="line">		t.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(a)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">s</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;rgb(&quot;</span> + ~~(<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) + <span class="string">&quot;)&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> d = [];</span><br><span class="line">	e.<span class="property">requestAnimationFrame</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> e.<span class="property">requestAnimationFrame</span> || e.<span class="property">webkitRequestAnimationFrame</span> || e.<span class="property">mozRequestAnimationFrame</span> || e.<span class="property">oRequestAnimationFrame</span> || e.<span class="property">msRequestAnimationFrame</span> || <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">			<span class="built_in">setTimeout</span>(e, <span class="number">1e3</span> / <span class="number">60</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;(), <span class="title function_">n</span>()</span><br><span class="line">&#125;(<span class="variable language_">window</span>, <span class="variable language_">document</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>next/layout/_layout.swing</code>在<code>&lt;/html&gt;</code>后添加如下</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/clicklove.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><a href="https://github.com/HunterXuan/hexo-simple-mindmap">思维导图插件的代码仓库</a></p>
<p>使用：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-simple-mindmap</span><br></pre></td></tr></table></figure>
<p>范例：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% pullquote mindmap mindmap-md %&#125;</span><br><span class="line">- [Hexo 的思维导图插件](https://hunterx.xyz/hexo-simple-mindmap-plugin-intro.html)</span><br><span class="line">  - 前言</span><br><span class="line">  - 使用方法</span><br><span class="line">    - 一</span><br><span class="line">    - 二</span><br><span class="line">    - 三</span><br><span class="line">  - 太长不看</span><br><span class="line">  - 参考资料</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/594975625/981009fdly1gj6ckn47mqj21hc0o3mza.jpg" alt="思维导图的样板图.jpg"></p>
<blockquote>
<p>上面的在windows上试了不起效</p>
</blockquote>
<h3 id="添加记录访问ip"><a href="#添加记录访问ip" class="headerlink" title="添加记录访问ip"></a><a href="https://cloud.tencent.com/developer/article/1585686">添加记录访问ip</a></h3><h3 id="多级分类"><a href="#多级分类" class="headerlink" title="多级分类"></a><a href="https://www.cnblogs.com/seayxu/archive/2016/01/25/5156669.html">多级分类</a></h3><h3 id="让网站可被百度搜索"><a href="#让网站可被百度搜索" class="headerlink" title="让网站可被百度搜索"></a><a href="https://www.jianshu.com/p/4f9fc8aafe15">让网站可被百度搜索</a></h3><h3 id="修改文章永久链接为随机编号"><a href="#修改文章永久链接为随机编号" class="headerlink" title="修改文章永久链接为随机编号"></a><a href="https://blog.csdn.net/mculover666/article/details/101525678">修改文章永久链接为随机编号</a></h3><ol>
<li><p>安装abbrlink插件</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑站点配置文件</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta">#permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="meta">#permalink_defaults:</span></span><br><span class="line"><span class="symbol">permalink:</span> posts/:abbrlink/</span><br><span class="line"><span class="symbol">abbrlink:</span></span><br><span class="line"><span class="symbol">  alg:</span> crc32 <span class="meta">#support crc16(default) and crc32</span></span><br><span class="line"><span class="symbol">  rep:</span> dec   <span class="meta">#support dec(default) and hex</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重新生成部署</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">hexo cl <span class="meta">&amp;&amp; hexo g</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="升级-Hexo-和-NexT-主题"><a href="#升级-Hexo-和-NexT-主题" class="headerlink" title="升级 Hexo 和 NexT 主题"></a>升级 Hexo 和 NexT 主题</h3><p>查看hexo版本</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">hexo <span class="built_in">version</span></span><br></pre></td></tr></table></figure>

<p>升级hexo版本</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> upgrade</span><br></pre></td></tr></table></figure>

<p>升级next主题（目前最新版本7.8）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd themes/<span class="keyword">next</span></span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<p>更改配置：</p>
<ol>
<li><p>更改站点配置文件的themes为刚刚的next</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:<span class="comment">//hexo.io/plugins/</span></span><br><span class="line">## Themes: https:<span class="comment">//hexo.io/themes/</span></span><br><span class="line"># git clone https:<span class="comment">//github.com/theme-next/hexo-theme-next themes/next</span></span><br><span class="line">theme: next</span><br><span class="line"># theme: next<span class="number">-5.1</span><span class="number">.4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>站点的language更改成<code>language:zh-CN</code>（原来的是 <code>themes\next\language\zh-Hans.yml</code>文件，现在是<code>zh-CN.yml</code>文件）</p>
</li>
<li><p>首页内容全部展示出来，没有“查看更多”按钮</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-excerpt <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>在站点配置文件添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">excerpt:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="number">5</span>  </span><br><span class="line">  <span class="attr">excerpt_excludes:</span> []</span><br><span class="line">  <span class="attr">more_excludes:</span> []</span><br><span class="line">  <span class="attr">hideWholePostExcerpts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>主题配置文件设置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>下载本地搜索插件</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置字数统计和预计阅读时间</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-<span class="built_in">count</span>-<span class="built_in">time</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>站点配置文件添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>			 <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span>			 <span class="comment"># 文章阅读时长</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span>	 <span class="comment"># 站点总字数统计</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span>		 <span class="comment"># 站点总阅读时长</span></span><br></pre></td></tr></table></figure>

<p>主题配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="设置首页显示摘要和阅读原文按钮"><a href="#设置首页显示摘要和阅读原文按钮" class="headerlink" title="设置首页显示摘要和阅读原文按钮"></a>设置首页显示摘要和阅读原文按钮</h3><p><code>next/_config.yml</code>中</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>



<h3 id="指定文章加密"><a href="#指定文章加密" class="headerlink" title="指定文章加密"></a><a href="https://sijie.wang/posts/hexo-encrypt/">指定文章加密</a></h3><ul>
<li>指定文章的tags中添加<code>private</code>会加密</li>
<li>指定文章（与tags同级）添加<code>hide: true</code>，首页、分类页、归档页会隐藏此文章</li>
</ul>
<ol>
<li>安装插件</li>
</ol>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> crypto-js</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>站点配置文件中添加</li>
</ol>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">encrypt:</span> <span class="meta"># blog-encrypt</span></span><br><span class="line"><span class="symbol">  password:</span> somepassword</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>主题目录下<code>scripts</code>文件夹下，新建<code>encrypt.js</code>文件，内容</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CryptoJS = require(<span class="string">&#x27;crypto-js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, (<span class="keyword">data</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 如果没有设置密钥则跳过</span></span><br><span class="line">    <span class="keyword">if</span> (!hexo.config.encrypt || !hexo.config.encrypt.password || !<span class="keyword">data</span>.tags) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 跳过没有包含private这个tag的文章</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">data</span>.tags.map(tag =&gt; tag.name).find(tag =&gt; tag === <span class="string">&#x27;private&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">data</span>.origin = <span class="keyword">data</span>.content;</span><br><span class="line">    <span class="keyword">data</span>.encrypt = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">const</span> password = hexo.config.encrypt.password;</span><br><span class="line">    <span class="keyword">const</span> ciphertext = CryptoJS.AES.encrypt(<span class="keyword">data</span>.content, password).toString();</span><br><span class="line">    <span class="comment">// 替换content为加密后的内容，同时为了方便前端识别，包裹一个特殊的div</span></span><br><span class="line">    <span class="keyword">data</span>.content = `&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">encrypted</span>&quot;&gt;$</span>&#123;ciphertext&#125;&lt;/div&gt;`;</span><br><span class="line">    <span class="comment">// 标题加密</span></span><br><span class="line">    <span class="keyword">data</span>.title = CryptoJS.AES.encrypt(<span class="keyword">data</span>.title, password).toString();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">data</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><a href="https://blog.garryde.com/archives/37712.html">首页、分类页、归档页隐藏指定文章</a></li>
</ol>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-hide-posts <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>在站点目录下的<code>_config.yml</code>中如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-hide-posts</span></span><br><span class="line"><span class="attr">hide_posts:</span></span><br><span class="line">  <span class="comment"># 可以改成其他你喜欢的名字</span></span><br><span class="line">  <span class="attr">filter:</span> <span class="string">hide</span></span><br><span class="line">  <span class="comment"># 指定你想要传递隐藏文章的位置，比如让所有隐藏文章在存档页面可见</span></span><br><span class="line">  <span class="comment"># 常见的位置有：index, tag, category, archive, sitemap, feed, etc.</span></span><br><span class="line">  <span class="comment"># 留空则默认全部隐藏</span></span><br><span class="line">  <span class="attr">public_generators:</span> []</span><br><span class="line">  <span class="comment"># 为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录</span></span><br><span class="line">  <span class="attr">noindex:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>要隐藏的文章的头部添加<code>hide:true</code></p>
<p>如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">个人博客相关笔记</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">其他</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">个人博客</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-12-25 09:54:00</span></span><br><span class="line"><span class="attr">hide:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>列出隐藏的文章（cmd窗口中输入以下内容）</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">hidden</span>:list</span><br></pre></td></tr></table></figure>



<h3 id="让文章能置顶"><a href="#让文章能置顶" class="headerlink" title="让文章能置顶"></a><a href="https://juejin.cn/post/6844904037465194503">让文章能置顶</a></h3><ol>
<li><p>安装插件</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-<span class="built_in">index</span> --<span class="keyword">save</span></span><br><span class="line">npm install hexo-generator-<span class="built_in">index</span>-pin-top --<span class="keyword">save</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对应的文章的开头加入<code>top: true</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span> <span class="string">Next主题设置文章置顶</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-01-03 17:26:01</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">Next主题</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置置顶标志</p>
<p>打开**<code>\themes\next\layout\_macro\post.swig</code>**</p>
<p>找到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>下面插入一下代码：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> post.top %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-thumb-tack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;RED&quot;</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="更改页面宽度"><a href="#更改页面宽度" class="headerlink" title="更改页面宽度"></a><a href="https://www.jianshu.com/p/0bd738367566">更改页面宽度</a></h3><p>列出Pisces Scheme的修改方式</p>
<p>打开<code>/Hexo/themes/hexo-theme-next/source/css/_variables/custom.styl</code> 添加两行代码即可</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">$main</span>-desktop = 1450px </span></span><br><span class="line"><span class="meta"><span class="keyword">$content</span>-desktop = 1200px</span></span><br></pre></td></tr></table></figure>





<h3 id="渲染跳过"><a href="#渲染跳过" class="headerlink" title="渲染跳过"></a><a href="http://luckyzmj.cn/posts/17fd92ae.html">渲染跳过</a></h3><p>方法一：在顶部模块内添加<code>layout: false</code></p>
<p>方法二：站点配置文件<code>_config.yml</code>中，找到<code>skip_render</code>，做如下修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;tools/*&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;tools/**&#x27;</span></span><br></pre></td></tr></table></figure>

<p>最后执行<code>hexo clean</code>和<code>hexo s -g </code>本地预览，检查无误后<code>hexo g -d</code>部署到服务器上即可。</p>
<h2 id="picgo-gitee-做图床"><a href="#picgo-gitee-做图床" class="headerlink" title="picgo+gitee 做图床"></a><a href="https://blog.csdn.net/qq_37149252/article/details/108441219">picgo+gitee 做图床</a></h2><p><img src="/posts/594975625/picgo.png" alt="image-20210314090601339"></p>
<p><img src="/posts/594975625/PicGo%E9%85%8D%E7%BD%AE.png" alt="其他/PicGo配置"></p>
<p>![工具&#x2F;设置 typora](.&#x2F;知识-个人博客&#x2F;设置 typora.png)</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul>
<li>所有文章都在 source&#x2F;_posts 下</li>
<li><code>hexo g</code> 生成的 （在public目录下） 静态页面可以拷贝出来放到自己服务器展示</li>
<li>首页显示文章列表(带部分内容预览)的做法：<ul>
<li>方法一：在文章需要“截断”的位置加上<code>&lt;!-- more --&gt;</code></li>
<li>方法二：在主题 themes&#x2F;next下的_config.yml 最后一行加上  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-<span class="comment"># Automatically excerpt (Not recommend).</span></span><br><span class="line">-<span class="comment"># Use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class="line">-<span class="comment"># 从NexT 7.6.0开始，NexT取消了首页预览设置，得用 &lt;!-- more --&gt;	auto_excerpt:</span></span><br><span class="line">	<span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment">##打开文章折叠开关</span></span><br><span class="line">	length: 150 <span class="comment">##指定预览内容长度</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>文章头部可以指定本文所属的分类(categories)、标签(tags)</li>
</ul>
<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><h3 id="git-git-coding-net-Permission-denied-publickey"><a href="#git-git-coding-net-Permission-denied-publickey" class="headerlink" title="git@git.coding.net: Permission denied (publickey)"></a><code>git@git.coding.net: Permission denied (publickey)</code></h3><p>问题：hexo d发布时报上面的错误，打开coding的个人设置–SSH公钥：新增，提示已经存在（但实际没有公钥）</p>
<p>解决：打开blog仓库，代码仓库–仓库设置–重置代码仓库。再去个人设置中添加SSH公钥，添加成功了。所以应该这样就可以解决问题了。</p>
<p>参考链接：<a href="https://blog.csdn.net/qq_36667170/article/details/100894172">https://blog.csdn.net/qq_36667170/article/details/100894172</a></p>
<h3 id="menu图标显示成问号"><a href="#menu图标显示成问号" class="headerlink" title="menu图标显示成问号"></a>menu图标显示成问号</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line"><span class="symbol">  about:</span> <span class="keyword">/about/</span> || user</span><br><span class="line"><span class="symbol">  tags:</span> /tags || tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="keyword">/categories/</span> || th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="keyword">/archives/</span> || archive</span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"><span class="symbol">  commonweal:</span> /<span class="number">404</span>/ || heartbeat</span><br><span class="line"></span><br><span class="line"><span class="meta"># Enable/Disable menu icons.</span></span><br><span class="line"><span class="symbol">menu_icons:</span></span><br><span class="line"><span class="symbol">  enable:</span> true</span><br><span class="line">  <span class="meta">#KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span></span><br><span class="line"><span class="symbol">  home:</span> home</span><br><span class="line"><span class="symbol">  about:</span> user</span><br><span class="line"><span class="symbol">  categories:</span> th</span><br><span class="line"><span class="symbol">  schedule:</span> calendar</span><br><span class="line"><span class="symbol">  tags:</span> tags</span><br><span class="line"><span class="symbol">  archives:</span> archive</span><br><span class="line"><span class="symbol">  sitemap:</span> sitemap</span><br><span class="line"><span class="symbol">  commonweal:</span> heartbeat</span><br></pre></td></tr></table></figure>

<p>上面的menu的每项后要加 ||别名（对应底下的menu_icons内的名称）</p>
<h3 id="menu点击后跳转，报”Cannot-GET-x2F-20-x2F-“"><a href="#menu点击后跳转，报”Cannot-GET-x2F-20-x2F-“" class="headerlink" title="menu点击后跳转，报”Cannot GET &#x2F;%20&#x2F;“"></a>menu点击后跳转，报”Cannot GET &#x2F;%20&#x2F;“</h3><ol>
<li>安装对应的插件</li>
</ol>
<p>Hexo在生成静态页的时候，需要使用对应的插件：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">hexo-generator-index <span class="comment">#生成首页</span></span><br><span class="line">hexo-generator-archive <span class="comment">#生成归档页</span></span><br><span class="line">hexo-generator-<span class="keyword">tag</span> <span class="title">#生成标签页</span></span><br><span class="line"><span class="title">hex0-generator-category</span> <span class="comment">#生成分类页</span></span><br></pre></td></tr></table></figure>

<p>对应安装命令:</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-<span class="built_in">index</span> --<span class="keyword">save</span></span><br><span class="line">npm install hexo-generator-archive --<span class="keyword">save</span></span><br><span class="line">npm install hexo-generator-tag --<span class="keyword">save</span></span><br><span class="line">npm install hexo-generator-category --<span class="keyword">save</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>next&#x2F;_config.yml中menu下的||前后多了空格，去掉空格即可</li>
</ol>
<p>如:</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> /||home</span><br><span class="line"><span class="symbol">  about:</span> <span class="keyword">/about/</span>||user</span><br><span class="line"><span class="symbol">  tags:</span> /tags||tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="keyword">/categories/</span>||th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="keyword">/archives/</span>||archive</span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"><span class="symbol">  commonweal:</span> /<span class="number">404</span>/||heartbeat</span><br></pre></td></tr></table></figure>



<h3 id="Cannot-GET-x2F-archives-x2F-7C-7Carchive"><a href="#Cannot-GET-x2F-archives-x2F-7C-7Carchive" class="headerlink" title="Cannot GET &#x2F;archives&#x2F;%7C%7Carchive"></a>Cannot GET &#x2F;archives&#x2F;%7C%7Carchive</h3><p>打开<code>next/layout/_macro/sidebar.swig</code></p>
<p>找到<code>&lt;a href=&quot;&#123;&#123; url_for(theme.menu.archives).split('||')[0] | trim &#125;&#125;&quot;&gt;</code></p>
<p>更改成<code>&lt;a href=&quot;&#123;&#123; url_for(theme.menu.archives.split('||')[0] | trim) &#125;&#125;&quot;&gt;</code></p>
<h3 id="点首页等的时候链接自动带上了-20"><a href="#点首页等的时候链接自动带上了-20" class="headerlink" title="点首页等的时候链接自动带上了%20"></a>点首页等的时候链接自动带上了<code>%20</code></h3><p>解决：主题的<code>_config.yml</code>的menu中的斜杠后的空格要去掉。如<code>home: / || home</code>改成<code>home: /|| home</code></p>
<h3 id="分页按钮（向左向右箭头显示异常的问题）"><a href="#分页按钮（向左向右箭头显示异常的问题）" class="headerlink" title="分页按钮（向左向右箭头显示异常的问题）"></a><a href="https://blog.csdn.net/qq_36852780/article/details/104897491">分页按钮（向左向右箭头显示异常的问题）</a></h3><p>修改代码的位置: <code>themes\next\layout\_partials\pagination.swig</code></p>
<p>原来为:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if page.prev or page.next %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;</span><br><span class="line">      paginator(&#123;</span><br><span class="line">        prev_text: &#x27;<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-angle-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#x27;,</span><br><span class="line">        next_text: &#x27;<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-angle-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#x27;,</span><br><span class="line">        mid_size: 1</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>修改为:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if page.prev or page.next %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;</span><br><span class="line">      paginator(&#123;</span><br><span class="line">        prev_text: &#x27;&lt;&#x27;,</span><br><span class="line">        next_text: &#x27;&gt;&#x27;,</span><br><span class="line">        mid_size: 1</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>



<h3 id="busuanzi-count只显示图标不显示具体值"><a href="#busuanzi-count只显示图标不显示具体值" class="headerlink" title="busuanzi_count只显示图标不显示具体值"></a>busuanzi_count只显示图标不显示具体值</h3><p>hexo-theme-next主题中使用了dn-lbstatics.qbox.me域名的文件位置为：<br><code>themes\next\layout\_third-party\analytics\busuanzi-counter.swig</code></p>
<p>修改busuanzi-counter.swig</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">找到如下代码：</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">修改为：</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="hexo-s或hexo-d-后在网页上无法正常显示"><a href="#hexo-s或hexo-d-后在网页上无法正常显示" class="headerlink" title="hexo s或hexo d 后在网页上无法正常显示"></a><a href="https://blog.csdn.net/qq_39898645/article/details/109181736"><code>hexo s</code>或<code>hexo d</code> 后在网页上无法正常显示</a></h3><p>问题：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">网页上显示：</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> &#x27;_layout.swig&#x27; %&#125;</span><span class="language-xml">...</span></span><br></pre></td></tr></table></figure>

<p>解决：<code>hexo</code>在5.0之后需要再安装个东西</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i hexo-renderer-swig</span><br></pre></td></tr></table></figure>



<h3 id="hexo-d部署的时候提示权限不足-Please-make-sure-you-have-the-correct-access-rights。。。"><a href="#hexo-d部署的时候提示权限不足-Please-make-sure-you-have-the-correct-access-rights。。。" class="headerlink" title="hexo d部署的时候提示权限不足 Please make sure you have the correct access rights。。。"></a><code>hexo d</code>部署的时候提示权限不足 <code>Please make sure you have the correct access rights。。。</code></h3><p>解决：打开coding.net（部署的仓库），找到项目，找到部署公钥，添加公钥（把本地 <code>id_rsa.pub</code> 的内容添加到网站上）</p>
<h3 id="ERROR-Cannot-find-module-‘hexo’-from-‘D-blog-source’"><a href="#ERROR-Cannot-find-module-‘hexo’-from-‘D-blog-source’" class="headerlink" title="ERROR Cannot find module ‘hexo’ from ‘D:\blog_source’"></a><a href="https://blog.csdn.net/qq_37633935/article/details/109540786">ERROR Cannot find module ‘hexo’ from ‘D:\blog_source’</a></h3><p>问题：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"><span class="keyword">ERROR </span>Cannot find module ‘hexo’ from ‘D:\blog_source’</span><br><span class="line"><span class="keyword">ERROR </span>Local hexo loading failed in D:\blog_source</span><br><span class="line"><span class="keyword">ERROR </span>Try running: ‘rm -rf node_modules &amp;&amp; npm install --force’</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<p>切换到blog_source目录，重新安装</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo -g <span class="comment">#安装</span></span><br></pre></td></tr></table></figure>



<h3 id="部署到github上后访问不了"><a href="#部署到github上后访问不了" class="headerlink" title="部署到github上后访问不了"></a>部署到github上后访问不了</h3><p>问题：访问 <a href="https://shenbh.github.io/">https://shenbh.github.io</a> 拒绝了我们的连接请求</p>
<p>解决：<a href="https://blog.csdn.net/qq_32627137/article/details/108046461">访问git个人博客时报“拒绝了我们的连接请求”</a></p>
<ol>
<li><p><a href="http://tool.chinaz.com/dns">查询git博客地址的ip</a>，输入“shenbh.github.io”，搜到的结果为：</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">185.199.110.153</span> <span class="string">[美国 GitHub+Fastly节点]</span></span><br><span class="line"><span class="number">185.199.109.153</span> <span class="string">[美国 GitHub+Fastly节点]</span></span><br><span class="line"><span class="number">185.199.108.153</span> <span class="string">[美国 GitHub+Fastly节点]</span></span><br><span class="line"><span class="number">185.199.111.153</span> <span class="string">[美国 GitHub+Fastly节点]</span></span><br><span class="line"></span><br><span class="line"><span class="number">185.199.111.153</span> <span class="string">[美国 GitHub+Fastly节点]</span></span><br><span class="line"><span class="number">185.199.109.153</span> <span class="string">[美国 GitHub+Fastly节点]</span></span><br><span class="line"><span class="number">185.199.108.153</span> <span class="string">[美国 GitHub+Fastly节点]</span></span><br><span class="line"><span class="number">185.199.110.153</span> <span class="string">[美国 GitHub+Fastly节点]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>把上述内容更改成以下内容，贴到hosts文件中（“C:\Windows\System32\drivers\etc\hosts”）</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">#github.io</span><br><span class="line"><span class="number">185.199.111.153</span> shenbh.github.io</span><br><span class="line"><span class="number">185.199.110.153</span> shenbh.github.io</span><br><span class="line"><span class="number">185.199.109.153</span> shenbh.github.io</span><br><span class="line"><span class="number">185.199.108.153</span> shenbh.github.io</span><br><span class="line"><span class="number">185.199.108.153</span> shenbh.github.io</span><br><span class="line"><span class="number">185.199.111.153</span> shenbh.github.io</span><br><span class="line"><span class="number">185.199.109.153</span> shenbh.github.io</span><br><span class="line"><span class="number">185.199.110.153</span> shenbh.github.io</span><br></pre></td></tr></table></figure></li>
</ol>
<p>在dos窗口输入<code>ipconfig /flushdns</code>来刷新dns解析缓存</p>
<p>最终hosts内容</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"># For example:</span><br><span class="line"><span class="number">127.0.0.1</span> localhost</span><br><span class="line"></span><br><span class="line">#github.io</span><br><span class="line"><span class="number">185.199.111.153</span> shenbh.github.io</span><br><span class="line"><span class="number">185.199.110.153</span> shenbh.github.io</span><br><span class="line"><span class="number">185.199.109.153</span> shenbh.github.io</span><br><span class="line"><span class="number">185.199.108.153</span> shenbh.github.io</span><br><span class="line"><span class="number">185.199.108.153</span> shenbh.github.io</span><br><span class="line"><span class="number">185.199.111.153</span> shenbh.github.io</span><br><span class="line"><span class="number">185.199.109.153</span> shenbh.github.io</span><br><span class="line"><span class="number">185.199.110.153</span> shenbh.github.io</span><br><span class="line"><span class="number">13.229.188.59</span> shenbh.github.io</span><br><span class="line"><span class="number">52.69.186.44</span> shenbh.github.io</span><br></pre></td></tr></table></figure>

<h3 id="Error-Cannot-find-module-39-db-json-39"><a href="#Error-Cannot-find-module-39-db-json-39" class="headerlink" title="Error: Cannot find module &#39;./db.json&#39;"></a><a href="https://github.com/hexojs/hexo/issues/1720"><code>Error: Cannot find module &#39;./db.json&#39;</code></a></h3><p>解决：把node-modules删除之后重装</p>
<h3 id="首页最底部的向右箭头显示成-lt-i-class-quot-fa-fa-angle-right-quot-gt-lt-i-gt"><a href="#首页最底部的向右箭头显示成-lt-i-class-quot-fa-fa-angle-right-quot-gt-lt-i-gt" class="headerlink" title="首页最底部的向右箭头显示成&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt;"></a>首页最底部的向右箭头显示成<code>&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt;</code></h3><p>打开<code>next &gt; layout &gt; _partials &gt; pagination.swig</code>把错误代码改成“上一页”、“下一页”即可</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">&#123;% if page.prev or page.next %&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;&#123;</span></span><br><span class="line"><span class="template-variable">      <span class="name">paginator</span>(&#123;</span></span><br><span class="line"><span class="template-variable">        <span class="name">prev_text:</span> <span class="string">&#x27;上一页&#x27;</span>,</span></span><br><span class="line"><span class="template-variable">        next_text: <span class="string">&#x27;下一页&#x27;</span>,</span></span><br><span class="line"><span class="template-variable">        mid_size: <span class="number">1</span></span></span><br><span class="line"><span class="template-variable">      &#125;)</span></span><br><span class="line"><span class="template-variable">    &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Unable-to-call-symbolsCount-which-is-undefined-or-falsey"><a href="#Unable-to-call-symbolsCount-which-is-undefined-or-falsey" class="headerlink" title="Unable to call symbolsCount, which is undefined or falsey"></a><code>Unable to call </code>symbolsCount<code>, which is undefined or falsey</code></h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-<span class="built_in">count</span>-<span class="built_in">time</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<h3 id="新版next主题没有了auto-excerpt"><a href="#新版next主题没有了auto-excerpt" class="headerlink" title="新版next主题没有了auto excerpt"></a>新版next主题没有了<code>auto excerpt</code></h3><ol>
<li>在网站根目录下运行</li>
</ol>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-excerpt <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在站点配置文件里添加</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">excerpt:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="number">5</span>  </span><br><span class="line">  <span class="attr">excerpt_excludes:</span> []</span><br><span class="line">  <span class="attr">more_excludes:</span> []</span><br><span class="line">  <span class="attr">hideWholePostExcerpts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>主题配置文件里设置</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h3 id="在某个文章上，再点搜索到的结果，出现的新链接带俩posts的问题"><a href="#在某个文章上，再点搜索到的结果，出现的新链接带俩posts的问题" class="headerlink" title="在某个文章上，再点搜索到的结果，出现的新链接带俩posts的问题"></a>在某个文章上，再点搜索到的结果，出现的新链接带俩posts的问题</h3><p><code>npm list --depth=0</code></p>
<p>查看到是安装的 <code>hexo-generator-search@2.4.2</code></p>
<p>解决：</p>
<ol>
<li>卸载这个search插件：<code>npm uninstall hexo-generator-search</code></li>
<li>安装另一个search插件：<code>npm install hexo-generator-searchdb --save</code></li>
</ol>
<blockquote>
<p>PS：记得<code>next</code>的 <code>_config.yml</code>中打开<code>local search</code>的开关</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="加载本地图片不正常"><a href="#加载本地图片不正常" class="headerlink" title="加载本地图片不正常"></a><a href="https://blog.csdn.net/xjm850552586/article/details/84101345">加载本地图片不正常</a></h3><p>安装插件 <code>npm install hexo-asset-image --save</code>之后图片还显示不出来，打开<code>/node_modules/hexo-asset-image/index.js</code>替换成如下内容：</p>
<blockquote>
<p>之后本地与文章在同一目录下，且图片的文件夹名称是文章的名称</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPosition</span>(<span class="params">str, m, i</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">split</span>(m, i).<span class="title function_">join</span>(m).<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="title class_">String</span>(hexo.<span class="property">version</span>).<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.<span class="property">config</span>;</span><br><span class="line">  <span class="keyword">if</span>(config.<span class="property">post_asset_folder</span>)&#123;</span><br><span class="line">    	<span class="keyword">var</span> link = data.<span class="property">permalink</span>;</span><br><span class="line">	<span class="keyword">if</span>(version.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; <span class="title class_">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">	   <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">	<span class="keyword">var</span> endPos = link.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.<span class="title function_">substring</span>(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.<span class="property">length</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.<span class="title function_">load</span>(data[key], &#123;</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> ($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">			<span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">			<span class="keyword">var</span> src = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">			<span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.<span class="title function_">test</span>(src) &amp;&amp;</span><br><span class="line">			   !<span class="regexp">/^\s*\//</span>.<span class="title function_">test</span>(src)) &#123;</span><br><span class="line">			  <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">			  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">			  <span class="keyword">var</span> linkArray = link.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">var</span> srcArray = src.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">if</span>(srcArray.<span class="property">length</span> &gt; <span class="number">1</span>)</span><br><span class="line">				srcArray.<span class="title function_">shift</span>();</span><br><span class="line">			  src = srcArray.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">			  $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br><span class="line">			  <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.<span class="property">root</span> + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">			<span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>($(<span class="variable language_">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.<span class="title function_">html</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后需要重新生成<code>hexo cl &amp;&amp; hexo g </code></p>
<blockquote>
<p>文章中图片的相对路径需要使用.&#x2F;开头，比如 <code>![图片名称](./文件名称/图片名称.png)</code></p>
</blockquote>
<h3 id="Error-Cannot-find-module-‘-package-json’"><a href="#Error-Cannot-find-module-‘-package-json’" class="headerlink" title="Error: Cannot find module ‘....\package.json’"></a><a href="https://github.com/theme-next/hexo-theme-next/issues/298">Error: Cannot find module ‘....\package.json’</a></h3><p>简述：就是重新clone这个next主题下来，然后具体配置自己再改下。。</p>
<h3 id="Deployer-not-found-35mbaidu-url-submitter"><a href="#Deployer-not-found-35mbaidu-url-submitter" class="headerlink" title="Deployer not found: [35mbaidu_url_submitter"></a>Deployer not found: [35mbaidu_url_submitter</h3><p>因为我不用百度推送，所以检查站点配置<code>_config.yml</code>，注释掉<code>type: baidu_url_submitter</code></p>
<h2 id="个人服务器上部署博客"><a href="#个人服务器上部署博客" class="headerlink" title="个人服务器上部署博客"></a>个人服务器上部署博客</h2><p>需要购买ECS服务器，<a href="https://www.aliyun.com/minisite/goods?userCode=avhjl9bq">点击领取优惠券</a></p>
<p><a href="https://juejin.im/post/5bcdcbc551882577e512085a">原文链接</a></p>
<h1 id="用docsify创建博客"><a href="#用docsify创建博客" class="headerlink" title="用docsify创建博客"></a><a href="https://juejin.cn/post/6997382430189420580">用docsify创建博客</a></h1><h2 id="相关教程"><a href="#相关教程" class="headerlink" title="相关教程"></a>相关教程</h2><ul>
<li><a href="https://github.com/docsifyjs/docsify/#showcase">docsify-github地址</a></li>
<li><a href="https://docsify.js.org/#/zh-cn/quickstart">docsify快速开始-官方教程</a></li>
<li><a href="https://www.cnblogs.com/throwable/p/13605289.html">使用开源文档工具docsify，用写博客的姿势写文档</a></li>
<li>教学视频：<ul>
<li><a href="https://www.bilibili.com/video/BV14U4y1x7jH">https://www.bilibili.com/video/BV14U4y1x7jH</a></li>
<li><a href="https://www.bilibili.com/video/BV1kT4y1T7wY">https://www.bilibili.com/video/BV1kT4y1T7wY</a></li>
</ul>
</li>
</ul>
<h2 id="一些资源"><a href="#一些资源" class="headerlink" title="一些资源"></a>一些资源</h2><p>主题：<a href="https://github.com/docsifyjs/awesome-docsify">https://github.com/docsifyjs/awesome-docsify</a></p>
<p>切换国内镜像源</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">npm config set registry https:<span class="comment">//registry.npm.taobao.org/</span></span><br><span class="line"></span><br><span class="line">npm get registry</span><br></pre></td></tr></table></figure>

<p>docsify 官方 <a href="https://github.com/docsifyjs/docsify">源码</a></p>
<p>docsify 官方<a href="https://docsify.js.org/#/">API</a></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ol>
<li><p><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">安装node</a></p>
</li>
<li><p>安装docsify-cli</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm i docsify-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure>
</li>
<li><p>项目初始化</p>
<blockquote>
<p>我这边从git上clone下来了（路径：D:\docsify），包含了初始化后的文件，所以这步跳过</p>
</blockquote>
</li>
<li><p>启动docsify</p>
<p>cmd中cd到<code>D:\docsify</code></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">docsify serve <span class="string">./</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在浏览器中输入 <code>http://localhost:3000/</code> 即可查看</p>
</li>
</ol>
<h1 id="YankNote笔记设置"><a href="#YankNote笔记设置" class="headerlink" title="YankNote笔记设置"></a>YankNote笔记设置</h1><p>图片设置：<img src="/posts/594975625/img-20231227085045.png" alt="Img"></p>
]]></content>
      <categories>
        <category>其他IT</category>
      </categories>
      <tags>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>第三方-ARouter</title>
    <url>/posts/3447597586/</url>
    <content><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="模块开关设置"><a href="#模块开关设置" class="headerlink" title="模块开关设置"></a>模块开关设置</h2><h2 id="模块间通信"><a href="#模块间通信" class="headerlink" title="模块间通信"></a>模块间通信</h2><h2 id="跳转（传基础类型数据）并回调"><a href="#跳转（传基础类型数据）并回调" class="headerlink" title="跳转（传基础类型数据）并回调"></a>跳转（传基础类型数据）并回调</h2><p>需要调用navigation(Activity activity,int RequestCode)方法代替传统的StartActivityForResult方法</p>
<blockquote>
<p>&#x2F;&#x2F;注意其中requestCode必须大于0，否则会执行startActivity，不是执行startActivityForResult</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span>&#123;</span><br><span class="line">    <span class="comment">//ARouter.getInstance().build(&quot;/activity/two&quot;).withInt(&quot;id&quot;,10).navigation();//普通的startActivity</span></span><br><span class="line">    ARouter.getInstance().build(<span class="string">&quot;/activity/two&quot;</span>).withInt(<span class="string">&quot;id&quot;</span>,<span class="number">10</span>).navigation(<span class="built_in">this</span>, <span class="number">1</span>);<span class="comment">//注意这个requestCode必须大于0，否则会执行startActivity，不是执行startActivityForResult</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActivityResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="type">int</span> resultCode, Intent data)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">    <span class="keyword">if</span>(resultCode == RESULT_OK)&#123;</span><br><span class="line">        <span class="keyword">if</span>(data != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">name</span> <span class="operator">=</span> data.getIntExtra(<span class="string">&quot;name&quot;</span>, <span class="number">100</span>);</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, name+<span class="string">&quot;&quot;</span>, Toast.LENTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Route(path = &quot;/activity/two&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;TwoActivity&quot;</span>;</span><br><span class="line">    <span class="meta">@Autowired(name=&quot;id&quot;)</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_two);</span><br><span class="line">        ARouter.getInstance().inject(<span class="built_in">this</span>);</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;=====onCreate: &quot;</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span>&#123;</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">        intent.putExtra(<span class="string">&quot;name&quot;</span>, <span class="number">666</span>);</span><br><span class="line">        setResult(RESULT_OK, intent);</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="传对象"><a href="#传对象" class="headerlink" title="传对象"></a>传对象</h2><h1 id="ARouter的readme"><a href="#ARouter的readme" class="headerlink" title="ARouter的readme"></a><a href="https://github.com/alibaba/ARouter">ARouter的readme</a></h1><p><a href="https://github.com/alibaba/ARouter/blob/develop/demo/arouter-demo.apk">Demo apk下载</a>、<a href="https://raw.githubusercontent.com/alibaba/ARouter/master/demo/arouter-demo.gif">Demo Gif</a></p>
<p><strong>功能介绍</strong></p>
<ol>
<li>支持直接解析标准URL进行跳转，并自动注入参数到目标页面中</li>
<li>支持多模块工程使用</li>
<li>支持添加多个拦截器，自定义拦截顺序</li>
<li>支持<strong>依赖注入</strong>，可单独作为依赖注入框架使用</li>
<li>支持InstantRun</li>
<li>支持MultiDex(Google方案)</li>
<li>映射关系按组分类、多级管理，按需初始化</li>
<li>支持用户指定全局降级与局部降级策略</li>
<li>页面、拦截器、服务等组件均<strong>自动注册</strong>到框架</li>
<li>支持多种方式配置转场动画</li>
<li>支持获取Fragment</li>
<li>完全支持Kotlin以及混编(配置见文末 其他#5)</li>
<li>支持第三方 App 加固(使用 arouter-register 实现自动注册)</li>
<li>支持生成<strong>路由文档</strong></li>
<li>提供 IDE 插件便捷的关联路径和目标类</li>
</ol>
<p><strong>典型应用</strong></p>
<ol>
<li>从外部URL映射到内部页面，以及参数传递与解析</li>
<li>跨模块页面跳转，模块间解耦</li>
<li>拦截跳转过程，处理登陆、埋点等逻辑</li>
<li>跨模块API调用，通过控制反转来做组件解耦</li>
</ol>
<h2 id="ARouter基本用法"><a href="#ARouter基本用法" class="headerlink" title="ARouter基本用法"></a>ARouter基本用法</h2><ol>
<li><p>添加依赖和配置</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                arguments = [<span class="attr">AROUTER_MODULE_NAME:</span> project.getName()]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// 替换成最新版本, 需要注意的是api</span></span><br><span class="line">    <span class="comment">// 要与compiler匹配使用，均使用最新版可以保证兼容</span></span><br><span class="line">    compile <span class="string">&#x27;com.alibaba:arouter-api:x.x.x&#x27;</span></span><br><span class="line">    annotationProcessor <span class="string">&#x27;com.alibaba:arouter-compiler:x.x.x&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 旧版本gradle插件(&lt; 2.2)，可以使用apt插件，配置方法见文末&#x27;其他#4&#x27;</span></span><br><span class="line"><span class="comment">// Kotlin配置参考文末&#x27;其他#5&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>添加混淆规则（若用了Proguard）</p>
</li>
</ol>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">-keep <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">alibaba</span>.<span class="title">android</span>.<span class="title">arouter</span>.<span class="title">routes</span>.**</span>&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">alibaba</span>.<span class="title">android</span>.<span class="title">arouter</span>.<span class="title">facade</span>.**</span>&#123;*;&#125;</span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> * <span class="keyword"><span class="keyword">implements</span> <span class="type">com</span></span>.<span class="title">alibaba</span>.<span class="title">android</span>.<span class="title">arouter</span>.<span class="title">facade</span>.<span class="title">template</span>.<span class="title">ISyringe</span></span>&#123;*;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 如果使用了 byType 的方式获取 Service，需添加下面规则，保护接口</span></span><br><span class="line">-keep <span class="class"><span class="keyword">interface</span> * <span class="keyword"><span class="keyword">implements</span> <span class="type">com</span></span>.<span class="title">alibaba</span>.<span class="title">android</span>.<span class="title">arouter</span>.<span class="title">facade</span>.<span class="title">template</span>.<span class="title">IProvider</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 如果使用了 单类注入，即不定义接口实现 <span class="title">IProvider</span>，需添加下面规则，保护实现</span></span><br><span class="line"><span class="class"># -<span class="title">keep</span> <span class="title">class</span> * <span class="keyword"><span class="keyword">implements</span> <span class="type">com</span></span>.<span class="title">alibaba</span>.<span class="title">android</span>.<span class="title">arouter</span>.<span class="title">facade</span>.<span class="title">template</span>.<span class="title">IProvider</span></span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>初始化SDK</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (isDebug()) &#123;           <span class="comment">// 这两行必须写在init之前，否则这些配置在init过程中将无效</span></span><br><span class="line">    ARouter.openLog();     <span class="comment">// 打印日志</span></span><br><span class="line">    ARouter.openDebug();   <span class="comment">// 开启调试模式(如果在InstantRun模式下运行，必须开启调试模式！线上版本需要关闭,否则有安全风险)</span></span><br><span class="line">&#125;</span><br><span class="line">ARouter.init(mApplication); <span class="comment">// 尽可能早，推荐在Application中初始化</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>定义目标</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在支持路由的页面上添加注解(必选)</span></span><br><span class="line"><span class="comment">// 这里的路径需要注意的是至少需要有两级，/xx/xx</span></span><br><span class="line"><span class="meta">@Route(path = &quot;/test/activity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourActivity</span> extend Activity &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>发起路由（跳转）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 应用内简单的跳转(通过URL跳转在&#x27;进阶用法&#x27;中)</span></span><br><span class="line">ARouter.getInstance().build(<span class="string">&quot;/test/activity&quot;</span>).navigation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 跳转并携带参数</span></span><br><span class="line">ARouter.getInstance().build(<span class="string">&quot;/test/1&quot;</span>)</span><br><span class="line">            .withLong(<span class="string">&quot;key1&quot;</span>, <span class="number">666L</span>)</span><br><span class="line">            .withString(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;888&quot;</span>)</span><br><span class="line">            .withObject(<span class="string">&quot;key4&quot;</span>, <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Rose&quot;</span>))</span><br><span class="line">            .navigation();</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>使用 Gradle 插件实现路由表的自动加载 (可选)</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.alibaba.arouter&#x27;</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&quot;com.alibaba:arouter-register:?&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可选使用，通过 ARouter 提供的注册插件进行路由表的自动加载(power by AutoRegister)， 默认通过扫描 dex 的方式 进行加载通过 gradle 插件进行自动注册可以缩短初始化时间解决应用加固导致无法直接访问 dex 文件，初始化失败的问题，需要注意的是，该插件必须搭配 api 1.3.0 以上版本使用！</p>
<ol start="7">
<li>使用 IDE 插件导航到目标类 (可选)</li>
</ol>
<p>在 Android Studio 插件市场中搜索 ARouter Helper, 或者直接下载文档上方 最新版本 中列出的 arouter-idea-plugin zip 安装包手动安装，安装后 插件无任何设置，可以在跳转代码的行首找到一个图标 (navigation) 点击该图标，即可跳转到标识了代码中路径的目标类</p>
<h2 id="ARouter进阶用法"><a href="#ARouter进阶用法" class="headerlink" title="ARouter进阶用法"></a>ARouter进阶用法</h2><ol>
<li>通过URL跳转</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建一个Activity用于监听Scheme事件,之后直接把url传递给ARouter即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchemeFilterActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span> getIntent().getData();</span><br><span class="line">        ARouter.getInstance().build(uri).navigation();</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AndroidManifest.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.activity.SchemeFilterActivity&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Scheme --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:host</span>=<span class="string">&quot;m.aliyun.com&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:scheme</span>=<span class="string">&quot;arouter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.VIEW&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.BROWSABLE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>解析参数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为每一个参数声明一个字段，并使用 @Autowired 标注</span></span><br><span class="line"><span class="comment">// URL中不能传递Parcelable类型数据，通过ARouter api可以传递Parcelable对象</span></span><br><span class="line"><span class="meta">@Route(path = &quot;/test/activity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1Activity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过name来映射URL中的不同参数</span></span><br><span class="line">    <span class="meta">@Autowired(name = &quot;girl&quot;)</span> </span><br><span class="line">    <span class="type">boolean</span> boy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持解析自定义对象，URL中使用json传递</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TestObj obj;      </span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 使用 withObject 传递 List 和 Map 的实现了</span></span><br><span class="line">    <span class="comment">// Serializable 接口的实现类(ArrayList/HashMap)</span></span><br><span class="line">    <span class="comment">// 的时候，接收该对象的地方不能标注具体的实现类类型</span></span><br><span class="line">    <span class="comment">// 应仅标注为 List 或 Map，否则会影响序列化中类型</span></span><br><span class="line">    <span class="comment">// 的判断, 其他类似情况需要同样处理        </span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    List&lt;TestObj&gt; list;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Map&lt;String, List&lt;TestObj&gt;&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">//接收参数的一定要加上这一句</span></span><br><span class="line">        ARouter.getInstance().inject(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ARouter会自动对字段进行赋值，无需主动获取</span></span><br><span class="line">        Log.d(<span class="string">&quot;param&quot;</span>, name + age + boy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要传递自定义对象，新建一个类（并非自定义对象类），然后实现 SerializationService,并使用@Route注解标注(方便用户自行选择序列化方式)，例如：</span></span><br><span class="line"><span class="meta">@Route(path = &quot;/yourservicegroupname/json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SerializationService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">json2Object</span><span class="params">(String text, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(text, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">object2Json</span><span class="params">(Object instance)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>声明拦截器(拦截跳转过程，面向切面编程)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比较经典的应用就是在跳转过程中处理登陆事件，这样就不需要在目标页重复做登陆检查</span></span><br><span class="line"><span class="comment">// 拦截器会在跳转之间执行，多个拦截器会按优先级顺序依次执行</span></span><br><span class="line"><span class="meta">@Interceptor(priority = 8, name = &quot;测试用拦截器&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInterceptor</span> <span class="keyword">implements</span> <span class="title class_">IInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(Postcard postcard, InterceptorCallback callback)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    callback.onContinue(postcard);  <span class="comment">// 处理完成，交还控制权</span></span><br><span class="line">    <span class="comment">// callback.onInterrupt(new RuntimeException(&quot;我觉得有点异常&quot;));      // 觉得有问题，中断路由流程</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以上两种至少需要调用其中一种，否则不会继续路由</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">    <span class="comment">// 拦截器的初始化，会在sdk初始化的时候调用该方法，仅会调用一次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>处理跳转结果</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用两个参数的navigation方法，可以获取单次跳转的结果</span></span><br><span class="line">ARouter.getInstance().build(<span class="string">&quot;/test/1&quot;</span>).navigation(<span class="built_in">this</span>, <span class="keyword">new</span> <span class="title class_">NavigationCallback</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFound</span><span class="params">(Postcard postcard)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLost</span><span class="params">(Postcard postcard)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>自定义全局降级策略</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现DegradeService接口，并加上一个Path内容任意的注解即可</span></span><br><span class="line"><span class="meta">@Route(path = &quot;/xxx/xxx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DegradeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DegradeService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLost</span><span class="params">(Context context, Postcard postcard)</span> &#123;</span><br><span class="line">        <span class="comment">// do something.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>为目标页面声明更多信息</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们经常需要在目标页面中配置一些属性，比方说&quot;是否需要登陆&quot;之类的</span></span><br><span class="line"><span class="comment">// 可以通过 Route 注解中的 extras 属性进行扩展，这个属性是一个 int值，换句话说，单个int有4字节，也就是32位，可以配置32个开关</span></span><br><span class="line"><span class="comment">// 剩下的可以自行发挥，通过字节操作可以标识32个开关，通过开关标记目标页面的一些属性，在拦截器中可以拿到这个标记进行业务逻辑判断</span></span><br><span class="line"><span class="meta">@Route(path = &quot;/test/activity&quot;, extras = Consts.XXXX)</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>通过依赖注入解耦:服务管理(一) 暴露服务</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明接口,其他组件通过接口来调用服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloService</span> <span class="keyword">extends</span> <span class="title class_">IProvider</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="meta">@Route(path = &quot;/yourservicegroupname/hello&quot;, name = &quot;测试服务&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello, &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>通过依赖注入解耦:服务管理(二) 发现服务</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(name = &quot;/yourservicegroupname/hello&quot;)</span></span><br><span class="line">    HelloService helloService2;</span><br><span class="line"></span><br><span class="line">    HelloService helloService3;</span><br><span class="line"></span><br><span class="line">    HelloService helloService4;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">    ARouter.getInstance().inject(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. (推荐)使用依赖注入的方式发现服务,通过注解标注字段,即可使用，无需主动获取</span></span><br><span class="line">    <span class="comment">// Autowired注解中标注name之后，将会使用byName的方式注入对应的字段，不设置name属性，会默认使用byType的方式发现服务(当同一接口有多个实现的时候，必须使用byName的方式发现服务)</span></span><br><span class="line">    helloService.sayHello(<span class="string">&quot;Vergil&quot;</span>);</span><br><span class="line">    helloService2.sayHello(<span class="string">&quot;Vergil&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 使用依赖查找的方式发现服务，主动去发现服务并使用，下面两种方式分别是byName和byType</span></span><br><span class="line">    helloService3 = ARouter.getInstance().navigation(HelloService.class);</span><br><span class="line">    helloService4 = (HelloService) ARouter.getInstance().build(<span class="string">&quot;/yourservicegroupname/hello&quot;</span>).navigation();</span><br><span class="line">    helloService3.sayHello(<span class="string">&quot;Vergil&quot;</span>);</span><br><span class="line">    helloService4.sayHello(<span class="string">&quot;Vergil&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>预处理服务</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现 PretreatmentService 接口，并加上一个Path内容任意的注解即可</span></span><br><span class="line"><span class="meta">@Route(path = &quot;/xxx/xxx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PretreatmentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PretreatmentService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onPretreatment</span><span class="params">(Context context, Postcard postcard)</span> &#123;</span><br><span class="line">        <span class="comment">// 跳转前预处理，如果需要自行处理跳转，该方法返回 false 即可</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="更多功能"><a href="#更多功能" class="headerlink" title="更多功能"></a>更多功能</h2><ol>
<li><p>初始化中的其他设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ARouter.openLog(); <span class="comment">// 开启日志</span></span><br><span class="line">ARouter.openDebug(); <span class="comment">// 使用InstantRun的时候，需要打开该开关，上线之后关闭，否则有安全风险</span></span><br><span class="line">ARouter.printStackTrace(); <span class="comment">// 打印日志的时候打印线程堆栈</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>详细的API说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构建标准的路由请求</span></span><br><span class="line">ARouter.getInstance().build(<span class="string">&quot;/home/main&quot;</span>).navigation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建标准的路由请求，并指定分组</span></span><br><span class="line">ARouter.getInstance().build(<span class="string">&quot;/home/main&quot;</span>, <span class="string">&quot;ap&quot;</span>).navigation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建标准的路由请求，通过Uri直接解析</span></span><br><span class="line">Uri uri;</span><br><span class="line">ARouter.getInstance().build(uri).navigation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建标准的路由请求，startActivityForResult</span></span><br><span class="line"><span class="comment">// navigation的第一个参数必须是Activity，第二个参数则是RequestCode</span></span><br><span class="line">ARouter.getInstance().build(<span class="string">&quot;/home/main&quot;</span>, <span class="string">&quot;ap&quot;</span>).navigation(<span class="built_in">this</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接传递Bundle</span></span><br><span class="line"><span class="type">Bundle</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">&quot;/home/main&quot;</span>)</span><br><span class="line">    .with(params)</span><br><span class="line">    .navigation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定Flag</span></span><br><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">&quot;/home/main&quot;</span>)</span><br><span class="line">    .withFlags();</span><br><span class="line">    .navigation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Fragment</span></span><br><span class="line"><span class="type">Fragment</span> <span class="variable">fragment</span> <span class="operator">=</span> (Fragment) ARouter.getInstance().build(<span class="string">&quot;/test/fragment&quot;</span>).navigation();</span><br><span class="line">                    </span><br><span class="line"><span class="comment">// 对象传递</span></span><br><span class="line">ARouter.getInstance()</span><br><span class="line">    .withObject(<span class="string">&quot;key&quot;</span>, <span class="keyword">new</span> <span class="title class_">TestObj</span>(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Rose&quot;</span>))</span><br><span class="line">    .navigation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 觉得接口不够多，可以直接拿出Bundle赋值</span></span><br><span class="line">ARouter.getInstance()</span><br><span class="line">        .build(<span class="string">&quot;/home/main&quot;</span>)</span><br><span class="line">        .getExtra();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转场动画(常规方式)</span></span><br><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">&quot;/test/activity2&quot;</span>)</span><br><span class="line">    .withTransition(R.anim.slide_in_bottom, R.anim.slide_out_bottom)</span><br><span class="line">    .navigation(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转场动画(API16+)</span></span><br><span class="line"><span class="type">ActivityOptionsCompat</span> <span class="variable">compat</span> <span class="operator">=</span> ActivityOptionsCompat.</span><br><span class="line">    makeScaleUpAnimation(v, v.getWidth() / <span class="number">2</span>, v.getHeight() / <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ps. makeSceneTransitionAnimation 使用共享元素的时候，需要在navigation方法中传入当前Activity</span></span><br><span class="line"></span><br><span class="line">ARouter.getInstance()</span><br><span class="line">    .build(<span class="string">&quot;/test/activity2&quot;</span>)</span><br><span class="line">    .withOptionsCompat(compat)</span><br><span class="line">    .navigation();</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 使用绿色通道(跳过所有的拦截器)</span></span><br><span class="line">ARouter.getInstance().build(<span class="string">&quot;/home/main&quot;</span>).greenChannel().navigation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自己的日志工具打印日志</span></span><br><span class="line">ARouter.setLogger();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自己提供的线程池</span></span><br><span class="line">ARouter.setExecutor();</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取原始的URI</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">uriStr</span> <span class="operator">=</span> getIntent().getStringExtra(ARouter.RAW_URI);</span><br></pre></td></tr></table></figure>
</li>
<li><p>重写跳转URL</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现PathReplaceService接口，并加上一个Path内容任意的注解即可</span></span><br><span class="line"><span class="meta">@Route(path = &quot;/xxx/xxx&quot;)</span> <span class="comment">// 必须标明注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PathReplaceServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PathReplaceService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * For normal path.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> path raw path</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    String <span class="title function_">forString</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> path;    <span class="comment">// 按照一定的规则处理之后返回处理后的结果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * For uri type.</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> uri raw uri</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    Uri <span class="title function_">forUri</span><span class="params">(Uri uri)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> url;    <span class="comment">// 按照一定的规则处理之后返回处理后的结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成路由文档</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新 build.gradle, 添加参数 AROUTER_GENERATE_DOC = enable</span></span><br><span class="line"><span class="comment">// 生成的文档路径 : build/generated/source/apt/(debug or release)/com/alibaba/android/arouter/docs/arouter-map-of-$&#123;moduleName&#125;.json</span></span><br><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                arguments = [AROUTER_MODULE_NAME: project.getName(), AROUTER_GENERATE_DOC: <span class="string">&quot;enable&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li><p>路由中的分组概念</p>
<ul>
<li>SDK中针对所有的路径(&#x2F;test&#x2F;1 &#x2F;test&#x2F;2)进行分组，分组只有在分组中的某一个路径第一次被访问的时候，该分组才会被初始化</li>
<li>可以通过 @Route 注解主动指定分组，否则使用路径中第一段字符串(&#x2F;*&#x2F;)作为分组</li>
<li>注意：一旦主动指定分组之后，应用内路由需要使用 ARouter.getInstance().build(path, group) 进行跳转，手动指定分组，否则无法找到</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Route(path = &quot;/test/1&quot;, group = &quot;app&quot;)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>拦截器和服务的异同</p>
<ul>
<li>拦截器和服务所需要实现的接口不同，但是结构类似，都存在 init(Context context) 方法，但是两者的调用时机不同</li>
<li>拦截器因为其特殊性，会被任何一次路由所触发，拦截器会在ARouter初始化的时候异步初始化，如果第一次路由的时候拦截器还没有初始化结束，路由会等待，直到初始化完成。</li>
<li>服务没有该限制，某一服务可能在App整个生命周期中都不会用到，所以服务只有被调用的时候才会触发初始化操作</li>
</ul>
</li>
<li><p>旧版本gradle插件的配置方式</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.neenbedankt.android-apt&#x27;</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">    classpath <span class="string">&#x27;com.neenbedankt.gradle.plugins:android-apt:1.4&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apt &#123;</span><br><span class="line">    arguments &#123;</span><br><span class="line">    AROUTER_MODULE_NAME project.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">&#x27;com.alibaba:arouter-api:x.x.x&#x27;</span></span><br><span class="line">    apt <span class="string">&#x27;com.alibaba:arouter-compiler:x.x.x&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Kotlin项目中的配置方式</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以参考 module-kotlin 模块中的写法</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;kotlin-kapt&#x27;</span></span><br><span class="line"></span><br><span class="line">kapt &#123;</span><br><span class="line">    arguments &#123;</span><br><span class="line">        arg(<span class="string">&quot;AROUTER_MODULE_NAME&quot;</span>, project.getName())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">&#x27;com.alibaba:arouter-api:x.x.x&#x27;</span></span><br><span class="line">    kapt <span class="string">&#x27;com.alibaba:arouter-compiler:x.x.x&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ol>
<li><p>“W&#x2F;ARouter::: ARouter::No postcard![ ]”</p>
<p>这个Log正常的情况下也会打印出来，如果您的代码中没有实现DegradeService和PathReplaceService的话，因为ARouter本身的一些功能也依赖 自己提供的Service管理功能，ARouter在跳转的时候会尝试寻找用户实现的PathReplaceService，用于对路径进行重写(可选功能)，所以如果您没有 实现这个服务的话，也会抛出这个日志</p>
<p>推荐在app中实现DegradeService、PathReplaceService</p>
</li>
<li><p>“W&#x2F;ARouter::: ARouter::There is no route match the path [&#x2F;xxx&#x2F;xxx], in group [xxx][ ]”</p>
<ul>
<li>通常来说这种情况是没有找到目标页面，目标不存在</li>
<li>如果这个页面是存在的，那么您可以按照下面的步骤进行排查<ol>
<li>检查目标页面的注解是否配置正确，正确的注解形式应该是 (@Route(path&#x3D;”&#x2F;test&#x2F;test”), 如没有特殊需求，请勿指定group字段，废弃功能)</li>
<li>检查目标页面所在的模块的gradle脚本中是否依赖了 arouter-compiler sdk (需要注意的是，要使用apt依赖，而不是compile关键字依赖)</li>
<li>检查编译打包日志，是否出现了形如 ARouter::�Compiler &gt;&gt;&gt; xxxxx 的日志，日志中会打印出发现的路由目标</li>
<li>启动App的时候，开启debug、log(openDebug&#x2F;openLog), 查看映射表是否已经被扫描出来，形如 D&#x2F;ARouter::: LogisticsCenter has already been loaded, GroupIndex[4]，GroupIndex &gt; 0</li>
</ol>
</li>
</ul>
</li>
<li><p>开启InstantRun之后无法跳转(高版本Gradle插件下无法跳转)？</p>
<p>因为开启InstantRun之后，很多类文件不会放在原本的dex中，需要单独去加载，ARouter默认不会去加载这些文件，因为安全原因，只有在开启了openDebug之后 ARouter才回去加载InstantRun产生的文件，所以在以上的情况下，需要在init<strong>之前</strong>调用openDebug</p>
</li>
<li><p>TransformException:java.util.zip.ZipException: duplicate entry ….</p>
<p>ARouter有按组加载的机制，关于分组可以参考 6-1 部分，ARouter允许一个module中存在多个分组，但是不允许多个module中存在相同的分组，会导致映射文件冲突</p>
</li>
<li><p>Kotlin类中的字段无法注入如何解决？</p>
<p>首先，Kotlin中的字段是可以自动注入的，但是注入代码为了减少反射，使用的字段赋值的方式来注入的，Kotlin默认会生成set&#x2F;get方法，并把属性设置为private 所以只要保证Kotlin中字段可见性不是private即可，简单解决可以在字段上添加 @JvmField</p>
</li>
<li><p>通过URL跳转之后，在intent中拿不到参数如何解决？</p>
<p>需要注意的是，如果不使用自动注入，那么可以不写 <code>ARouter.getInstance().inject(this)</code>，但是需要取值的字段仍然需要标上 <code>@Autowired</code> 注解，因为 只有标上注解之后，ARouter才能知道以哪一种数据类型提取URL中的参数并放入Intent中，这样您才能在intent中获取到对应的参数</p>
</li>
<li><p>新增页面之后，无法跳转？</p>
<p>ARouter加载Dex中的映射文件会有一定耗时，所以ARouter会缓存映射文件，直到新版本升级(版本号或者versionCode变化)，而如果是开发版本(ARouter.openDebug())， ARouter 每次启动都会重新加载映射文件，开发阶段一定要打开 Debug 功能</p>
</li>
</ol>
<h1 id="基于Arouter的路由实现方案"><a href="#基于Arouter的路由实现方案" class="headerlink" title="基于Arouter的路由实现方案"></a><a href="https://juejin.cn/post/6844903944175484935">基于Arouter的路由实现方案</a></h1><h1 id="ARouter相关问题"><a href="#ARouter相关问题" class="headerlink" title="ARouter相关问题"></a>ARouter相关问题</h1><h2 id="There-is-no-route-match-the-path"><a href="#There-is-no-route-match-the-path" class="headerlink" title="There is no route match the path"></a>There is no route match the path</h2><p>网上的方法都试了，即每个模块的gradle都添加了</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                arguments = [<span class="attr">AROUTER_MODULE_NAME:</span> project.getName()]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies&#123;</span><br><span class="line">    implementation rootProject.ext.dependencies[<span class="string">&quot;arouter&quot;</span>]</span><br><span class="line">    annotationProcessor rootProject.ext.dependencies[<span class="string">&quot;arouter-compiler&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是还是有这个问题。</p>
<p>最后排查到问题是，宿主module有自己的Application，在继承的公共library的Application进行的ARouter实例化，这种是不行的。</p>
<p>解决：去掉公共library的Application中onCrate中的<code>ARouter.init(this);</code>，改成在宿主module的Application的onCreate中进行ARouter的实例化</p>
<p>又遇到上述的问题，以上都排查了（根据网上的都排查了）。后来处理方法：重新命名各module的“组名”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//旧的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RouterHub</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">APP</span>   <span class="operator">=</span> <span class="string">&quot;/app&quot;</span>;<span class="comment">//宿主app组件</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">GEREN</span> <span class="operator">=</span> <span class="string">&quot;/geren&quot;</span>;<span class="comment">//个人组件</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">QIYE</span>  <span class="operator">=</span> <span class="string">&quot;/qiye&quot;</span>;<span class="comment">//企业组件</span></span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改成</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RouterHub</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">APP</span>   <span class="operator">=</span> <span class="string">&quot;/appNew&quot;</span>;<span class="comment">//宿主app组件</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">GEREN</span> <span class="operator">=</span> <span class="string">&quot;/gerenNew&quot;</span>;<span class="comment">//个人组件</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">QIYE</span>  <span class="operator">=</span> <span class="string">&quot;/qiyeNew&quot;</span>;<span class="comment">//企业组件</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>





<h2 id="“W-x2F-ARouter-ARouter-No-postcard-”"><a href="#“W-x2F-ARouter-ARouter-No-postcard-”" class="headerlink" title="“W&#x2F;ARouter::: ARouter::No postcard![ ]”"></a>“W&#x2F;ARouter::: ARouter::No postcard![ ]”</h2><p>这个Log正常的情况下也会打印出来，如果您的代码中没有实现DegradeService和PathReplaceService的话，因为ARouter本身的一些功能也依赖 自己提供的Service管理功能，ARouter在跳转的时候会尝试寻找用户实现的PathReplaceService，用于对路径进行重写(可选功能)，所以如果您没有 实现这个服务的话，也会抛出这个日志</p>
<p>推荐在app中实现DegradeService、PathReplaceService</p>
<h2 id="“W-x2F-ARouter-ARouter-There-is-no-route-match-the-path-x2F-xxx-x2F-xxx-in-group-xxx-”"><a href="#“W-x2F-ARouter-ARouter-There-is-no-route-match-the-path-x2F-xxx-x2F-xxx-in-group-xxx-”" class="headerlink" title="“W&#x2F;ARouter::: ARouter::There is no route match the path [&#x2F;xxx&#x2F;xxx], in group [xxx][ ]”"></a>“W&#x2F;ARouter::: ARouter::There is no route match the path [&#x2F;xxx&#x2F;xxx], in group [xxx][ ]”</h2><ul>
<li>通常来说这种情况是没有找到目标页面，目标不存在</li>
<li>如果这个页面是存在的，那么您可以按照下面的步骤进行排查<ol>
<li>检查目标页面的注解是否配置正确，正确的注解形式应该是 (@Route(path&#x3D;”&#x2F;test&#x2F;test”), 如没有特殊需求，请勿指定group字段，废弃功能)</li>
<li>检查目标页面所在的模块的gradle脚本中是否依赖了 arouter-compiler sdk (需要注意的是，要使用apt依赖，而不是compile关键字依赖)</li>
<li>检查编译打包日志，是否出现了形如 ARouter::�Compiler &gt;&gt;&gt; xxxxx 的日志，日志中会打印出发现的路由目标</li>
<li>启动App的时候，开启debug、log(openDebug&#x2F;openLog), 查看映射表是否已经被扫描出来，形如 D&#x2F;ARouter::: LogisticsCenter has already been loaded, GroupIndex[4]，GroupIndex &gt; 0</li>
</ol>
</li>
</ul>
<h2 id="ARouter开启InstantRun之后无法跳转-高版本Gradle插件下无法跳转-？"><a href="#ARouter开启InstantRun之后无法跳转-高版本Gradle插件下无法跳转-？" class="headerlink" title="ARouter开启InstantRun之后无法跳转(高版本Gradle插件下无法跳转)？"></a>ARouter开启InstantRun之后无法跳转(高版本Gradle插件下无法跳转)？</h2><p>因为开启InstantRun之后，很多类文件不会放在原本的dex中，需要单独去加载，ARouter默认不会去加载这些文件，因为安全原因，只有在开启了openDebug之后 ARouter才回去加载InstantRun产生的文件，所以在以上的情况下，需要在init<strong>之前</strong>调用openDebug</p>
<h2 id="TransformException-java-util-zip-ZipException-duplicate-entry-…"><a href="#TransformException-java-util-zip-ZipException-duplicate-entry-…" class="headerlink" title="TransformException:java.util.zip.ZipException: duplicate entry …."></a>TransformException:java.util.zip.ZipException: duplicate entry ….</h2><p>ARouter有按组加载的机制，关于分组可以参考 6-1 部分，ARouter允许一个module中存在多个分组，但是不允许多个module中存在相同的分组，会导致映射文件冲突</p>
<h2 id="Kotlin类中的字段无法注入如何解决？"><a href="#Kotlin类中的字段无法注入如何解决？" class="headerlink" title="Kotlin类中的字段无法注入如何解决？"></a>Kotlin类中的字段无法注入如何解决？</h2><p>首先，Kotlin中的字段是可以自动注入的，但是注入代码为了减少反射，使用的字段赋值的方式来注入的，Kotlin默认会生成set&#x2F;get方法，并把属性设置为private 所以只要保证Kotlin中字段可见性不是private即可，简单解决可以在字段上添加 @JvmField</p>
<h2 id="通过URL跳转之后，在intent中拿不到参数如何解决？"><a href="#通过URL跳转之后，在intent中拿不到参数如何解决？" class="headerlink" title="通过URL跳转之后，在intent中拿不到参数如何解决？"></a>通过URL跳转之后，在intent中拿不到参数如何解决？</h2><p>需要注意的是，如果不使用自动注入，那么可以不写 <code>ARouter.getInstance().inject(this)</code>，但是需要取值的字段仍然需要标上 <code>@Autowired</code> 注解，因为 只有标上注解之后，ARouter才能知道以哪一种数据类型提取URL中的参数并放入Intent中，这样您才能在intent中获取到对应的参数</p>
<h2 id="新增页面之后，无法跳转？"><a href="#新增页面之后，无法跳转？" class="headerlink" title="新增页面之后，无法跳转？"></a>新增页面之后，无法跳转？</h2><p>ARouter加载Dex中的映射文件会有一定耗时，所以ARouter会缓存映射文件，直到新版本升级(版本号或者versionCode变化)，而如果是开发版本(ARouter.openDebug())， ARouter 每次启动都会重新加载映射文件，开发阶段一定要打开 Debug 功能</p>
<h2 id="初始化慢的优化"><a href="#初始化慢的优化" class="headerlink" title="初始化慢的优化"></a><a href="https://blog.csdn.net/zhujiangtaotaise/article/details/112857966">初始化慢的优化</a></h2><p>添加以下两个【用到了插桩技术…缺点：会让as编译的速度变慢】</p>
<ol>
<li><p><code>根目录/build.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript&#123;</span><br><span class="line">    repositories&#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies&#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.alibaba:arouter-register:1.0.2&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>module/build.gradle</code>中添加</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.alibaba.arouter&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>其他的跟官网的实例化一样</p>
<h2 id="目标是singleTask的activity，获取不到传参的值"><a href="#目标是singleTask的activity，获取不到传参的值" class="headerlink" title="目标是singleTask的activity，获取不到传参的值"></a>目标是singleTask的activity，获取不到传参的值</h2><p>因为 <code>ARouter.getInstance().inject(this);</code> 这里面用的是<code>getIntent()</code>，而<code>onNewIntent(Intent intent)</code>中的<code>intent</code>与<code>getIntent()</code>不是同一个对象。解决方法就是重新设置getIntent()的值，即<code>setIntent(intent);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onNewIntent</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">    setIntent(intent);</span><br><span class="line">    <span class="built_in">super</span>.onNewIntent(intent);</span><br><span class="line">    <span class="comment">//接收参数的一定要加上这一句</span></span><br><span class="line">    ARouter.getInstance().inject(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">//... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="ARouter-Compiler-gt-gt-gt-No-module-name-for-more-information-look-at-gradle-log"><a href="#ARouter-Compiler-gt-gt-gt-No-module-name-for-more-information-look-at-gradle-log" class="headerlink" title="ARouter::Compiler &gt;&gt;&gt; No module name, for more information, look at gradle log."></a>ARouter::Compiler &gt;&gt;&gt; No module name, for more information, look at gradle log.</h2><p>检查项目依赖的全部module，包括module依赖的module，为了能够进行单独的编译，所以需要为每一个module添加名称，即在每个module的 build.gradle中加上下面的代码：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">    javaCompileOptions &#123;</span><br><span class="line">        annotationProcessorOptions &#123;</span><br><span class="line">            arguments = [ <span class="attr">AROUTER_MODULE_NAME :</span> project.getName() ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓第三方</tag>
      </tags>
  </entry>
  <entry>
    <title>第三方-Dagger2</title>
    <url>/posts/1993249214/</url>
    <content><![CDATA[<h1 id="dagger2相关"><a href="#dagger2相关" class="headerlink" title="dagger2相关"></a>dagger2相关</h1><h2 id="dagger2笔记："><a href="#dagger2笔记：" class="headerlink" title="dagger2笔记："></a>dagger2笔记：</h2><p>是个依赖注入框架。Dagger2是第一个用生成的代码实现完整堆栈的。指导原则是生成代码，模仿用户可能已经手写的代码，以确保依赖注入尽可能简单、可跟踪和高性能。</p>
<p><a href="https://www.jianshu.com/p/82ba5a292572">例子（MVP）：</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">MainContract</span>.View &#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    MainPresenter mainPresenter;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        DaggerMainComponent.builder()</span><br><span class="line">                .mainModule(<span class="keyword">new</span> <span class="title class_">MainModule</span>(<span class="built_in">this</span>))</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//调用Presenter方法加载数据</span></span><br><span class="line">        mainPresenter.loadData();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainPresenter</span> &#123;</span><br><span class="line">    <span class="comment">//MainContract是个接口，View是他的内部接口，这里看做View接口即可</span></span><br><span class="line">    <span class="keyword">private</span> MainContract.View mView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    MainPresenter(MainContract.View view) &#123;</span><br><span class="line">        mView = view;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//调用model层方法，加载数据</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//回调方法成功时</span></span><br><span class="line">        mView.updateUI();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Module</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainModule</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> MainContract.View mView;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MainModule</span><span class="params">(MainContract.View view)</span> &#123;</span><br><span class="line">            mView = view;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Provides</span></span><br><span class="line">        MainView <span class="title function_">provideMainView</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component(modules = MainModule.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MainComponent</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">inject</span><span class="params">(MainActivity activity)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>说明：<br><code>@Module</code> 内<code>@privides</code> 提供 –&gt;提供给没有构造函数的类的依赖，这些类无法用<code>@Inject</code>标注（比如第三方库、系统类、以及<code>MVP</code>中<code>Contract</code>接口）<br>桥梁：<code>@Component</code> 接口（或抽象）类上，说明<code>modules</code>有哪些<br>用<code>@Inject</code>声明的类成员属性不能用<code>private</code>修饰（<code>MainActivity</code>中<code>MainPresenter</code>类对象用<code>@Inject</code>修饰）<br>某个类被<code>@Inject</code>标记时会自动到它的构造方法中，如果这个构造方法也被<code>@Inject</code>标记的话，就会自动初始化这个类，从而完成依赖注入。（当然他们之间需要个<code>@Component</code>当桥梁产生联系）<br>一个<code>Component</code>类可以包含多个<code>Module</code>类，用来提供依赖</p>
</blockquote>
<h3 id="注入过程："><a href="#注入过程：" class="headerlink" title="注入过程："></a>注入过程：</h3><p>首先<code>MainActivity</code>需要依赖<code>MainPresenter</code>，因此，我们在里面用<code>@Injec</code>t对<code>MainPresenter</code>进行标注，表明这是要注入的类。然后，我们对<code>MainPresenter</code>的构造函数也添加注解<code>@Inject</code>，此时构造函数里有一个参数<code>MainContract.View</code>，因为<code>MainPresenter</code>需要依赖<code>MainContract.View</code>，所以我们定义了一个类，叫做<code>MainModule</code>，提供一个方法<code>provideMainView</code>，用来提供这个依赖，这个<code>MainView</code>是通过<code>MainModule</code>的构造函数注入进来的，接着我们需要定义<code>Component</code>接口类，并将<code>Module</code>包含进来，即</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(modules = MainModule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MainComponent</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">inject</span><span class="params">(MainActivity activity)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时里面声明了一个<code>inject</code>方法，方法参数为<code>ManActivity</code>，用来获取<code>MainActivity</code>实例，以初始化在里面声明的<code>MainPresenter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DaggerMainComponent.builder()</span><br><span class="line">         .mainModule(<span class="keyword">new</span> <span class="title class_">MainModule</span>(<span class="built_in">this</span>))</span><br><span class="line">         .build()</span><br><span class="line">         .inject(<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>@Inject</code> 带有此注解的属性或构造方法将<strong>参与到依赖注入中</strong>，<code>Dagger2</code>会实例化有此注解的类</li>
<li><code>@Module</code> 带有此注解的类，用来<strong>提供依赖</strong>，里面定义一些用<code>@Provides</code>注解的以<code>provide</code>开头的方法，这些方法就是所提供的依赖，<code>Dagger2</code>会在该类中寻找实例化某个类所需要的依赖。</li>
<li><code>@Component</code>用来将<code>@Inject</code>和<code>@Module</code>联系起来的<strong>桥梁</strong>，从<code>@Module</code>中获取依赖并将依赖注入给<code>@Inject</code></li>
</ul>
<h2 id="Dagger2注入原理"><a href="#Dagger2注入原理" class="headerlink" title="Dagger2注入原理"></a>Dagger2注入原理</h2><p>通过<code>apt</code>插件在<strong>编译阶段</strong>生成相应的注入代码</p>
<p><code>MainPresenter</code>实例化过程，<code>MainPresenter</code>会有一个工厂类，在这个类的<code>get()</code>中进行<code>MainPresenter</code>创建，而<code>MainPresenter</code>所需要的<code>View</code>依赖，是由<code>MainModule</code>里定义的以<code>provide</code>开头方法所对应的工厂类提供的。</p>
<h2 id="Dagger2基础知识及在Java中使用（1）"><a href="#Dagger2基础知识及在Java中使用（1）" class="headerlink" title="Dagger2基础知识及在Java中使用（1）"></a><a href="https://juejin.im/post/5d6f3e47f265da03aa258c72">Dagger2基础知识及在Java中使用（1）</a></h2><blockquote>
<p>比喻：<br><code>@Component</code>：相当于个注射器（是接口）；<br><code>@Module</code>相当于注射液，就是数据源（是类或抽象类）；<br>要把注射液放入指定哪个注射器如：<code>@Component(modules=...)</code>；<br><code>@Inject</code>相当于标注被注射体。</p>
</blockquote>
<h3 id="首先添加依赖"><a href="#首先添加依赖" class="headerlink" title="首先添加依赖"></a>首先添加依赖</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.google.dagger:dagger:2.24&#x27;</span></span><br><span class="line">annotationProcessor <span class="string">&quot;com.google.dagger:dagger-compiler:2.24&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-Inject-amp-Component可以简单实现依赖注入（不带-Module）"><a href="#1-Inject-amp-Component可以简单实现依赖注入（不带-Module）" class="headerlink" title="1. @Inject &amp; @Component可以简单实现依赖注入（不带@Module）"></a>1. <code>@Inject</code> &amp; <code>@Component</code>可以简单实现依赖注入（不带@Module）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无参构造函数的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义我们的Component</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AstudyActivityComponent</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">injectTo</span><span class="params">(AstudyActivity astudyActivity)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，点下<strong>AS》build》Make Project</strong>，让apt帮我们生成代码。一般生成代码为Dagger+你定义Component类名。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在我们的Activity中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AstudyActivity</span> <span class="keyword">extends</span> <span class="title class_">BaseActivity</span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Person person;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//这里是我封装的onCreate,省略部分代码，只为理解，之后都请忽略！</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processLogic</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//第一种</span></span><br><span class="line">        DaggerAstudyActivityComponent.create().injectTo(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//第二种（使用module传值时一定是用这个）</span></span><br><span class="line">        <span class="comment">//DaggerAstudyActivityComponent.builder().build().injectTo(this);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-带-Module的使用"><a href="#2-带-Module的使用" class="headerlink" title="2. 带@Module的使用"></a>2. 带@Module的使用</h3><h3 id="无参构造函数的情况"><a href="#无参构造函数的情况" class="headerlink" title="无参构造函数的情况"></a>无参构造函数的情况</h3><p>假设Human类是第三方类库，里面没有<code>@Inject</code>，那么我们使用<code>@Module</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设这个类是第三方类库中的，里面没有@Inject</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Human</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Human</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义我们的数据源Module</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BstudyActivityModule</span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    Human <span class="title function_">humanProvides</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Human</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义我们的Component。带上了参数</span></span><br><span class="line"><span class="meta">@Component(modules = BstudyActivityModule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BstudyActivityModuleComponent</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">injectTo</span><span class="params">(BstudyActivity bstudyActivity)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<ol>
<li>改不了的第三方库等类对象要注入到指定位置则需要用到 <code>@Module</code>+<code>@Component</code>+<code>@Inject</code>。而且**<code>@Module</code>标记的对象的优先级比<code>@Inject</code>标记的高**</li>
<li>通过<code>Module</code>传参</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CstudyModule</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> money;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CstudyModule</span><span class="params">(<span class="type">int</span> money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    Soul <span class="title function_">providesSoul</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Soul</span> <span class="variable">soul</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Soul</span>();</span><br><span class="line">        soul.setMoney(<span class="built_in">this</span>.money);</span><br><span class="line">        <span class="keyword">return</span> soul;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    Woman <span class="title function_">providesWoman</span><span class="params">(Soul soul)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Woman</span>(soul);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>providesWoman</code>用<code>@Provides</code>标注，它会先去找<code>Soul</code>的初始化，先通过<code>@Provides</code>找<code>Soul</code>，找到了<code>providesSoul</code>。假如此时没有<code>providesSoul</code>，则会去<code>Soul</code>类中找有没有被<code>@Inject</code>标记的构造方法，如果还没有，那么报错。</p>
</blockquote>
<p><strong>注意：</strong></p>
<ul>
<li>在<code>Module</code>的构造函数<strong>带有参数且参数被使用</strong>的情况下，所生产的<code>Component</code>类就没有<code>create()</code>方法了</li>
<li>在这里的<code>module</code>如果没有<code>providesSoul()</code>方法的话，还有一种情况只要在<code>Soul</code>的构造方法有<code>@Inject</code>也是可以的。</li>
</ul>
<ol start="4">
<li><p>自己在<code>Component</code>中写<code>@Component.Builder</code>，并在其标记的接口内加<code>@BindInstance</code>，可以避免在<code>DaggerXXXComponent.builder().xxx</code>调用的时候再创建对象，直接传参即可</p>
</li>
<li><p><code>Componet</code>依赖<code>Component</code>，使用<code>dependence</code></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">FragmentComponent依赖于ActivityComponent</span><br><span class="line">FragmentComponent中 injectTo 在Activity中实例化并提供对外的activityComponent对象</span><br><span class="line">在Fragment中通过<span class="module-access"><span class="module"><span class="identifier">DaggerFragmentComponent</span>.</span></span>builder<span class="literal">()</span>.activity<span class="constructor">Component(ActivityComponent对象)</span>.build<span class="literal">()</span>.inject<span class="constructor">To(<span class="params">this</span>)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@SubComponent</code>跟使用<code>dependence</code>效果一样</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">ActivityComponent中获取FragmentComponent对象</span><br><span class="line">FragmentComponent标记@Subcomponent，并加injectTo</span><br><span class="line">在Activity中实例化并提供对外的activityComponent对象</span><br><span class="line">在Fragment中通过<span class="module-access"><span class="module"><span class="identifier">ActivityComponent</span>.</span></span>fragment<span class="constructor">Component()</span>.inject<span class="constructor">To(<span class="params">this</span>)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@SubComponent</code>和<code>@Subcomponent.Builder</code>，效果与5、6一样</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">ActivityComponent中获取FragmentComponent.Builder对象</span><br><span class="line">FragmentComponent标记<span class="meta">@Subcomponent</span>，加injectTo，并加<span class="meta">@Subcomponent</span>.Builder里面只有个build()方法</span><br><span class="line">在Activity中实例化并提供对外的activityComponent对象</span><br><span class="line">在Fragment中通过ActivityComponent.sonbuilder().build().injectTo(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Dagger2基础知识及在Java中使用（2）"><a href="#Dagger2基础知识及在Java中使用（2）" class="headerlink" title="Dagger2基础知识及在Java中使用（2）"></a><a href="https://juejin.im/post/5d6f81b8e51d4561f17a5136">Dagger2基础知识及在Java中使用（2）</a></h2><h2 id="Dagger2在Android中的使用"><a href="#Dagger2在Android中的使用" class="headerlink" title="Dagger2在Android中的使用"></a><a href="https://juejin.im/post/5d705bd4f265da03b46c0e01">Dagger2在Android中的使用</a></h2><p>例子：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.google.dagger:dagger-android:2.24&#x27;</span></span><br><span class="line"><span class="comment">// if you use the support libraries(就是你需要v4.Fragment就需要加上support包)</span></span><br><span class="line">implementation <span class="string">&#x27;com.google.dagger:dagger-android-support:2.24&#x27;</span></span><br><span class="line">annotationProcessor <span class="string">&#x27;com.google.dagger:dagger-compiler:2.24&#x27;</span></span><br><span class="line">annotationProcessor <span class="string">&#x27;com.google.dagger:dagger-android-processor:2.24&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Children</span> &#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Children</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SurperMan</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SurperManModule</span> &#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    SurperMan <span class="title function_">surperManProvides</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SurperMan</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dagger.android包提供了一个@ContributesAndroidInjector标注是为了省去我们每次去Activity里初始化Component</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="comment">//抽象类，名字自定义，</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">NeedInjectModules</span> &#123;</span><br><span class="line">    <span class="comment">//这个方法的意思标识要注入到ForAndroidActivity页面。如果需要在MainActivity页面的话。继续加这个方法，返回值为MainActivity即可</span></span><br><span class="line">    <span class="meta">@ContributesAndroidInjector</span></span><br><span class="line">    <span class="keyword">abstract</span> ForAndroidActivity <span class="title function_">inject</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里AndroidSupportInjectionModule是系统的，必须加上</span></span><br><span class="line"><span class="comment">//NeedInjectModules是我们要注册到Activity的</span></span><br><span class="line"><span class="comment">//SurperManModule，surperMan的</span></span><br><span class="line"><span class="meta">@Component(modules = &#123;</span></span><br><span class="line"><span class="meta">        AndroidSupportInjectionModule.class,</span></span><br><span class="line"><span class="meta">        NeedInjectModules.class,</span></span><br><span class="line"><span class="meta">        SurperManModule</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//继承AndroidInjector&lt;T&gt;，泛型就是我们的application</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AppComponent</span> <span class="keyword">extends</span> <span class="title class_">AndroidInjector</span>&lt;MyApplication&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//还记得@Component.Builder的用法吗，可以看之前的。</span></span><br><span class="line">    <span class="meta">@Component</span>.Builder</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">        <span class="meta">@BindsInstance</span></span><br><span class="line">        Builder <span class="title function_">application</span><span class="params">(Application application)</span>;</span><br><span class="line">        AppComponent <span class="title function_">build</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> <span class="keyword">extends</span> <span class="title class_">DaggerApplication</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AndroidInjector&lt;? <span class="keyword">extends</span> <span class="title class_">DaggerApplication</span>&gt; applicationInjector() &#123;</span><br><span class="line">        <span class="comment">//将我们的AppComponent.Builder返回出去</span></span><br><span class="line">        <span class="keyword">return</span> DaggerAppComponent.builder().application(MyApplication.<span class="built_in">this</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Activity里使用或者在Fragment里使用，只需继承我们的DaggerActivity&amp;DaggerFragment。直接看我们的Activity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForAndroidActivity</span> <span class="keyword">extends</span> <span class="title class_">DaggerAppCompatActivity</span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Children children;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    SuperMan superMan;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_astudy);</span><br><span class="line">        LogUtils.i(<span class="string">&quot;已经生成实例&quot;</span>,children.hashCode()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        LogUtils.i(<span class="string">&quot;已经生成实例&quot;</span>,surperMan.hashCode()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Dagger2华丽使用在MVP框架中"><a href="#Dagger2华丽使用在MVP框架中" class="headerlink" title="Dagger2华丽使用在MVP框架中"></a><a href="https://juejin.im/post/5d70b71cf265da03d15572a6">Dagger2华丽使用在MVP框架中</a></h2><p>RxJava + Retrofit + MVP + Dagger2</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入dagger.android库</span></span><br><span class="line">implementation <span class="string">&#x27;com.google.dagger:dagger-android:2.24&#x27;</span></span><br><span class="line"><span class="comment">// if you use the support libraries</span></span><br><span class="line">implementation <span class="string">&#x27;com.google.dagger:dagger-android-support:2.24&#x27;</span></span><br><span class="line">annotationProcessor <span class="string">&#x27;com.google.dagger:dagger-compiler:2.24&#x27;</span></span><br><span class="line">annotationProcessor <span class="string">&#x27;com.google.dagger:dagger-android-processor:2.24&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">NeedInjectModules</span> &#123;</span><br><span class="line">    <span class="meta">@ContributesAndroidInjector</span></span><br><span class="line">    <span class="keyword">abstract</span> POSTFragment <span class="title function_">injectPOSTFragment</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(modules = &#123;</span></span><br><span class="line"><span class="meta">        AndroidSupportInjectionModule.class,</span></span><br><span class="line"><span class="meta">        NeedInjectModules.class,</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AppComponent</span> <span class="keyword">extends</span> <span class="title class_">AndroidInjector</span>&lt;MyApplication&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span>.Builder</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">        <span class="meta">@BindsInstance</span></span><br><span class="line">        Builder <span class="title function_">application</span><span class="params">(Application application)</span>;</span><br><span class="line">        AppComponent <span class="title function_">build</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>初始化Presenter：</p>
<p>无参可以直接用@Inject，若有参数则要用Module</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PostPresenter</span> <span class="keyword">extends</span> <span class="title class_">BasePresenter</span>&lt;PostContract.View&gt; <span class="keyword">implements</span> <span class="title class_">PostContract</span>.Prensenter &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PostPresenter</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ...<span class="comment">//省略部分代码，便于理解</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Application中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> <span class="keyword">extends</span> <span class="title class_">DaggerApplication</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AndroidInjector&lt;? <span class="keyword">extends</span> <span class="title class_">DaggerApplication</span>&gt; applicationInjector() &#123;</span><br><span class="line">        <span class="keyword">return</span> DaggerAppComponent.builder().application(<span class="built_in">this</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为我们的Activity要继承DaggerActivity、DaggerFragment，所以我们新建BaseDaggerActivity和BaseDaggerFragment，里面有DaggerActivity和RxActivity的一些内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseDaggerActivity</span>&lt;T <span class="keyword">extends</span> <span class="title class_">BasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title class_">RxFragmentActivity</span> <span class="keyword">implements</span> <span class="title class_">BaseView</span>, HasAndroidInjector &#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> T mPresenter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public abstract T cretaePresenter();</span></span><br><span class="line">    </span><br><span class="line">    ...<span class="comment">//省略部分代码，便于理解</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="各注解用法"><a href="#各注解用法" class="headerlink" title="各注解用法"></a><a href="https://blog.csdn.net/user11223344abc/article/details/83450237">各注解用法</a></h2><h3 id="Dagger2各属性了解"><a href="#Dagger2各属性了解" class="headerlink" title="Dagger2各属性了解"></a>Dagger2各属性了解</h3><ul>
<li>必要属性</li>
</ul>
<p><code>@inject</code> &#x2F;&#x2F;注入 , <code>@Component</code> , <code>@Module</code> , <code>@Provider</code></p>
<p>要用Dagger2这几个属性是绕不开的</p>
<ul>
<li>高级属性</li>
</ul>
<p><code>@Named</code> , <code>@Qualifier</code> , <code>@Scope</code> , <code>@Singleton</code></p>
<p>可分两组，<code>@Named</code>底层实现是<code>@Qualifier</code>，<code>@Singleton</code>底层实现是<code>@Scope</code></p>
<h3 id="Dagger2各属性使用及分析"><a href="#Dagger2各属性使用及分析" class="headerlink" title="Dagger2各属性使用及分析"></a>Dagger2各属性使用及分析</h3><h4 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a><code>@Inject</code></h4><p><strong>注解构造函数：</strong></p>
<p>通过标记构造函数，告诉Dagger2可以创建该类的实例（Dagger2通过Inject标记可以在需要这个类实例的时候来找到这个构造函数并把相关实例new出来）从而提供依赖关系。</p>
<p>若注解了构造函数，没有注解依赖变量，将不创建实例。</p>
<blockquote>
<p>用@Inject注解应该用来创建类实例的构造函数</p>
</blockquote>
<p><strong>注解依赖变量：</strong></p>
<p>通过标记依赖变量，Dagger2提供依赖关系，注入变量。</p>
<p>若注解了依赖变量，而没注解构造函数，将获得一个null对象。</p>
<blockquote>
<p>用@Inject注解构造函数，再用@Inject注解类实例</p>
</blockquote>
<h4 id="Module"><a href="#Module" class="headerlink" title="@Module"></a><code>@Module</code></h4><p>通过注解类，为Dagger提供依赖关系</p>
<h4 id="Provides"><a href="#Provides" class="headerlink" title="@Provides"></a><code>@Provides</code></h4><blockquote>
<p>是一种工厂模式</p>
</blockquote>
<p><code>@Provides</code>依然是为了提供依赖关系，是对<code>@Inject</code>的补充，弥补了<code>@Inject</code>对于第三方框架和接口类的盲区。</p>
<p><code>@Provides</code>方法本身可能也拥有自身的依赖关系。</p>
<p><code>@Provides</code>方法本身是不能独立存在的，它必须依附于一个Module</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LstudyActivity</span> <span class="keyword">extends</span> <span class="title class_">BaseActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Provider&lt;Pig&gt; pig_spec;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Lazy&lt;Sheep&gt; sheep_spec;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClick(R.id.btn)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">specOnClick</span><span class="params">()</span> &#123;</span><br><span class="line">        LogUtils.i(<span class="string">&quot;看看hashCode值&quot;</span>, <span class="string">&quot;Provider pig_spec不通过get的hashCode ==&gt; &quot;</span> + pig_spec.hashCode());</span><br><span class="line">        LogUtils.i(<span class="string">&quot;看看hashCode值&quot;</span>, <span class="string">&quot;Provider pig_spec的hashCode ==&gt; &quot;</span> + pig_spec.get().hashCode());</span><br><span class="line">        LogUtils.i(<span class="string">&quot;看看hashCode值&quot;</span>, <span class="string">&quot;Lazy sheep_spec的hashCode ==&gt; &quot;</span> + sheep_spec.get().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不调用get()方法的Provider的HashCode值。一直不变</p>
<p>调用get()方法的Provider的HashCode值。一直在改变</p>
<p>调用get()方法的Lazy的HashCode值。一直不变</p>
</blockquote>
<p>provider是一种工厂模式，每次调用get()，都会生成不同的实例。不调用不会生成实例（返回的是容器的HashCode）。</p>
<h4 id="Component"><a href="#Component" class="headerlink" title="@Component"></a><code>@Component</code></h4><p>通过注解接口类，作为提供依赖和所需依赖之间的桥梁（链接<code>Module</code>和<code>Container</code>），在编译时生成相关实例，将相关依赖注入完成使命。</p>
<p><strong>依赖规则</strong></p>
<p>若<code>@Inject</code>和<code>@Module</code>都提供了依赖对象</p>
<ol>
<li>查找Module中是否存在创建该类的方法</li>
<li>若存在，初始化参数，完成实例创建</li>
<li>若不存在，用<code>@Inject</code>创建实例</li>
</ol>
<h4 id="Singleton"><a href="#Singleton" class="headerlink" title="@Singleton"></a><code>@Singleton</code></h4><blockquote>
<p>是@Scope的一种。是作用域单例。Component在哪build就跟那个类的生命周期绑定，即只在那个绑定的实例类里起作用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope</span>  <span class="comment">//注明是Scope</span></span><br><span class="line"><span class="meta">@Documented</span>   <span class="comment">//标记文档提示</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span>  <span class="comment">//运行时候级别</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Singleton &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>1、Component在Activity里build，那么这个单例只限于在这个Activity里。意思退出这个Activity，再进这个Activity时，这个单例会被重新new<br>2、如果Component在Application里build，那么这个单例就是全局的。注意这里涉及到了我们之前的Component依赖Component。</p>
</blockquote>
<p>使用Dagger2要有<strong>局部单例</strong>和<strong>全局单例</strong>的意识。（变量地址是否相同）</p>
<p>两者的基本定义是一样的，要看Component的作用域，若Component的作用域是全局的，那么对应<code>@Singleton</code>或者<code>@Scope</code>的对应module就全局的，反之亦然。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrlConstant</span>&#123;</span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="keyword">public</span> UrlConstant <span class="title function_">instance</span><span class="params">()</span>[</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UrlConstant</span>();</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>局部单例：</strong>Component传入具体的某个子类Activity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component(modules=&#123;UrlConstant.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MainComponent</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">inject</span><span class="params">(MainActivity mainActivity)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>全局单例：</strong>步骤：</p>
<ol>
<li>Component传入基类的Activity</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component(modules=&#123;UrlConstant.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GlobalComponent</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">inject</span><span class="params">(BaseActivity baseActivity)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在Application中实例化它</li>
</ol>
<p>利用率Application的唯一特性，也可以另起一个全局唯一的类承载，但没必要</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> <span class="keyword">extends</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> GlobalComponent mGlobalComponent;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取全局单例Global</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> GlobalComponent <span class="title function_">getGlobalComponent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mGlobalComponent == <span class="literal">null</span>)&#123;</span><br><span class="line">            mGlobalComponent = DaggerGlobalComponent.builder().build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mGlobalComponent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Client中调用</li>
</ol>
<p>在基类中进程初始化，然后加标记进行控制，对子类暴露，这样子类想要的时候可以直接拿，更重要的是可以避免Component中inject(XXXActivity)新增类的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseActivity</span> <span class="keyword">extends</span> <span class="title class_">NetObserverActivity</span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    UrlConstant mUrlConstant;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="keyword">if</span>(!notInitGlobalComponent())&#123;</span><br><span class="line">            ((MyApplication) getApplication()).getGlobalComponent().inject(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">notInitGlobalComponent</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> UrlConstant <span class="title function_">getUrlConstant</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mUrlConstant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a><code>@Scope</code></h4><ol>
<li>Scope是Singleton的底层实现，一般在工程实施中，它作为提高可读性的手段之一让程序员可以一眼就看出哪些是全局哪些是局部的生命周期</li>
<li>来标识范围的注解，并控制如何重复使用类的实例。仅用@inject注解，未用@Scope注解，在每次依赖注入的时候都会创建新的实例。使用@Scope注解会缓存第一次创建的实例，然后重复注入缓存的实例，不会创建新的实例。</li>
<li>如果有类注入实例的类被@Scope注解，那么其Component必须被相同的Scope注解。</li>
<li>如果依赖实例的注入来源是@Provides方法时，@Provides方法必须被@Scope注解；</li>
<li>如果依赖实例的注入来源是@Inject注解的构造函数时，实例类必须被@Scope注解。@Scope实际上是对注入器的控制。</li>
</ol>
<p>另外在看其它博客文章的时候，你会经常看到 @ActivityScope 可以声明一个Activity生命周期的对象 ，@ApplicationScope 可以声明一个Application生命周期的对象 ， 难道这些Scope这么神？ 定义一个名字就可以控制对象的生命周期了？ 其实这和 @Singleton一样的，都是代码是否通过同一个 component 对象来控制的。比如 @ActivityScope 定义的对象 ，其在Activity创建了component对象 ，那这个component对象肯定在这个Activity的生命周期内啊，依赖创建出来的对象也肯定是这个Activity啊。还有@ApplicationScope 中的component 对象是在 Application中的，那依赖创建出来的对象的生命周期也肯定是和 @Singleton的一样的，单例的生命周期不就是整个 Application 吗。</p>
<h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a><code>@Qualifier</code></h4><p>限定符，它可以标记不同的构造方法让外部调用者获取期望的构造对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义一个限定符</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"> <span class="meta">@Qualifier</span><span class="comment">//限定符 </span></span><br><span class="line"> <span class="meta">@Documented</span> </span><br><span class="line"> <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> </span><br><span class="line"> <span class="keyword">public</span> <span class="meta">@interface</span> Type &#123; </span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;<span class="comment">//默认值为&quot;&quot; </span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果把Type改成Named那么就跟@Named一样了</p>
</blockquote>
<p>首先自定义一个注解<code>@interface</code>，刨开2个元注解不看 @Documented @Retention，顶部定义一个 <code>@Qualifier</code>限定符标识，然后这一句String value() default “”的意思是，Type注解可以传参，默认为一个空字符串。<br><strong>定义好了这个注解就相当于定义好了一个可接收参数的标签</strong>，接下来我们要将这个标签传入不同的参数然后分别贴到不同的构造函数之上（记住其中的关系，**@Provide + @Type(“”)区分不同构造函数<strong>，</strong>Type又被@Qualifier修饰**），这样，就相当于让每个构造函数有了辨识的途径，若要使用不同的构造函数，则只需去揭开不同的标签即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义Module</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Module</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SalaModule</span> &#123; </span><br><span class="line">    <span class="comment">//......... </span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Type(&quot;normal&quot;)</span><span class="comment">//使用限定符来区别使用哪个构造函数返回对象 </span></span><br><span class="line">    <span class="meta">@Provides</span> <span class="keyword">public</span> Apple <span class="title function_">provideNormalApple</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Apple</span>(); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Type(&quot;color&quot;)</span></span><br><span class="line">    <span class="comment">//使用限定符来区别使用哪个构造函数返回对象 </span></span><br><span class="line">    <span class="meta">@Provides</span> <span class="keyword">public</span> Apple <span class="title function_">provideColorApple</span><span class="params">(String color)</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Apple</span>(color); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于我们的Apple构造函数里使用了String,所以这里要管理这个String(★否则报错) </span></span><br><span class="line">    <span class="comment">//int等基本数据类型是不需要这样做的 </span></span><br><span class="line">    <span class="meta">@Provides</span> <span class="keyword">public</span> String <span class="title function_">provideString</span><span class="params">()</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Module传入不同参数分别标记不同的构造方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写Component</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(modules = &#123;SaladModule.class&#125;)</span></span><br><span class="line"><span class="comment">//指明要在那些Module里寻找依赖 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SaladComponent</span> &#123; </span><br><span class="line">    <span class="comment">//......... </span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Type(&quot;normal&quot;)</span></span><br><span class="line">    <span class="comment">//关键靠这个限定符来区分调用哪个构造函数 </span></span><br><span class="line">    Apple <span class="title function_">provideNormalApple</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//这个方法名并不重要，只要是provide开头就行，但是建议和module里一致 </span></span><br><span class="line">    <span class="meta">@Type(&quot;color&quot;)</span> </span><br><span class="line">    Apple <span class="title function_">provideColorApple</span><span class="params">()</span>; </span><br><span class="line">    String <span class="title function_">provideString</span><span class="params">()</span>; </span><br><span class="line">    <span class="comment">//注意：下面的这个方法，表示要将以上的三个依赖注入到某个类中 </span></span><br><span class="line">    <span class="comment">// 这里我们把上面的三个依赖注入到Salad中 </span></span><br><span class="line">    <span class="comment">// 因为我们要做沙拉 </span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">inject</span><span class="params">(Salad salad)</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Component通过刚才自定义的@Type注解标注对外暴露的接口，当这个接口方法被调用时，它会去Moudle内找对应的相同的@Type参数列表一致的构造与provider方法。</p>
<h4 id="Named"><a href="#Named" class="headerlink" title="@Named"></a><code>@Named</code></h4><p>Named底层实现是@Qualifier，是@Qualifier的一种</p>
<p>源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Named &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="简介-原文链接"><a href="#简介-原文链接" class="headerlink" title="简介 原文链接"></a>简介 <a href="https://www.cnblogs.com/tangpj/p/9874133.html">原文链接</a></h2><p>Dagger2是个依赖注入框架</p>
<p>依赖注入：是种实现控制反转用于解决依赖性设计模式。一个依赖关系指的是可被利用的一种对象（即服务提供端）。依赖注入是将所依赖的传递给将使用的从属对象（即客户端）。该服务是将会变成客户端的状态的一部分。传递服务给客户端，而非允许客户端来建立或寻找服务，是本设计模式的基本要求。–》简单说就是将实例对象传入到另一个对象中去（给一个对象传入一个实例变量）。</p>
<h2 id="依赖注入的实现"><a href="#依赖注入的实现" class="headerlink" title="依赖注入的实现"></a>依赖注入的实现</h2><ul>
<li>构造函数注入</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chef</span>&#123;</span><br><span class="line">    Menu menu;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Man</span><span class="params">(Menu menu)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.menu = menu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>setter方法注入</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chef</span>&#123;</span><br><span class="line">    Menu menu;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">setMenu</span><span class="params">(Menu menu)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.menu = menu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接口注入</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MenuInject</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">injectMenu</span><span class="params">(Menu menu)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chef</span> <span class="keyword">implements</span> <span class="title class_">MenuInject</span>&#123;</span><br><span class="line">    Menu menu;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">injectMenu</span><span class="params">(Menu menu)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.menu = menu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>依赖注入框架</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@Inject</span> <span class="keyword">class</span> <span class="title class_">Menu</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chef</span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Menu menu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Dagger2-实现依赖注入"><a href="#Dagger2-实现依赖注入" class="headerlink" title="Dagger2 实现依赖注入"></a>Dagger2 实现依赖注入</h2><p>Dagger2（2.17之后的版本）最简单的使用方式就是下面这种：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span> A a;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假如，A还需要依赖其他的类，且这个类是第三方库中提供的。又或者A实现了C接口，我们就需要用依赖倒置原则来加强我们的代码的可维护性等等。</p>
<p><strong>例子：做个餐饮系统，把点好的菜单发给厨师，让厨师负责做菜。</strong></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入一些Dagger For Android的依赖库</span></span><br><span class="line">implementation <span class="string">&#x27;com.google.dagger:dagger-android:2.17&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.google.dagger:dagger-android-support:2.17&#x27;</span> <span class="comment">// if you use the support libraries</span></span><br><span class="line">implementation <span class="string">&#x27;com.google.dagger:dagger:2.17&#x27;</span></span><br><span class="line">annotationProcessor <span class="string">&#x27;com.google.dagger:dagger-compiler:2.17&#x27;</span></span><br><span class="line">annotationProcessor <span class="string">&#x27;com.google.dagger:dagger-android-processor:2.17&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>Cooking接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Cooking</span>&#123;</span><br><span class="line">    String <span class="title function_">cook</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Chef</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chef</span> <span class="keyword">implements</span> <span class="title class_">Cooking</span>&#123;</span><br><span class="line"></span><br><span class="line">    Menu menu;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chef</span><span class="params">(Menu menu)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.menu = menu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">cook</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//key菜名， value是否烹饪</span></span><br><span class="line">        Map&lt;String,Boolean&gt; menuList = menu.getMenus();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String,Boolean&gt; entry : menuList.entrySet())&#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.getValue())&#123;</span><br><span class="line">                sb.append(entry.getKey()).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Menu</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Menu</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Boolean&gt; menus;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Menu</span><span class="params">( Map&lt;String,Boolean&gt; menus)</span>&#123;</span><br><span class="line">         <span class="built_in">this</span>.menus = menus;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Map&lt;String,Boolean&gt; <span class="title function_">getMenus</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> menus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们写一个Activity，作用是在onCreate方法中使用Chef对象实现cooking操作。我们先来看看不使用Dagger2和使用Dagger2的代码区别。</p>
<p><strong>MainActivity</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Map&lt;String, Boolean&gt; menus = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        menus.put(<span class="string">&quot;酸菜鱼&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        menus.put(<span class="string">&quot;土豆丝&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        menus.put(<span class="string">&quot;铁板牛肉&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">Menu</span> <span class="variable">menu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(menus);</span><br><span class="line">        <span class="type">Chef</span> <span class="variable">chef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chef</span>(menu);</span><br><span class="line">        System.out.println(chef.cook());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>DaggerMainActivity</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaggerMainActivity</span> <span class="keyword">extends</span> <span class="title class_">DaggerActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Chef chef;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Log.d(TAG,chef.cook());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在DaggerMainActivity上实现依赖注入还需要哪些代码。</p>
<p><strong>CookModules</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookModules</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Boolean&gt; <span class="title function_">providerMenus</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String, Boolean&gt; menus = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        menus.put(<span class="string">&quot;酸菜鱼&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        menus.put(<span class="string">&quot;土豆丝&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        menus.put(<span class="string">&quot;铁板牛肉&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> menus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ActivityModules</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ActivityModules</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ContributesAndroidInjector</span></span><br><span class="line">    <span class="keyword">abstract</span> MainActivity <span class="title function_">contributeMainActivity</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>CookAppComponent</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component(modules = &#123;</span></span><br><span class="line"><span class="meta">        AndroidSupportInjectionModule.class,</span></span><br><span class="line"><span class="meta">        ActivityModules.class,</span></span><br><span class="line"><span class="meta">        CookModules.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CookAppComponent</span> <span class="keyword">extends</span> <span class="title class_">AndroidInjector</span>&lt;MyApplication&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span>.Builder</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span> <span class="keyword">extends</span> <span class="title class_">AndroidInjector</span>.Builder&lt;MyApplication&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>MyApplication</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> <span class="keyword">extends</span> <span class="title class_">DaggerApplication</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AndroidInjector&lt;? <span class="keyword">extends</span> <span class="title class_">DaggerApplication</span>&gt; applicationInjector() &#123;</span><br><span class="line">        <span class="keyword">return</span> DaggerCookAppComponent.builder().create(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Dagger2-For-Android-使用要点分析"><a href="#Dagger2-For-Android-使用要点分析" class="headerlink" title="Dagger2 For Android 使用要点分析"></a>Dagger2 For Android 使用要点分析</h2><ol>
<li><strong>CookModules</strong><br>CookModule很简单，它的目的就是通过@Providers注解提供Menu对象需要的数据。因为Menu是需要依赖一个Map对象的，所以我们通过CookModules给它构造一个Map对象，并自动把它注入到Menu实例里面。</li>
<li><strong>ActivityModules</strong><br>ActivityModules的主要作用就是通过@ContributesAndroidInjector来标记哪个类需要使用依赖注入功能，这里标记的是ManActivity，所以MainActivity能通过@Inject注解来注入Chef对象。</li>
<li><strong>CookAppComponent</strong><br>CookAppComponent相当于一个注射器，我们前面定义的Modules就是被注射的类，使用@Inject注入对象的地方就是接收者类。</li>
<li><strong>MyApplication</strong><br>MyAppliction的特点是继承了DaggerAppliction类，并且在applicationInjector方法中构建了一个DaggerCookAppComponent注射器。</li>
</ol>
<p>这就是Dagger 2在Android中的使用方案了，在这里我们可以看到，接收这类（MainActivity）中的代码非常简单，实现依赖注入只使用了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line">Chef chef;</span><br></pre></td></tr></table></figure>

<p>在接收类里面完全没有多余的代码，如果我们要拓展可以SecondsActivity的话，在SecondsActivity我们要用到Menu类。</p>
<p>那么我们只需要在ActivityModules中增加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContributesAndroidInjector</span></span><br><span class="line"><span class="keyword">abstract</span> SecondsActivity <span class="title function_">contributeSecondsActivity</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>然后在SecondsActivity注入Menu：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Inject</span></span><br><span class="line">Menu menu;</span><br></pre></td></tr></table></figure>

<p>可以看到，对于整个工程来说，实现使用Dagger2 For Android实现依赖注入要写的模版代码其实非常少，非常简洁。只需要进行一次配置就可以，不需要频繁写一堆模版代码。总的来说，Dagger2造成模版代码增加这个问题已经解决了。</p>
<h2 id="Dagger2的优势"><a href="#Dagger2的优势" class="headerlink" title="Dagger2的优势"></a>Dagger2的优势</h2><p>在这里我们总结下使用Dagger2带来的优点。</p>
<ol>
<li>减少代码量，提高工作效率<br>例如上面的例子中，我们构建一个Chef对象的话，不使用Dagger2的情况下，需要在初始化Chef对象之前进行一堆前置对象（Menu、Map）的初始化，并且需要手工注入到对应的实例中。你想像下，如果我们再加一个Restaurant( 餐馆 )对象，并且需要把Chef注入到Restaurant中的话，那么初始化Restaurant对象时，需要的前置步骤就更繁琐了。<br>可能有人会觉得，这也没什么啊，我不介意手工初始化。但是如果你的系统中有N处需要初始化Restaurant对象的地方呢？使用Dagger2 的话，只需要用注解注入就可以了。</li>
<li>自动处理依赖关系<br>使用Dagger2的时候，我们不需要指定对象的依赖关系，Dagger2会自动帮我们处理依赖关系（例如Chef需要依赖Menu，Menu需要依赖Map，Dagger自动处理了这个依赖关系）。</li>
<li>采用静态编译，不影响运行效率<br>因为Dagger2是在编译期处理依赖注入的，所以不会影响运行效率在一定的程度上还能提高系统的运行效率（例如采用Dagger2实现单例，不用加锁效率更高）。</li>
<li>提高多人编程效率<br>在多人协作的时候，一个人用Dagger2边写完代码后，其它所有组员都能通过@Inject注解直接注入常用的对象。加快编程效率，并且能大大增加代码的复用性。</li>
</ol>
<ul>
<li><strong>@ContributesAndroidInjector</strong><br>你可以把它看成Dagger2是否要自动把需要的用到的Modules注入到DishesFragment中。这个注解是Dagger2 For Android简化代码的关键</li>
<li><strong>@Module</strong><br>被这个注解标记的类可以看作为依赖对象的提供者，可以通过这个被标记的类结合其它注解来实现依赖关系的关联。</li>
<li><strong>@Provides</strong><br>主要作用就是用来提供一些第三方类库的对象或提供一些构建非常复杂的对象在Dagger2中类似工厂类的一个角色。</li>
<li><strong>@Binds</strong><br>主要作用就是确定接口与具体的具体实现类。</li>
</ul>
<h2 id="Dagger2-For-Android是如何注入依赖的？"><a href="#Dagger2-For-Android是如何注入依赖的？" class="headerlink" title="Dagger2 For Android是如何注入依赖的？"></a>Dagger2 For Android是如何注入依赖的？</h2><p>我们在用Dagger2的时候是通过一些模版代码来实现依赖注入的（ DaggerXXXComponent.builder().inject(xxx) 这种模版代码），但是在Demo中的DishesFragment根本没看到类似的代码啊，那么这些对象是什么时候注入到DishesFragment重的呢？</p>
<p>答案就是**@ContributesAndroidInjector**注解</p>
<p>我们先来看看Dagger2是通过什么方式来实现自动把依赖注入到DishesActivity中的。</p>
<p><strong>ActivityModules</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ActivityModules</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ContributesAndroidInjector(modules = DishesModules.class)</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> DishesActivity <span class="title function_">contributesDishActivity</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ContributesAndroidInjector(modules = AddEditModules.class)</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> AddEditDishActivity <span class="title function_">contributesAddEditDishActivity</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没错，就是@ContributesAndroidInjector这个注解，modules就代表这个DishesActivity需要依赖哪个Modules。</p>
<h2 id="Dagger2-For-Android使用要点"><a href="#Dagger2-For-Android使用要点" class="headerlink" title="Dagger2 For Android使用要点"></a>Dagger2 For Android使用要点</h2><p>我们现在来总结下，简化版的Dagger实现依赖注入的几个必要条件：</p>
<ol>
<li>第三方库通过Modules的@provides注解来提供依赖</li>
<li>提供一个全局唯一的Component，并且Modules中需要添加AndroidSupportInjectionModule类，它的作用时关联需求与依赖之间的关系</li>
<li>Application需要继承DaggerApplication类，并且在applicationInjector构建并返回全剧唯一的Component实例</li>
<li>其它需要使用依赖注入的组建都需要继承<strong>Dagger组件名字</strong>类，并且需要在相应的Modules中通过@ContributesAndroidInjector注解标记需要注入依赖的组建。</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓第三方</tag>
      </tags>
  </entry>
  <entry>
    <title>第三方相关</title>
    <url>/posts/3257296232/</url>
    <content><![CDATA[<h1 id="申请第三方参数所需数据"><a href="#申请第三方参数所需数据" class="headerlink" title="申请第三方参数所需数据"></a>申请第三方参数所需数据</h1><ol>
<li>定包名</li>
<li>定签名文件（生成签名文件）</li>
<li>取签名文件的SHA1（第三方参数文档中的“安全码”）</li>
<li>取签名文件的MD5值（要去掉冒号）（或者用微信签名工具输入包名得到的）32位数字（第三方参数文档中的“应用签名”）</li>
<li>给运维打好的包<br>js中字符串全部替换<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;CD:B0:3E:73:53:2B:C2:A2:54:5D:2E:75:67:74:BB:92&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/\:/g</span>,<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="支付宝支付"><a href="#支付宝支付" class="headerlink" title="支付宝支付"></a>支付宝支付</h1><h2 id="支付宝sdk升级"><a href="#支付宝sdk升级" class="headerlink" title="支付宝sdk升级"></a>支付宝sdk升级</h2><p><a href="https://docs.open.alipay.com/54/104509">支付宝sdk改版为aar的升级</a></p>
<p>升级步骤：</p>
<ul>
<li>删除AliSDK–》libs下的alipaySDK-20150818.jar</li>
<li>往AliSKD的libs目录下增加alipaySdk-15.6.8-20191021122455-noUtdid.aar</li>
<li>在AliSDK的build.gradle中dependencies添加</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">compile</span><span class="params">(name: <span class="string">&#x27;alipaySdk-15.6.8-20191021122455-noUtdid&#x27;</span>, ext:<span class="string">&#x27;aar&#x27;</span>)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>另外，调用支付的方法的参数列表有变动</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">AliPayHelper.java的 alipay.pay(payInfo,<span class="literal">true</span>);<span class="regexp">//</span>添加了<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h1><p><img src="https://pay.weixin.qq.com/wiki/doc/api/img/chapter8_3_1.png" alt="微信支付业务流程图"></p>
<p>结合来电易项目理解：</p>
<p>一进入支付页面就会调用查询订单状态（对应图中14步之后的“后台查询实际支付结果”）</p>
<p>完整流程：app一进入支付页面就向接口请求这个单的状态（是否已经支付）；若查到未支付，则向接口请求生成支付订单（对应图中3）；接口去跟微信平台调用统一下单API（对应图中4）；微信平台返回预付单给接口（对应图中5）；接口把预付单信息和调起微信支付sdk所需的参数sign等返回给app（对应图中7）；app根据这些参数调起微信sdk，弹出微信支付输入密码页面，输入密码后，微信客户端告知微信平台（对应图中9、10、11、12、13）；微信平台告知微信客户端支付成功，微信客户端跳到微信支付成功页（对应图中14）；此时用户点“返回商户”，返回到App的订单页面（此时会调用刚开始的那个查询订单状态的接口）</p>
<h2 id="微信sdk升级"><a href="#微信sdk升级" class="headerlink" title="微信sdk升级"></a>微信sdk升级</h2><p><a href="https://developers.weixin.qq.com/community/develop/doc/00062412e00e4878f8290f35457801?from=singlemessage">兼容android10的升级</a></p>
<p>升级到5.5.8步骤：</p>
<ul>
<li>删除UmengCenter–》libs下<code>wechat-sdk-android-without-mta-5.1.4.jar</code></li>
<li>UmengCenter的build.gradle的dependencies下增加<code>compile &#39;com.tencent.mm.opensdk:wechat-sdk-android-without-mta:5.5.8&#39;</code></li>
<li>WXPayHelper.java内注释掉<code>m_WXApi.isWXAppSupportAPI()</code>相关的部分</li>
</ul>
<h2 id="微信支付调换AppId可以正常调起支付（安卓ios都这样）"><a href="#微信支付调换AppId可以正常调起支付（安卓ios都这样）" class="headerlink" title="微信支付调换AppId可以正常调起支付（安卓ios都这样）"></a>微信支付调换AppId可以正常调起支付（安卓ios都这样）</h2><p>做法：微信开放平台上有两套参数（本来是两个不一样的包名、不一样的AppId），然后两个AppId底下的包名和应用签名都改成一样。（可以推广到多套AppId的情况）</p>
<p>最终效果：“调换AppId”可以正常调起微信支付。（即微信开放平台上多个应用底下的包名和应用签名配置成一样的，appId的取值直接从接口获取，包名和应用签名影响的是支付完成返回和）</p>
<p>结论：包名和应用签名与微信开放平台配置的有关。AppId是获取的接口返回的，与微信开放平台配置的AppId无关。</p>
<p>但是：微信分享只会显示的原来那一套参数的</p>
<h1 id="森马app-使用腾讯加固流程"><a href="#森马app-使用腾讯加固流程" class="headerlink" title="森马app 使用腾讯加固流程"></a>森马app 使用腾讯加固流程</h1><p>1、登录腾讯云平台</p>
<p><a href="https://console.cloud.tencent.com/ms/index#">https://console.cloud.tencent.com/ms/index#</a></p>
<p>2、在线方式上传要加固的app包</p>
<p>3、等待加固成功后，下载加固包</p>
<p>4、用签名文件重新把已加固的包二次打包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jarsigner -verbose -keystore /Users/zhuojianhai/Desktop/senma/smldy.jks -signedjar /Users/zhuojianhai/Desktop/senma/qb_customer.apk  /Users/zhuojianhai/Desktop/senma/qb_customer_legu.apk smldy</span><br></pre></td></tr></table></figure>

<p>输入秘钥库密码：123456</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jarsigner -verbose -keystore /Users/zhuojianhai/Desktop/senma/smldy.jks -signedjar /Users/zhuojianhai/Desktop/senma/verificationed.apk /Users/zhuojianhai/Desktop/senma/com.xiaomi.appstore.signature.verification.apk  smldy</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jarsigner -verbose -keystore /Users/zhuojianhai/Desktop/senma/smldy.jks -signedjar /Users/zhuojianhai/Desktop/senma/Qihuunsigned.apk  /Users/zhuojianhai/Desktop/senma/Qihuunsign.apk smldy </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jarsigner -verbose -keystore /Users/zhuojianhai/Desktop/senma/smldy.jks -signedjar</span><br><span class="line">/Users/zhuojianhai/Desktop/signfile/meizuemptyapk-release-signed.apk /Users/zhuojianhai/Desktop/signfile/meizuemptyapk-release-unsigned.apk smldy </span><br></pre></td></tr></table></figure>



<h1 id="apk-上架之前需要加固"><a href="#apk-上架之前需要加固" class="headerlink" title="apk 上架之前需要加固"></a>apk 上架之前需要加固</h1><ul>
<li>乐固只有 exe，会把签名去掉，只有加固的功能</li>
<li>360 加固宝，会把签名去掉，有加固和重新签名的功能</li>
<li>jarsigner 命令可以（给加固后未签名的）重新签名<br><code>jarsigner -verbose -keystore [私钥存放路径] -signedjar [签名后文件存放路径][未签名文件路径][证书名称]</code><br>例：<code>jarsigner -verbose -keystore /Users/用户名/mykeystore -signedjar ./signed.apk ./unsigned.apk haha</code><br>注意：证书名称即 Alias（你设置的别名）；去掉 keystore 的扩展名称即可解决<code>“keystore No such file or directory”</code>问题；</li>
</ul>
<h1 id="热修复"><a href="#热修复" class="headerlink" title="热修复"></a>热修复</h1><h2 id="腾讯系（类加载方案）"><a href="#腾讯系（类加载方案）" class="headerlink" title="腾讯系（类加载方案）"></a>腾讯系（类加载方案）</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote>
<p> 当有多个dex文件时，他们会组成一个有序数组，按顺序加载。对于已经加载的class是不会重新加载–》得出热修复方案：把需要修复的类打包成一个dex文件下发，并在APP启动时通过反射，将这个dex文件放在dexElements的最前面，这样修复类的Class就会比有Bug的Class优先加载了。</p>
</blockquote>
<h3 id="Qzone"><a href="#Qzone" class="headerlink" title="Qzone"></a>Qzone</h3><blockquote>
<p><strong>最核心的东西</strong></p>
<p>反射修改dexElements</p>
<p><strong>弊端</strong></p>
<p>在实现过程中，会遇到unexpected DEX problem异常，Qzone方案为了解决这个问题采用了插&gt; 桩的策略来规避这个异常</p>
<ul>
<li>牺牲类加载速度：</li>
</ul>
<p>在Dalvik虚拟机，APP在安装的时候会被执行dexopt操作，同一个dex文件内的Class会被打上CLASS_ISPREVERIFIED标志，而补丁包中的类并没有打上此标志，因此抛出异常。解决方法就是在第一次打包APK时让所有类都引用另一个dex文件中的类，这样所有的类始终不会打上CLASS_ISPREVERIFIED标志，因此补丁包可以顺利加载，但是Dalvik虚拟机在检测到一个类未打上CLASS_ISPREVERIFIED之后会再次在类加载的时候进行dexopt相关的操作，如果一次性加载很多类，速度将明显变慢。</p>
<ul>
<li>牺牲补丁包大小：</li>
</ul>
<p>在Art虚拟机，dex文件最终会编译成本地机器码，在dex2oat时fast *已经将各个类的地址写死，若补丁包中的类出现字段或者方法的修改，会出现内存地址错乱，解决办法是将这个类的父类和调用这个类的类都加入补丁包。但这样会导致补丁包急剧增大。(实际上要理解清楚这个问题需要熟悉Dalvik和Art的完整流程，并非三言两语能解释清楚)</p>
</blockquote>
<h3 id="Tinker"><a href="#Tinker" class="headerlink" title="Tinker"></a>Tinker</h3><blockquote>
<ul>
<li>因为Qzone的缺陷，在参考Instant Run的冷插拔与buck的exopackage后，Tinker采用了全量替换的策略<br>全量替换可以避免插桩和地址写死问题，但是补丁包会很大，因此可以在新旧两个Dex的差异放在补丁包中，下发到移动端后再在本地合成完整的dex文件。由于需要下发的全量补丁包体积过大，Tinker采用了后台求diff，下发diff文件，移动端合成全量包的策略。</li>
<li>创新处一：Tinker采用了全量替换的策略<br>全量替换可以避免插桩和地址写死问题</li>
<li>创新处二：（只要有diff&#x2F;patch算法，就可以开发Tinker）采用了自研的DexDiff算法，大大优化了下发差异包的大小。</li>
</ul>
</blockquote>
<h2 id="阿里系（底层替换方案）"><a href="#阿里系（底层替换方案）" class="headerlink" title="阿里系（底层替换方案）"></a>阿里系（底层替换方案）</h2><h3 id="HotFix"><a href="#HotFix" class="headerlink" title="HotFix"></a>HotFix</h3><h2 id="美团"><a href="#美团" class="headerlink" title="美团"></a>美团</h2><h3 id="Robust"><a href="#Robust" class="headerlink" title="Robust"></a>Robust</h3><h1 id="项目接入Bugly"><a href="#项目接入Bugly" class="headerlink" title="项目接入Bugly"></a>项目接入Bugly</h1><p><a href="https://bugly.qq.com/docs/user-guide/instruction-manual-android/?v=20200312155538">官方文档地址</a></p>
<p><code>SBC</code>添加<code>Bugly</code>步骤（供参考）：</p>
<ol>
<li><code>U1cityAndroidFrame/build.gradle</code>中添加依赖</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//bugly</span></span><br><span class="line">    compile <span class="string">&#x27;com.tencent.bugly:crashreport:3.1.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>U1CityApplication.java</code>中添加俩公共方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">buglyInit</span><span class="params">(String buglyAppId, <span class="type">boolean</span> isRelease)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> getApplicationContext();</span><br><span class="line">        <span class="comment">// 获取当前包名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> context.getPackageName();</span><br><span class="line">        <span class="comment">// 获取当前进程名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">processName</span> <span class="operator">=</span> getProcessName(android.os.Process.myPid());</span><br><span class="line">        <span class="comment">// 设置是否为上报进程</span></span><br><span class="line">        CrashReport.<span class="type">UserStrategy</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CrashReport</span>.UserStrategy(context);</span><br><span class="line">        strategy.setUploadProcess(processName == <span class="literal">null</span> || processName.equals(packageName));</span><br><span class="line">        <span class="comment">// 初始化Bugly</span></span><br><span class="line">        CrashReport.initCrashReport(context, buglyAppId, isRelease, strategy);</span><br><span class="line">        <span class="comment">// 如果通过“AndroidManifest.xml”来配置APP信息，初始化方法如下</span></span><br><span class="line">        <span class="comment">// CrashReport.initCrashReport(context, strategy);</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取进程号对应的进程名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid 进程号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 进程名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getProcessName</span><span class="params">(<span class="type">int</span> pid)</span> &#123;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;/proc/&quot;</span> + pid + <span class="string">&quot;/cmdline&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">processName</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(processName)) &#123;</span><br><span class="line">            processName = processName.trim();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> processName;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="literal">null</span>) &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException exception) &#123;</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在导购端、顾客端、商家端的<code>App.java</code>中添加调用</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//App.java中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//在super.onCreate();下方添加</span></span><br><span class="line">    <span class="comment">//新项目在bugly后台创建产品后用新的appId替换底下的&quot;8b1782d99b&quot;参数</span></span><br><span class="line">    <span class="comment">//bugly初始化</span></span><br><span class="line">    buglyInit(<span class="string">&quot;8b1782d99b&quot;</span>, !isRelease());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><h2 id="GPS强弱"><a href="#GPS强弱" class="headerlink" title="GPS强弱"></a><a href="https://juejin.cn/post/7144313606329335815">GPS强弱</a></h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">&quot;MissingPermission&quot;</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">void</span> <span class="title function_">requestLocationUpdates</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        locationManager.<span class="title function_">requestLocationUpdates</span>(<span class="title class_">LocationManager</span>.<span class="property">GPS_PROVIDER</span>, <span class="number">2000</span>, <span class="number">5</span>, locationListener);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line">        <span class="title class_">DebugLog</span>.<span class="title function_">e</span>(<span class="variable constant_">TAG</span>,e.<span class="title function_">getMessage</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">void</span> <span class="title function_">removeUpdates</span>(<span class="params"></span>) &#123;</span><br><span class="line">    locationManager.<span class="title function_">removeUpdates</span>(locationListener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//gps强弱</span></span><br><span class="line"><span class="keyword">private</span> <span class="title class_">Boolean</span> gnssStatusListenerAdded = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="title class_">LocationListener</span> locationListener = <span class="keyword">new</span> <span class="title class_">LocationListener</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">onLocationChanged</span>(<span class="params"><span class="meta">@NonNull</span> Location location</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title class_">LocationManager</span> locationManager;</span><br><span class="line"><span class="keyword">private</span> <span class="title class_">GnssStatusCompat</span>.<span class="property">Callback</span> gnssStatusListener;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">void</span> <span class="title function_">gnssCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    locationManager = (<span class="title class_">LocationManager</span>) <span class="title function_">getSystemService</span>(<span class="title class_">Context</span>.<span class="property">LOCATION_SERVICE</span>);</span><br><span class="line">    gnssStatusListener = <span class="keyword">new</span> <span class="title class_">GnssStatusCompat</span>.<span class="title class_">Callback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">onSatelliteStatusChanged</span>(<span class="params"><span class="meta">@NonNull</span> GnssStatusCompat status</span>) &#123;</span><br><span class="line">            <span class="variable language_">super</span>.<span class="title function_">onSatelliteStatusChanged</span>(status);</span><br><span class="line">            <span class="comment">//载波噪声密度大于30，并且卫星数量大于等于3就可以获取到定位信息。</span></span><br><span class="line">            <span class="comment">// 那么可以简单的定义载波噪声密度大于30的卫星数量小于等于3时为信号弱，大于3小于7为信号中等，大于等于7为信号强。</span></span><br><span class="line">            int satelliteCount = status.<span class="title function_">getSatelliteCount</span>();</span><br><span class="line">            int cn0DbHz30SatelliteCount = <span class="number">0</span>;<span class="comment">// 可以搜索到的卫星总数</span></span><br><span class="line">            int cn0DbHz37SatelliteCount = <span class="number">0</span>;</span><br><span class="line">            <span class="title class_">String</span> satelliteInfo = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (int index = <span class="number">0</span>, size = satelliteCount; index &lt; size; index++) &#123;</span><br><span class="line">                float cn0DbHz = status.<span class="title function_">getCn0DbHz</span>(index);<span class="comment">// 每个卫星的载波噪声密度</span></span><br><span class="line">                satelliteInfo += (<span class="string">&quot;svid:&quot;</span> + status.<span class="title function_">getSvid</span>(index) + <span class="string">&quot;,cnoDbHz:&quot;</span> + cn0DbHz);</span><br><span class="line">                <span class="keyword">if</span> (cn0DbHz &gt;= <span class="number">30</span>) &#123;</span><br><span class="line">                    cn0DbHz30SatelliteCount++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cn0DbHz &gt;= <span class="number">37</span>) &#123;</span><br><span class="line">                    cn0DbHz37SatelliteCount++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="title class_">String</span>.<span class="title function_">format</span>(<span class="string">&quot;total satellite count ：%s&quot;</span>, satelliteCount));</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="title class_">String</span>.<span class="title function_">format</span>(<span class="string">&quot;cno &gt;37 count ：%s ---cno &gt;30 count %s&quot;</span>, cn0DbHz37SatelliteCount, cn0DbHz30SatelliteCount));</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="title class_">String</span>.<span class="title function_">format</span>(<span class="string">&quot;satellite info ：%s&quot;</span>,satelliteInfo));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">&quot;MissingPermission&quot;</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">void</span> <span class="title function_">registerGnssStatusListener</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!gnssStatusListenerAdded)&#123;</span><br><span class="line">            gnssStatusListenerAdded =</span><br><span class="line">                     <span class="title class_">LocationManagerCompat</span>.<span class="title function_">registerGnssStatusCallback</span>(locationManager,</span><br><span class="line">                    gnssStatusListener,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Handler</span>(<span class="title class_">Looper</span>.<span class="title function_">myLooper</span>()==<span class="literal">null</span>?<span class="title class_">Looper</span>.<span class="title function_">getMainLooper</span>():<span class="title class_">Looper</span>.<span class="title function_">myLooper</span>()) );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line">        <span class="title class_">DebugLog</span>.<span class="title function_">e</span>(<span class="variable constant_">TAG</span>,e.<span class="title function_">getMessage</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">void</span> <span class="title function_">unRegisterGnssStatusListener</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (gnssStatusListenerAdded)&#123;</span><br><span class="line">        <span class="title class_">LocationManagerCompat</span>.<span class="title function_">unregisterGnssStatusCallback</span>(locationManager, gnssStatusListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Activity#onCreate()中调用 gnssCallback();</span><br><span class="line"></span><br><span class="line">授权方法成功后调  registerGnssStatusListener(); 开始requestLocationUpdates();</span><br><span class="line"></span><br><span class="line">停止 removeUpdates();</span><br><span class="line"></span><br><span class="line">Activity#onDestroy()中调 unRegisterGnssStatusListener();</span><br></pre></td></tr></table></figure>







<h1 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h1><h2 id="高德地图"><a href="#高德地图" class="headerlink" title="高德地图"></a>高德地图</h2><h3 id="高德静态地图"><a href="#高德静态地图" class="headerlink" title="高德静态地图"></a>高德静态地图</h3><p><a href="https://restapi.amap.com/v3/staticmap?location=118.162963,24.528373&amp;zoom=17&amp;size=540*275&amp;markers=mid,,A:118.162963,24.528373&amp;key=bff4a194db711cd52b1d98531b79d842">https://restapi.amap.com/v3/staticmap?location=118.162963,24.528373&amp;zoom=17&amp;size=540*275&amp;markers=mid,,A:118.162963,24.528373&amp;key=bff4a194db711cd52b1d98531b79d842</a></p>
<p>size是宽高，zoom是缩放比例，17最大。key换成自己应用申请的</p>
<h2 id="百度地图"><a href="#百度地图" class="headerlink" title="百度地图"></a>百度地图</h2><h3 id="百度静态地图"><a href="#百度静态地图" class="headerlink" title="百度静态地图"></a>百度静态地图</h3><p><a href="http://api.map.baidu.com/staticimage?width=300&amp;height=200&amp;center=118.162963,24.528373&amp;zoom=18&amp;markers=118.162963,24.528373&amp;markerStyles=m,A">http://api.map.baidu.com/staticimage?width=300&amp;height=200&amp;center=118.162963,24.528373&amp;zoom=18&amp;markers=118.162963,24.528373&amp;markerStyles=m,A</a></p>
<p>width、height：宽高；center是经纬度；markers是marker的经纬度位置；zoom是缩放比例，19最大</p>
<h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><h2 id="MVPArms"><a href="#MVPArms" class="headerlink" title="MVPArms"></a>MVPArms</h2><p><a href="https://github.com/JessYanCoding/MVPArms-Module-Template.git">module级模板</a></p>
<p><a href="https://github.com/JessYanCoding/MVPArmsTemplate">页面级模板</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓第三方</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓项目规范</title>
    <url>/posts/1457752268/</url>
    <content><![CDATA[<h1 id="Android项目规范"><a href="#Android项目规范" class="headerlink" title="Android项目规范"></a>Android项目规范</h1><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><h3 id="通用命名规范"><a href="#通用命名规范" class="headerlink" title="通用命名规范"></a>通用命名规范</h3><ol>
<li>如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式。(Builder、Factory、Proxy、Adapter、Wrapper)</li>
<li>任何命名不能以<code>下划线</code>或者<code>符号</code>开头。</li>
<li>任何命名严禁直接使用<code>中文</code>的方式。<code>纯拼音</code>的方式应尽量避免使用，使用<code>完整的单词组合</code>来表达其意。</li>
<li>杜绝完全不规范的缩写，避免望文不知义(多个单词缩写不要只提取首字母)。</li>
</ol>
<h3 id="包命名规范"><a href="#包命名规范" class="headerlink" title="包命名规范"></a>包命名规范</h3><ol>
<li>反域名命名规则</li>
<li><code>.</code>之间有且仅有一个自然语义的英语单词，可以使用下划线。</li>
</ol>
<h3 id="类-抽象类-接口命名规范"><a href="#类-抽象类-接口命名规范" class="headerlink" title="类,抽象类,接口命名规范"></a>类,抽象类,接口命名规范</h3><ol>
<li>名词</li>
<li>类名使用<code>UpperCamelCase(大驼峰)</code>风格</li>
<li>抽象类命名使用 <code>Abstract</code> 或 <code>Base</code> 开头</li>
<li>接口类命名使用以<code>listener</code>,<code>able</code>,<code>ible</code>,<code>callback</code>等类似功能性词缀结尾（单独文件时使用，变量命名则遵循变量名规范）</li>
<li>异常类命名使用<code>Exception</code>、<code>Throwable</code>结尾。</li>
<li>测试类命名以要测试的类的名称开始,以<code>Test</code>结尾</li>
<li><strong>dataClass后缀为Bean</strong></li>
<li><strong>枚举类后缀为Enum</strong></li>
<li><strong>数据库的数据类后缀为Entity</strong></li>
<li><strong>dataClass进行类转换或者提取信息的工具类后缀为Converter</strong></li>
</ol>
<h3 id="函数命名规范"><a href="#函数命名规范" class="headerlink" title="函数命名规范"></a>函数命名规范</h3><ol>
<li>动词或动名词</li>
<li>方法名、参数名、成员变量、局部变量都统一使用 <code>lowerCamelCase(小驼峰)</code>风格</li>
</ol>
<h3 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h3><ol>
<li>不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。(单个文件内的boolean、int类型可以使用，加上注释，但是不建议)</li>
<li>在 long 或者 Long 赋值时，数值后使用大写的 L，不能是小写的 l，小写容易跟数字1 混淆，造成误解。</li>
<li>不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护。</li>
<li>如果变量值仅在一个固定范围内变化用 enum 类型来定义。</li>
<li>枚举成员名称需要全大写，单词间用下划线隔开。</li>
<li>类中控件名称尽量和xml控件id保持一致</li>
<li>公开常量应定义为静态final,名称全部大写.<br>例如: &#96;&#96;&#96;const val ACTION_MAIN &#x3D; ”android.intent.action.MAIN”&#96;&#96;</li>
</ol>
<h3 id="安卓相关命名规范"><a href="#安卓相关命名规范" class="headerlink" title="安卓相关命名规范"></a>安卓相关命名规范</h3><h4 id="Java类命名"><a href="#Java类命名" class="headerlink" title="Java类命名"></a>Java类命名</h4><table>
<thead>
<tr>
<th align="left">类</th>
<th align="left">格式</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Activity</td>
<td align="left">xxx描述+Activity</td>
<td align="left">FindActivity</td>
</tr>
<tr>
<td align="left">Fragment</td>
<td align="left">xxx描述+Fragment</td>
<td align="left">SearchFragment</td>
</tr>
<tr>
<td align="left">Adapter</td>
<td align="left">xxx描述+Adapter</td>
<td align="left">SearchAdapter</td>
</tr>
<tr>
<td align="left">Model</td>
<td align="left">xxx描述+Model</td>
<td align="left">SearchModel</td>
</tr>
<tr>
<td align="left">ViewModel</td>
<td align="left">xxx描述+ViewModel</td>
<td align="left">SearchViewModel</td>
</tr>
<tr>
<td align="left">Service</td>
<td align="left">xxx描述+Service</td>
<td align="left">ImService</td>
</tr>
<tr>
<td align="left">BroadcastReceiver</td>
<td align="left">xxx描述+Receiver</td>
<td align="left">NetworkReceiver</td>
</tr>
<tr>
<td align="left">基类</td>
<td align="left">Base+父类命名</td>
<td align="left">BaseActivity</td>
</tr>
</tbody></table>
<h3 id="资源文件命名规范"><a href="#资源文件命名规范" class="headerlink" title="资源文件命名规范"></a>资源文件命名规范</h3><ul>
<li>命名以使用的控件为前缀，后面加上描述，中间以下划线分隔</li>
<li>lib库的资源在以上基础上加上模块前缀,防止资源名称相同编译不通过</li>
</ul>
<h4 id="控件命名"><a href="#控件命名" class="headerlink" title="控件命名"></a>控件命名</h4><table>
<thead>
<tr>
<th align="left">控件</th>
<th align="left">缩写</th>
</tr>
</thead>
<tbody><tr>
<td align="left">TextView</td>
<td align="left">tv</td>
</tr>
<tr>
<td align="left">EditText</td>
<td align="left">et</td>
</tr>
<tr>
<td align="left">Button</td>
<td align="left">bt</td>
</tr>
<tr>
<td align="left">ImageButton</td>
<td align="left">ib</td>
</tr>
<tr>
<td align="left">LinearLayout</td>
<td align="left">ll</td>
</tr>
<tr>
<td align="left">RelativeLayout</td>
<td align="left">rl</td>
</tr>
<tr>
<td align="left">RecyclerView</td>
<td align="left">rv</td>
</tr>
<tr>
<td align="left">ScrollView</td>
<td align="left">sv</td>
</tr>
<tr>
<td align="left">ConstraintLayout</td>
<td align="left">cl</td>
</tr>
</tbody></table>
<ol>
<li>layout</li>
</ol>
<table>
<thead>
<tr>
<th align="left">布局类型</th>
<th align="left">命名格式</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Activity布局</td>
<td align="left">module_activity_xxx</td>
</tr>
<tr>
<td align="left">fragment布局</td>
<td align="left">module_fragment_xxx</td>
</tr>
<tr>
<td align="left">dialog布局</td>
<td align="left">module_dialog_xxx</td>
</tr>
<tr>
<td align="left">可include布局</td>
<td align="left">module_include_xxx</td>
</tr>
<tr>
<td align="left">recyclerView布局</td>
<td align="left">module_recycler_item_xxx</td>
</tr>
</tbody></table>
<h4 id="drawable"><a href="#drawable" class="headerlink" title="drawable"></a>drawable</h4><table>
<thead>
<tr>
<th>drawable</th>
<th>命名格式</th>
</tr>
</thead>
<tbody><tr>
<td>icon</td>
<td>module_ic_xxx</td>
</tr>
<tr>
<td>selector</td>
<td>module_selector_xxx</td>
</tr>
<tr>
<td>shape</td>
<td>module_shape_xxx</td>
</tr>
<tr>
<td>menu</td>
<td>module_menu_xxx</td>
</tr>
</tbody></table>
<h5 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h5><ul>
<li>多状态的，应在命名中体现</li>
</ul>
<table>
<thead>
<tr>
<th>selector</th>
<th>命名格式</th>
</tr>
</thead>
<tbody><tr>
<td>normal</td>
<td>xx_normal</td>
</tr>
<tr>
<td>pressed</td>
<td>xx_pressed</td>
</tr>
<tr>
<td>focused</td>
<td>xx_focused</td>
</tr>
<tr>
<td>selected</td>
<td>xx_selected</td>
</tr>
</tbody></table>
<h4 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h4><ul>
<li>strings 见名知意即可</li>
</ul>
<h4 id="colors"><a href="#colors" class="headerlink" title="colors"></a>colors</h4><h4 id="dimens"><a href="#dimens" class="headerlink" title="dimens"></a>dimens</h4><ul>
<li>length_value 代表一般长度(暂时用不到)</li>
<li>font_value 代表字体</li>
<li>(UI规范类的暂时没有)</li>
</ul>
<h4 id="控件ID"><a href="#控件ID" class="headerlink" title="控件ID"></a>控件ID</h4><p>控件名+功能(全称也行)</p>
<table>
<thead>
<tr>
<th align="left">控件</th>
<th align="left">缩写</th>
</tr>
</thead>
<tbody><tr>
<td align="left">LinearLayout</td>
<td align="left">ll</td>
</tr>
<tr>
<td align="left">RelativeLayout</td>
<td align="left">rl</td>
</tr>
<tr>
<td align="left">TextView</td>
<td align="left">tv</td>
</tr>
<tr>
<td align="left">Button</td>
<td align="left">bt</td>
</tr>
<tr>
<td align="left">ImageButton</td>
<td align="left">iv</td>
</tr>
<tr>
<td align="left">ImageView</td>
<td align="left">iv</td>
</tr>
<tr>
<td align="left">CheckBox</td>
<td align="left">cb</td>
</tr>
<tr>
<td align="left">RadioButton</td>
<td align="left">rb</td>
</tr>
<tr>
<td align="left">DatePicker</td>
<td align="left">dp</td>
</tr>
<tr>
<td align="left">EditText</td>
<td align="left">et</td>
</tr>
<tr>
<td align="left">TimePicker</td>
<td align="left">tp</td>
</tr>
<tr>
<td align="left">ProgressBar</td>
<td align="left">pb</td>
</tr>
<tr>
<td align="left">SeekBar</td>
<td align="left">sb</td>
</tr>
<tr>
<td align="left">AutoCompleteTextView</td>
<td align="left">actv</td>
</tr>
<tr>
<td align="left">ZoomControls</td>
<td align="left">zc</td>
</tr>
<tr>
<td align="left">VideoView</td>
<td align="left">vv</td>
</tr>
<tr>
<td align="left">WdbView</td>
<td align="left">wv</td>
</tr>
<tr>
<td align="left">RantingBar</td>
<td align="left">rb</td>
</tr>
<tr>
<td align="left">Tab</td>
<td align="left">tab</td>
</tr>
<tr>
<td align="left">Spinner</td>
<td align="left">spn</td>
</tr>
<tr>
<td align="left">Chronometer</td>
<td align="left">cmt</td>
</tr>
<tr>
<td align="left">ScrollView</td>
<td align="left">sv</td>
</tr>
<tr>
<td align="left">TextSwitch</td>
<td align="left">ts</td>
</tr>
<tr>
<td align="left">ImageSwitch</td>
<td align="left">is</td>
</tr>
<tr>
<td align="left">listView</td>
<td align="left">lv</td>
</tr>
<tr>
<td align="left">ExpandableList</td>
<td align="left">el</td>
</tr>
<tr>
<td align="left">MapView</td>
<td align="left">mapView</td>
</tr>
</tbody></table>
<h2 id="编码要求"><a href="#编码要求" class="headerlink" title="编码要求"></a>编码要求</h2><h3 id="通用编码要求"><a href="#通用编码要求" class="headerlink" title="通用编码要求"></a>通用编码要求</h3><ol>
<li>代码格式化用开发工具默认的风格</li>
<li>单个方法的总行数尽量不超过 100 行</li>
<li>不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。任何情形，没有必要插入多个空行进行隔开。</li>
<li>过时的类和方法必须加@Deprecated 注解.(kotlin怎么处理需要再看一下,禁用官方已经Deprecated的类和方法,除非低版本适配)</li>
<li>类内方法定义的顺序依次是：功能相近活着引用的方法放到一起。</li>
<li>避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。</li>
<li>避免黄色警告。</li>
<li>每一个module都要有自己的README.md文件。</li>
</ol>
<h3 id="Kotlin相关编码要求"><a href="#Kotlin相关编码要求" class="headerlink" title="Kotlin相关编码要求"></a>Kotlin相关编码要求</h3><ol>
<li>在一个 when 块内，都必须包含一个 else 语句并且放在最后，即使空代码。</li>
<li>多个字符串动态拼接的时候,使用StringBuilder 的 append 方法进行扩展。避免造成内存资源浪费。</li>
</ol>
<h3 id="类成员与方法访问控制"><a href="#类成员与方法访问控制" class="headerlink" title="类成员与方法访问控制"></a>类成员与方法访问控制</h3><ol>
<li>如果不允许外部直接通过 <code>new</code> 来创建对象，那么构造方法必须是 <code>private</code>。</li>
<li>工具类不允许有 <code>public</code> 或 <code>default</code> 构造方法,禁用<code>Utils</code>,要使用<code>Ext</code>,<code>Converter</code>,顶层声明</li>
<li>类非 <code>static</code> 成员变量并且与子类共享，必须是 <code>protected</code>。</li>
<li>类非 <code>static</code> 成员变量并且仅在本类使用，必须是 <code>private</code>。</li>
<li>类 <code>static</code> 成员变量如果仅在本类使用，必须是 <code>private</code>。</li>
<li>若是 <code>static</code> 成员变量，考虑是否为 <code>const val</code>。</li>
<li>类成员方法只供类内部调用，必须是 <code>private</code>。</li>
<li>类成员方法只对继承类公开，那么限制为 <code>open</code>。</li>
</ol>
<h3 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h3><ol>
<li>类、类属性、类方法的注释必须使用 Javadoc 规范，使用<code>/**内容*/</code>格式，不得使用<code>// xxx</code>方式。</li>
<li>所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释,指出该方法做什么事情，实现什么功能。</li>
<li>所有的类都必须添加创建者和创建日期和功能.</li>
<li>方法内部单行注释，在被注释语句上方另起一行，使用<code>//</code>注释。方法内部多行注释使用<code>/* */</code>注释</li>
<li>所有的枚举类型字段必须要有注释，说明每个数据项的用途。</li>
<li>注释中专有名词与关键字保持英文原文即可。</li>
<li>修改代码时也应该同步修改注释</li>
</ol>
<h4 id="注释模板"><a href="#注释模板" class="headerlink" title="注释模板"></a>注释模板</h4><ul>
<li>统一修改成以下注释模版,在创建文件时必须加上这个<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span>: $&#123;USER&#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date</span>: $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Gmail</span>: 你的这个邮箱 <span class="doctag">@tron</span>.network</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Android相关编码要求-优化项"><a href="#Android相关编码要求-优化项" class="headerlink" title="Android相关编码要求(优化项)"></a>Android相关编码要求(优化项)</h3><ol>
<li>避免在 <code>Service#onStartCommand()/onBind()</code>方法中执行耗时操作，如果确实有需求，应改用 <code>IntentService</code> 或采用其他异步机制完成。</li>
<li>避免在 <code>BroadcastReceiver#onReceive()</code>中执行耗时操作，如果有耗时工作，应该创建 <code>IntentService</code> 完成，而不应该在 <code>BroadcastReceiver</code> 内创建子线程去做。</li>
<li>对于只用于应用内的广播，优先使用 <code>LocalBroadcastManager</code> 来进行注册和发送，<code>LocalBroadcastManager</code> 安全性更好，同时拥有更高的运行效率。</li>
<li><code>Activity</code>或者 <code>Fragment</code> 中动态注册<code>BroadCastReceiver</code> 时，<code>registerReceiver()</code>和 <code>unregisterReceiver()</code>要成对出现。</li>
<li>释放资源的实际可以结合实际情况在<code>onStop</code>执行,在<code>Ondestroy</code>中执行时机比较晚</li>
<li>源文件统一采用 <code>UTF-8</code> 的形式进行编码。</li>
<li>禁止在设计布局时多次设置子 <code>view</code> 和父 <code>view</code> 中为同样的背景造成页面过度绘制，推荐将不需要显示的布局进行及时隐藏,推荐使用约束布局</li>
<li>文本大小使用单位 <code>sp</code>，<code>view</code> 大小使用单位 <code>dp</code>。</li>
<li>尽少使用 <code>AnimationDrawable</code> 会把所有图片都加载到内存,注意内存溢出</li>
<li>子线程中不能更新界面，更新界面必须在主线程中进行，网络操作不能在主线程中调用。</li>
<li>新建线程时，定义能识别自己业务的线程名称，便于性能优化和问题排查。</li>
<li>任何时候不要硬编码文件路径，请使用 <code>Android</code> 文件系统 <code>API</code> 访问。</li>
<li>当使用外部存储时，必须检查外部存储的可用性。</li>
<li>应用间共享文件时，不要通过放宽文件系统权限的方式去实现，而应使用<code>FileProvider</code>。</li>
<li><code>SharedPreference</code> 中只能存储简单数据类型（<code>int</code>、<code>boolean</code>、<code>String</code> 等），复杂数据类型建议使用数据库等其他方式存储。</li>
<li>数据库 <code>Cursor</code> 必须确保使用完后关闭，以免内存泄漏。</li>
<li>多线程操作写入数据库时，需要使用事务，以免出现同步问题。</li>
<li>在 <code>Activity.onPause()</code>或 <code>Activity.onStop()</code>回调中，关闭当前 <code>activity</code> 正在执行的的动画。</li>
<li>在有强依赖 <code>onAnimationEnd</code> 回调的交互时，如动画播放完毕才能操作页面 ，<code>onAnimationEnd</code>可能会因各种异常没被回调，建议加上超时保护或通过<code>postDelay</code>替代<code>onAnimationEnd</code>。</li>
<li>将 <code>android:allowbackup</code> 属性设置为 <code>false</code>，防止 <code>adb backup</code> 导出数据。</li>
<li>应用发布前确保 <code>android:debuggable</code> 属性设置为 false。</li>
</ol>
<h3 id="其他编码要求"><a href="#其他编码要求" class="headerlink" title="其他编码要求"></a>其他编码要求</h3><ol>
<li>砍掉的需求和无用代码以及注释必须及时清除</li>
<li>一些空指针异常不要用<code>try catch</code></li>
<li>应用中不允许直接调用系统的类打印日志</li>
<li>正式环境禁止输出日志</li>
<li>严格按照MVVM模型开发</li>
<li>使用响应式编程范式开发</li>
<li>使用第三方<code>SDK</code>的时候 应避免直接依赖 需要写一层中间件(除了长期不变的主流框架不需要写中间件)</li>
</ol>
<h3 id="关于序列化"><a href="#关于序列化" class="headerlink" title="关于序列化"></a>关于序列化</h3><ol>
<li>如果是持久化保存用<code>Serializable</code>序列化</li>
<li>如果是只是在内存中使用 用<code>Parcelable</code>序列化</li>
</ol>
<h3 id="关于单例模式"><a href="#关于单例模式" class="headerlink" title="关于单例模式"></a>关于单例模式</h3><ol>
<li>注意是否有高并发</li>
</ol>
<h2 id="代码检查"><a href="#代码检查" class="headerlink" title="代码检查"></a>代码检查</h2><ol>
<li>类,抽象类,接口,泛型必须要按照注释模版进行注释<br><code>没有注释的不予通过.</code></li>
<li>拼写错误必须处理 <code>typo</code></li>
<li><code>TODO</code></li>
</ol>
<h1 id="代码规范写法，否则会有-SuppressLint警告"><a href="#代码规范写法，否则会有-SuppressLint警告" class="headerlink" title="代码规范写法，否则会有@SuppressLint警告"></a><a href="https://blog.csdn.net/androidsj/article/details/79865091">代码规范写法，否则会有@SuppressLint警告</a></h1><h2 id="SuppressLint-“DrawAllocation”"><a href="#SuppressLint-“DrawAllocation”" class="headerlink" title="@SuppressLint(“DrawAllocation”) "></a><code>@SuppressLint(“DrawAllocation”) </code></h2><p>原因：我们都知道<code>View</code>及其子类的<code>OnDraw(Canvas canvas)</code>方法会实时调用来更新界面的，然而有时我们会在<code>onDraw(Canvas canvas)</code>方法中实例化对象（如<code>Paint paint=new Paint()</code>），这样就会影响我们程序的效率。<br>解决办法：将这些对象改为类的成员变量。</p>
<h2 id="SuppressWarnings-“rawtypes”-和-SuppressWarnings-“unchecked”-“rawtypes”"><a href="#SuppressWarnings-“rawtypes”-和-SuppressWarnings-“unchecked”-“rawtypes”" class="headerlink" title="@SuppressWarnings(“rawtypes”)和@SuppressWarnings({ “unchecked”, “rawtypes” })"></a>@SuppressWarnings(“rawtypes”)和@SuppressWarnings({ “unchecked”, “rawtypes” })</h2><p>不规范写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(“android.view.Display”); </span><br></pre></td></tr></table></figure>

<p>正确写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;android.view.Display&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="SuppressLint-“HandlerLeak”"><a href="#SuppressLint-“HandlerLeak”" class="headerlink" title="@SuppressLint(“HandlerLeak”)"></a>@SuppressLint(“HandlerLeak”)</h2><p>原因：<code>Handler</code>在Android中用于消息的发送与异步处理，常常在<code>Activity</code>中作为一个匿名内部类来定义，此时<code>Handler</code>会隐式地持有一个外部类对象（通常是一个<code>Activity</code>）的引用。当<code>Activity</code>已经被用户关闭时，由于<code>Handler</code>持有<code>Activity</code>的引用造成<code>Activity</code>无法被<code>GC</code>回收，这样容易造成内存泄露。<br>解决办法：将其定义成一个静态内部类（此时不会持有外部类对象的引用），在构造方法中传入<code>Activity</code>并对<code>Activity</code>对象增加一个弱引用，这样<code>Activity</code>被用户关闭之后，即便异步消息还未处理完毕，<code>Activity</code>也能够被<code>GC</code>回收，从而避免了内存泄露。</p>
<p>静态内部类，持有外部类的弱引用。这是最标准的写法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">MyHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyHandler</span>(<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;Activity&gt; weakReference;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyHandler</span><span class="params">(SecondActivity activity)</span> &#123;</span><br><span class="line">        weakReference = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;Activity&gt;(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (reference.get() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="comment">// do something...</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="comment">// do something...</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一种情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不规范的写法</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Handler</span> <span class="variable">mHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span>&#123;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确的写法</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Handler</span> <span class="variable">mHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>(<span class="keyword">new</span> <span class="title class_">Handler</span>.Callback()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="SuppressLint-“SimpleDateFormat”"><a href="#SuppressLint-“SimpleDateFormat”" class="headerlink" title="@SuppressLint(“SimpleDateFormat”)"></a>@SuppressLint(“SimpleDateFormat”)</h2><p>不规范写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(pattern); </span><br></pre></td></tr></table></figure>

<p>正确写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(pattern, Locale.getDefault());</span><br></pre></td></tr></table></figure>



<h2 id="SuppressLint-“DefaultLocale”"><a href="#SuppressLint-“DefaultLocale”" class="headerlink" title="@SuppressLint(“DefaultLocale”)"></a>@SuppressLint(“DefaultLocale”)</h2><p>不规范写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">lower</span> <span class="operator">=</span> string.toLowerCase(); </span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> “String”.toUpperCase().equals(“STRING”);</span><br></pre></td></tr></table></figure>

<p>正确写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">lower</span> <span class="operator">=</span> string.toLowerCase(Locale.getDefault()); </span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> “String”.toUpperCase().equals(“STRING”);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>后期-打包、上架相关</title>
    <url>/posts/2971845771/</url>
    <content><![CDATA[<h1 id="Android打包"><a href="#Android打包" class="headerlink" title="Android打包"></a>Android打包</h1><h2 id="Android打包流程图"><a href="#Android打包流程图" class="headerlink" title="Android打包流程图"></a>Android打包流程图</h2><p><img src="/posts/2971845771/%E5%AE%98%E7%BD%91%E4%B8%8A%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="官网最新的图"></p>
<p><img src="/posts/2971845771/%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="Android打包流程图"></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMzk2ODI1NQ==&mid=2247484032&idx=1&sn=da2740910b6df7d7f1ee9e2903f5ca27&scene=21#wechat_redirect"><img src="/posts/2971845771/%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B%E5%9B%BE(%E8%AF%A6%E7%BB%86).png" alt="Gradle 与 Android 构建入门"></a></p>
<h2 id="查看apk签名"><a href="#查看apk签名" class="headerlink" title="查看apk签名"></a>查看apk签名</h2><ul>
<li><p>法一：</p>
<p>使用JDK命令行工具查看，直接对比证书指纹。命令：<code>keytool -printcert -v -file XXX.RSA</code></p>
<p>其中<code>xxx.RSA</code>可通过：用压缩软件打开apk，找到<code>META-INF</code>下的<code>CERT.RSA</code>即可</p>
</li>
<li><p>法二：</p>
<p>用压缩软件打开apk，拷贝<code>CERT.RSA</code>到本地，更改后缀后为 <code>CERT.p7b</code>，在windows上直接打开（选中“证书”，选择右侧证书文件，打开证书文件看详细信息）</p>
</li>
</ul>
<h2 id="查看签名文件keystore的SHA1、MD5"><a href="#查看签名文件keystore的SHA1、MD5" class="headerlink" title="查看签名文件keystore的SHA1、MD5"></a>查看签名文件keystore的SHA1、MD5</h2><p><strong>AS自带的debug.keystore</strong></p>
<ul>
<li><p>MAC的：</p>
<ol>
<li><p>cd到jdk的bin目录下</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_151.jdk<span class="regexp">/Contents/</span>Home/bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入以下语句获取（密钥：android）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">keytool -v -list -keystore <span class="regexp">/Users/</span>xxx<span class="regexp">/.android/</span>debug.keystore</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>Windows的：</p>
<ol>
<li><p>cd到jdk的bin目录下</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">cd</span> C:\<span class="keyword">Program</span> Files\Java\jdk1.7.0_79\bin</span><br><span class="line">  </span><br><span class="line"><span class="keyword">cd</span> <span class="keyword">D</span>:\dev\<span class="keyword">AS</span>\jbr\bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入以下语句获取（密钥：android）</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">keytool -v -list -keystore  <span class="name">C</span>:\Users\Administrator\.android\debug.keystore</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">keytool -list -v -keystore XXX<span class="selector-class">.keystore</span></span><br><span class="line">keytool -printcert -jarfile XXX<span class="selector-class">.apk</span></span><br><span class="line">keytool -printcert -file CERT<span class="selector-class">.RSA</span> 【解压apk，拿到 META-INF/CERT<span class="selector-class">.RSA</span> 】</span><br></pre></td></tr></table></figure>

<p>上面的命令行以前可以看MD5，现在只有SHA1、SHA256</p>
<blockquote>
<p>去掉冒号的js代码：”CD:B0:3E:73:53:2B:C2:A2:54:5D:2E:75:67:74:BB:92”.replace(&#x2F;:&#x2F;g,””)</p>
</blockquote>
<p>现在取MD5：</p>
<ol>
<li><p>法一：AS右侧<code>Gradle：Tasks&gt;android&gt;signingReport</code>，双击</p>
</li>
<li><p>法二：单独取md5，使用腾讯工具【忘记包了】，有另外的apk：“<a href="https://www.pgyer.com/UNW28n">MD5签名生成器</a>”</p>
</li>
</ol>
<h2 id="命令行生成数字签名文件"><a href="#命令行生成数字签名文件" class="headerlink" title="命令行生成数字签名文件"></a>命令行生成数字签名文件</h2><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> <span class="built_in">demo</span>.keystore -keyalg RSA -validity <span class="number">40000</span> -keystore <span class="built_in">demo</span>.keystore</span><br></pre></td></tr></table></figure>





<h1 id="360打包分包流程"><a href="#360打包分包流程" class="headerlink" title="360打包分包流程"></a>360打包分包流程</h1><p>360加固助手（版本3.6.2.0(8341)）;</p>
<ul>
<li>基础设置：只勾选“签名校验”</li>
<li>注意：一个账号一天只能用两次</li>
</ul>
<ol>
<li>在“应用加固”页面：对release包进行加固</li>
<li>在“工具包”》“渠道打包”：对加固后的包进行分渠道包</li>
<li>在“工具包”》“签名APK”：对各渠道包进行签名（<strong>选择V3</strong>）</li>
</ol>
<h1 id="命令行签名"><a href="#命令行签名" class="headerlink" title="命令行签名"></a>命令行签名</h1><p>前提：要把<code>%JAVA_HOME%\bin</code>设置到环境变量</p>
<p>jarsigner -verbose -keystore <strong>你的签名绝对路径</strong> -signedjar <strong>你要生成apk的绝对路径（一定要绝对路径）</strong>  <strong>你要签名的空白apk</strong>  <strong>你签名的别名（aire）。</strong>希望大家少走歪路，分分钟解决问题，【】</p>
<p>例如：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">jarsigner -verbose -keystore D:<span class="string">\mykey\my.jks</span> -signedjar D:<span class="string">\mykey\signed.apk</span> D:<span class="string">\mykey\aaa\myunsign.apk</span> abc</span><br></pre></td></tr></table></figure>

<p>底下是我用<a href="https://console.cloud.tencent.com/ms/reinforce/list">乐固在线加固</a>过的apk，再自己用命令行签名</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">jarsigner</span> -verbose -keystore D:\code\xm597-master\app\<span class="number">597</span>app.jks -signedjar D:\xm597.apk D:\f9925a3675189afe9420945239c3cbde.<span class="number">20211203094803</span>.apk <span class="number">597</span>app</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：jarsigner签名的是v1。要v2签名的话用apksigner</p>
</blockquote>
<p>apksigner sign –ks (签名地址) –ks-key-alias (别名) –out (签名后的apk地址) (待签名apk地址)<br>例子：  </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">apksigner sign <span class="attr">--ks</span> D:\pack\<span class="number">597</span>app<span class="selector-class">.jks</span> <span class="attr">--ks-key-alias</span> <span class="number">597</span>App <span class="attr">--out</span> <span class="string">&quot;597Combine6.1.0_a0064(148)_610_jiagu_signed.apk&quot;</span> <span class="string">&quot;597Combine6.1.0_a0064(148)_610_jiagu.apk&quot;</span> </span><br></pre></td></tr></table></figure>


<h1 id="上架"><a href="#上架" class="headerlink" title="上架"></a>上架</h1><ol>
<li>先注册，比较主流的应用市场有近20家<ol>
<li>360手机助手</li>
<li>百度手机助手</li>
<li>腾讯应用宝</li>
<li>豌豆荚</li>
<li>小米开放平台</li>
<li>联想乐商店</li>
<li>搜狗手机助手</li>
<li>OPPO应用商店</li>
<li>华为应用市场</li>
<li>魅族应用中心</li>
<li>三星应用商店</li>
<li>应用汇</li>
<li>机锋市场</li>
<li>乐视应用市场</li>
<li>联通沃商店</li>
<li>易用汇</li>
<li>木蚂蚁</li>
<li>优亿市场</li>
<li>冒泡堂</li>
<li>N多网 </li>
<li>锤子应用商店</li>
<li>海信应用商店</li>
<li>网易应用中心</li>
<li>PC6安卓网</li>
</ol>
</li>
<li>准备的材料<ol>
<li>APK文件、名称、版本号</li>
<li>APP的简介200字左右</li>
<li>一句话简介20字以内</li>
<li>软件截图4-5张</li>
<li>icp备案、软著、安全评估报告、资质文件等</li>
</ol>
</li>
</ol>
<h2 id="软件著作权"><a href="#软件著作权" class="headerlink" title="软件著作权"></a>软件著作权</h2><p><a href="https://register.ccopyright.com.cn/query.html">https://register.ccopyright.com.cn/query.html</a></p>
<h2 id="软件安全评估报告"><a href="#软件安全评估报告" class="headerlink" title="软件安全评估报告"></a>软件安全评估报告</h2><p><a href="https://app.caict.ac.cn/#/login?redirect=%2Fsystem%2Fdetection">https://app.caict.ac.cn/#/login?redirect=%2Fsystem%2Fdetection</a></p>
<h1 id="加固"><a href="#加固" class="headerlink" title="加固"></a>加固</h1><p><a href="https://www.jianshu.com/p/4ff48b761ff6">加固原理</a></p>
<h2 id="so加固"><a href="#so加固" class="headerlink" title="so加固"></a>so加固</h2><p><a href="https://github.com/upx/upx">https://github.com/upx/upx</a></p>
<p>加壳步骤：</p>
<ol>
<li>增加init函数：<code>cpp</code>文件添加 <code>void my_init()&#123;&#125;</code></li>
<li><code>Android.mk</code>文件添加：<code>LOCAL_LDFLAGS += -WI,-init=my_init</code></li>
<li>将编译好的<code>so</code>拷贝到 <code>upx-3.96-win64</code> 文件夹中</li>
<li>用命令行进入 <code>upx-3.96-win64</code> 目录中</li>
<li>输入命令：<code>upx --android-shlib 文件名称.so</code></li>
<li>加壳后的<code>so</code>会替换原有的<code>so</code></li>
</ol>
<h1 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h1><ul>
<li><a href="https://juejin.cn/post/6925965844191117320">https://juejin.cn/post/6925965844191117320</a></li>
<li><a href="https://github.com/CodingGay/BlackDex">https://github.com/CodingGay/BlackDex</a></li>
</ul>
<h1 id="AS-library生成jar包和aar的方法总结"><a href="#AS-library生成jar包和aar的方法总结" class="headerlink" title="AS library生成jar包和aar的方法总结"></a><a href="./%E5%AE%89%E5%8D%93-%E4%BE%9D%E8%B5%96%E7%9B%B8%E5%85%B3.md">AS library生成jar包和aar的方法总结</a></h1><h1 id="打包问题"><a href="#打包问题" class="headerlink" title="打包问题"></a>打包问题</h1><h2 id="app-transformClassesAndResourcesWithR8ForRelease"><a href="#app-transformClassesAndResourcesWithR8ForRelease" class="headerlink" title=":app:transformClassesAndResourcesWithR8ForRelease"></a>:app:transformClassesAndResourcesWithR8ForRelease</h2><p>问题：AS打包卡在<code>app:transformClassesAndResourcesWithR8ForRelease</code></p>
<p>卡在<code>app:transformClassesAndResourcesWithR8ForRelease</code>很长时间一直不能生成包，有时候产生<code>java.lang.OutOfMemoryError: GC overhead limit exceeded</code>错误。而且编译打包时偶尔会报<code>Error:java.lang.OutOfMemoryError</code></p>
<p>解决（在 <code>gradle.properties</code>中添加）：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"># 编译时使用守护进程</span><br><span class="line">org.gradle.daemon=<span class="literal">true</span></span><br><span class="line">#JVM 最大允许分配的堆内存，按需分配</span><br><span class="line">org.gradle.jvmargs=-Xmx16896m -<span class="attr">XX:</span>MaxPermSize=<span class="number">4096</span>m  -<span class="attr">XX:</span>+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF<span class="number">-8</span></span><br><span class="line"># 使用并行编译</span><br><span class="line">org.gradle.parallel=<span class="literal">true</span></span><br><span class="line">org.gradle.configureondemand=<span class="literal">true</span></span><br><span class="line">#启用新一代Dex编译器D8</span><br><span class="line">android.enableD8=<span class="literal">true</span></span><br><span class="line">#启用gradle缓存</span><br><span class="line">org.gradle.caching=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>运行时报警告：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WARNING: The following project options are deprecated and have been removed:</span><br><span class="line">android.enableAapt2</span><br><span class="line">This property has no effect, AAPT2 is now always used.</span><br></pre></td></tr></table></figure>

<p>解决方案：<br>移除<code>gradle.properties</code>中<code>android.enableAapt2=true</code></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓后期</tag>
      </tags>
  </entry>
  <entry>
    <title>方法反射实例</title>
    <url>/posts/2926163701/</url>
    <content><![CDATA[<h3 id="方法反射实例"><a href="#方法反射实例" class="headerlink" title="方法反射实例"></a>方法反射实例</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectCase</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="title class_">String</span>[] args) throws <span class="title class_">Exception</span> &#123;</span><br><span class="line">        <span class="title class_">Proxy</span> target = <span class="keyword">new</span> <span class="title class_">Proxy</span>();</span><br><span class="line">        <span class="title class_">Method</span> method = <span class="title class_">Proxy</span>.<span class="property">class</span>.<span class="title function_">getDeclaredMethod</span>(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">        method.<span class="title function_">invoke</span>(target);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>
]]></content>
      <categories>
        <category>Java代码片段</category>
      </categories>
      <tags>
        <tag>Java代码片段</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串相关</title>
    <url>/posts/16078591/</url>
    <content><![CDATA[<h1 id="java-判断是否中文字符"><a href="#java-判断是否中文字符" class="headerlink" title="java_判断是否中文字符"></a>java_判断是否中文字符</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IsChineseOrEnglish</span>&#123;</span><br><span class="line">    <span class="comment">//GENERAL_PUNCTUATION 判断中文的“号</span></span><br><span class="line">    <span class="comment">//CJK_SYMBOLS_and_punctuation 判断中文的。号</span></span><br><span class="line">    <span class="comment">//HALFWIDTH_AND_FULLWIDTH_FORMS 判断中中文的，号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isChinese</span><span class="params">(Char c)</span>&#123;</span><br><span class="line">        Character.<span class="type">UnicodeBlock</span> <span class="variable">ub</span> <span class="operator">=</span> Character.UnicodeBlock.of(c);</span><br><span class="line">        <span class="keyword">if</span>(ub == Character.UnicodeBlock.CJK_SYMBOLS_and_punctuation</span><br><span class="line">            || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS</span><br><span class="line">            || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A</span><br><span class="line">            || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION</span><br><span class="line">            || ub == Character.UnicodeBlock.CJK_SYMBOLS_and_punctuation</span><br><span class="line">            || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isChiese</span><span class="params">(String strName)</span>&#123;</span><br><span class="line">        <span class="type">char</span>[] ch = strName.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ch.length; i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> ch[i];</span><br><span class="line">            <span class="keyword">if</span>(isChinese(c) == <span class="literal">true</span>)&#123;</span><br><span class="line">                System.out.println(isChiese(c));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(isChiese(c));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">            System.out.println(r.nextInt(<span class="number">10</span>) + <span class="number">1</span>);</span><br><span class="line">            isChinese(<span class="string">&quot;き&quot;</span>);</span><br><span class="line">            isChinese(<span class="string">&quot;中国&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="验证日期格式的正确性"><a href="#验证日期格式的正确性" class="headerlink" title="验证日期格式的正确性"></a>验证日期格式的正确性</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isDateFormatCorrect</span><span class="params">(String dataTime)</span>&#123;</span><br><span class="line">    String el=<span class="string">&quot;^((\\d&#123;2&#125;(([02468][048])|([13579][26]))[\\-\\/\\s]?((((0?[13578])|(1[02]))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])))))|(\\d&#123;2&#125;(([02468][1235679])|([13579][01345789]))[\\-\\/\\s]?((((0?[13578])|(1[02]))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\\-\\/\\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\\s(((0?[0-9])|([1-2][0-9]))\\:([0-5]?[0-9])((\\s)|(\\:([0-5]?[0-9])))))?$&quot;</span>;</span><br><span class="line">    <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(el);</span><br><span class="line">    <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(dataTime);</span><br><span class="line">    <span class="keyword">return</span> matcher.matches();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以验证yyyy(\s&#x2F;-)?MM(\s&#x2F;-)?dd(\shh:mm:ss)?</p>
<h1 id="String-转-Date"><a href="#String-转-Date" class="headerlink" title="String 转 Date"></a>String 转 Date</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串转Date</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> format yyyy-MM-dd HH:mm:ss.SSS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dateStr 要转换的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">strToDate</span><span class="params">(String format, String dateStr)</span>&#123;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        date = <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(format).parse(dateStr);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Date-转-String"><a href="#Date-转-String" class="headerlink" title="Date 转 String"></a>Date 转 String</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date ddate;  </span><br><span class="line">String sdate=(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>)).format(ddate); </span><br></pre></td></tr></table></figure>



<h1 id="俩时间比较大小"><a href="#俩时间比较大小" class="headerlink" title="俩时间比较大小"></a>俩时间比较大小</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressLint(&quot;SimpleDateFormat&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">SimpleDateFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">startCompareToEnd</span><span class="params">(String startDate, String endDate)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(startDate == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(startDate) || <span class="string">&quot;null&quot;</span>.equals(startDate)</span><br><span class="line">       || endDate == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(endDate) || <span class="string">&quot;null&quot;</span>.equals(endDate))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//<span class="doctag">FIXME:</span>输入字符串的格式与df格式比较下</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">start</span> <span class="operator">=</span> df.parse(startDate);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">end</span> <span class="operator">=</span> df.parse(endDate);</span><br><span class="line">        <span class="keyword">if</span>(start.getTime() &gt;= end.getTime())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="随机生成数字"><a href="#随机生成数字" class="headerlink" title="随机生成数字"></a>随机生成数字</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成6位随机数字</span></span><br><span class="line">System.out.println((<span class="type">int</span>)((Math.random()*<span class="number">9</span>+<span class="number">1</span>)*<span class="number">100000</span>));</span><br><span class="line"><span class="comment">//生成5位随机数字</span></span><br><span class="line">System.out.println((<span class="type">int</span>)((Math.random()*<span class="number">9</span>+<span class="number">1</span>)*<span class="number">10000</span>));</span><br><span class="line"><span class="comment">//生成4位随机数字</span></span><br><span class="line">System.out.println((<span class="type">int</span>)((Math.random()*<span class="number">9</span>+<span class="number">1</span>)*<span class="number">1000</span>));</span><br><span class="line"><span class="comment">//生成3位随机数字</span></span><br><span class="line">System.out.println((<span class="type">int</span>)((Math.random()*<span class="number">9</span>+<span class="number">1</span>)*<span class="number">100</span>));</span><br><span class="line"><span class="comment">//生成2位随机数字</span></span><br><span class="line">System.out.println((<span class="type">int</span>)((Math.random()*<span class="number">9</span>+<span class="number">1</span>)*<span class="number">10</span>));</span><br><span class="line"><span class="comment">//生成1位随机数字</span></span><br><span class="line">System.out.println((<span class="type">int</span>)((Math.random()*<span class="number">9</span>+<span class="number">1</span>)));</span><br></pre></td></tr></table></figure>



<h1 id="字符串：截取pre和end之间的内容"><a href="#字符串：截取pre和end之间的内容" class="headerlink" title="字符串：截取pre和end之间的内容"></a>字符串：截取pre和end之间的内容</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://sbc2h5.laidy.cn/channelStoreList?easyChannelId=1252&amp;storeId=123&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url2</span> <span class="operator">=</span> <span class="string">&quot;https://sbc2h5.laidy.cn/channelStoreList?easyChannelId=1252&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url3</span> <span class="operator">=</span> <span class="string">&quot;https://sbc2h5.laidy.cn/channelStoreList?storeId=123&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">easyChannelIdPre</span> <span class="operator">=</span> <span class="string">&quot;easyChannelId=&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">end</span> <span class="operator">=</span> <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">storeIdPre</span> <span class="operator">=</span> <span class="string">&quot;storeId=&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(getContent(url, easyChannelIdPre, end));</span><br><span class="line">        System.out.println(getContent(url, storeIdPre, end));</span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span> + url);</span><br><span class="line"></span><br><span class="line">        System.out.println(getContent(url2, easyChannelIdPre, end));</span><br><span class="line">        System.out.println(getContent(url2, storeIdPre, end));</span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span> + url2);</span><br><span class="line"></span><br><span class="line">        System.out.println(getContent(url3, easyChannelIdPre, end));</span><br><span class="line">        System.out.println(getContent(url3, storeIdPre, end));</span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span> + url3);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url4</span> <span class="operator">=</span> <span class="string">&quot;/talk2Guide?guideId=1234&amp;guiderLogo=httsdflkj&amp;nick=5678&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">guideIdPre</span> <span class="operator">=</span> <span class="string">&quot;guideId=&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">guiderLogoPre</span> <span class="operator">=</span> <span class="string">&quot;guiderLogo=&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">guiderNickPre</span> <span class="operator">=</span> <span class="string">&quot;nick=&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">guideEnd</span> <span class="operator">=</span> <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">        System.out.println(getContent(url4, guideIdPre, guideEnd));</span><br><span class="line">        System.out.println(getContent(url4, guiderLogoPre, guideEnd));</span><br><span class="line">        System.out.println(getContent(url4, guiderNickPre, guideEnd));</span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span> + url4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 截取 pre和end之间的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pre</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getContent</span><span class="params">(String url, String pre, String end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (url.contains(pre))&#123;</span><br><span class="line">            url = url.substring(url.indexOf(pre));</span><br><span class="line">            <span class="keyword">if</span> (url.indexOf(end) &gt; <span class="number">0</span>  &amp;&amp; url.indexOf(end) &gt; url.indexOf(pre))&#123;</span><br><span class="line">                <span class="keyword">return</span> url.substring((url.indexOf(pre) + pre.length()), url.indexOf(end));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> url.substring((url.indexOf(pre) + pre.length()), url.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="字符串的宽高"><a href="#字符串的宽高" class="headerlink" title="字符串的宽高"></a>字符串的宽高</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Rect rect=<span class="keyword">new</span> <span class="title class_">Rect</span>();</span><br><span class="line">paint.getTextBounds(string, <span class="number">0</span>, string.length(), rect);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> strWidth=rect.width();</span><br><span class="line"><span class="type">int</span> strHeight=rect.height();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java代码片段</category>
      </categories>
      <tags>
        <tag>Java代码片段</tag>
      </tags>
  </entry>
  <entry>
    <title>获取本地IP</title>
    <url>/posts/3564131339/</url>
    <content><![CDATA[<h3 id="获取本地IP"><a href="#获取本地IP" class="headerlink" title="获取本地IP"></a>获取本地IP</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">InetAddress ia = null;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    ia = ia.get<span class="constructor">LocalHost()</span>;</span><br><span class="line">    String localName = ia.get<span class="constructor">HostName()</span>;</span><br><span class="line">    String localIP = ia.get<span class="constructor">HostAddress()</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Systemt</span>.</span></span>out.println(<span class="string">&quot;本机名称是：&quot;</span> + localName);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Systemt</span>.</span></span>out.println(<span class="string">&quot;本机的IP是：&quot;</span> + localIP);</span><br><span class="line">&#125; catch(Exception e)&#123;</span><br><span class="line">    e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

]]></content>
      <categories>
        <category>Java代码片段</category>
      </categories>
      <tags>
        <tag>Java代码片段</tag>
      </tags>
  </entry>
  <entry>
    <title>知识-Markdown新手指南</title>
    <url>/posts/2800681986/</url>
    <content><![CDATA[<h1 id="MarkDown-新手指南"><a href="#MarkDown-新手指南" class="headerlink" title="MarkDown 新手指南"></a>MarkDown 新手指南</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><blockquote>
<p>语法格式：** ‘#’+’空格’+’文本’ **</p>
<p>在行首插入 1 到 6个#，分别表示标题 1 到标题 6</p>
</blockquote>
<p># 这是标题1<br>## 这是标题2<br>##### 这是标题6</p>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><blockquote>
<p>语法格式：** ‘数字’ + ‘.’ + ‘空格’ + ‘文本’ **</p>
<p>在行首增加 <code>1.</code>、<code>1.</code>、<code>3.</code>，即数字和英文句点, 不要求数字一定要连续，可以都是<code>1.</code></p>
</blockquote>
<p><code>1. 有序列表</code><br><code>2. 有序列表</code><br><code>3. 有序列表</code></p>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><blockquote>
<p>语法格式：** ‘-‘ + ‘空格’ ＋ ‘文本’ **</p>
<p>在行首增加 * 或 -</p>
</blockquote>
<p>* 无序列表<br>* 无序列表</p>
<h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><blockquote>
<p> 语法格式：** ‘-‘ + ‘空格’ + ‘[ ]’ + ‘文本’ **</p>
</blockquote>
<p>- [x] 文本一<br>- [] 文本二</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote>
<p>语法格式：** ‘&gt;’+’空格’+’文本’ **</p>
</blockquote>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p><code>![图片说明文字](图片url)</code><br>或<br><code>![图片说明文字](./图片url)</code></p>
<h2 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h2><p><code>[描述](链接地址)</code></p>
<h2 id="粗体、斜体、删除线"><a href="#粗体、斜体、删除线" class="headerlink" title="粗体、斜体、删除线"></a>粗体、斜体、删除线</h2><p>粗体：在文字前后添加 <code>**</code> (注意符号与文字间不要有空格）<br>斜体：在文字前后添加 <code>*</code><br>删除线：在文字前后添加 <code>~~</code></p>
<p><strong>粗体</strong><br><em>斜体</em><br><del>删除线</del></p>
<h2 id="引用-1"><a href="#引用-1" class="headerlink" title="引用"></a>引用</h2><p>在文字前 添加 <code>&gt;</code></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><code>| 为知笔记|更新 | 版本 |</code><br><code>|------------|-----------|--------|</code><br><code>| WizNote | Markdown| Latest |</code></p>
<p>对齐方式<br><code>| 表格标题| 表格标题 | 表格标题 |</code><br><code>|:----|------:|:----:|</code><br><code>| 左对齐 | 右对齐| 居中对齐 |</code></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在代码前后增加 三个反单引号：```</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">int i <span class="operator">=</span> <span class="number">0</span><span class="comment">; i = 1; for (int i = 0; i &lt; 100; i++)&#123;</span></span><br><span class="line">	printf(<span class="string">&quot;hello markdown!\n&quot;</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>在任何你想要展示Markdown 笔记目录的地方，添加 <code>[TOC]</code></p>
<h2 id="Mathjax-公式"><a href="#Mathjax-公式" class="headerlink" title="Mathjax 公式"></a>Mathjax 公式</h2><p>可以创建行内公式（typora需要开启“内联公式”方可渲染），例如：  </p>
<ol>
<li><code>$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</code>，效果：$\Gamma(n) &#x3D; (n-1)!\quad\forall n\in\mathbb N$</li>
<li>或者块级公式，  <figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span> </span><br><span class="line">x = \dfrac&#123;-b \pm \<span class="built_in">sqrt</span>&#123;b^<span class="number">2</span> - <span class="number">4</span>ac&#125;&#125;&#123;<span class="number">2</span>a&#125; </span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure>
效果：<br>$$<br> x &#x3D; \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a}<br>$$</li>
</ol>
<h3 id="常用符号"><a href="#常用符号" class="headerlink" title="常用符号"></a>常用符号</h3><table>
<thead>
<tr>
<th>显示</th>
<th>名称说明</th>
</tr>
</thead>
<tbody><tr>
<td>$\infty$</td>
<td>无穷</td>
</tr>
<tr>
<td>$\emptyset$或$\varnothing$、$\subset$、$\subseteq$、$\cap$、$\cup$、$\biguplus$、$\bigsqcup$</td>
<td>空集、子集、真子集、交集、并集、多重集、大杯</td>
</tr>
<tr>
<td>$\in$、$\notin$、</td>
<td>属于、不属于、</td>
</tr>
<tr>
<td>$\subseteq$、$\subsetneqq$、$\supseteq$、$\supsetneqq$、</td>
<td>包含于、真包含于、包含、真包含、</td>
</tr>
<tr>
<td>$\neg$、$\lor$、$\land$</td>
<td>逻辑非、逻辑或、逻辑与</td>
</tr>
<tr>
<td>$\forall$、$\exists$、$\exists!$</td>
<td>对全部、至少存在一个、只存在一个、</td>
</tr>
<tr>
<td>$\Rightarrow$或$\Longrightarrow$、$\Leftarrow$或$\Longleftarrow$、$\Leftrightarrow$或$\iff$</td>
<td>推出、被推出、等价于</td>
</tr>
<tr>
<td>$\uparrow$、$\downarrow$、$\Uparrow$、$\Downarrow$、$\rightarrow$或$\longrightarrow$、$\leftarrow$或$\longleftarrow$、</td>
<td></td>
</tr>
<tr>
<td>$\overrightarrow a$或$\vec a$</td>
<td>向量、点乘</td>
</tr>
<tr>
<td>$\perp$、$\not\perp$、$\parallel$、$\nparallel$</td>
<td>垂直、不垂直、平行、不平行</td>
</tr>
<tr>
<td>$\sim$、$\cong$、$\triangle$、$\angle$</td>
<td>相似、全等、三角形、角度</td>
</tr>
<tr>
<td>$x_1^2$</td>
<td>上下标</td>
</tr>
<tr>
<td>$\pm$、$\mp$</td>
<td>加减、减加</td>
</tr>
<tr>
<td>$\quad$、<code>&amp;nbsp;</code>、<code>&amp;ensp;</code>、<code>&amp;emsp;</code></td>
<td>空格</td>
</tr>
<tr>
<td>$\cdots$或$\ldots$</td>
<td>省略号</td>
</tr>
<tr>
<td>$\sqrt{3}、$ $\sqrt[3]{x}$</td>
<td>开方</td>
</tr>
<tr>
<td>$\frac{1}{2}$或$\dfrac{x}{y}$</td>
<td>分数</td>
</tr>
<tr>
<td>$\times$、$\cdot$、$\div$</td>
<td>乘号（叉乘）、点乘、除号</td>
</tr>
<tr>
<td>$\geq$或$\geqslant$、$\leq$或$\leqslant$、$\approx$、$\equiv$、$\neq$或$\not&#x3D;$</td>
<td>大于等于、小于等于、约等于、恒等于（相当于）、不等于</td>
</tr>
<tr>
<td>$\sum$和$\sum_1^n\frac{1}{x^2}$</td>
<td>累加</td>
</tr>
<tr>
<td>$\prod$和$\prod_{i&#x3D;0}^n{1 \over {x^2}}$</td>
<td>累乘</td>
</tr>
<tr>
<td>$\log$、$\lg$、$\ln$</td>
<td>对数</td>
</tr>
<tr>
<td>$\sin$、$\cos$、$\tan$、$\cot$、$\sec$、$\csc$</td>
<td>三角函数</td>
</tr>
<tr>
<td>$\lim$、$\lim\limits_{x\rightarrow\infty}\frac{1}{x}$</td>
<td>极限</td>
</tr>
<tr>
<td>$\int$和$\int_0^1x^2dx$、$\iint$</td>
<td>积分</td>
</tr>
<tr>
<td>$\because$、$\therefore$</td>
<td>因为、所以</td>
</tr>
<tr>
<td>$\overline{a+b+c}$、$underline{a+b}$、$\overbrace{a+b}^{3个}$、$\underbrace{a+b}_{3个}$</td>
<td>上划线、下划线、上括号、下括号</td>
</tr>
<tr>
<td>$\hat{y}$或$\check{y}$或$\breve{y}$</td>
<td>连线：期望值、</td>
</tr>
<tr>
<td>$\bar x$</td>
<td>平均值</td>
</tr>
<tr>
<td># $ % &amp; _ { }</td>
<td>转义符号</td>
</tr>
<tr>
<td>$\acute{\eta}$</td>
<td></td>
</tr>
<tr>
<td>$\dot{y}$、$\ddot{y}$</td>
<td></td>
</tr>
</tbody></table>
<h3 id="LaTex希腊字母表"><a href="#LaTex希腊字母表" class="headerlink" title="LaTex希腊字母表"></a>LaTex希腊字母表</h3><ul>
<li>对于大写锡来么与英文字母相同的，直接输入英文大写字母即可，不过是斜体</li>
<li>如果想输入正体而非斜体的大写字母，请用字体语法加字母，如<code>\mathrm&#123;A&#125;</code></li>
</ul>
<table>
<thead>
<tr>
<th>大小写字母</th>
<th>LaTex公式</th>
<th>大小写字母</th>
<th>LaTex公式</th>
</tr>
</thead>
<tbody><tr>
<td>$\mathrm{A}$和$\alpha$</td>
<td><code>\mathrm&#123;A&#125;</code>和<code>\alpha</code></td>
<td>$\mathbb N$和$\nu$</td>
<td><code>\mathbb N</code>和<code>\nu</code></td>
</tr>
<tr>
<td>$\mathrm{B}$和$\beta$</td>
<td><code>\mathrm&#123;B&#125;</code>和<code>\beta</code></td>
<td>$\Xi$和$\xi$</td>
<td><code>\Xi</code>和<code>\xi</code></td>
</tr>
<tr>
<td>$\Gamma$和$\gamma$</td>
<td><code>\Gamma</code>和<code>\gamma</code></td>
<td>$\mathrm{O}$和$\omicron$</td>
<td><code>\mathrm&#123;O&#125;</code>和<code>\omicron</code></td>
</tr>
<tr>
<td>$\Delta$和$\delta$</td>
<td><code>\Delta</code>和<code>\delta</code></td>
<td>$\Pi$,$\pi$和$\varpi$</td>
<td><code>\Pi</code>,<code>\pi</code>和<code>\varpi</code></td>
</tr>
<tr>
<td>$\mathrm{E}$,$\epsilon$和$\varepsilon$</td>
<td><code>\mathrm&#123;E&#125;</code>,<code>\epsilon</code>和<code>\varepsilon</code></td>
<td>$\mathrm{P}$,$\rho$和$\varrho$</td>
<td><code>\mathrm&#123;P&#125;</code>,<code>\rho</code>和<code>\varrho</code></td>
</tr>
<tr>
<td>$\mathrm{Z}$和$\zeta$</td>
<td><code>\mathrm&#123;Z&#125;</code>和<code>\zeta</code></td>
<td>$\Sigma$,$\sigma$和$\varsigma$</td>
<td><code>\Sigma</code>,<code>\sigma</code>和<code>\varsigma</code></td>
</tr>
<tr>
<td>$\mathrm{H}$和$\eta$</td>
<td><code>\mathrm&#123;H&#125;</code>和<code>\eta</code></td>
<td>$\mathrm{T}$和$\tau$</td>
<td><code>\mathrm&#123;T&#125;</code>和<code>\tau</code></td>
</tr>
<tr>
<td>$\Theta$,$\theta$和$\vartheta$</td>
<td><code>\Theta</code>,<code>\theta</code>和<code>\vartheta</code></td>
<td>$\Upsilon$和$\upsilon$</td>
<td><code>\Upsilon</code>和<code>\upsilon</code></td>
</tr>
<tr>
<td>$\mathrm{I}$和$\iota$</td>
<td><code>\mathrm&#123;I&#125;</code>和<code>\iota</code></td>
<td>$\Phi$,$\phi$和$\varphi$</td>
<td><code>\Phi</code>,<code>\phi</code>和<code>\varphi</code></td>
</tr>
<tr>
<td>$\mathrm{K}$,$\kappa$和$\varkappa$</td>
<td><code>\mathrm&#123;K&#125;</code>,<code>\kappa</code>和<code>\varkappa</code></td>
<td>$\mathrm{X}$和$\chi$</td>
<td><code>\mathrm&#123;X&#125;</code>和<code>\chi</code></td>
</tr>
<tr>
<td>$\Lambda$和$\lambda$</td>
<td><code>\Lambda</code>和<code>\lambda</code></td>
<td>$\Psi$和$\psi$</td>
<td><code>\Psi</code>和<code>\psi</code></td>
</tr>
<tr>
<td>$\mathrm{M}$和$\mu$</td>
<td><code>\mathrm&#123;M&#125;&#125;</code>和<code>\mu</code></td>
<td>$\Omega$和$\omega$</td>
<td><code>\Omega</code>和<code>\omega</code></td>
</tr>
<tr>
<td>$\digamma$</td>
<td><code>\digamma</code></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><h3 id="标准流程图"><a href="#标准流程图" class="headerlink" title="标准流程图"></a>标准流程图</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">e=&gt;end: End</span><br><span class="line">op1=&gt;operation: Your Operation</span><br><span class="line">sub1=&gt;subroutine: Your Subroutine</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">io=&gt;inputoutput: catch somthing...</span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">c1=&gt;condition: A</span><br><span class="line">c2=&gt;condition: B</span><br><span class="line">c3=&gt;condition: C</span><br><span class="line">io=&gt;inputoutput: D</span><br><span class="line">st-&gt;c1(no)-&gt;e</span><br><span class="line">c2(no)-&gt;e</span><br><span class="line">c3(no)-&gt;e</span><br><span class="line">c1(yes,right)-&gt;c2(yes,right)-&gt;c3(yes,right)-&gt;io</span><br><span class="line">io-&gt;e</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A[Apple]--&gt;B&#123;Boy&#125;</span><br><span class="line">    A---C(Cat)</span><br><span class="line">    B.-&gt;D((Dog))</span><br><span class="line">    C==喵==&gt;D</span><br><span class="line">    style A file:#2ff,fill-opacity:0.1,stroke:#faa,stroke-width:4px</span><br><span class="line">    style D stroke:#000,stroke-width:8px;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant 张 as 张三</span><br><span class="line">participant 李 as 李四</span><br><span class="line">张 -&gt;&gt; 李: 你好！李四, 最近怎么样?</span><br><span class="line">alt 如果感冒了</span><br><span class="line">李-&gt;&gt; 张: 不太好，生病了。</span><br><span class="line">else 挺好的</span><br><span class="line">李-&gt;&gt; 张: 我很好，谢谢。</span><br><span class="line">end</span><br><span class="line">    opt 另外补充</span><br><span class="line">    李-&gt;&gt; 张: 谢谢问候。</span><br><span class="line">end</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant 张 as 张三</span><br><span class="line">participant 李 as 李四</span><br><span class="line">participant 王 as  王五   </span><br><span class="line">张 -&gt;&gt; +李: 你好！李四, 最近怎么样?</span><br><span class="line">李--&gt;&gt; 王: 你最近怎么样，王五？</span><br><span class="line">李--x -张: 我很好，谢谢!</span><br><span class="line">activate 王</span><br><span class="line">李-x 王: 我很好，谢谢!   </span><br><span class="line">Note over 李,王: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.</span><br><span class="line">deactivate 王</span><br><span class="line">loop 李四再想想</span><br><span class="line">李--&gt;&gt;王: 我还要想想</span><br><span class="line">王--&gt;&gt;李: 想想吧</span><br><span class="line">end</span><br><span class="line">李--&gt;&gt;张: 打量着王五...</span><br><span class="line">张-&gt;&gt;王: 很好... 王五, 你怎么样?</span><br></pre></td></tr></table></figure>





<h3 id="样式流程图"><a href="#样式流程图" class="headerlink" title="样式流程图"></a>样式流程图</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A(开始) --&gt;B(起床)</span><br><span class="line">    B --天气不好--- C&gt;干活]</span><br><span class="line">    C ==&gt; D&#123;休息时间到了&#125;</span><br><span class="line">    D -.yes.-&gt; E((休息))</span><br><span class="line">    D -.no.-&gt; C</span><br><span class="line">    E --&gt; F(吃饭)</span><br></pre></td></tr></table></figure>
<p>注意：  </p>
<blockquote>
<ol>
<li>关键词（start、end、operation、subroutine、condition和inputoutput）后的冒号后要紧跟一个空格。  </li>
<li>使用-&gt;来连接两个元素，对于condition类型，有yes和no两个分支，如示例中的cond(yes)和cond(no)。<br>更多关于流程图的语法说明：<a href="http://adrai.github.io/flowchart.js/">http://adrai.github.io/flowchart.js/</a></li>
</ol>
</blockquote>
<h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><h3 id="标准时序图"><a href="#标准时序图" class="headerlink" title="标准时序图"></a>标准时序图</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Title:时序图示例</span><br><span class="line">客户端-&gt;服务端: 我想找你拿下数据 SYN</span><br><span class="line">服务端--&gt;客户端: 我收到你的请求啦 ACK+SYN</span><br><span class="line">客户端-&gt;&gt;服务端: 我收到你的确认啦，我们开始通信吧 ACK</span><br><span class="line">Note right of 服务端: 我是一个服务端</span><br><span class="line">Note left of 客户端: 我是一个客户端</span><br><span class="line">Note over 服务端,客户端: TCP 三次握手</span><br><span class="line">participant 观察者</span><br></pre></td></tr></table></figure>

<p>基本语法：</p>
<blockquote>
<p>Title:标题 ：指定时序图的标题<br>Note direction of 对象:描述 ： 在对象的某一侧添加描述，direction 可以为 right&#x2F;left&#x2F;over ， 对象 可以是多个对象，以 , 作为分隔符<br>participant 对象 ：创建一个对象<br>loop…end ：创建一个循环体<br>对象A-&gt;对象B:描述 ： 绘制A与B之间的对话，以实线连接<br>     -&gt; 实线实心箭头指向<br>     –&gt; 虚线实心箭头指向<br>     -&gt;&gt; 实线小箭头指向<br>     –&gt;&gt; 虚线小箭头指向  </p>
</blockquote>
<h3 id="带样式时序图"><a href="#带样式时序图" class="headerlink" title="带样式时序图"></a>带样式时序图</h3><blockquote>
<p>需要使用 <code>mermaid</code> 解析，并在开头使用关键字 <code>sequenceDiagram</code> 指明  </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">对象A-&gt;对象B:中午吃什么？</span><br><span class="line">对象B-&gt;&gt;对象A: 随便</span><br><span class="line">loop 思考</span><br><span class="line">    对象A-&gt;对象A: 努力搜索</span><br><span class="line">end</span><br><span class="line">对象A--&gt;&gt;对象B: 火锅？</span><br><span class="line">对象B-&gt;&gt;对象A: 可以</span><br><span class="line">Note left of 对象A: 我是一个对象A</span><br><span class="line">Note right of 对象B: 我是一个对象B</span><br><span class="line">participant 对象C</span><br><span class="line">Note over 对象C: 我自己说了算</span><br></pre></td></tr></table></figure>



<h2 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h2><blockquote>
<p>基本语法：<br>使用 <code>mermaid</code> 解析语言，在开头使用关键字 <code>gantt</code> 指明<br>deteFormat 格式 指明日期的显示格式<br>title 标题 设置图标的标题<br>section 描述 定义纵向上的一个环节<br>定义步骤：每个步骤有两种状态 done（已完成）&#x2F; active（执行中）<br>    描述: 状态,id,开始日期,结束日期&#x2F;持续时间<br>    描述: 状态[,id],after id2,持续时间<br>    crit ：可用于标记该步骤需要被修正，将高亮显示<br>    如果不指定具体的开始时间或在某个步骤之后，将默认依次顺序排列  </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line"></span><br><span class="line">        title 软件开发甘特图</span><br><span class="line"></span><br><span class="line">        section 设计</span><br><span class="line">        需求:done,des1, 2019-01-06,2019-01-08</span><br><span class="line">        原型:active,des2, 2019-01-09, 3d</span><br><span class="line">        UI设计:des3, after des2, 5d</span><br><span class="line">        未来任务:des4, after des3, 5d</span><br><span class="line"></span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求:crit, done, 2019-01-06,24h</span><br><span class="line">        设计框架:crit, done, after des2, 2d</span><br><span class="line">        开发:crit, active, 3d</span><br><span class="line">        未来任务:crit, 5d</span><br><span class="line">        休息时间:2d</span><br><span class="line"></span><br><span class="line">        section 测试</span><br><span class="line">        功能测试:active, a1, after des3, 3d</span><br><span class="line">        压力测试:after a1, 20h</span><br><span class="line">        测试报告: 48h</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">字节码--&gt; Mac虚拟机 --&gt; Mac</span><br><span class="line">字节码--&gt; Linux虚拟机 --&gt; Linux</span><br><span class="line">字节码--&gt; Windows虚拟机 --&gt; Windows</span><br></pre></td></tr></table></figure>




<h1 id="Typora-页面跳转"><a href="#Typora-页面跳转" class="headerlink" title="Typora 页面跳转"></a>Typora 页面跳转</h1><h2 id="第一种，跳转到标题的地方"><a href="#第一种，跳转到标题的地方" class="headerlink" title="第一种，跳转到标题的地方"></a>第一种，跳转到标题的地方</h2><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[<span class="name">任意文字</span>](#标题名称)</span><br></pre></td></tr></table></figure>
<p>例子：<br><a href="#%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8">我要跳转到有序列表的这个标题</a></p>
<h2 id="第二种，跳转到非标题的地方"><a href="#第二种，跳转到非标题的地方" class="headerlink" title="第二种，跳转到非标题的地方"></a>第二种，跳转到非标题的地方</h2><p>页面内要跳转的地方加个锚点  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;这是要跳转的地方的锚点&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>要触发跳转的地方  </p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[<span class="name">我要跳转到那边去</span>](#这是要跳转的地方的锚点)</span><br></pre></td></tr></table></figure>
<p>例子：<br><a name="锚点"></a></p>
<p><a href="#%E9%94%9A%E7%82%B9">跳转到那</a></p>
<h2 id="第三种，markdown跳别的文件"><a href="#第三种，markdown跳别的文件" class="headerlink" title="第三种，markdown跳别的文件"></a><a href="https://blog.csdn.net/weixin_43031092/article/details/105322677">第三种，markdown跳别的文件</a></h2><p>实现方法：  </p>
<h3 id="相对路径方式"><a href="#相对路径方式" class="headerlink" title="相对路径方式"></a>相对路径方式</h3><ul>
<li><code>../</code> 表示当前目录的上一级  </li>
<li><code>./</code> 表示当前目录<br>格式  <figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[<span class="name">添加对象</span>](<span class="name">相对路径</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>例子：  </p>
<ol>
<li><p>向下跳转  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[content]</span>(/<span class="attribute">content</span>)</span><br><span class="line"><span class="selector-attr">[第一章]</span>(/<span class="attribute">content</span>/C1<span class="selector-class">.md</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>同级跳转  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[下一章]</span>(./C2.md)  <span class="comment">//C1.md</span></span><br><span class="line"><span class="selector-attr">[上一章]</span>(./C1.md)  <span class="comment">//C2.md</span></span><br></pre></td></tr></table></figure>

<p>例如：<br><a href="%E5%BB%BA%E7%AB%99-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.md">建站-个人博客</a>  </p>
</li>
<li><p>向上跳转  </p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[返回目录]</span>(../README.md) <span class="comment">//C2.md</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="绝对路径方式"><a href="#绝对路径方式" class="headerlink" title="绝对路径方式"></a>绝对路径方式</h3><ol>
<li>采用HTML写法  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/BackMountainDevil/The-C-Programming-Language#the-c-programming-language&quot;</span>&gt;</span>返回目录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>采用md（Markdown）写法  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[返回目录](https:<span class="regexp">//gi</span>thub.com<span class="regexp">/BackMountainDevil/</span>The-C-Programming-Language<span class="comment">#the-c-programming-language)</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="分列显示（支持CSS）"><a href="#分列显示（支持CSS）" class="headerlink" title="分列显示（支持CSS）"></a>分列显示（支持CSS）</h1><table style="margin-left: auto; margin-right: auto;">
    <tr>
        <td>
            <!--左侧内容-->
            左侧
        </td>
        <td>
            <!--右侧内容-->
            右侧
        </td>
    </tr>
</table>

<blockquote>
<p>css内不支持md语法  </p>
</blockquote>
]]></content>
      <categories>
        <category>其他IT</category>
      </categories>
      <tags>
        <tag>markdown指南</tag>
      </tags>
  </entry>
  <entry>
    <title>Map相关</title>
    <url>/posts/4145629133/</url>
    <content><![CDATA[<h1 id="循环输出HashMap内容"><a href="#循环输出HashMap内容" class="headerlink" title="循环输出HashMap内容"></a>循环输出HashMap内容</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loogerHashMapContent</span><span class="params">()</span> &#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">    hashMap.put(<span class="string">&quot;carrier&quot;</span>, <span class="string">&quot;carrier1&quot;</span>);</span><br><span class="line">    hashMap.put(<span class="string">&quot;province&quot;</span>, <span class="string">&quot;province1&quot;</span>);</span><br><span class="line">    hashMap.put(<span class="string">&quot;ismodem&quot;</span>, <span class="string">&quot;ismodem1&quot;</span>);</span><br><span class="line">    hashMap.put(<span class="string">&quot;state&quot;</span>, <span class="string">&quot;state1&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Iterator&lt;Entry&lt;String, Object&gt;&gt; iterator = hashMap.entrySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        Entry&lt;String, Object&gt; entry = iterator.next();</span><br><span class="line">        System.out.print(entry.getKey()+<span class="string">&quot;:&quot;</span>+entry.getValue()+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="HashMap遍历"><a href="#HashMap遍历" class="headerlink" title="HashMap遍历"></a>HashMap遍历</h1><p><a href="http://www.javaweb.cc/language/java/032291.shtml">原文地址</a></p>
<p>第一种:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iter</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) iter.next();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效率高,以后一定要使用此种方式！<br>第二种:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iter</span> <span class="operator">=</span> map.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> iter.next();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效率低,以后尽量少使用！</p>
<h2 id="HashMap遍历-1"><a href="#HashMap遍历-1" class="headerlink" title="HashMap遍历"></a>HashMap遍历</h2><p>第一种：for each map.entrySet()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    entry.getKey();</span><br><span class="line">    entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种：显式调用map.entrySet()的集合迭代器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">    Map.Entry&lt;String, String&gt; entry = iterator.next();</span><br><span class="line">    entry.getKey();</span><br><span class="line">    entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三种：for each map.keySet()，再调用get获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"><span class="keyword">for</span>(String key: map.keySet())&#123;</span><br><span class="line">    map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第四种：for each map.entrySet()，用临时变量保存map.entrySet()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;String, String&gt; entry : entrySet) &#123;</span><br><span class="line">    entry.getKey();</span><br><span class="line">    entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过1万、10万、100万、200万的循环遍历，比较它们的耗时，得出结论：</p>
<ol>
<li>既需要key也需要value，直接用</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    entry.getKey();</span><br><span class="line">    entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>如果只是遍历key而无需value的话，可以直接用</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">	<span class="comment">// key process</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Map转url参数"><a href="#Map转url参数" class="headerlink" title="Map转url参数"></a>Map转url参数</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">convertToUrlParams</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (map == <span class="literal">null</span> || map.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : map.entrySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(stringBuilder)) &#123;</span><br><span class="line">            stringBuilder.append(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        stringBuilder.append(entry.getKey()).append(<span class="string">&quot;=&quot;</span>).append(entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java代码片段</category>
      </categories>
      <tags>
        <tag>Java代码片段</tag>
      </tags>
  </entry>
  <entry>
    <title>集合相关</title>
    <url>/posts/2516116413/</url>
    <content><![CDATA[<h1 id="多线程列表删除的解决方案"><a href="#多线程列表删除的解决方案" class="headerlink" title="多线程列表删除的解决方案"></a>多线程列表删除的解决方案</h1><p>第一种：<code>Collections.synchronizedList</code><br>最常用的方法是通过 Collections 的 synchronizedList 方法将 ArrayList 转换成线程安全的容器后再使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Object&gt; list =Collections.synchronizedList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;);</span><br></pre></td></tr></table></figure>

<p>第二种： <code>CopyOnWriteArrayList</code><br>使用线程安全的 <code>CopyOnWriteArrayList</code> 代替线程不安全的 <code>ArrayList</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Object&gt; list1 = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;Object&gt;();</span><br></pre></td></tr></table></figure>

<p>第三种：<br>按索引从大到小，这样remove方法的删除元素导致的后面的元素往前移动一位</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> list.size()-<span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    <span class="keyword">if</span>(list.get(i).equals(<span class="string">&quot;C&quot;</span>))&#123;</span><br><span class="line">        list.remove(list.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="将集合内匹配的数据移到首位"><a href="#将集合内匹配的数据移到首位" class="headerlink" title="将集合内匹配的数据移到首位"></a>将集合内匹配的数据移到首位</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">matchIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (City city : citys) &#123;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.equals(city.getRegionId(), locationCity.getRegionId())) &#123;</span><br><span class="line">        matchIndex = citys.indexOf(city);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">citys.add(<span class="number">0</span>, citys.remove(matchIndex));</span><br></pre></td></tr></table></figure>



<h1 id="List去重"><a href="#List去重" class="headerlink" title="List去重"></a>List去重</h1><p>法1： 使用HashSet实现List去重(无序)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**使用HashSet实现List去重(无序)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title function_">removeDuplicationByHashSet</span><span class="params">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">    <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(list);</span><br><span class="line">    <span class="comment">//把List集合所有元素清空</span></span><br><span class="line">    list.clear();</span><br><span class="line">    <span class="comment">//把HashSet对象添加至List集合</span></span><br><span class="line">    list.addAll(set);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>法2： 使用TreeSet实现List去重(有序)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**使用TreeSet实现List去重(有序)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title function_">removeDuplicationByTreeSet</span><span class="params">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">    <span class="type">TreeSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(list);</span><br><span class="line">    <span class="comment">//把List集合所有元素清空</span></span><br><span class="line">    list.clear();</span><br><span class="line">    <span class="comment">//把HashSet对象添加至List集合</span></span><br><span class="line">    list.addAll(set);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java代码片段</category>
      </categories>
      <tags>
        <tag>Java代码片段</tag>
      </tags>
  </entry>
  <entry>
    <title>拓展-框架选型</title>
    <url>/posts/516930697/</url>
    <content><![CDATA[<h1 id="框架选型"><a href="#框架选型" class="headerlink" title="框架选型"></a>框架选型</h1><p>链接：</p>
<p>UI集：</p>
<p><a href="http://www.jcodecraeer.com/plus/list_tid_31.html">UI库整理（泡在网上的日子）</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/55109817">XUI库介绍</a> <a href="https://github.com/xuexiangjys/XUI/wiki">XUI说明文档</a></p>
<p><a href="https://github.com/Tencent/QMUI_Android">QMUI_Android</a></p>
<p>UI介绍：</p>
<p><a href="https://zhuanlan.zhihu.com/p/68671278">https://zhuanlan.zhihu.com/p/68671278</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/49726145">https://zhuanlan.zhihu.com/p/49726145</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/25324711">https://zhuanlan.zhihu.com/p/25324711</a></p>
<h2 id="网络框架"><a href="#网络框架" class="headerlink" title="网络框架"></a>网络框架</h2><table>
<thead>
<tr>
<th></th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>HttpClient</td>
<td>1. 支持连接池、多线程<br>2. 从官方demo可以看出httpclient只创建一次，被多个线程复用<br>3. HttpClient4.3后超时配置到request级</td>
<td>1. Android已经去掉了HttpClient改用了OKHttp。<br>2. 使用起来需要自己封装<br>3. 需要手动关闭httpclient.close()</td>
</tr>
<tr>
<td>OKHttp</td>
<td>1. 性能方面与httpclient类似<br>2. 不需要手动关闭<br>3. Android4.4开始换成OKHttp</td>
<td>1. 使用时需要自己封装<br>2. new OkHttpClient()每次使用都需要new出来<br>3. 超时配置在client级，没到每个request</td>
</tr>
<tr>
<td>Retrofit</td>
<td>1. 基于OKHttp的封装<br>2. 基于接口编程。封装度高，基于注解。无需手动关闭<br>3. Jetpack使用的Retrofit</td>
<td>1. 与OKHttp类似，new Retrofit.Builder()每次使用都要new 出来</td>
</tr>
</tbody></table>
<h2 id="路由框架"><a href="#路由框架" class="headerlink" title="路由框架"></a>路由框架</h2><table>
<thead>
<tr>
<th></th>
<th>ARouter</th>
<th>ActivityRouter</th>
<th>VMRouter</th>
<th>SPI</th>
</tr>
</thead>
<tbody><tr>
<td>相关文章</td>
<td><a href="https://yq.aliyun.com/articles/71687">开源最佳实践：Android平台页面路由框架ARouter</a><br><a href="http://www.see-source.com/blog/300000037/10395.html">如何一步步实现一个类似ARouter的Android路由框架</a></td>
<td><a href="https://www.jianshu.com/p/22412a916e81">Android Router从0到1</a></td>
<td></td>
<td></td>
</tr>
<tr>
<td>地址</td>
<td><a href="https://github.com/alibaba/Arouter">https://github.com/alibaba/Arouter</a></td>
<td><a href="https://github.com/mzule/ActivityRouter">https://github.com/mzule/ActivityRouter</a></td>
<td><a href="https://github.com/meituan/WMRouter">https://github.com/meituan/WMRouter</a></td>
<td></td>
</tr>
<tr>
<td>共性</td>
<td>1. 支持降级处理。<br><br>2. 支持Activity的startActivityForResult<br><br>3. 组件单独运行的方式：切换library&#x2F;application方式编译，框架本身没有提供切换方式，开发者自行解决<br><br>4. 没有组件调用的超时设置<br><br>5. 无法取消组件调用<br><br>6. 无法动态注册&#x2F;注销组件<br><br>7. 组件调用代码侵入性都很高</td>
<td>1. 支持降级处理。<br><br>2. 支持Activity的startActivityForResult<br><br>3. 组件单独运行的方式：切换library&#x2F;application方式编译，框架本身没有提供切换方式，开发者自行解决<br><br>4. 没有组件调用的超时设置<br><br>5. 无法取消组件调用<br><br>6. 无法动态注册&#x2F;注销组件<br><br>7. 组件调用代码侵入性都很高</td>
<td></td>
<td></td>
</tr>
<tr>
<td>通信机制</td>
<td>路由+接口下沉</td>
<td>路由+静态方法</td>
<td></td>
<td></td>
</tr>
<tr>
<td>activity变量自动注入</td>
<td>1. 通过apt生成解析参数的代码<br>2. 在onCreate方法中调用<code>ARouter.getInstance().inject(this);</code>实现自动注入</td>
<td>无</td>
<td></td>
<td></td>
</tr>
<tr>
<td>调用方式（页面跳转）</td>
<td><code>ARouter.getInstance().build(&quot;/test/activity&quot;).navigation();</code></td>
<td><code>Router.create(url).open(context);</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>调用方式（调用服务）</td>
<td><code>ARouter.getInstance().navigation(HelloService.class).sayHello();</code></td>
<td>与页面跳转相同</td>
<td></td>
<td></td>
</tr>
<tr>
<td>组件向外提供服务</td>
<td>接口继承IProvider并下沉到base中，组件中实现接口并通过注解来暴露服务</td>
<td>在静态方法上加注解来暴露服务，但不支持返回值，且参数固定位(context, bundle)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Fragment组件化支持</td>
<td>调用服务的方式实现，未支持后续Fragment内部的功能调用</td>
<td>不支持</td>
<td></td>
<td></td>
</tr>
<tr>
<td>组件自动注册方案</td>
<td>新版本(1.3.0)开始支持通过插件完成路由注册<br>1. apt生成各module的路由表<br>2. TransformAPI+ASM扫描路由表并注册到LogisticsCenter中，无需手动维护组件列表</td>
<td>1. apt生成各module的路由表<br>2. apt在application的module通过Modules注解生成RouterInit进行注册<br>3. 需要手动维护Modules注解中的组件列表</td>
<td></td>
<td></td>
</tr>
<tr>
<td>跨app组件调用支持</td>
<td>不支持</td>
<td>支持</td>
<td></td>
<td></td>
</tr>
<tr>
<td>组件app运行时调用其他组件</td>
<td>一起打包或者通过urlScheme来统一转发</td>
<td>UrlScheme原生支持跨app调用，组件同时安装在设备上接口<br>通过中介Activity转发：RouterActivity</td>
<td></td>
<td></td>
</tr>
<tr>
<td>组件依赖隔离</td>
<td>未隔离</td>
<td>无需依赖、完全隔离</td>
<td></td>
<td></td>
</tr>
<tr>
<td>AOP支持</td>
<td>拦截器AOP</td>
<td>无</td>
<td></td>
<td></td>
</tr>
<tr>
<td>特点</td>
<td>1. 阿里出品，使用者众多，QQ群里交流比较活跃<br>2. 支持分级按需加载<br>3. 是一个路由框架，并不是完整的组件化方案，可作为组件化架构通信引擎</td>
<td>1. 业内最早的组件化支持库<br>2. 通过注解静态方法的方式暴露服务</td>
<td></td>
<td></td>
</tr>
<tr>
<td>组件定义代码侵入性</td>
<td>注解定义路由及参数自动注入，侵入性高</td>
<td>注解定义路由，侵入性高</td>
<td></td>
<td></td>
</tr>
<tr>
<td>混淆配置</td>
<td>框架中的所有类及框架相关接口的实现类</td>
<td>框架中的所有类</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Easy of use</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>starts</td>
<td>13.1k</td>
<td>2.8k</td>
<td>2k</td>
<td></td>
</tr>
<tr>
<td>大厂使用</td>
<td></td>
<td></td>
<td><a href="https://tech.meituan.com/meituan_waimai_android_open_source_routing_framework.html">WMRouter：美团外卖Android开源路由框架</a></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="图片加载"><a href="#图片加载" class="headerlink" title="图片加载"></a>图片加载</h2><p><a href="https://cloud.tencent.com/developer/article/1385853">参考链接</a></p>
<table>
<thead>
<tr>
<th></th>
<th>Picasso</th>
<th>Glide</th>
<th>Fresco</th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>地址</td>
<td><a href="https://github.com/square/picasso">https://github.com/square/picasso</a></td>
<td><a href="https://github.com/bumptech/glide">https://github.com/bumptech/glide</a></td>
<td><a href="https://github.com/facebook/fresco">https://github.com/facebook/fresco</a></td>
</tr>
<tr>
<td>发布时间</td>
<td>2013年5月</td>
<td>2014年9月</td>
<td>2015年5月</td>
</tr>
<tr>
<td>是否支持gif</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>是否支持webP</td>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>视频缩略图</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>加载速度</td>
<td>中</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>大小</td>
<td>100kb</td>
<td>500kb</td>
<td>2~3M</td>
</tr>
<tr>
<td>占内存大小</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Easy of use</td>
<td>low</td>
<td>medium</td>
<td>difficult</td>
</tr>
<tr>
<td>Disk+MenCache</td>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>大厂使用</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>详细属性对比</strong></p>
<table>
<thead>
<tr>
<th>对比项</th>
<th>Picasso</th>
<th>Glide</th>
<th>Fresco</th>
</tr>
</thead>
<tbody><tr>
<td>配置</td>
<td></td>
<td>compile ‘com.github.bumptech.glide:glide:XXX.XXX’</td>
<td>compile ‘com.facebook.fresco:fresco:XXX.XXX</td>
</tr>
<tr>
<td>初始化</td>
<td></td>
<td>直接使用</td>
<td>Fresco.initialize(this);</td>
</tr>
<tr>
<td>layout</td>
<td></td>
<td>普通ImageView</td>
<td>独有的SimpleDraweeView</td>
</tr>
<tr>
<td>圆角， 圆形</td>
<td></td>
<td>需要自己实现圆角，继承自BitmapTransformation操作bitmap对象实现</td>
<td>通过RoundingParams设置参数</td>
</tr>
<tr>
<td>缓存</td>
<td></td>
<td>Glide内存和磁盘缓存</td>
<td>三级缓存，分别是 Bitmap缓存，未解码图片缓存， 文件缓存。</td>
</tr>
<tr>
<td>缓存图像大小</td>
<td></td>
<td>Glide则会根据ImageView控件尺寸获得对应的大小的bitmap来展示，从而缓存也可以针对不同的对象：原始图像（source），结果图像(result)</td>
<td>缓存原始图像</td>
</tr>
<tr>
<td>加载策略</td>
<td></td>
<td>Glide只有占位图</td>
<td>先加载小尺寸图片，再加载大尺寸的</td>
</tr>
<tr>
<td>加载进度</td>
<td></td>
<td>false</td>
<td>true</td>
</tr>
</tbody></table>
<h3 id="Glide和Fresco比较"><a href="#Glide和Fresco比较" class="headerlink" title="Glide和Fresco比较"></a>Glide和Fresco比较</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p><strong>Glide</strong>：<code>compile com.github.bumptech.glide:glide:3.7.0</code></p>
<p><strong>Fresco</strong>：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">&#x27;com.facebook.fresco:fresco:1.2.0&#x27;</span></span><br><span class="line"><span class="comment">//在 API &lt; 14 上的及其支持 WebP 时，需要添加</span></span><br><span class="line">compile <span class="string">&#x27;com.facebook.fresco:animated-base-suport:1.2.0&#x27;</span></span><br><span class="line"><span class="comment">//支持 GIF 动图，需要添加</span></span><br><span class="line">compile <span class="string">&#x27;com.facebook.fresco:animated-gif:1.2.0&#x27;</span></span><br><span class="line"><span class="comment">//支持 WebP （静态+动图），需要添加</span></span><br><span class="line">compile <span class="string">&#x27;com.facebook.fresco:animated-webp:1.2.0&#x27;</span></span><br><span class="line">compile <span class="string">&#x27;com.facebook.fresco:websupport:1.2.0&#x27;</span></span><br><span class="line">compile <span class="string">&#x27;com.facebook.fresco:imagepipeline-okhttp3:1.2.0&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="bitmap操作"><a href="#bitmap操作" class="headerlink" title="bitmap操作"></a>bitmap操作</h4><p><strong>Glide</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Bitmap</span> <span class="variable">myBitmap</span> <span class="operator">=</span> Glide.with(上下文)</span><br><span class="line">    .load(url)</span><br><span class="line">    .asBitmap() <span class="comment">//必须</span></span><br><span class="line">    .get()</span><br></pre></td></tr></table></figure>

<p><strong>Fresco</strong>：</p>
<p>Fresco获取bitmap更加复杂，使用起来也不是那么顺畅。</p>
<p>首先，Fresco为了更好地管理bitmap 对象（bitmap对象申请和释放会引起频繁的GC操作，从而引起界面卡顿）， 引入了可关闭的引用（CloseableReference）, 持有者在离开作用域的时候需要关闭该引用，而我们要获取的bitmap 对象就是可关闭的引用。也就是说，我们不能像上面Glide那样把bitmap 对象取出来传递给其它地方使用， 只能在Fresco提供的作用域范围内使用。  实际项目中会获取缓冲的文件对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同样在DataSubscriber中获取</span></span><br><span class="line"><span class="type">FileBinaryResource</span> <span class="variable">resource</span> <span class="operator">=</span> (FileBinaryResource) Fresco.getImagePipelineFactory().getMainFileCache().getResource(<span class="keyword">new</span> <span class="title class_">SimpleCacheKey</span>(url));</span><br><span class="line"><span class="keyword">if</span> (resource != <span class="literal">null</span> &amp;&amp; resource.getFile() != <span class="literal">null</span>) &#123;           </span><br><span class="line">    setImage(ImageSource.uri(Uri.fromFile(resource.getFile())));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p><strong>Glide</strong>：</p>
<ul>
<li>多种图片格式的缓存，适用于更多内容表现形式（如 Gif、WebP、缩略图、Video）</li>
<li>生命周期集成（根据Activity或Fragment的生命周期管理图片加载请求）</li>
<li>高校处理Bitmap（bitmap的复用和主动回收，减少系统回收压力）</li>
<li>高校的缓存策略，灵活（Picasso只会缓存原始尺寸的图片，Glide缓存的是多种规格），加载速度快且内存开销小（默认Bitmap格式的不同，使得内存开销是Picasso的一半）</li>
</ul>
<p><strong>Fresco</strong>：</p>
<p>最大的优势在于5.0以下（最低2.3）的bitmap加载。在5.0以下系统，Fresco将图片放到一个特别的内存区域（Ashmem区）</p>
<p>大大减少OOM（在更底层的Native蹭对OOM进行处理，图片将不再占用App的内存）</p>
<p>适用于需要高性能加载大量图片的场景</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p><strong>Glide</strong>：</p>
<ul>
<li>没有文件缓存</li>
<li>java heap比Fresco高</li>
</ul>
<p><strong>Fresco</strong>：</p>
<ul>
<li>包较大（2~3M）</li>
<li>用法复杂</li>
<li>底层涉及c++领域，阅读源码深入学习难度大</li>
</ul>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>picasso不支持gif且上面表格体现的数据也不理想，我们忽略它。</p>
<p>专业的图片App用Fresco比较好。普通App用Glide上手快，使用简单，配置方便。</p>
<h2 id="图片裁剪"><a href="#图片裁剪" class="headerlink" title="图片裁剪"></a>图片裁剪</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td></td>
</tr>
<tr>
<td>地址</td>
<td></td>
</tr>
<tr>
<td>加载速度</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td></td>
</tr>
<tr>
<td>占内存大小</td>
<td></td>
</tr>
<tr>
<td>Easy of use</td>
<td></td>
</tr>
<tr>
<td>是否会自动矫正角度</td>
<td></td>
</tr>
<tr>
<td>大厂使用</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><table>
<thead>
<tr>
<th></th>
<th>Luban</th>
<th>Compress</th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td>可控制压缩档次。<br>仿微信朋友圈压缩策略</td>
<td>满足几MB图的高保真压缩到几十KB</td>
</tr>
<tr>
<td>地址</td>
<td><a href="https://github.com/Curzibn/Luban">https://github.com/Curzibn/Luban</a></td>
<td><a href="https://github.com/zetbaitsu/Compressor">https://github.com/zetbaitsu/Compressor</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Easy of use</td>
<td>支持普通调用方式和RxJava调用</td>
<td>支持普通调用方式和RxJava调用</td>
</tr>
<tr>
<td>最后更新时间0</td>
<td>3年前</td>
<td>2021.3</td>
</tr>
<tr>
<td>stars</td>
<td>12.5k</td>
<td>5.8k</td>
</tr>
<tr>
<td></td>
<td>群友推荐使用</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>开源的。商业使用，记得遵循其对应的开源协议。</p>
</blockquote>
<p>Luban的效果与对比</p>
<table>
<thead>
<tr>
<th>内容</th>
<th>原图</th>
<th><code>Luban</code></th>
<th><code>Wechat</code></th>
</tr>
</thead>
<tbody><tr>
<td>截屏 720P</td>
<td>720*1280,390k</td>
<td>720*1280,87k</td>
<td>720*1280,56k</td>
</tr>
<tr>
<td>截屏 1080P</td>
<td>1080*1920,2.21M</td>
<td>1080*1920,104k</td>
<td>1080*1920,112k</td>
</tr>
<tr>
<td>拍照 13M(4:3)</td>
<td>3096*4128,3.12M</td>
<td>1548*2064,141k</td>
<td>1548*2064,147k</td>
</tr>
<tr>
<td>拍照 9.6M(16:9)</td>
<td>4128*2322,4.64M</td>
<td>1032*581,97k</td>
<td>1032*581,74k</td>
</tr>
<tr>
<td>滚动截屏</td>
<td>1080*6433,1.56M</td>
<td>1080*6433,351k</td>
<td>1080*6433,482k</td>
</tr>
</tbody></table>
<h3 id="Luban"><a href="#Luban" class="headerlink" title="Luban"></a>Luban</h3><h4 id="导入Luban"><a href="#导入Luban" class="headerlink" title="导入Luban"></a>导入Luban</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;top.zibin:Luban:1.1.8&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用Luban"><a href="#使用Luban" class="headerlink" title="使用Luban"></a>使用Luban</h4><p>方法列表</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>load</td>
<td>传入原图</td>
</tr>
<tr>
<td>filter</td>
<td>设置开启压缩条件</td>
</tr>
<tr>
<td>ignoreBy</td>
<td>不压缩的阈值，单位为K</td>
</tr>
<tr>
<td>setFocusAlpha</td>
<td>设置是否保留透明通道</td>
</tr>
<tr>
<td>setTargetDir</td>
<td>缓存压缩图片路径</td>
</tr>
<tr>
<td>setCompressListener</td>
<td>压缩回调接口</td>
</tr>
<tr>
<td>setRenameListener</td>
<td>压缩前重命名接口</td>
</tr>
</tbody></table>
<h5 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h5><p>Luban内部采用IO线程进行图片压缩，外部调用只需设置好结果监听即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通调用方式</span></span><br><span class="line">Luban.get(<span class="built_in">this</span>) <span class="comment">//传入要压缩的图片</span></span><br><span class="line">    .load(file) <span class="comment">//设定压缩档次，默认三挡</span></span><br><span class="line">    .putGear(Luban.THIRE_GREA)</span><br><span class="line">    .ignoreBy(<span class="number">100</span>)</span><br><span class="line">    .setTargetDir(getPath())</span><br><span class="line">    .filter(<span class="keyword">new</span> <span class="title class_">CompressionPredicate</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">apply</span><span class="params">(String path)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> !(TextUtils.isEmpty(path) || path.toLowerCase().endsWith(<span class="string">&quot;.gif&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .setCompressListener(<span class="keyword">new</span> <span class="title class_">OnCompressListener</span>()&#123; <span class="comment">//设置回调</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="comment">//TODO 压缩开始前调用，可以在方法内启动Loading UI</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(File file)</span>&#123;</span><br><span class="line">            <span class="comment">//TODO 压缩成功后调用，返回压缩后的图片文件</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">            <span class="comment">//TODO 当压缩过程出现问题时调用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).launch();<span class="comment">//启动压缩</span></span><br></pre></td></tr></table></figure>

<h5 id="同步调用"><a href="#同步调用" class="headerlink" title="同步调用"></a>同步调用</h5><p>同步方法请尽量避免在主线程调用以免阻塞主线程，下面以rxJava调用为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flowable.just(photos)</span><br><span class="line">    .observeOn(Schedulers.io())</span><br><span class="line">    .map(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;List&lt;String&gt;, List&lt;File&gt;&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="keyword">public</span> List&lt;File&gt; <span class="title function_">apply</span><span class="params">(<span class="meta">@NonNull</span> List&lt;String&gt; list)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 同步方法直接返回压缩后的文件</span></span><br><span class="line">        <span class="keyword">return</span> Luban.with(MainActivity.<span class="built_in">this</span>).load(list).get();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RxJava方式</span></span><br><span class="line"><span class="comment">//RxJava调用方式请自行随意控制线程</span></span><br><span class="line">Luban.get(<span class="built_in">this</span>)</span><br><span class="line">    .load(file)</span><br><span class="line">    .putGear(Luban.THIRD_GREA)</span><br><span class="line">    .asObservable()</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .doOnError(<span class="keyword">new</span> <span class="title class_">Action1</span>&lt;Throwable&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Throwable throwable)</span>&#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .onErrorResumeNext(<span class="keyword">new</span> <span class="title class_">Func1</span>&lt;Throwable, Observable&lt;? <span class="keyword">extends</span> <span class="title class_">File</span>&gt;&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Observable&lt;? <span class="keyword">extends</span> <span class="title class_">File</span>&gt; call(Throwable throwable)&#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.empty();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> <span class="title class_">Action1</span>&lt;File&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(File file)</span>&#123;</span><br><span class="line">            <span class="comment">//TODO 压缩成功后调用，返回压缩后的图片文件</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).launch();<span class="comment">// 启动压缩</span></span><br></pre></td></tr></table></figure>



<h3 id="Compress"><a href="#Compress" class="headerlink" title="Compress"></a>Compress</h3><h4 id="导入Compress"><a href="#导入Compress" class="headerlink" title="导入Compress"></a>导入Compress</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;id.zelory:compressor:3.0.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用Compress"><a href="#使用Compress" class="headerlink" title="使用Compress"></a>使用Compress</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Compress Image File</span></span><br><span class="line">compressdImageFile = Compressor.getDefault(<span class="built_in">this</span>).compressToFile(actualImageFile);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Compress Image File to Bitmap</span></span><br><span class="line">compressedImageBitmap = Compressor.getDefault(<span class="built_in">this</span>).compressToBitmap(actualImageFile);</span><br><span class="line"></span><br><span class="line"><span class="comment">//I want to custom Compressor</span></span><br><span class="line">compressedImage = <span class="keyword">new</span> <span class="title class_">Compressor</span>.Builder(<span class="built_in">this</span>)</span><br><span class="line">    .setMaxWidth(<span class="number">640</span>)</span><br><span class="line">    .setMaxHeight(<span class="number">480</span>)</span><br><span class="line">    .setQuality(<span class="number">75</span>)</span><br><span class="line">    .setCompressFormat(Bitmap.CompressFormat.WEBP)</span><br><span class="line">    .setDestinationDirectoryPath(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES).getAbsolutePath())</span><br><span class="line">    .build()</span><br><span class="line">    .compressToFile(actualImage);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Stay cool compress image asynchronously with RxJava</span></span><br><span class="line">Compressor.getDefault(<span class="built_in">this</span>)</span><br><span class="line">    .compressToFileAsObservable(actualImage)</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(AndoridSchedulers.mainThread())</span><br><span class="line">    .subscribe(<span class="keyword">new</span> <span class="title class_">Action1</span>&lt;File&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(File file)</span>&#123;</span><br><span class="line">            compresseedImage = file;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="keyword">new</span> <span class="title class_">Action1</span>&lt;Throwable&gt;()&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Throwable throwable)</span>&#123;</span><br><span class="line">            showError(throwable.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>







<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td></td>
</tr>
<tr>
<td>地址</td>
<td></td>
</tr>
<tr>
<td>加载速度</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td></td>
</tr>
<tr>
<td>占内存大小</td>
<td></td>
</tr>
<tr>
<td>Easy of use</td>
<td></td>
</tr>
<tr>
<td>大厂使用</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td></td>
</tr>
<tr>
<td>地址</td>
<td></td>
</tr>
<tr>
<td>加载速度</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td></td>
</tr>
<tr>
<td>占内存大小</td>
<td></td>
</tr>
<tr>
<td>Easy of use</td>
<td></td>
</tr>
<tr>
<td>大厂使用</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="视频框架"><a href="#视频框架" class="headerlink" title="视频框架"></a>视频框架</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td></td>
</tr>
<tr>
<td>地址</td>
<td></td>
</tr>
<tr>
<td>加载速度</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td></td>
</tr>
<tr>
<td>占内存大小</td>
<td></td>
</tr>
<tr>
<td>Easy of use</td>
<td></td>
</tr>
<tr>
<td>大厂使用</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="IM"><a href="#IM" class="headerlink" title="IM"></a>IM</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td></td>
</tr>
<tr>
<td>地址</td>
<td></td>
</tr>
<tr>
<td>加载速度</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td></td>
</tr>
<tr>
<td>占内存大小</td>
<td></td>
</tr>
<tr>
<td>Easy of use</td>
<td></td>
</tr>
<tr>
<td>大厂使用</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="弹窗Dialog"><a href="#弹窗Dialog" class="headerlink" title="弹窗Dialog"></a>弹窗Dialog</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td></td>
</tr>
<tr>
<td>地址</td>
<td></td>
</tr>
<tr>
<td>加载速度</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td></td>
</tr>
<tr>
<td>占内存大小</td>
<td></td>
</tr>
<tr>
<td>Easy of use</td>
<td></td>
</tr>
<tr>
<td>大厂使用</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="弹窗PopupWindow"><a href="#弹窗PopupWindow" class="headerlink" title="弹窗PopupWindow"></a>弹窗PopupWindow</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td></td>
</tr>
<tr>
<td>地址</td>
<td></td>
</tr>
<tr>
<td>加载速度</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td></td>
</tr>
<tr>
<td>占内存大小</td>
<td></td>
</tr>
<tr>
<td>Easy of use</td>
<td></td>
</tr>
<tr>
<td>大厂使用</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="上拉加载下拉刷新"><a href="#上拉加载下拉刷新" class="headerlink" title="上拉加载下拉刷新"></a>上拉加载下拉刷新</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td></td>
</tr>
<tr>
<td>地址</td>
<td></td>
</tr>
<tr>
<td>加载速度</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td></td>
</tr>
<tr>
<td>占内存大小</td>
<td></td>
</tr>
<tr>
<td>Easy of use</td>
<td></td>
</tr>
<tr>
<td>大厂使用</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="列表适配器"><a href="#列表适配器" class="headerlink" title="列表适配器"></a>列表适配器</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td></td>
</tr>
<tr>
<td>地址</td>
<td></td>
</tr>
<tr>
<td>加载速度</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td></td>
</tr>
<tr>
<td>占内存大小</td>
<td></td>
</tr>
<tr>
<td>Easy of use</td>
<td></td>
</tr>
<tr>
<td>大厂使用</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="日期选择器"><a href="#日期选择器" class="headerlink" title="日期选择器"></a>日期选择器</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td></td>
</tr>
<tr>
<td>地址</td>
<td></td>
</tr>
<tr>
<td>加载速度</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td></td>
</tr>
<tr>
<td>占内存大小</td>
<td></td>
</tr>
<tr>
<td>Easy of use</td>
<td></td>
</tr>
<tr>
<td>大厂使用</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="滚轮选择器WheelView"><a href="#滚轮选择器WheelView" class="headerlink" title="滚轮选择器WheelView"></a>滚轮选择器WheelView</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td></td>
</tr>
<tr>
<td>地址</td>
<td></td>
</tr>
<tr>
<td>加载速度</td>
<td></td>
</tr>
<tr>
<td>大小</td>
<td></td>
</tr>
<tr>
<td>占内存大小</td>
<td></td>
</tr>
<tr>
<td>Easy of use</td>
<td></td>
</tr>
<tr>
<td>大厂使用</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><p><img src="https://pic2.zhimg.com/80/v2-ea1dd311ec7e94b17b445684385f3cdd_720w.jpg" alt="数据存储框架对比"></p>
<table>
<thead>
<tr>
<th></th>
<th>SQLite</th>
<th>SharedPreference</th>
<th>GreenDao</th>
<th>Room</th>
<th>Litepal</th>
<th>MMKV</th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td>轻量级关系型</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>腾讯开发。键值对存储（对标SP）</td>
</tr>
<tr>
<td>地址</td>
<td></td>
<td></td>
<td><a href="https://github.com/greenrobot/greenDAO">https://github.com/greenrobot/greenDAO</a></td>
<td></td>
<td><a href="https://github.com/guolindev/LitePal">https://github.com/guolindev/LitePal</a></td>
<td><a href="https://github.com/Tencent/MMKV">https://github.com/Tencent/MMKV</a></td>
</tr>
<tr>
<td>支持的数据类型</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>boolean、int、long、float、double、string、set集合、byte[]、可序列化对象</td>
</tr>
<tr>
<td>易用性</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="GreenDao使用"><a href="#GreenDao使用" class="headerlink" title="GreenDao使用"></a>GreenDao使用</h3><h3 id="Room使用"><a href="#Room使用" class="headerlink" title="Room使用"></a>Room使用</h3><h3 id="Litepal使用"><a href="#Litepal使用" class="headerlink" title="Litepal使用"></a>Litepal使用</h3><h3 id="MMKV使用"><a href="#MMKV使用" class="headerlink" title="MMKV使用"></a>MMKV使用</h3><ol>
<li><p>引入依赖</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;com.tencent:mmkv-static:1.2.7&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在自定义 Application 中初始化</p>
<blockquote>
<p>在Application中初始化MMKV的时候，可以采用默认存储路径的方式初始化，也可以采用自定义文件存储路径的方式初始化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在App启动时进行MMKV初始化。返回默认储存路径（&quot;/data/user/0/项目包名/files/mmkv&quot;）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">rootDir</span> <span class="operator">=</span> MMKV.initialize(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者初始化MMKV的时候自定义根目录</span></span><br><span class="line"><span class="comment">//String dir = getFilesDir().getAbsolutePath() + &quot;/mmkv_2&quot;;</span></span><br><span class="line"><span class="comment">//String rootDir = MMKV.initialize(dir);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//或者初始化MMKV时自定义某个文件的目录</span></span><br><span class="line"><span class="comment">//String relativePath = getFilesDir().getAbsolutePath() + &quot;/mmkv_3&quot;;</span></span><br><span class="line"><span class="comment">//MMKV kv = MMKV.mmkvWithID(&quot;testCustomDir&quot;, relativePath);</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>MMKV提供一个全局的实例，可以直接使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.tencent.mmkv.MMKV;</span><br><span class="line"><span class="type">MMKV</span> <span class="variable">kv</span> <span class="operator">=</span> MMKV.defaultMMKV();</span><br><span class="line">kv.encode(<span class="string">&quot;bool&quot;</span>, <span class="literal">true</span>);<span class="comment">//存储</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">bValue</span> <span class="operator">=</span> kv.decodeBool(<span class="string">&quot;bool&quot;</span>);<span class="comment">//取出</span></span><br><span class="line">kv.encode(<span class="string">&quot;int&quot;</span>, Integer.MIN_VALUE);</span><br><span class="line"><span class="type">int</span> <span class="variable">iValue</span> <span class="operator">=</span> kv.decodeInt(<span class="string">&quot;int&quot;</span>);</span><br><span class="line">kv.encode(<span class="string">&quot;string&quot;</span>, <span class="string">&quot;Hello from mmkv&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> kv.decodeString(<span class="string">&quot;string&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="扫码"><a href="#扫码" class="headerlink" title="扫码"></a>扫码</h2><ol>
<li>zxing</li>
<li>华为统一扫码服务：<a href="https://juejin.cn/post/6967890062423883783">https://juejin.cn/post/6967890062423883783</a></li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓拓展</tag>
        <tag>框架</tag>
      </tags>
  </entry>
</search>
